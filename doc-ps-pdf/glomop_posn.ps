%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 10 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(September 13, 1995) 72 737.41 T
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
0 10 Q
(1) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
-0.17 (GloMop: Global Mobile) 207 677 S
207 629 558 639 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207 630 459 630 2 L
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 -208 1000 792 C
1 24 Q
0 X
0 0 0 1 0 0 0 K
-0.17 (Computing By Proxy) 207 647 S
0 9 Q
(GloMop Group) 207 545 T
(glomop@full-sail.cs.berkeley) 207 533 T
(.edu) 330.65 533 T
72 417 558 420 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207 419.15 558 419.15 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 419.15 198 419.15 2 L
0 Z
N
0 -208 1000 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(1.0) 181.32 424 T
(Overview and Motivation) 207 424 T
0 10 Q
(1.1) 184.1 390.33 T
(T) 207 390.33 T
(oward a Globile Mobile Information Infrastructure) 212.37 390.33 T
1 F
(Mobile computing and the Internet are two of the most rapidly growing areas of the) 207 366.33 T
-0.39 (computer industry) 207 354.33 P
-0.39 (. However) 279.01 354.33 P
-0.39 (, unlike desktop workstations in a conventional wired W) 319.87 354.33 P
-0.39 (AN) 541.45 354.33 P
(environment, today\325) 207 342.33 T
(s mobile devices are typically limited to kilobits-per) 287.55 342.33 T
(-second con-) 495.95 342.33 T
(nectivity using conven tional \050wired\051 or cellular modems and, in some cases, satellite) 207 330.33 T
(relays. Existing bandwidths are inadequate for Internet sur\336ng, and will be inadequate) 207 318.33 T
(for generalized multimedia information retrieval applications. Network bandwidth,) 207 306.33 T
(especially for wireless networks, is simply not pacing advances in processor speed.) 207 294.33 T
-0.15 (How can applications deal with the bandwidth, memory) 207 270.33 P
-0.15 (, computational, and power con-) 429.17 270.33 P
(straints of a mobile computing device?) 207 258.33 T
0 F
(1.2) 184.1 228.33 T
(Computation By Proxy) 207 228.33 T
1 F
(Our central observation is that) 207 204.33 T
2 F
(access to data is at least as important as local computa-) 330.59 204.33 T
(tion and storage.) 207 192.33 T
1 F
(This assumption is supported by the observation that today\325) 277.56 192.33 T
(s subnote-) 515.89 192.33 T
(books can run at 100 SpecInt and are equipped with up to 1GB of hard disk and a CD-) 207 180.33 T
(ROM drive, yet without connectivity \050to email, to the corporate Lotus Notes server) 207 168.33 T
(, to) 538.78 168.33 T
(colleagues\325 documents at a remote location\051 they lose much of their usefulness.) 207 156.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Motivation) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(2) 54 59.67 T
0 9 Q
( of) 59.56 59.67 T
0 10 Q
( 12) 70.56 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(V) 189 681.36 T
(arious solutions exist for connecting mobile devices to the rest of the world, but these) 195.11 681.36 T
(solutions almost universally suf) 189 669.36 T
(fer from low bandwidth and high latency) 315.77 669.36 T
(.) 478.98 669.36 T
(W) 189 364.37 T
(e can make mobile devices of all kinds useful to a much wider audience by) 197.64 364.37 T
2 F
(isolating) 500.08 364.37 T
-0.14 (the devices fr) 189 352.37 P
-0.14 (om poor networks) 241.66 352.37 P
1 F
-0.14 (. In current usage, a mobile device connects directly to a) 313.59 352.37 P
-0.09 (resource of interest \050web page, mail inbox, etc.\051 using a low-level stream protocol \050typi-) 189 340.37 P
(cally) 189 328.37 T
(, TCP/IP running over Ethernet or over a modem using SLIP or PPP\051. These proto-) 207.79 328.37 T
(cols were designed without speci\336c regard for bandwidth; for example, every HTTP) 189 316.37 T
(request results in a setup and teardown of a new TCP stream, which fails to amortize) 189 304.37 T
(TCP\325) 189 292.37 T
(s considerable overhead, and documents requested by HTTP are transmitted in) 210.12 292.37 T
(source form, even though the requesting machine may not have the resources to render) 189 280.37 T
-0.26 (the source document \050lack of memory) 189 268.37 P
-0.26 (, lack of computing power) 338.93 268.37 P
-0.26 (, or a small screen\051.As a) 442.73 268.37 P
(result, W) 189 256.37 T
(eb sur\336ng is extremely painful at 14.4Kbits/sec.) 224.86 256.37 T
-0.38 (Under the GloMop model, however) 189 232.37 P
-0.38 (, the client connects not to a particular service, but to) 330.09 232.37 P
-0.25 (a) 189 220.37 P
2 F
-0.25 (pr) 195.69 220.37 P
-0.25 (oxy pr) 204.21 220.37 P
-0.25 (ocess) 228.85 220.37 P
1 F
-0.25 ( running at a well-known location. The proxy is running on a server or is) 250.51 220.37 P
-0.1 (distributed among servers that are) 189 208.37 P
2 F
-0.1 (well connected) 326.52 208.37 P
1 F
-0.1 ( to the desired data, either because the) 386.13 208.37 P
-0.08 (data is at the site or because the site is well-connected \050i.e. an order of magnitude better) 189 196.37 P
-0.15 (than the client-proxy connection\051 into the Internet. For UC Berkeley) 189 184.37 P
-0.15 (, most data is reach-) 460.32 184.37 P
(able at 8 Mbps, which is more than 200 times better than a 28.8 modem connection.) 189 172.37 T
(Although the connection to the proxy is made on a reliable stream such as TCP) 189 160.37 T
(, the) 504.52 160.37 T
(requests and data transmitted on that stream are quite dif) 189 148.37 T
(ferent from what would be) 415.17 148.37 T
(transmitted using \050e.g.\051 HTTP directly) 189 136.37 T
(.) 341.67 136.37 T
(Besides retrieving documents using any desired transport protocol, the proxy provides) 189 112.37 T
(two key services to the mobile client, which we describe in depth in the next section:) 189 100.37 T
54 637.03 540 660.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 645.03 540 645.03 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 645.03 180 645.03 2 L
0 Z
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(T) 54 631.03 T
(ABLE 1.) 58.83 631.03 T
3 F
(Characteristics of overlay communication technologies) 189 631.03 T
0 8 Q
(T) 208.48 589.7 T
(ype) 212.78 589.7 T
(Bandwidth) 268.33 589.7 T
(Latency) 333.66 589.7 T
(Mobility) 383.91 589.7 T
(T) 442.54 607.7 T
(ypical) 446.83 607.7 T
(V) 445.2 598.7 T
(ideo) 450.4 598.7 T
(Pfmnc) 443.8 589.7 T
(T) 499.54 607.7 T
(ypical) 503.83 607.7 T
(Audio) 501.69 598.7 T
(Pfmnc) 500.8 589.7 T
1 9 Q
(Thin Ethernet) 189.02 575.03 T
(About 10 Mbps) 258.02 575.03 T
(< 10 ms) 331.52 575.03 T
(Fixed) 378.02 575.03 T
(2-way inter-) 432.02 575.03 T
(active) 432.02 564.03 T
(16 bits) 492.02 575.03 T
(@22 Khz) 492.02 564.03 T
(In-building) 189.02 549.03 T
(wireless) 189.02 538.03 T
(\050W) 189.02 527.03 T
(aveLAN,) 199.8 527.03 T
(IR\051) 189.02 516.03 T
(Commercial) 258.02 549.03 T
(RF: 2 Mbps) 258.02 538.03 T
(Research IR: 50) 258.02 523.03 T
(Mbps) 258.02 512.03 T
(< 10 ms) 331.52 549.03 T
(Pedestrian) 378.02 549.03 T
(2-way inter-) 432.02 549.03 T
(active, full) 432.02 538.03 T
(frame rate) 432.02 527.03 T
(16 bits) 492.02 549.03 T
(@22 KHz) 492.02 538.03 T
(Campus-area) 189.02 497.03 T
(packet relay) 189.02 486.03 T
(\050Metricom\051) 189.02 475.03 T
(64 Kbps) 258.02 497.03 T
(100ms) 331.52 497.03 T
(Pedestrian) 378.02 497.03 T
(Medium) 432.02 497.03 T
(quality slow) 432.02 486.03 T
(scan) 432.02 475.03 T
(Med qual-) 492.02 497.03 T
(ity) 492.02 486.03 T
(reduced) 492.02 475.03 T
(rate) 492.02 464.03 T
(W) 189.02 449.03 T
(ide-area) 197.16 449.03 T
(\050ARDIS, wire-) 189.02 438.03 T
(line modem\051) 189.02 427.03 T
(14.4-19.2 Kbps) 258.02 449.03 T
(> 100ms) 331.52 449.03 T
(V) 378.02 449.03 T
(ehicular) 383.52 449.03 T
(Freeze frame) 432.02 449.03 T
(Async) 492.02 449.03 T
(\050voicemail\051) 492.02 438.03 T
(Regional-area) 189.02 412.03 T
(\050LEO, DBS,) 189.02 401.03 T
(VSA) 189.02 390.03 T
(T\051) 206.02 390.03 T
(4.8Kbps-10+) 258.02 412.03 T
(Mbps \050asymmet-) 258.02 401.03 T
(ric\051) 258.02 390.03 T
(> 100ms) 331.52 412.03 T
(V) 378.02 412.03 T
(ehicular) 383.52 412.03 T
(,) 412.15 412.03 T
(stationary) 378.02 401.03 T
(Seconds/) 432.02 412.03 T
(frame,) 432.02 401.03 T
(freeze frame) 432.02 390.03 T
(Async) 492.02 412.03 T
(\050voicemail\051) 492.02 401.03 T
183.02 619.78 183.02 385.28 2 L
V
0.5 H
0 Z
N
252.02 620.28 252.02 384.78 2 L
V
N
325.52 620.28 325.52 384.78 2 L
V
N
372.02 620.28 372.02 384.78 2 L
V
N
426.02 620.28 426.02 384.78 2 L
V
N
486.02 620.28 486.02 384.78 2 L
V
N
540.02 619.78 540.02 385.28 2 L
V
N
182.77 620.03 540.27 620.03 2 L
V
N
183.27 586.28 539.77 586.28 2 L
V
N
183.27 583.78 539.77 583.78 2 L
V
N
182.77 559.03 540.27 559.03 2 L
V
N
182.77 507.03 540.27 507.03 2 L
V
N
182.77 459.03 540.27 459.03 2 L
V
N
182.77 422.03 540.27 422.03 2 L
V
N
182.77 385.03 540.27 385.03 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Motivation) 207 739.29 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(GloMop: Global Mobile Computing By Proxy) 207 59.67 T
0 10 Q
(3) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(1.) 207 680.66 T
4 10 Q
(Distillation) 220.74 680.66 T
1 F
( of the document, a type of semantic lossy compression we describe in) 267.98 680.66 T
(the next section.) 220.74 668.66 T
0 9 Q
(2.) 207 653.66 T
4 10 Q
-0.17 (Incr) 220.74 653.66 P
-0.17 (emental r) 238.9 653.66 P
-0.17 (e\336nement.) 279.36 653.66 P
1 F
-0.17 (Because the proxy caches the original \050source\051 document,) 325.85 653.66 P
(the client can selectively request re\336nements of portions of the document.) 220.74 641.66 T
0 F
(1.3) 184.1 611.66 T
(Distillation and Re\336nement) 207 611.66 T
1 F
(Simply put,) 207 587.66 T
2 F
(distillation) 256.18 587.66 T
1 F
( can be thought of as lossy compression that preserves enough) 299.53 587.66 T
-0.42 (semantic information to make a document useful while making the document drastically) 207 575.66 P
(smaller and easier to render on the mobile client, and possibly exploiting the docu-) 207 563.66 T
(ment\325) 207 551.66 T
(s semantic structure. Illustration by example is best:) 229.78 551.66 T
4 F
(Example: Graphic image.) 207 527.66 T
1 F
(W) 319.22 527.66 T
(e can reduce the area or the color palette or both for a) 327.86 527.66 T
-0.35 (lar) 207 515.66 P
-0.35 (ge full-color graphic. For example, we reduced an 8-bit-color) 217.37 515.66 P
-0.35 (, full-screen \050VGA\051 GIF) 459.69 515.66 P
(image to a thumbnail-sized 4-gray image for display on a Sony MagicLink PDA. In so) 207 503.66 T
-0.02 (doing, we reduced the image\325) 207 491.66 P
-0.02 (s size from 503 Kbytes to 560 bytes, and the transmission) 324.94 491.66 P
(time \050including real-time distillation\051 from 2,000 seconds to 13 seconds at 1200 baud.) 207 479.66 T
-0.11 (Furthermore, because our image processing included optimal quantization to the PDA) 207 467.66 P
-0.11 (\325) 548.94 467.66 P
-0.11 (s) 551.72 467.66 P
(\050static\051 graymap, the resulting image was much sharper on the PDA screen \050and there-) 207 455.66 T
(fore more useful to the human viewer\051 than the dithered original, so we actually) 207 443.66 T
(increased the perceived image quality while reducing the size a thousand fold.) 207 431.66 T
4 F
-0.36 (Example: Formatted text.) 207 407.66 P
1 F
-0.36 (The default format for rich text today is PostScript, which is) 318.67 407.66 P
-0.11 (highly verbose, requires much memory and computation to render) 207 395.66 P
-0.11 (, and reproduces well) 470.41 395.66 P
(only on a high quality display) 207 383.66 T
(. T) 325.52 383.66 T
(oday\325) 335.93 383.66 T
(s PDA) 358.15 383.66 T
(\325) 383.43 383.66 T
(s have none of these features. The proxy) 386.21 383.66 T
(can convert PostScript to formatted ASCII plaintext; we have even encoded the result-) 207 371.66 T
(ing plaintext as a GIF \050to exploit LZW and run-length compression\051 and achieved an) 207 359.66 T
(overall reduction of 1) 207 347.66 T
(1x to 13x. For documents whose \322source code\323 is available \050e.g.) 293 347.66 T
(FrameMaker or MS W) 207 335.66 T
(ord\051, the proxy can even transmit the document\325) 297.57 335.66 T
(s table of con-) 489.76 335.66 T
(tents and allow the client to request only speci\336c chapters, with or without included) 207 323.66 T
(graphic images \050which are distilled separately using the techniques described previ-) 207 311.66 T
(ously\051.) 207 299.66 T
4 F
(Example: Continuous video.) 207 275.66 T
1 F
( Intraframe video compression can be achieved using a) 327.85 275.66 T
-0.34 (variant of the techniques used for stills, and frame dropping and interframe compression) 207 263.66 P
(can further reduce the bandwidth requirements of the video stream. Berkeley\325) 207 251.66 T
(s Daed-) 517.2 251.66 T
(alus Group has demonstrated real-time transcoding of motion JPEG to subsampled) 207 239.66 T
(H.261, which is transmitted at 128Kbps to a W) 207 227.66 T
(aveLAN-equipped IBM ThinkPad. Half) 394.52 227.66 T
(of this bandwidth can be achieved using two parallel 28.8Kbps wireline modems \050in) 207 215.66 T
(fact, the PPP speci\336cation already allows this\051, enabling the possibility of useful video-) 207 203.66 T
(conferencing on a PDA.) 207 191.66 T
-0.36 (In summary) 207 167.66 P
-0.36 (, distillation exploits lar) 254.04 167.66 P
-0.36 (ge amounts of computing power on the proxy side to) 347.77 167.66 P
(maximize the client\325) 207 155.66 T
(s limited computing and network resources, by performing intelli-) 288.66 155.66 T
(gent) 207 143.66 T
2 F
(semantic compr) 226.72 143.66 T
(ession) 289.95 143.66 T
1 F
( in a datatype-dependent way) 314.95 143.66 T
(.) 431.49 143.66 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Motivation) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(4) 54 59.67 T
0 9 Q
( of) 59.56 59.67 T
0 10 Q
( 12) 70.56 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(1.4) 166.1 680.66 T
(Why An Application-Level API) 189 680.66 T
1 F
-0.37 (T) 189 656.66 P
-0.37 (o date, most work on mobile computing protocols has either centered on the adaptation) 194.41 656.66 P
-0.1 (of existing protocols to mobile computing [1] or has focused on the design of link-level) 189 644.51 P
(or transport-level protocols for mobile computing. Much less work has been done on) 189 632.51 T
-0.37 (application-level views of mobile computing protocols; a notable exception to this is the) 189 620.51 P
(W) 189 608.35 T
(it project at the Univ) 198.04 608.35 T
(. of W) 280.16 608.35 T
(ashington [2].) 304.63 608.35 T
-0.03 (W) 189 584.35 P
-0.03 (e believe that an application-level view is critical in designing mobile computing pro-) 197.64 584.35 P
(tocols, for the following reasons.) 189 572.35 T
0 9 Q
(1.) 189 554.35 T
1 10 Q
(Mobile computing is a multi-platform world. T) 202.74 554.35 T
(o enable multiple platform versions) 390.65 554.35 T
(of an application requires a common cross-platform API. TCP/IP provides such an) 202.74 542.35 T
(API, but it is too low-level: higher) 202.74 530.35 T
(-level protocol functionality built on top of TCP/) 340.05 530.35 T
(IP \050e.g. FTP) 202.74 518.35 T
(, HTTP\051 must be replicated in each dif) 250.52 518.35 T
(ferent version of an application) 404.2 518.35 T
(\050e.g. every W) 202.74 506.35 T
(eb browser must include an HTTP client, a GIF renderer) 256.36 506.35 T
(, etc.\051. Appli-) 482.02 506.35 T
(cations should be shielded from having to replicate this functionality for common) 202.74 494.35 T
(data types.) 202.74 482.35 T
0 9 Q
(2.) 189 467.35 T
1 10 Q
-0.36 (Applications need a well-de\336ned way of dealing with the severe resource constraints) 202.74 467.35 P
(faced by mobile applications,) 202.74 455.35 T
2 F
(and) 323.01 455.35 T
1 F
( for delegating partial responsibility for dealing) 338.01 455.35 T
(with them to the underlying protocol handlers.) 202.74 443.35 T
0 9 Q
(3.) 189 428.35 T
1 10 Q
(The datatype-speci\336c distillation we have described is most useful if performed at) 202.74 428.35 T
(the document level, but current commodity protocols generally have no notion of) 202.74 416.35 T
(document structure. \050An exception to this is MIME [3], and we do indeed have a) 202.74 404.2 T
(MIME email client that uses our techniques for distillation of each MIME inclu-) 202.74 392.2 T
(sion.\051) 202.74 380.2 T
(Thus, to capitalize on the growing momentum of mobile computing across multiple) 189 356.2 T
(platforms, we must provide an application-level, document-centric, and platform-inde-) 189 344.2 T
(pendent API.) 189 332.2 T
0 F
(1.5) 166.1 302.2 T
(Proxy Platforms) 189 302.2 T
1 F
(Our initial proxy will run under POSIX, but because it will be written in ANSI-compli-) 189 278.2 T
(ant C, we expect that it will not be dif) 189 266.2 T
(\336cult to port to other platforms.) 339.92 266.2 T
(The proxy can and will take advantage of two technologies that maximize exploitation) 189 242.2 T
(of server) 189 230.2 T
(-side compute power:) 224.06 230.2 T
0 9 Q
(1.) 189 212.2 T
4 10 Q
(Multithr) 202.74 212.2 T
(eading.) 239.79 212.2 T
1 F
( W) 270.62 212.2 T
(indows NT) 282.17 212.2 T
(, the Power Macintosh OS, and many commercial) 326.14 212.2 T
(versions of Unix now support multithreading capable of exploiting multiple proces-) 202.74 200.2 T
(sors in a single box.) 202.74 188.2 T
0 9 Q
(2.) 189 173.05 T
4 10 Q
-0.02 (Networks of W) 202.74 173.05 P
-0.02 (orkstations) 266.59 173.05 P
1 F
-0.02 (. The Berkeley NOW project [4] is investigating how to) 314.37 173.05 P
(harvest the idle cycles from an A) 202.74 161.05 T
(TM-connected network of workstations using a) 333.83 161.05 T
(\322glue layer\323 that sits on top of a commodity Unix and provides cross-machine) 202.74 149.05 T
(resource allocation and process control.) 202.74 137.05 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Motivation) 207 739.29 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(GloMop: Global Mobile Computing By Proxy) 207 59.67 T
0 10 Q
(5) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.6) 184.1 680.66 T
(Client Platforms) 207 680.66 T
1 F
-0.19 (Although some laptops are powerful enough to run Unix, it is one of the least used oper-) 207 656.66 P
(ating systems in the mobile computing world because it lacks user) 207 644.66 T
(-friendliness, power) 471.78 644.66 T
-0.12 (management \050until recently\051, and access to the huge installed base of productivity appli-) 207 632.66 P
(cations. Furthermore, although we distinguish PDA-class devices \050such as the Apple) 207 620.66 T
-0.21 (Newton or Sony MagicLink\051 from conventional laptops, we wish to enable applications) 207 608.66 P
-0.1 (across the entire range of devices. Besides lacking the computing resources to run Unix) 207 596.66 P
-0.19 (or W) 207 584.66 P
-0.19 (indows, PDA) 226.68 584.66 P
-0.19 (\325) 279.28 584.66 P
-0.19 (s have an entirely dif) 282.06 584.66 P
-0.19 (ferent interface and programming model, which) 365 584.66 P
(are often tightly integrated.) 207 572.66 T
(These assessments suggest the following partial list of tar) 207 548.66 T
(get platforms, sorted accord-) 436.8 548.66 T
(ing to the sizes of their user populations:) 207 536.66 T
0 9 Q
(1.) 207 518.66 T
1 10 Q
(Intel x86-based portables running Microsoft W) 220.74 518.66 T
(indows and its derivatives \050and in a) 408.92 518.66 T
(few cases, Linux or BSD/386\051) 220.74 506.66 T
0 9 Q
(2.) 207 491.66 T
1 10 Q
(Macintosh PowerBooks running MacOS) 220.74 491.66 T
0 9 Q
(3.) 207 476.66 T
1 10 Q
(DOS-derivative palmtops such as the HP 95LX) 220.74 476.66 T
0 9 Q
(4.) 207 461.66 T
1 10 Q
(Self-contained PDA) 220.74 461.66 T
(\325) 300.45 461.66 T
(s \050Apple Newton, Sony MagicLink\051. W) 303.23 461.66 T
(e have a prototype) 461.02 461.66 T
(MIME email client that uses the GloMop API running on the MagicLink.) 220.74 449.66 T
0 9 Q
(5.) 207 434.66 T
1 10 Q
(Java-aware browsers, to exploit platform independence and code migration. W) 220.74 434.66 T
(e) 535.14 434.66 T
-0.11 (have a prototype text email client written as a Java applet that uses the GloMop API.) 220.74 422.66 P
0 F
(1.7) 184.1 392.66 T
(Related W) 207 392.66 T
(ork at Berkeley) 255.16 392.66 T
1 F
(The Daedalus project [5] is exploring seamless migration among overlaid wireless net-) 207 368.51 T
-0.14 (works. Most of the time, applications can be insulated from handof) 207 356.51 P
-0.14 (fs between networks) 473.72 356.51 P
-0.28 (\050at least if the handof) 207 344.51 P
-0.28 (f is successful\051. However) 290.68 344.51 P
-0.28 (, the application may want to be informed) 390.53 344.51 P
(if the network characteristics \050bandwidth, latency) 207 332.51 T
(, cost\051 have changed more than some) 404.08 332.51 T
-0.32 (threshold amount, so it can adjust its policies and/or user interface accordingly) 207 320.51 P
-0.32 (. GloMop) 517.25 320.51 P
(provides the insulating layer between Daedalus\325 migration functionality and client) 207 308.51 T
(applications.) 207 296.51 T
(The Berkeley InfoPad project [6] uses an in-building high-speed wireless network to) 207 272.35 T
(provide connections between multimedia I/O terminals and \336xed workstations that pro-) 207 260.35 T
-0.12 (vide computation and connectivity to the rest of the Internet. The InfoPad is an extreme) 207 248.35 P
-0.24 (example of a proxy-based mobile device in that it has no general computation power on-) 207 236.35 P
(board, relying exclusively on the \336xed hosts for) 207 224.35 T
2 F
(all) 400.59 224.35 T
1 F
( computation and connectivity) 411.15 224.35 T
(.) 531.88 224.35 T
-0 (While InfoPad has done a good job of exposing important issues in low-power picocell) 207 212.35 P
(system design, we believe that the future of mobile computing lies with a more general) 207 200.35 T
(model in which the mobile client provides at least some functionality while discon-) 207 188.35 T
(nected.) 207 176.35 T
0 F
(1.8) 184.1 146.35 T
(Relation to Other Mobile Computing Research) 207 146.35 T
1 F
(A mature project that is closer in spirit to our approach is W) 207 122.2 T
(it [2] at the University of) 447.12 122.2 T
(W) 207 110.2 T
(ashington. The focus of that project is the partitioning of application functionality) 215.64 110.2 T
(between the mobile client \050HP 100LX palmtop running MS-DOS, communicating via) 207 98.2 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Services Provided by a Proxy) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(6) 54 59.67 T
0 9 Q
( of) 59.56 59.67 T
0 10 Q
( 12) 70.56 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(the Xerox IRNet\051 and a proxy process on a workstation. W) 189 680.66 T
(it provides a tightly-inte-) 424.38 680.66 T
-0.31 (grated application-level environment on HP palmtops, including simple windowing of a) 189 668.66 P
(text display) 189 656.66 T
(, T) 234.74 656.66 T
(cl with threads, RPC, and a custom stream protocol. However) 245.15 656.66 T
(, W) 491.94 656.66 T
(it does) 505.98 656.66 T
(not provide a common layer that handles datatype-speci\336c distillation, nor does it spec-) 189 644.66 T
(ify an API for applications to deal with changes in network characteristics or specify) 189 632.66 T
(how quality-of-service parameters could be mapped onto network characteristics.) 189 620.66 T
(The Odyssey project [7] provides an application-level API for document retrieval that) 189 596.51 T
(has a notion of datatypes, can deliver one of several levels of document quality) 189 584.51 T
(, and) 504.4 584.51 T
(allows the client to adapt to network changes by requesting \322policy changes\323 from the) 189 572.51 T
(server delivering the document. The dif) 189 560.51 T
(ference between Odyssey and GloMop is best) 347.12 560.51 T
-0.3 (characterized as static vs. dynamic. In Odyssey) 189 548.51 P
-0.3 (, the server must explicitly store multiple) 375.41 548.51 P
(representations of a document, and deliver a speci\336c version requested by the client; in) 189 536.51 T
(GloMop, the server can retrieve a source document from anywhere on the Internet,) 189 524.51 T
-0.2 (negotiate an appropriate representation with the client, and perform the required distilla-) 189 512.51 P
(tion, all in real time. A document\325) 189 500.51 T
(s type in Odyssey is determined by which directory) 324.55 500.51 T
-0.15 (volume \050subtree\051 it resides in, with each volume having a static type; a document\325) 189 488.51 P
-0.15 (s type) 514.2 488.51 P
(in GloMop is determined on a per) 189 476.51 T
(-document basis. Adding new datatypes to the Odys-) 324.34 476.51 T
-0.11 (sey system is dif) 189 464.51 P
-0.11 (\336cult because the type-speci\336c calls must be interfaced to the Unix \336le-) 254.88 464.51 P
(system calls; in contrast GloMop provides an API for adding new types on the \337y) 189 452.51 T
(, and) 514.99 452.51 T
-0.19 (in fact the Java implementation of the GloMop client has this feature by default, since it) 189 440.51 P
(exploits Java\325) 189 428.51 T
(s code migration capabilities.) 243.72 428.51 T
-0.09 (The Xerox ParcT) 189 404.35 P
-0.09 (ab [8] is a pager) 257.53 404.35 P
-0.09 (-size device designed to operate in a highly-connected) 321.37 404.35 P
(local environment \050one of the Xerox P) 189 392.35 T
(ARC buildings\051, using IRNet to communicate) 341.94 392.35 T
(with workstations. In this sense it is a closer relative of the InfoPad than of GloMop.) 189 380.35 T
-0.16 (The ParcT) 189 368.35 P
-0.16 (ab\325) 230.07 368.35 P
-0.16 (s custom applications generally exploit location knowledge and their inter-) 242.29 368.35 P
(faces are suited to its small size \050three inch display) 189 356.35 T
(, stylus input\051.) 391.37 356.35 T
(The LittleW) 189 332.2 T
(ork system [9] primarily addresses disconnected \336lesystem operation for) 237.36 332.2 T
(mobile devices. Our approach is more general: a \336lesystem-consistency mechanism) 189 320.2 T
(could be \050and probably will be\051 built on top of GloMop.) 189 308.2 T
(The Mobile IP project [1] explores how to hide the relocation of IP connections from) 189 284.05 T
-0.11 (mobile applications. GloMop, in contrast, assumes an underlying reliable stream model) 189 272.05 P
(\050e.g. TCP\051; mechanisms such as Mobile IP are in some sense orthogonal to our goals,) 189 260.05 T
(although the Daedalus project is investigating connection-oriented services for mobile) 189 248.05 T
(hosts [10].) 189 235.89 T
54 192.56 540 195.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 194.72 540 194.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 194.72 180 194.72 2 L
0 Z
N
0 0 612 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(2.0) 163.32 199.56 T
(Services Provided by a Proxy) 189 199.56 T
1 10 Q
(This section describes some of our ideas for other services that a proxy architecture is) 189 171.89 T
-0.09 (uniquely positioned to provide. W) 189 159.89 P
-0.09 (e do not currently have prototypes of any of these ser-) 324.8 159.89 P
(vices.) 189 147.89 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Services Provided by a Proxy) 207 739.29 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(GloMop: Global Mobile Computing By Proxy) 207 59.67 T
0 10 Q
(7) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1) 184.1 680.66 T
(Local File Caching) 207 680.66 T
1 F
(W) 207 656.66 T
(e can use PC Card hard drives \050formerly called PCMCIA\051, up to 540MB, as portable) 215.64 656.66 T
(\336le caches. The user synchronizes the \336le cache before leaving and the proxy would) 207 644.66 T
(keep track of the contents. Mobile applications can check the \336le cache before asking) 207 632.66 T
(for information from the proxy) 207 620.66 T
(. The client can ask the proxy to verify that the local ver-) 330.22 620.66 T
-0.13 (sion of a given \336le is current. As an example, we would store all of the users\325 email and) 207 608.66 P
(web cache on the drive. W) 207 596.66 T
(e might include all of the user) 312.83 596.66 T
(\325) 432.63 596.66 T
(s home directory as well. Of) 435.41 596.66 T
(course missing items will be added to the cache as they are brought to the client.) 207 584.66 T
(Our current API allows this functionality to be implemented virtually transparently) 207 560.66 T
(, in) 538.54 560.66 T
(that the application would initially request a document and the GloMop protocol layer) 207 548.66 T
(would transparently try to satisfy the request from the PC Card drive before notifying) 207 536.66 T
(the proxy) 207 524.66 T
(.) 244.4 524.66 T
(Issues such as how to resynchronize the cache upon reconnect have been addressed by) 207 500.66 T
(the Coda disconnected \336le system [1) 207 488.51 T
(1].) 353.56 488.51 T
0 F
(2.2) 184.1 458.51 T
(Urgent Noti\336cation) 207 458.51 T
1 F
(The proxy can notify the user of an \322important\323 event via a paging service or through) 207 434.51 T
(RadioMail \050ARDIS\051. Noti\336cation is a primitive operation and can be used in any appli-) 207 422.51 T
-0.29 (cation or user script. T) 207 410.51 P
-0.29 (ypical uses might include email from a particular person or with a) 295.4 410.51 P
(particular subject line, or the completion of some background process run on the proxy) 207 398.51 T
(.) 554.07 398.51 T
0 F
(2.3) 184.1 368.51 T
(Fax Back) 207 368.51 T
1 F
(The user can request that the proxy retrieve a document and fax it to a particular phone) 207 344.51 T
(number) 207 332.51 T
(, performing some intermediate image processing to maximize the quality of) 237.15 332.51 T
-0.04 (graphics rendering on the fax. The) 207 320.51 P
2 F
-0.04 (tpc.int) 347 320.51 P
1 F
-0.04 ( service already routes faxes from the Internet) 372.28 320.51 P
(to many metropolitan areas for free, and adding a) 207 308.51 T
2 F
(tpc.int) 406.95 308.51 T
1 F
(transport module to the proxy) 434.73 308.51 T
(would be trivial.) 207 296.51 T
0 F
(2.4) 184.1 266.51 T
(T) 207 266.51 T
(elephone Access) 212.37 266.51 T
1 F
-0.23 (It should be possible to interact with the proxy via a touch-tone phone. Input would be a) 207 242.51 P
(comination of touch-tone dialing \050like voice-mail menus\051 and voice recognition. Each) 207 230.51 T
-0.06 (user can build a menu structure and associate menu commands with user procedures. A) 207 218.51 P
(standalone PC running the proxy would handle menu selections and send output to the) 207 206.51 T
-0.12 (user via text-to-speech conversion, for which free, high quality code is available. Exam-) 207 194.51 P
(ple applications include listening to your email and checking the status of a running) 207 182.51 T
(agent.) 207 170.51 T
(W) 207 146.51 T
(e can also use the phone line for noti\336cation: the proxy calls you for an ur) 215.64 146.51 T
(gent noti\336-) 510.69 146.51 T
-0.29 (cation if it cannot reach your mobile device \050e.g. because the mobile device is of) 207 134.51 P
-0.29 (\337ine, or) 524.96 134.51 P
(because you are not carrying it with you\051.) 207 122.51 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(GloMop Functional Description) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(8) 54 59.67 T
0 9 Q
( of) 59.56 59.67 T
0 10 Q
( 12) 70.56 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(2.5) 166.1 680.66 T
(Agents) 189 680.66 T
1 F
(An agent can be thought of as a generalization of a long-lived document request that) 189 656.66 T
(carries very low priority) 189 644.66 T
(, i.e. one whose semantics are \322do whatever is necessary to get) 285.27 644.66 T
(the information, and I\325ll check back with you later) 189 632.66 T
(.\323 W) 389.8 632.66 T
(e still need to de\336ne the environ-) 407.88 632.66 T
-0.13 (ment in which agents would run, but since they run on the proxy side, they have the run) 189 620.66 P
(of the Internet.) 189 608.66 T
(The General Magic T) 189 584.66 T
(elescript environment, which is currently implemented in the) 274.66 584.66 T
(A) 189 572.66 T
(T&T PersonaLink, allows PDA applications to launch and communicate with remote) 195.11 572.66 T
(autonomous agents that inhabit a T) 189 560.66 T
(elescript network.  Unfortunately) 328.57 560.66 T
(, T) 460.67 560.66 T
(elescript has not) 471.08 560.66 T
(realized widespread use becuase it is currently a proprietary technology) 189 548.66 T
(. In contrast,) 474.66 548.66 T
(GloMop agents will use and enhance existing non-proprietary Internet services.) 189 536.66 T
54 493.33 540 496.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 495.48 540 495.48 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 495.48 180 495.48 2 L
0 Z
N
0 0 612 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(3.0) 163.32 500.33 T
(GloMop Functional Description) 189 500.33 T
0 10 Q
(3.1) 166.1 466.66 T
(Abstractions) 189 466.66 T
1 F
-0.07 (Since the goal is to make application writers\325 lives easier \050and thereby encourage devel-) 189 442.66 P
(opment of truly mobile client applications\051, the application\325) 189 430.66 T
(s view of the network must) 427.32 430.66 T
-0.08 (provide easy-to-manage high-level abstractions for a number of important properties of) 189 418.66 P
(the virtual connections. This has been observed by [12]. Furthermore, it should be pos-) 189 406.51 T
(sible for the client application to delegate management of any property to the network) 189 394.51 T
(software, rather than managing it explicitly) 189 382.51 T
(. For example, in the case of changes in) 361.1 382.51 T
(bandwidth, the client application might choose to let the network software decide how) 189 370.51 T
-0.42 (to perform distillation to utilize available bandwidth most ef) 189 358.51 P
-0.42 (\336ciently) 426.53 358.51 P
-0.42 (, rather than making) 458.66 358.51 P
(explicit distillation decisions for each document accessed remotely) 189 346.51 T
(.) 455.81 346.51 T
(GloMop\325) 189 322.51 T
(s API provides abstractions for the following properties of interest:) 225.67 322.51 T
0 9 Q
(1.) 189 304.51 T
4 10 Q
(Bandwidth and latency) 202.74 304.51 T
(.) 301.11 304.51 T
1 F
( These parameters span a broad range from in-building) 303.61 304.51 T
(wired networks to satellite relays.) 202.74 292.51 T
0 9 Q
(2.) 189 277.51 T
4 10 Q
(Priority) 202.74 277.51 T
1 F
(. Dif) 235.98 277.51 T
(ferent data types by nature have dif) 254.12 277.51 T
(ferent priorities, e.g. motion video) 395.02 277.51 T
(should have high priority while email and FTP can use the lowest priority) 202.74 265.51 T
(.) 497.08 265.51 T
0 9 Q
(3.) 189 250.51 T
4 10 Q
(Price) 202.74 250.51 T
1 F
(. A cost model for each wireless service provider \050and perhaps for the actual) 224.96 250.51 T
(documents retrieved\051 can help the user stay within a preset budget, or specify cost) 202.74 238.51 T
(constraints for document retrieval.) 202.74 226.51 T
0 9 Q
(4.) 189 211.51 T
4 10 Q
(Security/encryption) 202.74 211.51 T
1 F
(. Security is already recognized as a major issue for wireless) 287.18 211.51 T
(networks. Some networks provide link-level encryption, which may be enough for) 202.74 199.51 T
(transmission of nonsensitive data, but users should have the option of enabling end-) 202.74 187.51 T
(to-end encryption \050at increased computational cost\051 for sensitive data.) 202.74 175.51 T
0 9 Q
(5.) 189 160.51 T
4 10 Q
(Power consumption) 202.74 160.51 T
1 F
(. GloMop\325) 287.46 160.51 T
(s network management module will develop statisti-) 329.14 160.51 T
(cal power consumption pro\336les and use them to decide when it is worth activating) 202.74 148.51 T
-0.09 (multiple network interfaces, or when bandwidth requirements can be safely reduced) 202.74 136.51 P
(in order to conserve power) 202.74 124.51 T
(.) 309.39 124.51 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(GloMop Functional Description) 207 739.29 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(GloMop: Global Mobile Computing By Proxy) 207 59.67 T
0 10 Q
(9) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2) 184.1 680.66 T
(Key Features of Proxy Architecture) 207 680.66 T
4 F
(Built on r) 207 656.66 T
(eliable str) 247.94 656.66 T
(eams.) 289.7 656.66 T
1 F
( GloMop will assume that the OS can provide an abstraction) 313.86 656.66 T
(for a reliable stream, such as TCP or X.25. The details of the abstraction are unimpor-) 207 644.66 T
(tant, and it is not necessary that the OS allow more than one reliable stream connection) 207 632.66 T
(to be open simultaneously) 207 620.66 T
(.) 311.07 620.66 T
4 F
-0.05 (T) 207 596.66 P
-0.05 (ype-speci\336c, adaptive \322pipes\323.) 212.93 596.66 P
1 F
-0.05 ( The most important abstraction provided by GloMop) 341.17 596.66 P
-0.26 (is a data pipe that has intimate knowledge of the data being sent and received through it.) 207 584.66 P
(A hierarchy of typed pipes is possible, e.g. there may be a \322generic\323 IMAGE pipe that) 207 572.66 T
-0.22 (provides minimal support for transmitting any type of graphic image, as well as speci\336c) 207 560.66 P
(pipes that have detailed knowledge about dif) 207 548.66 T
(ferent formats such as GIF and JPEG.) 385.68 548.66 T
-0.09 (These pipes can make decisions about how to distill, compress or otherwise manipulate) 207 536.66 P
-0.02 (document data to make the best use of the underlying network. The typed pipe architec-) 207 524.66 P
(ture is extensible: new type modules register themselves with the system, enabling an) 207 512.66 T
(aftermarket for document-speci\336c extensions. An example might be a document type) 207 500.66 T
(that provides support for transmitting dif) 207 488.66 T
(ferent semantic layers of a map graphic: \336rst) 369.87 488.66 T
(the major arteries only) 207 476.66 T
(, then the mountain ranges, then the smaller roads, etc.) 296.61 476.66 T
4 F
-0.18 (One r) 207 452.66 P
-0.18 (eliable str) 231.36 452.66 P
-0.18 (eam per NI.) 272.95 452.66 P
1 F
-0.18 (For our purposes, a \322network interface\323 is loosely de\336ned) 325.74 452.66 P
(as \322any I/O port that transmits data between the mobile client and the external world.\323) 207 440.66 T
-0.37 (Thus, a conventional modem, cellular/radio modem, IR port, or Ethernet card all qualify) 207 428.66 P
-0.17 (as network interfaces. The rationale is to minimize the ef) 207 416.66 P
-0.17 (fect of the overhead associated) 433.05 416.66 P
-0.14 (with a reliable stream; experience with the W) 207 404.51 P
-0.14 (orld W) 387.14 404.51 P
-0.14 (ide W) 414.65 404.51 P
-0.14 (eb has shown [13] that associ-) 437.88 404.51 P
(ating a separate reliable stream connection with each virtual connection \050e.g. one TCP) 207 392.51 T
(connection per HTTP request\051 exacts a high price in performance and data overhead.) 207 380.51 T
(GloMop will explicitly allow multiple, possibly asymmetric NI\325) 207 368.51 T
(s to be in use simulta-) 463.12 368.51 T
(neously; for example, a pair of conventional 28.8 modems \050e.g. a PC-card modem and) 207 356.51 T
(an internal modem on a laptop\051 could be used in parallel to achieve 56 Kbits/sec using) 207 344.51 T
-0.23 (two dif) 207 332.51 P
-0.23 (ferent telephone connections. Each NI will have dif) 235.2 332.51 P
-0.23 (ferent properties with respect) 439.5 332.51 P
(to bandwidth, latency) 207 320.51 T
(, cost of operation, etc., but for the most part knowledge of these) 292.73 320.51 T
(details will be con\336ned to the measurement/scheduling layer described below) 207 308.51 T
(.) 516.58 308.51 T
4 F
(Measur) 207 284.51 T
(ement and scheduling.) 239.59 284.51 T
1 F
(This layer) 337.38 284.51 T
(, which lives between the API seen by the) 377.25 284.51 T
-0.26 (application and the OS interface to a reliable stream service, will be responsible for mul-) 207 272.51 P
(tiplexing virtual connections onto the reliable streams associated with the NI\325) 207 260.51 T
(s. Auto-) 516.41 260.51 T
-0.24 (mated statistical modelling techniques [14] will be used to collect information about the) 207 248.35 P
-0.3 (performance of the physical connection. This information will be used in scheduling the) 207 236.35 P
(competing virtual streams as well as providing the user with predictions of the cost of) 207 224.35 T
(retrieving a given document \050in both connect minutes and dollars\051. one reliable-stream) 207 212.35 T
(connection) 207 200.35 T
2 F
(per har) 253.38 200.35 T
(dwar) 282.73 200.35 T
(e network interface) 302.92 200.35 T
1 F
(.) 380.13 200.35 T
0 F
(3.3) 184.1 170.35 T
(Document-Centric Request Model) 207 170.35 T
1 F
(W) 207 146.35 T
(e loosely de\336ne a) 215.64 146.35 T
2 F
(document) 287.85 146.35 T
1 F
( as a collection of bytes that can be taken to represent a) 326.73 146.35 T
(single macroscopic object when the appropriate interpretation is imposed on them. By) 207 134.35 T
(this de\336nition, a code module is as much a document as is a word processor \336le, a) 207 122.35 T
(graphical image, a sound sample, or a motion video clip.) 207 110.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(GloMop Functional Description) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(10) 54 59.67 T
0 9 Q
( of) 65.12 59.67 T
0 10 Q
( 12) 76.12 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(When the client connects to the proxy) 189 680.66 T
(, it registers a list of data types it is prepared to) 339.99 680.66 T
(accept. Note that since the datatype-speci\336c modules reside in the GloMop client layer) 189 668.66 T
-0.19 (and not in the individual applications, this single list can apply to all requests regardless) 189 656.66 P
(of the originating application.) 189 644.66 T
(T) 189 620.66 T
(o request a document, the client passes the proxy a) 194.41 620.66 T
2 F
(document locator) 399.65 620.66 T
1 F
(, specifying how) 469.52 620.66 T
(the source document may be retrieved, and a set of) 189 608.66 T
2 F
(QOS parameters) 394.78 608.66 T
1 F
(, specifying which) 462.27 608.66 T
(constraints are most important to the client. The proxy retrieves the source document,) 189 596.66 T
(determines its type, and locates a type-speci\336c module \050TSM\051 consistent with the regis-) 189 584.66 T
-0.14 (tered type list to handle the request. The TSM negotiates with the network management) 189 572.66 P
(layer \050NM\051 to determine how to distill the document for this client given the QOS) 189 560.66 T
-0.21 (parameters, which may encode a constraint such as \322Deliver the best representation pos-) 189 548.66 P
(sible while keeping the transmission time under 30 seconds\323 or \322...while keeping the) 189 536.66 T
(transmission cost under $5.00\323.) 189 524.66 T
0 F
(3.4) 166.1 494.66 T
(Document Structure) 189 494.66 T
1 F
(Documents are) 189 470.66 T
2 F
(structur) 251.76 470.66 T
(ed) 283.06 470.66 T
1 F
( in two respects. First, each document is divided into an) 292.5 470.66 T
(optional) 189 458.66 T
2 F
(document table of contents \050T) 224.28 458.66 T
(OC\051) 342.98 458.66 T
1 F
(and a required) 362.7 458.66 T
2 F
(body) 422.4 458.66 T
1 F
(. The T) 441.19 458.66 T
(OC, if present,) 470.17 458.66 T
(describes the sizes and contents of each) 189 446.66 T
2 F
(chunk) 349.79 446.66 T
1 F
(, which collectively make up the body) 373.67 446.66 T
(.) 525.5 446.66 T
(Simple documents, such as plain text, may consist of only a single chunk and have no) 189 434.66 T
(T) 189 422.66 T
(OC. Rich documents, such as layered maps or MIME-encoded email messages, may) 194.93 422.66 T
-0.38 (consist of several chunks plus a T) 189 410.66 P
-0.38 (OC describing the chunks. The semantic interpretation) 321.55 410.66 P
-0.12 (of chunks is left to each document type; the intention is that a chunk be a logical seman-) 189 398.66 P
(tic subdivision of the document\325) 189 386.66 T
(s content.) 317.89 386.66 T
(Second, each chunk can contain a) 189 362.66 T
2 F
(document r) 326.46 362.66 T
(efer) 371.36 362.66 T
(ence table) 386.54 362.66 T
1 F
(\321a list of other documents) 427.36 362.66 T
(referred to by this one. For example, an HTML page consists of one or more chunks of) 189 350.66 T
(HTML and a DR) 189 338.66 T
(T with an entry for each of the inlined graphics \050and perhaps an entry) 257 338.66 T
-0.16 (for each hyperlink\051. Note that this implies a fair amount of intelligence at the proxy: the) 189 326.66 P
(proxy must examine the document, replace the inline directives with DR) 189 314.66 T
(T entries) 478.64 314.66 T
(\050appropriately annotated so that the human using the client application knows what) 189 302.66 T
(inline images were substituted\051, and \050ideally\051 prefetch and distill the referenced docu-) 189 290.66 T
(ments, so they will be ready and waiting should the client request them.) 189 278.66 T
0 F
(3.5) 166.1 248.66 T
(Document Uploading) 189 248.66 T
1 F
(The client can send a document to the proxy using a similar protocol. Sending actually) 189 224.66 T
-0.43 (performs an enqueue operation, which allows documents to be queued for sending while) 189 212.66 P
(disconnected and allows the NM layer to decide when is a good time to perform a wait-) 189 200.66 T
-0.16 (ing send \050e.g. it may decide to do a send when the application is temporarily quiescent\051.) 189 188.66 P
(Examples of document uploading include sending of new email, sending a log \336le to) 189 176.66 T
(resynchronize the user) 189 164.66 T
(\325) 279.34 164.66 T
(s inbox on the proxy with the one on the client, and annotating) 282.12 164.66 T
(\050marking up\051 a downloaded source document.) 189 152.66 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(References) 207 739.29 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(GloMop: Global Mobile Computing By Proxy) 207 59.67 T
0 10 Q
(1) 522.81 59.67 T
(1) 527.82 59.67 T
0 9 Q
( of) 533.38 59.67 T
0 10 Q
(12) 546.88 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6) 184.1 680.66 T
(T) 207 680.66 T
(ype-Speci\336c Modules) 212.37 680.66 T
1 F
(TSM\325) 207 656.66 T
(s encapsulate knowledge about distillation: how to exploit speci\336c properties of) 230.34 656.66 T
(the document for compression, and how to present a document to the client in a struc-) 207 644.66 T
-0.12 (tured way) 207 632.66 P
-0.12 (. A TSM is composed of two parts: a client side \050decoder\051 and proxy side \050dis-) 245.94 632.66 P
(tiller\051. The interface between the client side TSM and the client side of GloMop is well) 207 620.66 T
-0.26 (de\336ned, as is the interface between the proxy side TSM, the \322core\323 of the proxy) 207 608.66 P
-0.26 (, and the) 522.11 608.66 P
-0.2 (NM layer) 207 596.51 P
-0.2 (. Thus adding new TSM\325) 244.85 596.51 P
-0.2 (s is straightforward. The Java [15] implementation of) 343.78 596.51 P
(the GloMop client \050already underway\051 will use Java\325) 207 584.51 T
(s built-in ability to dynamically) 417.79 584.51 T
(link architecture-neutral code to add data types on the \337y: a document server will pro-) 207 572.51 T
(vide not only a document, but if necessary the code for decoding that document type.) 207 560.51 T
72 517.17 558 520.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207 519.33 558 519.33 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 519.33 198 519.33 2 L
0 Z
N
0 0 612 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(4.0) 181.32 524.17 T
(References) 207 524.17 T
1 10 Q
([1]) 72 500.51 T
(J.) 100.35 500.51 T
(Ioannidis, D.) 109.24 500.51 T
(Duchamp, and G.) 163.68 500.51 T
(M. Jr. Ip-based protocols for mobile internetworking. In) 236.72 500.51 T
2 F
(SIGCOMM 91) 463.63 500.51 T
1 F
(, 1991.) 522.23 500.51 T
([2]) 72 483.51 T
-0.08 (T.) 100.35 483.51 P
-0.08 (Watson. Application design for wireless computing. In) 111.46 483.51 P
2 F
-0.08 (Mobile Computing Systems and Applications Workshop) 332.84 483.51 P
1 F
-0.08 (,) 555.5 483.51 P
(August 1994.) 100.35 471.51 T
([3]) 72 454.51 T
-0.51 (K.) 100.35 454.51 P
-0.51 (Moore and N.) 112.57 454.51 P
-0.51 (Borenstein. Mime \050multipurpose internet mail extensions\051 parts 1 and 2. RFC 1521 and 1522, Sep-) 169.87 454.51 P
(tember 1993.) 100.35 442.51 T
([4]) 72 425.51 T
-0.2 (T.) 100.35 425.51 P
-0.2 (E. Anderson, D.) 111.46 425.51 P
-0.2 (E. Culler, and D.) 178.27 425.51 P
-0.2 (A.) 247.95 425.51 P
-0.2 (P. et) 260.17 425.51 P
-0.2 (al. The case for now \050networks of workstations\051.) 280.25 425.51 P
2 F
-0.2 (IEEE Micro) 475.28 425.51 P
1 F
-0.2 (, \050To ap-) 523.68 425.51 P
(pear\051. Also see http://now.cs.berkeley.edu.) 100.35 413.51 T
([5]) 72 396.51 T
(R.) 100.35 396.51 T
(H.) 112.02 396.51 T
(K. et) 124.24 396.51 T
(al. The daedalus project \050home page\051. http://daedalus.cs.berkeley.edu.) 146.18 396.51 T
([6]) 72 379.51 T
2.02 (B.) 100.35 379.51 P
2.02 (Barringer, T.) 112.02 379.51 P
2.02 (Burd, F.) 168.46 379.51 P
2.02 (Burghardt, A.) 206.04 379.51 P
2.02 (Burstein, A.) 265.82 379.51 P
2.02 (Chandrakasan, R.) 318.95 379.51 P
2.02 (Doering, S.) 394.28 379.51 P
2.02 (Narayanaswamy, T.) 444.62 379.51 P
2.02 (Pering,) 529.39 379.51 P
-0.17 (B.) 100.35 367.51 P
-0.17 (Richards, T.) 112.02 367.51 P
-0.17 (Truman, J.) 163.5 367.51 P
-0.17 (Rabaey, and R.) 208.88 367.51 P
-0.17 (Brodersen. Infopad: A system design for portable multimedia access. In) 272.13 367.51 P
2 F
(Calgary Wireless 94 Conference) 100.35 355.51 T
1 F
(, July 1994.) 231.17 355.51 T
([7]) 72 338.51 T
0.23 (B.) 100.35 338.51 P
0.23 (D. Noble, M.) 112.02 338.51 P
0.23 (Price, and M.) 168.02 338.51 P
0.23 (Satyanarayanan. A programming interface for application-aware adaptation in mo-) 224.86 338.51 P
(bile computing. In) 100.35 326.51 T
2 F
(USENIX Symposium on Mobile and Location-Independent Computing) 176.46 326.51 T
1 F
(, 1995.) 457.55 326.51 T
([8]) 72 309.51 T
0.55 (N.) 100.35 309.51 P
0.55 (Adams, R.) 112.57 309.51 P
0.55 (Gold, B.) 158.12 309.51 P
0.55 (Schilit, M.) 195.34 309.51 P
0.55 (Tso, and R.) 240.9 309.51 P
0.55 (Want. An infrared network for mobile computers. In) 290.6 309.51 P
2 F
0.55 (First Usenix) 507.73 309.51 P
(Symposium on Mobile and Location-Independent Computing) 100.35 297.51 T
1 F
(, pages 41\32051, August 1994.) 344.5 297.51 T
([9]) 72 280.51 T
-0 (L.) 100.35 280.51 P
-0 (Huston and P.) 111.46 280.51 P
-0 (Honeyman. Disconnected operation for afs. In) 170.34 280.51 P
2 F
-0 (First Usenix Symposium on Mobile and Location-) 358.04 280.51 P
(Independent Computing) 100.35 268.51 T
1 F
(, pages 1\32010, August 1994.) 196.73 268.51 T
([10]) 72 251.51 T
0.3 (K.) 100.35 251.51 P
0.3 (Keeton, B.) 112.57 251.51 P
0.3 (Mah, S.) 158.41 251.51 P
0.3 (Seshan, R.) 192.6 251.51 P
0.3 (Katz, and D.) 237.9 251.51 P
0.3 (Ferrari. Providing connection-oriented network services to mobile) 291.53 251.51 P
1.83 (hosts. In) 100.35 239.51 P
2 F
1.83 (USENIX Symposium on Mobile and Location-Independent Computing) 140.39 239.51 P
1 F
1.83 (, August 1993. Also at http://) 432.46 239.51 P
(www.cs.berkeley.edu/) 100.35 227.51 T
(kkeeton/Papers/usenix-paper-release.ps.) 191.99 227.51 T
([11]) 72 210.51 T
0.41 (J.) 100.35 210.51 P
0.41 (J. Kistler and M.) 109.24 210.51 P
0.41 (Satyanarayanan. Disconnected operation in the coda file system.) 179.91 210.51 P
2 F
0.41 (ACM Transactions on Com-) 443.7 210.51 P
(puter Systems) 100.35 198.51 T
1 F
(, 10\0501\051:3\32025, February 1992.) 155.62 198.51 T
([12]) 72 181.51 T
1.13 (G.) 100.35 181.51 P
1.13 (H. Forman and J.) 112.57 181.51 P
1.13 (Zahorjan. The challenges of mobile computing. Technical Report 93-11-03, University of) 187.61 181.51 P
(Washington Computer Science & Engineering, December 1993. Available at ftp://ftp.cs.washington.edu.) 100.35 169.51 T
([13]) 72 152.51 T
-0.26 (V.) 100.35 152.51 P
-0.26 (Padmanabhan. Improving world wide web latency. Technical Report UCB/CSD-95-875, UC Berkeley Comput-) 112.57 152.51 P
(er Science Division, May 1995. Available at http://cs-tr.cs.berkeley.edu/Document/UCB:CSD-95-875.) 100.35 140.51 T
([14]) 72 123.51 T
0.63 (E.) 100.35 123.51 P
0.63 (A. Brewer. High-level optimization via automated statistical modeling. In) 111.46 123.51 P
2 F
0.63 (Principles and Practice of Parallel) 414.91 123.51 P
(Programming) 100.35 111.51 T
1 F
(, 1995. Also at http://www.cs.berkeley.edu/) 156.46 111.51 T
(brewer/hll.ps.gz.) 333.11 111.51 T
([15]) 72 94.51 T
(S.) 100.35 94.51 T
(Labs. The java language: A white paper. Available at http://java.sun.com.) 110.91 94.51 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(References) 189 739.29 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(12) 54 59.67 T
0 9 Q
( of) 65.12 59.67 T
0 10 Q
( 12) 76.12 59.67 T
0 9 Q
(GloMop: Global Mobile Computing By Proxy) 189 59.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 12
%%DocumentFonts: Helvetica-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Helvetica
%%+ Times-Bold
%%EOF
