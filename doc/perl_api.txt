#!/usr/sww/bin/perl

###############################################################################
#
# This file documents the ever evolving perl TSM interface. It provides stubs 
# for the sub routines that should be defined for each type. The stubs are for 
# type foo, subs are discussed in turn. 
#
# Each TSM lives in a separate package of Perl procedures.  The mapping of
# TSM name to package name happens in the glomop.cf file.
#
###############################################################################

package gm_foo;

#
# Args: Request ID.
#
# Returns: ideally a sucess status, this functions is called by the proxy to
# allow the TSM to perform any internal intialization that it needs.
#
sub gm_fooInit {
    local($reqId) = @_;
    return 1;
}

#
# Args: Request ID.
#
# Returns: ideally a sucess status, this function basically performs clean up
# of any global or other state associated with the TSM and notification that
# the proxy is done(for now) whith this TSM package.
#
sub gm_fooShutDown {
    local($reqId) = @_;
    return 1;
}

# 
# Args: Request ID, document path
# 
# Returns: An array.  First element is the number of chunks in the document,
# excluding the TOC.  Remaining elements constitute a list of strings
# (Hormel-format) ready to send to the client, containing the document TOC.
# The exact bytes that encode this on the wire are described in
# stream_defs.txt.
#
sub gm_fooFetchTOC {
    local($reqId, $path) = @_;
}

#
# Args: Request ID, chunk sequence number
#
# Returns: a list whose first element is the number of remaining chunks, the
# rest of the list is a Hormel-formated array containing the chunk DRT and
# data. The bytes are described in stream_defs.txt.
#
sub gm_fooFetchChunk {
    local($reqId, $chunkIndex) = @_;
}


###############################################################################
#
# The following functions return nonzero or zero to indicate "ok" or "failure".
# If failure is indicated, a second element is returned: a string containing an
# error message.
#
###############################################################################


#
# Args: request ID, pathname, number of chunks, TOC array
#
# Returns: nonzero iff success. The array contains one element per line of the
# document TOC for a document being uploaded, in Hormel format.
#
sub gm_fooPutTOC {
    local($reqId, $pathName, $numChunks, @toc) = @_;
    return 1;
}

#
# Args: req ID, chunk index, chunk data
#
# Returns: nonzero iff success. The array contains the Hormel-format chunk data
# corresponding to the given chunk.
#
sub gm_fooPutChunk {
    local($reqId, $chunkIndex, @chunk) = @_;
    return 1;
}

#
# Args: req ID
#
# Returns: ideally, success (nonzero)
#
sub gm_fooAllDone {
    local($reqId) = @_;	
    return 1;
}

#
# Args: req ID, list of missing chunk numbers
#
# Returns: zero if you care, nonzero if you don't care that some chunks are
# missing.
#
sub gm_fooIncomplete {
    local($reqId, @missingChunks) = @_;
    return 1;
}


######################################################################
#
#  TSM is initially told which types client can accept; it also knows which
#  distillations make sense for this datatype.  It can call the following
#  functions to compute which paths exist between the two sets of types, and
#  offer this to the client as a popup list of refinement alternatives.
#
#  Distillation properties are symbolically named and quantized: (COLOR, MONO),
#  (1BPP, 2BPP, FULLBPP), (SMALLTHUMB, LARGETHUMB, SCREEN, ORIG) ...
#  The cross product of these properties provides a static per-type list of
#  what distillations make sense.
######################################################################

