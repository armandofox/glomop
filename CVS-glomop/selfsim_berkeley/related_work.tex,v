head	1.6;
access;
symbols
	pre-camera-edits:1.4
	sigmetrics:1.1.1.1
	sigmetrics:1.1.1;
locks; strict;
comment	@% @;


1.6
date	98.03.16.19.15.46;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	98.03.13.23.53.47;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.11.03.10.03.09;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.11.02.00.19.09;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.10.31.23.38.35;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Multo-changes for camera ready.
@
text
@\section{Related Work}\label{related_work_sec}

The study of self-similarity in computer networks was pioneered by the work
of Leland et al., in which they demonstrated that Ethernet traffic was
self-similar in nature \cite{Lela94}.\footnote{Since most Ethernet traffic
is NFS traffic, it is not unreasonable to expect that NFS traffic shows
behaviour akin to the Ethernet traffic.}  Further work showed that the
self-similarity could be attributed to the ON/OFF behaviour of traffic
sources within their system \cite{Will95}.  We borrow heavily upon the
theory and analysis techniques presented in these two papers to demonstrate
the presence of self-similarity in file system traffic.  Self-similar
behaviour in various other types of systems (such as wide-area traffic
\cite{Paxs94}, ATM networks \cite{Geor94}, variable-bit-rate video
\cite{Bera95}, and World Wide Web traffic \cite{crov95}) has been detected
using similar techniques.

The analysis of file system performance, access characteristics, and
traffic patterns has received considerable attention in the past few years.
In \cite{Smit94}, the effects of file layout and fragmentation of a disk on
file system performance are measured using synthesized workloads.  Baker et
al. analyzed the user-level file access patterns in the Sprite distributed
file system using traces gathered via kernel instrumentation in a Sprite
installation \cite{Hart93,Bake91}.  The design and performance of a
log-structured file system is presented in \cite{Rose91}, including the
analysis of various cleaning policies.  The HP AutoRAID hierarchical
storage system is discussed in \cite{Wilk95}.  

%Algorithms for heuristically
%scheduling cleaning in an LFS based on idle time detection and prediction
%are discussed in \cite{Black95}.  In \cite{Neef97}, adaptive methods for
%improving the performance log-structured file systems are described and
%analyzed.


@


1.5
log
@attaaack!
@
text
@d26 7
a32 5
storage system is discussed in \cite{Wilk95}.  Algorithms for heuristically
scheduling cleaning in an LFS based on idle time detection and prediction
are discussed in \cite{Black95}.  In \cite{Neef97}, adaptive methods for
improving the performance log-structured file systems are described and
analyzed.
@


1.4
log
@Added confidence intervals.  Added On/off model section.
@
text
@d4 4
a7 2
of Leland et al. \cite{Lela94}, in which they demonstrated that Ethernet
traffic was self-similar in nature.  Further work showed that the
d11 5
a15 5
the presence of self-similarity in file system traffic.  Self-similarity in
various other types of systems (such as wide-area traffic \cite{Paxs94},
ATM networks \cite{Geor94}, variable-bit-rate video \cite{Bera95}, and
World Wide Web traffic \cite{crov95}) has been detected using similar
techniques.
d21 10
a30 10
al. \cite{Bake91} analyzed the user-level file access patterns in the
Sprite distributed file system using traces gathered via kernel
instrumentation in a Sprite installation \cite{Hart93}.  The design and
performance of a log-structured file system is presented in \cite{Rose91},
including the analysis of various cleaning policies.  The HP AutoRAID
hierarchical storage system is discussed in \cite{Wilk95}.  Algorithms for
heuristically scheduling cleaning in an LFS based on idle time detection
and prediction are discussed in \cite{Black95}.  In \cite{Neef97}, adaptive
methods for improving the performance log-structured file systems are
described and analyzed.
@


1.3
log
@fixed up as per Tim's comments - minor wordsmithing, only.
@
text
@d23 2
a24 1
including the analysis of various cleaning policies.  Algorithms for
d26 3
a28 1
and prediction are discussed in \cite{Black95}. 
@


1.2
log
@Another round of edits.
@
text
@d25 1
a25 5
and prediction are discussed in \cite{Black95}.  In this paper, we argue
that properties of self-similar traffic can be used to explain some of the
file system characteristics observed in these studies, and that these
properties should be taken advantage of when designing file systems.

@


1.1
log
@Initial revision
@
text
@d8 6
a13 15
theory and analysis techniques presented in these two papers to
demonstrate the presence of self-similarity in file system traffic.

Self-similarity in various other types of systems (such as
wide-area traffic \cite{Paxs94}, ATM networks \cite{Geor94},
variable-bit-rate video \cite{Bera95}, and World Wide Web traffic
\cite{crov95}) has been detected using similar techniques.  Work has also
been done on exploring efficient techniques for synthesizing self-similar
traffic.  In \cite{Huan95}, self-similar variable bit rate compressed video
is modeled and synthesized, and in \cite{Paxs95}, a fast Fourier transform
method for rapid and efficient synthesis of self-similar network traffic is
presented.  In this paper, we demonstrate how the synthesis of ON/OFF
traffic can be used in conjunction with measured characteristics of file
system access patterns to artificially generate file system traffic of
parameterizable load exhibiting the desired self-similar property.
d28 1
a28 1
properties can be taken advantage of when designing file systems.
@


1.1.1.1
log
@Sigmetrics paper

@
text
@@
