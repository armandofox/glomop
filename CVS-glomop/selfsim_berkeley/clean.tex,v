head	1.1;
branch	1.1.1;
access;
symbols
	pre-camera-edits:1.1.1.1
	sigmetrics:1.1.1.1
	sigmetrics:1.1.1;
locks; strict;
comment	@% @;


1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\section{Self-similarity and Idleness in File Systems}\label{cleaning_sec}

Golding {\it et al.} \cite{Gold95} have argued that idleness in a file system can
be exploited in many ways.  For example, activity during busy periods can
be offloaded to more idle periods in order to improve the responsiveness of
the file system.  Alternatively, work can be performed optimistically
during an idle period in case that work is needed during a more heavily
loaded time.  Furthermore, battery power on a portable computer can be
maximized by disabling the hard drive during idle periods.  All of these
techniques rely on identifying idleness, and predicting the remaining
amount of idle time once an idle period has been identified.  By using
knowledge of the self-similar nature of file system traffic, it is
possible to accurately detect and predict the lengths of idle periods.

In section \ref{on_off_model} we demonstrated that idle period lengths in
individual file system clients have a heavy-tailed distribution.  This
means that the probability that an idle period has length greater than or
equal to $x$ is: $ P\left[ X \geq x \right] \sim cx^{-\beta}$ with $\beta >
1$.  An implication of this distribution is that the longer one waits for
an event to arrive, the longer the future expected waiting time is likely
to be.  Mathematically, this future expected waiting time is given by the
conditional mean exceedance (CME), where we define
\begin{equation}
CME_x = E\left[X - x | X \geq x \right]
\end{equation}
for some random variable $x$ \cite{Paxs94}.  For a heavy tailed distribution,
the CME is a linearly increasing function of the observed waiting time x:
\begin{equation}
CME_x = \frac{x}{\beta - 1}.
\end{equation}
Long observed waiting times can therefore be used as a reliable predictor
of a long future waiting time.  Because aggregate file system activity is
self-similar in nature, and therefore the interarrival time between file
system events has a heavy-tailed distribution, this property is also true
for the aggregate traffic of many file system clients seen by a file
server.

Another example of a way to take advantage of idleness in a file system is
to schedule cleaning in a log-structured file system \cite{Rose91} (such as xFS
\cite{Ande95}) during idle periods.
In an LFS, data is written to disk in a log-structured fashion to achieve
high write performance and reliability.  An LFS relies on a process called
{\it cleaning} to compress partially utilized segments of the log into
a smaller number of fully utilized segments, which frees space for
subsequent log entries.  This cleaning process must be run periodically,
and there has been considerable contention about whether or not the
overhead of the cleaning process negates the utility of an LFS (see, for
example,
\cite{Selt95}, \cite{Bake91}, or \cite{Black95}).

Cleaning can either be performed on demand (such as when a log-structured
file system becomes full) or opportunistically in the background when idle
periods are detected at the file server.  In \cite{Black95} it is observed
that heuristic methods can be used to identify ample background cleaning
opportunities to nearly eliminate the probability that on-demand cleaning
is ever required.  It was observed that the distribution of interarrival
times of file system requests to an NFS server consisted mostly of small
gaps of less than a second, but that there were a noticeable number of
relatively large interarrival times.  They further observed that a long
observed waiting time for an event was a good predictor of an even longer
expected future waiting time for that same event.  The self-similar nature
of file system activity explains these phenomena completely.  The
interarrival time distributions described in
\cite{Black95} are very consistent with the heavy-tailed distributions that we
observed in both the NFS and Sprite traces.

The ON/OFF behaviour of file system clients can also be used to assist in
the scheduling of cleaners for file systems such as xFS \cite{Ande95}, in
which cleaning processes can potentially be spawned from any of a number of
hosts within a network of workstations \cite{Ande95b}.  By monitoring the
lengths of observed idle periods on a client, and by again noticing that
OFF period lengths on clients have a heavy-tailed distribution, the
remaining length of an observed OFF period can be characterized
probabilistically.  Idle periods during which a cleaner has a high
probability of executing and not interfering with the client's file system
activity can therefore be identified.  It should be noted that such a
probabilistic strategy will occasionally fail, resulting in a cleaner
executing when a client becomes active.  Such a failure may result
in a loss of perceived performance, but erroneously scheduled cleanings
should be quite infrequent.


@


1.1.1.1
log
@Sigmetrics paper

@
text
@@
