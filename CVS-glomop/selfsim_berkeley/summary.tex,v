head	1.8;
access;
symbols
	pre-camera-edits:1.5
	sigmetrics:1.1.1.1
	sigmetrics:1.1.1;
locks; strict;
comment	@% @;


1.8
date	98.03.16.19.15.47;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	98.03.13.23.53.49;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	98.03.13.11.41.40;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.11.03.10.03.11;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.11.02.00.19.12;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.10.31.23.38.36;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.10.31.01.28.09;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.10.30.21.43.25;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Multo-changes for camera ready.
@
text
@\section{Conclusions}\label{summary_sec}
 
Previous studies have demonstrated that byte or packet level network
traffic is self-similar in nature.  In this paper, we have shown that
high-level file system events also exhibit this self-similar behaviour, but
only across time scales of less than a day.  The total file system traffic
and individual classes of file system events (such as file opens, closes,
writes, etc.) seen by the file server were both observed to exhibit this
self-similar behaviour.  This ``short-term self-similarity'' was observed
in four file system traces (of a 1991 Sprite distributed system cluster, a
1994 Auspex NFS installation, a 1996/1997 instructional UNIX cluster, and a
1997 NFS installation) with significantly different characteristics.  The
load, typical application usage, tracing technique, and dates of tracing
all differed between the three traces, but the measured self-similarity
parameters were observed to be relatively consistent across all traces.

Two of the traces were then analyzed across a much wider set of time
scales, and the self-similar behaviour ceased for time scales of days,
weeks, and months.  Although burstiness did persist, the bursts began to
smooth out.  This smoothing out had the effect of showing up as very
pronounced non-linearities in the variance-time plots of the long-term
traces.
 
A proposed causative factor of short-term self-similarity, namely ON/OFF
source behaviour, was also observed for the Sprite and Auspex traces.
Individual sources of file system activity (i.e. workstations) were seen to
have the hypothesized behaviour, and an analysis of the ON/OFF period
lengths demonstrated them to exhibit the Noah effect required for aggregate
self-similar traffic.  Both the ON/OFF behaviour of individual sources and
the resulting short-term self-similar aggregate file system traffic are
intrinsic to file systems, and must be considered during the design and
simulation of file systems.  We demonstrated that this ON/OFF behaviour
could be used to synthesize a stream of file system events that show the
desired short-term self-similarity.

In conclusion, the four file system traces that we analyzed had significant
differences: the file system being traced, the method of gathering the
traces, the chronological time that the traces were gathered, the
information gathered within the traces, and the user and system
environments all differed.  Despite these differences, we found the same
short term self-similar behaviour in all three traces.  However, since we
found that this self-similar behaviour is limited to short time scales, we
must conclude that file system traffic is, strictly speaking, not
self-similar in nature.

@


1.7
log
@attaaack!
@
text
@d41 4
a44 4
short-term self-similar behaviour in all three traces.  However, we also
found that this self-similar behaviour is limited to short-term time
scales, and for this reason we must conclude that file system traffic is,
strictly speaking, not self-similar.
@


1.6
log
@Many changes to modify spin of paper.
@
text
@d5 3
a7 3
high-level file system events also exhibit this self-similarity, but only
across time scales of less than a day.  The total file system traffic and
individual classes of file system events (such as file opens, closes,
d18 3
a20 3
scales, and the self-similar behaviour was seen to cease for time scales of
days, weeks, and months.  Although burstiness did persist, the bursts began
to smooth out.  This smoothing out had the effect of showing up as very
d42 3
a44 3
found that htis self-similar behaviour is limited to fine time scales, and
for this reason we must conclude that file system traffic is, strictly
speaking, not self-similar.
@


1.5
log
@Added confidence intervals.  Added On/off model section.
@
text
@d5 18
a22 11
high-level file system events also exhibit this self-similarity.  The total
file system traffic and individual classes of file system events (such as
file opens, closes, writes, etc.) seen by the file server were both
observed to exhibit self-similarity.  This self-similarity was observed in
three file system traces (of a 1991 Sprite distributed system cluster, a
1994 Auspex NFS installation, and a 1997 NFS installation) with
significantly different characteristics.  The load, typical application
usage, tracing technique, and dates of tracing all differed between the
three traces, but the measured self-similarity parameters were observed to
be relatively consistent across all traces and across a wide range of time
periods.
d24 5
a28 5
A proposed causative factor of self-similarity, namely ON/OFF source
behaviour, was also observed for the Sprite and Auspex traces.  Individual
sources of file system activity (i.e. workstations) were seen to have the
hypothesized behaviour, and an analysis of the ON/OFF period lengths
demonstrated them to exhibit the Noah effect required for aggregate
d30 5
a34 5
the resulting self-similar aggregate file system traffic are intrinsic to
file systems, and must be considered during the design and simulation of
file systems.  We demonstrated that this ON/OFF behaviour could be used to
synthesize a stream of file system events that show the desired
self-similarity.
d36 1
a36 1
In conclusion, the three file system traces that we analyzed had significant
d41 5
a45 2
self-similar behaviour in all three traces.  As a result, we believe that
we have shown file system traffic to be self-similar in nature.
@


1.4
log
@fixed up as per Tim's comments - minor wordsmithing, only.
@
text
@d1 1
a1 1
\section{Summary}\label{summary_sec}
d25 3
a27 1
file systems.
@


1.3
log
@Another round of edits.
@
text
@d27 7
a33 7
The three file system traces that we analyzed had significant differences:
the file system being traces, the method of gathering the traces, the
chronological time that the traces were gathered, the information
gathered within the traces, and the user and system environments all
differed.  Despite these differences, we found the same self-similar
behaviour in all three traces.  As a result, we believe that we have shown
file system traffic to be self-similar in nature.
@


1.2
log
@Added tim gibson's work, modified stuff, through out other stuff.
@
text
@d10 1
a10 1
1994 Auspex NFS installation, and of a 1997 NFS installation) with
d14 2
a15 1
be relatively consistent across all traces.
d26 8
@


1.1
log
@Initial revision
@
text
@d5 10
a14 10
high-level file system events also exhibit this self-similarity.  The
total file system traffic and individual classes of file system events
(such as file opens, closes, writes, etc.) seen by the file server
were both observed to exhibit self-similarity.  This self-similarity
was observed in two file system traces (of a 1994 NFS installation and
of a 1991 Sprite distributed system cluster) with significantly
different characteristics.  The load, typical application usage,
tracing technique, and dates of tracing all differed between the two
traces, but the measured self-similarity parameters were observed to
be relatively consistent across both traces.
d17 2
a18 2
behaviour, was also observed for both traces.  Individual sources of
file system activity (i.e. workstations) were seen to have the
d21 4
a24 23
self-similar traffic.  Both the ON/OFF behaviour of individual sources
and the resulting self-similar aggregate file system traffic are
intrinsic to file systems, and must be considered during the design
and simulation of file systems.

The ON/OFF behaviour of individual clients can be taken advantage of
to produce a file system event synthesizer.  A model of an individual
client that produces ON/OFF behaviour with the parameterized statistical
properties was built.  File system open, close, and write events were
generated within the ON periods according to measured properties and
distributions of our trace data.  Finally, the traffic from a number
of such synthesized clients was combined, and the aggregate traffic
analyzed.  The analysis demonstrated that the aggregate traffic did
indeed show the same bulk properties as the traces from which the
ON/OFF model was based.

Finally, the self-similar nature of file system traffic was used to show
how to detect and predict idle period lengths.  We were able to use this to
explain previous observations about the distribution and nature of idle
periods within log-structured file systems.  This confirms that idle time
at file servers and individual clients can be used to schedule maintenance
activity (such as cleaning) with a high probability of avoiding
interference with regular file system activity.
@


1.1.1.1
log
@Sigmetrics paper

@
text
@@
