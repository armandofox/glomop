head	1.3;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.3
date	97.02.26.02.56.19;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.01.29.06.01.47;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.01.07.08.39.05;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.01.07.08.39.05;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>Scalable WWW Proxy</TITLE>
   <META NAME="Author" CONTENT="">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0Gold (Win95; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#FF0000">

<H1>Scalable WWW&nbsp;Proxy for DCNS&nbsp;Users</H1>

<P>Build a scalable, fault-tolerant version of the WWW proxy that does
dynamic load balancing on a NOW.</P>

<P><H2>Who:</H2>
<ul>
  <li> <strong>Armando Fox:</strong> architecture, front end,
       multithreading toolkit,  
       system monitoring.
  <li> <strong>Steve Gribble:</strong>&nbsp;partitioned Harvest, trace
       collection and playback engine, distillers, 
       cache measurements galore.
  <li> <strong>Yatin Chawathe:</strong>&nbsp;proxy-transcoder manager
       (load balancing and distiller spawning), distributed fault
       tolerance for distillers and PTM.
  <li> <strong>Anthony Polito:</strong> User preferences database
       support, HTML munging magic.
  <li> <strong>Ben Ling and Andrew Huang:</strong> Client interface, 
       including user preferences manipulation.
</ul>

<H2>Milestones</H2>

<Strong>10/29/96</Strong>
<UL>
<LI>Partitioned Harvest library with dynamic repartitioning<BR>
DONE (Steve)</LI>

<LI>Multithreaded front end dispatcher and socket listener<BR>
DONE&nbsp;(Armando)</LI>

<LI>Standardized front-end/distiller/PTM-stub interface and &quot;distiller
writing library&quot;&nbsp;(Yatin/Armando)<BR>
Date:</LI>

<LI>Spawning of remote distillers and communicating with them from PTM<BR>
DONE&nbsp;(Yatin)</LI>
<BR>
<BR>
</UL>

<Strong>11/08/96</Strong>
<UL>
<LI>Fast HTML lexer/munger now works correctly, and was successfully
integrated with Yatin's distiller front-end (libdist) that provides a
producer/consumer thread pair, registers distiller with PTM, etc. 
(Armando)</LI>

<LI>Some progress on cache-naming problem (how to name multiple
representations in cache and lookup "nearby" ones when you miss on the
desired one).&nbsp;(Armando)</LI>

<LI>HTTP front end still under construction, but enough of it is there for
Steve to build partitioned Harvest experiment.&nbsp;(Armando)</LI>

<LI>Sketchy design of "universal monitor" that will allow remote processes
in a distributed system to send "report packets" to a GUI.  The
interface to this will be part of the tcs proxy.&nbsp;(Armando)</LI>

<LI>Integration and testing of Harvest PUT operation.<BR>
DONE&nbsp;(Steve)</LI>

<LI><B>Obstacles:</B> pthreads implementation for Linux is not fully 
POSIX compliant.&nbsp;(Steve)</LI>

<LI><B>Critical path:</B>&nbsp;(Steve)</LI>
<UL>
<LI> ensuring client-side library API is sufficient </LI>
<LI> building/testing image distillers </LI>
<LI> stress-testing Harvest partitions with client-side traces </LI>
</UL>

<LI>Distiller communication layer (front-end - libdist)
works. (Yatin)</LI>
<LI>Proxy front-end communication and distiller-cache layers
work. Interface between the proxy front-end and the communication stub
layer is defined. Need to create a libproxy.a for Armando to link his
code with. (Yatin)</LI>
<LI>PTM can now accept requests from the proxy and automatically spawn
distillers upon demand. (Yatin)</LI>
<LI><B>Need to do:</B> (Yatin)</LI>
<UL>
<LI>Integrate proxy and distiller code with Armando's code.</LI>
<LI>Load measurements on distiller.</LI>
<LI>Add code to PTM for spawning distillers across the NOW.</LI>
<LI>Work out details of selecting one of several possible distillers
with Armando.</LI>
<LI>GUI for PTM status reports and control.</LI>
<br><br>
</UL>
</UL>

<Strong>11/15/96</Strong>
<UL>
<LI> The front-end thread utility and harvest library were integrated
and a partitioned harvest web cache is up and running. (Steve)

<LI> A complete path from the front-end to a remote distiller and back
(via the PTM if necessary) is working. Even without optimizations and
without the fast network stack, it's encouragingly fast. (Armando and
Yatin)

<LI> <B>To do:</B> Build the playback engine for web traces. (Steve)

<LI> <B>Critical path:</B> Pthreads on Linux, fast sockets
<BR><BR>
</UL>


<Strong>11/23/96</Strong>
<UL>
<LI> Playback engine: built timed scheduler/dispatcher core. (Steve)

<LI> Finished collection of traces. (Steve)

<LI> Got pthreads working on Linux. (Steve)

<LI> Added code to the PTM to detect multiple copies of the PTM and die
gracefully so that only one PTM exists at all times. (Yatin)

<LI> Added fault-tolerance mechanisms to the PTM stub to automatically
spawn a new PTM if none can be found. (Yatin)

<LI> Enhanced the load monitoring agent to use a standardized mechanism
for reporting information and running arbitrary scripts to display that
information. There is a utility in the load monitor now to display log
messages. Need to add a mechanism to display charts (for load
information). I tried looking at blt_wish, but it seems like it only
works on Tk4.0. (Yatin)

<LI> <b>To do:</b> Extract per-user traces from all traces. Finish
playback engine. (Steve)

<LI> <B>Critical path:</B> Fast sockets/GAM integration.

<LI> <B> Problems: </B> The PTM code doesn't seem to work on
Linux. Maybe a problem with my code. I wonder whether there is any
subtleties in the Linux pthread implementation that might be causing
these problems. Need to look into that. (Yatin)
</UL>

<strong>12/13/96</strong>

<p>Trying to put the pieces together.<br>
Major bugs found in PTM:</p>
<ul>
  <li> Armando says: periodic core dump in ptm stub, inside a Linked
       List routine 
       (InsertAfter, or something like that).  i had to use dbx to
       figure that
       out.  it wasn't doing symbol demangling, so that's as close as i could
       come.  (did you thread-safe the linked list etc. routines?)
  <li> steve changed test_proxy.cc to send gif's, to test the
       gif_munger.  he often sees a log message "bad magic packet format" from
       the ptm, requiring him to re-run.  i also see this when running
       end to end.
</ul>

Minor bugs:
<ul>
  <li>if the ptm tries to spawn a distiller and fails (times out),
       the forked process is left as a zombie.  not a good thing....
       Rectified! (Yatin)
</ul>

Desiderata/Wish list:
<ul>
  <li> if you want to output debugging info to stderr, use
       the proxy_debug_k() macros (1 <= k <= 5, i think) in
       debug.h.  i can make this file be included in config.h if
       we want.  this allows debugging to be SELECTABLE.  i was
       trying to debug the front end and was deluged with
       "Beaconing" messages, several lines per second, from the
       ptm stub - badness.  eventually these will output to the
       tcl monitor.
  <li> yatin: a couple of your source files in ptm/ give the warning:
       "unsigned < 0 is always false".  you might want to check this.
       ( also, the makefiles do not enforce proper dependencies on defines.h -
       i changed theDEBUG() macro in there to make it quiet, yet i had to 'make
       clean' to get a recompile.)
  <li> it helps to put a "tags" target in your Makefile.  it should collect
       all of the .c and .h files to write a tags table.  thusly:
       <pre>
       tags: 
              etags src/*.c include/*.h
       </pre>
  <li> The GUI monitor should have a "Kill" button for each
       entity.  To make this work, each entity includes its
       PID when it sends a message to the monitor, and the
       button sends "kill -HUP", waits 5 seconds, then
       sends "kill -KILL" to the PID.  (This allows the
       process time to clean up gracefully before kill  -9)
  <li> If you iconify (using the window manager) an entity's
       main window in the monitor, the Withdraw/Restore
       button's state is not updated properly.<br>
       <i>Yatin's comment</i>: Withdraw actually removes the window
       from the display (unlike iconify) - that's why the button does
       not change. It wouldn't be too difficult to change that behavior 
       to iconify/deiconify. I don't want to touch that right now, since
       I have no way of testing my changes (no PPP connection i.e. no
       usable X server)
</ul>

Steve's progress:
<ul>
Accomplishments:
<ul>
  <li> tracked down and resolved many contributing factors to FD overload in
    frontend, including bogus trace entries and low priority FE connect
    thread
  <li> added many features to playback engine - almost usable by random people
  <li> identified unresolved bugs, namely front-end seg faulting, wierd TCP
    states on some connections to harvest partitions
</ul>

Things on the critical path:
<ul>
  <li> thread-safe fast sockets/GAM
  <li> distillers
  <li> thread-safe fast sockets/GAM
  <li> getting some dedicated NOW nodes so we can begin real testing
  <li> thread-safe fast sockets/GAM
  <li> setting up myrinet for our dedicated nodes
  <li> thread-safe fast sockets/GAM
</ul>

</ul>

Yatin's progress
<ul>
<li> Rectified the fork() zombie problem with PTM.
<li> Corrected other minor bugs
<li> Major obstable - my connection to Berkeley is really pathetic! 
Can't do much about that.
</ul>

</UL>


<strong>1/24/97</strong>

Accomplishments of various kinds:

<ul>
  <li> Armando: All significant monitor bugs/desiderata implemented, except for
       Kill button; front end now uses monitor.
  <li> Steve: Cache partitions now fault tolerant, both death and birth
       are correctly handled (though birth requires a signal to be
       manually sent to cache library)
  <li> Anthony: prototype of Java ImagePane (drag region for refinement
       with cookies) working, and HTML munger largely retrofitted to
       insert correct cookie info.
</ul>

<strong>1/31/97</strong>

<ul>
  <li> Here is the <a href="sosp_todo.html">SOSP to-do list</a>.
  <li> Armando/Yatin: Interface change to allow distillers to return a
       different data type.  Used now to turn GIFs into JPEGs, will be
       used later to do "distiller graphs" (composable distillers).
</ul>

<strong>2/13/97</strong>

<ul>
  <li> Armando: Thread state monitoring added to monitor, has proven very useful
       for debugging and visualizing front end behavior.
  <li> Anthony: User prefs database implementation with GDBM working (MT-safe
       read, MT-unsafe write, hash table the size of the working user
       population means all reads are main memory).
</ul>

<strong>2/21/97</strong>

<ul>
  <li> Armando: HTML munger modified to make it <i>much</i> easier to
       manipulate complete parsed tags.  "Magification" inserted into
       HTML munger to allow simple refinement ("fetch original") and to
       indicate to distillers when they must rescale an image.
  <li> Anthony: setting of user prefs by HTML form completely works and
       is integrated with front end.  User prefs changes are accepted by
       a single separate thread.
  <li> Ben and Andrew come on board to work client interface issues.
</ul>

<P>
<HR WIDTH="100%"></P>

<ADDRESS><A HREF="mailto:fox@@cs.berkeley.edu">fox@@cs.berkeley.edu</A>,
<A HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</A>, 
<A HREF="mailto:yatin@@cs.berkeley.edu">yatin@@cs.berkeley.edu</A><BR>
</ADDRESS>

</BODY>
</HTML>
@


1.2
log
@added SOSP todo
@
text
@d17 13
a29 6
<strong>Armando:</strong>&nbsp;front end, multithreading toolkit, 
fault tolerance guy.<br>
<strong>Steve:</strong>&nbsp;partitioned Harvest, distillers, 
cache measurements galore.<br>
<strong>Yatin:</strong>&nbsp;proxy-transcoder manager (load balancing
and distiller spawning).
a30 1
</P>
d272 23
@


1.1
log
@Initial revision
@
text
@d243 25
@


1.1.1.1
log
@
@
text
@@
