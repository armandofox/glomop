head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.01.07.08.39.05;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.01.07.08.39.05;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
    <TITLE>Wink visit 5/20/96</TITLE>
</HEAD>
<BODY>
<H1>Armando's Visit to <A HREF="http://www.wink.com/">Wink</A>, 5/20/96</H1>
<UL>
<LI><A HREF="#anchor450413">Dramatis personae
<LI></A><A HREF="#anchor449222">Wink strategy
<LI></A><A HREF="#anchor449382">Wink architecture
<LI></A><A HREF="#anchor449632">State of the products
<LI></A><A HREF="#anchor449808">Where we fit in
<LI></A><A HREF="#anchor450078">What we get in return
<LI></A><A HREF="#anchor450206">Wink and GeoWorks
<LI></A><A HREF="#anchor450518">Bottom line</A>
<li> <a href="#steve">Steve Gribble's observations</a>
</UL>
<HR>
<H1><A NAME="anchor450413"></A>Dramatis personae</H1>
People I met:
<UL>
<LI><A HREF="mailto:greg.clark@@wink.com">Greg Clark</A>, Director of wireless
sales; came 5 months ago from AT&amp;T Wireless (now Lucent) and is trying
to pitch ICAP to wireless providers
<LI><A HREF="mailto:brian.dougherty@@wink.com">Brian Dougherty</A>, president
and big shareholder in Geoworks, extremely technically literate
<LI>Others: Matt Trifiro, VP Marketing; Pat Ransil, Director of Eng (who
we already knew from ILP); Dave Brubeck, recent Berkeley MS who is a code
guy and valuable contact because he gave me the technical scoop on stuff
and called a spade a spade when needed.
</UL>
<H1><HR><A NAME="anchor449222"></A>Wink Strategy</H1>
Their strategy is to put interactivity into existing <I>high-volume</I>
products and devices.  High volume means TV's/set-top boxes, low to midrange
cel phones, pagers, etc., way lower than GeoWorks.  Therefore they understand
that the traditional TCP/IP+Java is out of the question.  To this end, they've
developed two things:
<UL>
<LI>ICAP, a content-authoring and scripting language for creating simple
interactive apps; it's cross-platform (content is authored in a platform-independent
way) and byte-miserly, and the engine has been ported to various hardware.
 I saw a demo of the engine on a General Instruments set-top (cable converter)
box.  Geos port of the engines is ready for alpha, Newton port &quot;soon&quot;.
 ICAP &quot;applets&quot; are basically forms in which the widgets have
scripted actions attached to them.<BR>
The Wink engine (ICAP bytecode interpreter) relies on OS if possible for
services like connection to the outside world and user input, etc, but for
devices lacking this (such as TV's), they just write the few necessary device-specific
drivers (modem driver, remote control IR reader) themselves.  Fine with
me since we don't want to be in the business of rewriting the client side
for each new client, which is precisely <I>their </I>business.
<LI>An architecture for delivering content to TV's via set-top boxes or
to &quot;Wink-ready&quot; TV's.  Several Japanese TV manufacturers wil be
selling, this fall, TV's with integrated Wink engines and 2400 baud modems.
 The architecture of the content delivery system is described below.
</UL>
Their paradigm is that content authors will create content specifically
for, say, interactive TV; ordering stuff, access to weather and stock services
and the like.  They see us as a valuable partner for two reasons:
<UL>
<LI>We understand how to deal with low bandwidth and limited clients (the
graphics distillation is what got Pat's attention originally)
<LI>We can provide the means to access at least some Internet content (WWW,
email) via their architecture and ICAP, giving a huge leverage bootstrap
of content to their system
</UL>
<H1><HR><A NAME="anchor449382"></A>Wink Architecture</H1>
The <I>application server</I> delivers one or more ICAP apps to a set-top
box or TV during vertical-blanking intervals.  It lives at the TV station
and its content and schedule are controlled by humans.  I saw a live demo
of the app server, a Tcl/Tk/C app running under Solaris which allows you
to schedule the delivery of various apps either by time slot or by tying
them to specific programs or commercials.  (E.g. when the Sports Illustrated
commercial airs, instead of showing a phone number, have a place where the
user can type their cerdit card number and subscribe.)  Applets can be simple
text/button type widgets overlaid on the TV program, or they can be &quot;virtual
channels&quot;, ie they take over the TV screen and you don't see a picture
behind them. Some application servers serve applications that read time-sensitive
data (e.g. airline schedules, traffic info, weather, etc.); they have a
TCP/IP based API that lets the app server back-end communicate with another
arbitrary server (the &quot;real&quot; content server).  I saw a demo of
this using American Airlines online flight info and sales, and CNN.<BR>
<BR>
The <I>response server</I>  is the thing that collects data from the user.
 For set-top boxes in the existing cable infrastructure, they're looking
at a <B><I>very</I> high latency</B> (several hours) store-and-forward model:
a few minutes or hours after you enter your credit card number, the set-top
box transmits your order to the response server.  For example, the General
Instruments cable box actually implements a very slow back-channel over
the (broadcast) cable, which GI currently uses to collect pay-per-view tokens
for cable providers.  The response server is <I>not</I> for interactive
apps.  The response server and app server may be collocated but don't have
to be.  Note that input from the user depends on the platform: there may
be a remote control with numbers only, an alpha keyboard, a mouse-type cursor,
etc.  The Wink engine takes care of all this; e.g. on a regular TV, a particular
button would appear with a digit next to it, indicating what to press on
your TV remote to click on the button, whereas on a set-top box with a mouse-type
cursor, the traditional GUI is used.<BR>
<BR>
The <I>online server</I> is the interactive part: it controls a low-bandwidth
(say 2400 baud) bidirectional <I>point-to-point</I> connection from the
user to the TV station (or whatever).  It is used to upload data from the
user in real time, or handle request/response transcations for interactive
applets.  The upcoming Japanese TV's will have built-in 2400 baud modems
for this; they're trying to get GI to do the same (or at least provide a
port for an external modem), but haven't sold them on it so far.  Not all
installations are expected to have online servers; they're evidently having
trouble convincing cable providers of the value of this.  They claim (legitimately)
that there is still a big market in &quot;self-contained&quot;, non-real-time-interactive,
platform-specific content provision such as the &quot;hot advertisement&quot;
sales, weather info, etc.<BR>
<BR>
A Wink applet can determine whether it's talking to a response server or
online server, and thus determine what to do with user data.  The Wink authoring
environment resembles Visual Basic.  Its output scripts are teeny - I watched
someone build an app with some text and bitmaps and a button that jumps
between 2  screens, and the output size was 151 bytes.
<H1><HR><A NAME="anchor449632"></A>State of the products</H1>
Summary of how much of this is real:
<UL>
<LI>Japanese TV makers will start selling sets in volume by fall containign
Wink engine and 2400 baud modem.  I saw a couple of these set up at the
Wink office for testing, i.e. I saw a full operational system including
the app server with a couple of simple apps, the unit that merges video
content and ICAP content (a commercial piece of a equipment; there are a
couple of differnt ones in wide use by TV houses), and an ICAP-capable TV
running the apps.
<LI>Several companies developing content, including Matsushita, IBM, CNN,
Weather Channel, American Airlines, others.  I saw demos of Weather Channel
and AA applets.
<LI>General Instruments will deploy its set-top box containing Wink engine
to cable customers in &quot;production mode&quot; in Cincinnati late this
year; agreement already signed with Time Warner Cable. Other cities to follow
(they need to engineer the agreements with cable providers)
<LI>Scientific Atlanta port of Wink not done yet (SA and GI together represent
~80% of cable box market)
</UL>
Wink also wants to put its engine in smart pagers and &quot;midrange&quot;
cel phones; they see the Nokia 9000 as a neat product but too expensive
to hit critical mass.  They envision a much larger population of smart pagers
and less-capable cel phones, e.g. with just a little more screen area. 
They can fit their engine and GUI libraries for a typical platform in &lt;128K
RAM.
<H1><HR><A NAME="anchor449808"></A>Where we fit in</H1>
<UL>
<LI>Bringing the WWW to TV's: on the fly HTML to ICAP translation.  I thought
about this and it makes some sense to me.  ICAP might be a good choice for
the &quot;richtext/layout&quot; language we've been looking for, esp. since
they (Wink) are doing the work of porting the engine itself to various platforms,
so we wouldn't have to.  Both content distillation and HTML reformatting
come into play: the Wink engine assumes a fixed-size client screen, and
scrolling the whole screen isn't possible (though scrolling listboxes are
provided).  However, we'd have the benefit of being able to output ICAP,
which takes care of some of the layout issues and lets us use tokenized,
Huffman-compressed richtext rather than HTML.
<LI>Email to your TV:  pretty easy to do, especially since you'd just be
using the TV and ICAP infrastructure as a gateway to your email server which
is totally separate.  This is an app I'd love to have while traveling. 
They claim their is huge demand  among their customers for both email and
Web access.
<LI>&quot;What would you guys like the ideal client to be able to do?&quot;
 We can help them determine what additional stuff needs to go into ICAP
to provide the functionality that we'd like a proxy client to have.  They
already have some stuff slated to add to ICAP to support HTML forms.  I
see this one as potentially the most helpful for us.
</UL>
<H1><HR><A NAME="anchor450078"></A>What we get in return</H1>
<UL>
<LI>Trial by many users.  They'd like to put together a demo of Wink-plus-Internet
services, enabled by distillation, sometime around end of this year or early
next spring.  This is less aggressive than Geoworks' timeline, but if the
stuff could be deployed to actual cable customers, that could only help
us.  They claim to be talking aggressively to telephony/pager equipment
manufacturers to put ICAP engines in those devices, but I don't think they
have any design wins there yet, except that they're putting it on Geos.
<LI>Exposure. We'd insist on a logo or some kind of recognition.
<LI>If we can influence the evolution of the ICAP content language, we may
be able to adopt it as our client language of choice, esp. if we can convince
them to do ports to other PDA-like devices.  They are already planning a
Newton version but I don't know what the timeline is.  This could potentially
be a big point of leverage - a big obstacle for us has been the various
and motley development environments, each with its own quirks.  If we can
get them to put what <I>we </I>want in ICAP, and they are already doing
ports to N different clients.....
</UL>
<H1><HR><A NAME="anchor450206"></A>Wink and GeoWorks</H1>
The president of Wink is also the largest single shareholder of Geoworks
and is on Geoworks' board of directors.  (Surprise for me, anyway.)  The
companies compete in some areas but not most, because they are addressing
what Wink claims are relatively non-overlapping markets (for now), and Geoworks
would prefer to concentrate its energy on OS's.  (That's what Wink says;
I haven't verified with Geoworks.)<BR>
<BR>
Geoworks and Wnk have been discussing some collaboration around the Nokia
9000, and Geoworks knows that Wink is interested in us.  Wink knows that
Geoworks is interested in HTML segmentation, etc, for the Nokia browser;
but Wink would rather see that stuff work with ICAP running on top of Geos,
since ICAP implies platform-independence.  At any rate, we need to figure
out just what the nature of these collaborations would be.  The &quot;feature
list&quot; I got from Louis Lao basically is the same as what would be required
for Web browsing from your TV, except that we'd have to generate all our
output in HTML.  This is not terrible, but we all agree that HTML is not
the ideal content language for our needs, even for a client like the Nokia
which is relatively sophisticated by cel phone standards (it's a full PDA,
yet one of our goals from day one has been to enable some degree of connectivity
even on pager-class clients).
<H1><HR><A NAME="anchor450518"></A>Bottom line</H1>
My opinion: we should work with these guys.  Their &quot;vision&quot; for
serving Internet content to really small devices makes a lot more sense
to me than Geoworks's does.  Geoworks has similar requirements, but I don't
know what they're buying by tying themselves to HTML, esp. if ICAP can be
gotten to run on Geos.<BR>
<BR>
Interstingly, even Wink thinks that Internet access of whatever degree will
be good icing on the cake, but not necessarily the compelling reason they'll
be able to sell their product.  I think a compelling demo might influence
this view somewhat.<BR>
<BR>
We really need to discuss what the relationship between us, Wink, and Geoworks
will be both short and long term.  Wink has an integrated story that (to
me) hangs together, and they have working hardware and agreements in place.<BR>

<hr>
<h1><a name="steve">Steve's Observations and Armando's replies</a></h1>

<ol>
  <li> Their entire story hinges on ICAP, even though the bandwagon
       seems to be Java.  What will be the impact of ICAP and Wink,
       and who in the world besides us would be using it?<br>

       It's true that ICAP is their linchpin.  I pressed them pretty
       hard about ICAP vs. Java.  The main benefits of ICAP
       seem to be  (a) it's <b>much</b> lighter weight than
       Java and will run where Java does not, (b) they are committed to
       doing the 
       ports of the interpreter and library, and ports <i>exist now</i>
       for interesting, lightweight, high-volume devices.  The only Java
       ports that exist are for PC's, which are less interesting to us.
       If Java were available now on low-end devices, things might be
       different; but as the Wink guys point out, it's hard to sell
       Java to manufacturers of high-volume, razor-thin-margin devices 
       such as TV's ("pico-Java" CPU will require 200-300K RAM for the
       interpreter and a fairly rich runtime, even without GUI libs)
       but supporting ICAP costs only a couple of dollars
       in hardware (&lt;128K RAM and a puny CPU, which most set-top
       boxes already include as a microcontroller).<br>

       That said, it could be that once the commercial value of supporting
       interactive content on such devices is established, maybe Java
       will leapfrog ICAP.  But even if that process began tomorrow,
       deployment could be at least a couple of years off: no one has
       ironed out the details of actually getting Java to run on
       consumer devices, let alone providing easy to use content
       authoring software.<br>

  <li> Is it realistic to expect that ICAP will be
       powerful enough (even with our influence) to implement a full GloMop
       layer? <br>

       No, and I'm not sure it ever will be.  But I think not all devices need
       the full GloMop layer functionality, they just need 
       a standardized interface and protocol to the
       proxy.  I think we should layer GloMop and distinguish
       between GloMop "lite" (for pagers et al.) and "full
       GloMop" (PDA/laptop implementation) - this is one of the
       suggestions that came out of the FX walkthrough.  ICAP is
       probably suitable for GloMop Lite.

  <li> If we were to take on this project, would we be able to fit it into the
       overall Daedalus picture?<br>

       Not likely, at least given the scope of the project as I now
       understand it.  But the same is true of Geoworks and to a lesser
       extent Pythia.  We should continue tight integration
       with Daedalus because mobile computing is a prime target area for
       our work, but it is not the only area.  I think it's fine to
       pursue collaborations that don't directly touch Daedalus as long
       as they don't cause us to stray far away from our research
       agenda.  I don't believe the ICAP stuff is so technically involved  that
       this danger is present, and I see it as potentially high payback.
</ol>
       
<HR>
<ADDRESS><A HREF="http://www.cs.berkeley.edu/~fox">fox@@cs.berkeley.edu</A></ADDRESS>
</BODY>
</HTML>
@


1.1.1.1
log
@
@
text
@@
