head	1.9;
access;
symbols
	release:1.9
	Release:1.8;
locks; strict;
comment	@# @;


1.9
date	95.10.25.03.00.09;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	95.10.18.05.20.12;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	95.10.18.03.08.55;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	95.10.13.03.19.25;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	95.08.18.21.45.19;	author dgourley;	state Exp;
branches;
next	1.4;

1.4
date	95.08.18.08.12.33;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	95.08.18.00.08.10;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	95.08.17.08.58.04;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	95.08.17.06.59.31;	author fox;	state Exp;
branches;
next	;


desc
@@


1.9
log
@made gm_mail  object oriented, sort of.  (not gm_imageGif, yet.)  hacked
gm_mail to bound max # of bytes sent to ML.  gm_mail code REALLY needs
to be cleaned up, it's a mess.
@
text
@#
#  gm_aux.pl
#
#  Auxiliary functions
#######################################################################

package aux;

%DirStack = ();
@@Tempfiles = ();

###########################################################################
#  cleanup
#
#  Clean up auxiliary services, etc. when proxy is exiting
###########################################################################

sub cleanup
{
    unlink @@Tempfiles;
}

###########################################################################
#   read_config
#
#   read from the config file
###########################################################################

sub read_config
{
    #
    #  Read configuration options from config file
    #
    my $ConfigFile = shift;
    my %Config = ();
    
    unless (open(CFG, $ConfigFile)) {
        &aux'log("Open $ConfigFile: $!");
        return 0;
    }
    while (<CFG>) {
        next if /^#/;
        next if /^\s*$/;
        if (/^\s*(\S+)\s+(.*)$/) {
            local($arg) = $2;
            eval "\$Config{$1} = $arg";
            &aux'log("Error in $ConfigFile: $_\n"), return 0
                if $@@;
            next;
        }
        &aux'log("Bad line in $ConfigFile: $_\n");
        return 0;
    }
    close CFG;
    return %Config;
}
#######################################################################
#   pick_strings
#
#  Given a string such as:  s1 #s2##s3#, returns the list s1,s2,s3.  If s1 is
#  present, whitespace must appear after it.
#  the '#'s
#  can be any matched nonalphanumeric characters that don't occur in the
#  strings themselves. 
# 
sub pick_strings {
    local($_) = shift;
    local(@@result) = ();
    local($delim) = '';

    
    # chop off initial string and whitespace.  Since in the process of matching
    # against the nonalphanumeric delimiter we end up chopping it off, glue it
    # back on as well.
    
    push(@@result, $1), $delim = $2, $_ = "$2$_"
        if s/(\S+)\s+(\W)//;
    
    # repeatedly look for occurrences of #s# in remainder of string.

    eval "push (\@@result, \$1) while (s/^${delim}([^$delim]+)${delim}//)";

    # return remainder of string, and result array.

    return ($_, @@result);
}

###########################################################################
#  Make temp file name
###########################################################################

sub tempfile {
    my $self = shift;
    my($pkg, $filename, $line) = caller;
    my($filename) = "/usr/tmp/${pkg}.$$";
    my($x) = -1;
    my($file) = '';
    
    $x-- while -e ($file = join('',$filename,$x));

    push(@@Tempfiles, $file);
    return $file;
}    

###########################################################################
#  pushd and popd
###########################################################################

sub pushd {
    my($obj, $dir) = @@_;
    local($cwd);
    chop($cwd = `/bin/pwd`);

    if ($dir) {
        if (chdir $dir) {
            push(@@{$DirStack{$obj}}, $cwd);
            return 1;
        } else {
            return 0;
        }
    } else {
        # try changing to home dir
        if (chdir) {
            push(@@{$DirStack{$obj}}, $cwd);
            return 1;
        } else {
            return 0;
        }
    }
}

sub popd {
    my($obj,$dir) = @@_;

    local($newdir) = pop @@{$DirStack{$obj}};

    return 0 unless $newdir;
    return 0 unless chdir $newdir;
    return 1;
}

#######################################################################
#  Logging
#######################################################################

sub log {
    print STDERR "$$: ";
    printf STDERR @@_;
    print STDERR "\n";
}

sub debug {
    return unless $main'Debug;
    &log(@@_);
}

sub status {
    # this routine should print a status msg in a console window or something
    # where progress is monitored in real time
}


1;
@


1.8
log
@Mail works again!
@
text
@d9 14
d97 3
d101 3
a103 1
    $x-- while -e join('',$filename,$x);
d105 31
a135 2
    return join('',$filename,$x);
}    
d137 4
@


1.7
log
@auth and proxy now totally separate.
@
text
@d74 16
d95 1
a95 1
    printf STDERR "$$: ";
@


1.6
log
@objectified and cleaned up, plaintext mail may be working now.
@
text
@d8 35
@


1.5
log
@stupid emtry
@
text
@a38 39
###########################################################################
#  Collect document locator info from an incoming request.
###########################################################################

sub getdocloc {
    local(%req) = ();
    local($reqtext) = '';
    local($attrib);
    # According to bytestream protocol, format of DocLocator is a multiline
    # request:
    #   GET #docpath##protocol#
    #   TYPES #t1#t2# ...
    #   MAX max
    #   ID id
    #   END
    #
    #  Start by picking up all request lines, until END line.

    $req{docloc} = $reqtext = shift;
    
    ($attrib = $1) =~ tr/A-Z/a-z/, $req{$attrib} = $2, $reqtext .= " $_"
        while (($_ = &gm_pconnect'readsock()) =~ m/^(\S+)\s+(.*)$/);
    &aux'log("WARNING: No END line for request, continuing: %req")
        unless ($_ =~ /^end/i);

    if (!defined $req{docloc}
        || !defined $req{types}
        || !defined $req{max}
        || !defined $req{id}) {

        local($", $,) = (',',',');
        &aux'log("Bad request: '$reqtext'");
        &gm_pconnect'send_error($req{id}, "Malformed request");
        return ();
    } else {
        return ($req{docloc},$req{types},$req{max},$req{id});
    }
}

@


1.4
log
@Uplink works! woo hoo!
@
text
@d88 5
@


1.3
log
@added structs.pl package
@
text
@d45 2
a46 2
    local($docloc, $types, $max, $id);
   
d57 1
a57 1
    $req{docloc} = shift;
d59 2
a60 1
    $req{$1} = $2 while (($_ = &gm_pconnect'readsock()) =~ m/^(\S+)\s+(.*)$/);
d70 1
a70 1
        &aux'log("Bad request: %req");
d74 1
a74 1
        return ($docloc,$types,$max,$id);
@


1.2
log
@appears to work for sending TOC and incoming mail
@
text
@d39 38
@


1.1
log
@added pgetdoc
@
text
@d7 1
d46 1
@
