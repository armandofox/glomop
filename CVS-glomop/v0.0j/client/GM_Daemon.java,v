head	1.2;
access;
symbols
	initial:1.1.1.1
	dgourley:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.08.17.06.52.14;	author dgourley;	state Exp;
branches;
next	1.1;

1.1
date	95.08.06.22.46.05;	author dgourley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.08.06.22.46.06;	author dgourley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@took out dumb LinkLoader
@
text
@/*
 *
 * GM_Daemon.java
 *   The Daemon class, it defines all the gm_c_proto methods.
 *
 * $Date: 1995/08/06 22:46:06 $
 *
 * Revision: $Id: GM_Daemon.java,v 1.1.1.1 1995/08/06 22:46:06 dgourley Exp $
 *
 */

package GloMop;

import net.*;
import java.lang.*;
import java.io.*;


/** 
 * The Daemon class provides the interface to the Proxy and provides the means
 * to fetch documents.
 */
public class GM_Daemon extends Object {

  /**
   * The class constructor. Currently does nothing, but if member fields are added
   * they should be initialized here.
   */
  public GM_Daemon() {

  }

  /**
   * Establish connection to proxy.
   */
  public int ConnectProxy(String proxyAddr, String returnPath, String idString) {
    return 0;
  }

  /**
   * Disconnect from proxy.
   */
  public GM_Error DisconnectProxy(int connId) {
    return null;  // No error.
  }
				    
  /**
   * Authentication.
   */
  public GM_Error Auth() {
    return null; 
  }

  /*
   *  ISSUE: Is there value in talking to more than one proxy at a time?
   */

  /**
   *  Register the list of types known.  Called once after connection, may
   *  be called again later to update the list.
   */
  public void RegisterTypes(GM_TypeList t) {

  }

  /**
   *  Initiate a "get document" request.
   * <p>
   *  Args:
   * <p>
   *  DocLocator structure: tells proxy how to locate the document in a
   *  protocol-dependent way.  E.g. for HTTP, DocLocator may contain a
   *  URL; for GMail, it may contain the name of the mailspool directory
   *  and host; etc.
   * <p>
   *  QosPrefs structure: specifies desired QOS params for this document,
   *  details TBD.
   * <p>
   *  AcceptTypes list: a list specifying which types are acceptable as
   *  return.  If null, any type previously registered with proxy is OK.
   * <p>
   *  annotation: a descriptive comment about the request, stored locally
   *  so client can review what requests are outstanding.  not used by the
   *  proxy. 
   * <p>
   *  callbackThresh: the number of document "chunks" that must arrive
   *  before the callback procedure that receives the document is able to
   *  do anything useful.  "Chunks" are defined relative to each datatype.
   * <p>
   *  callbackProc: the procedure that should be called as soon as
   *  CallbackThresh "chunks" of the document have arrived.  The
   *  CallbackProc will continue to be called as new chunks arrive.  The
   *  callback procedure and chunk threshold between calls can be changed
   *  after the first  callback.
   * <p>
   *  maxChunks: the maximum number of chunks to prefetch initially.  By
   *  convention the first chunk is the document table of contents.  Some
   *  symbolic constants are available to specify things like "all
   *  chunks", "as many as will fit in some existing buffer", etc.
   * <p>
   *  buffer: if non-NULL, specifies where to store incoming chunks; if
   *  NULL, GM will allocate the buffer space.  User-supplied buffer space
   *  should be large enough to hold maxChunks.
   * <p>
   *  Returns request ID that will be passed to the callback proc later to
   *  identify the document.  If the request ID is null, an error
   *  occurred.  (TBD: an "errno"-like mechanism in which information
   *  about the error is stored.)
   */
  public int GetDoc(GM_DocLocator loc, GM_TypeList types, GM_QosPrefs qos, String annotation,
		     int callbackThreshold, int maxChunks, byte buffer[]) {
    
    NetworkClient client = new NetworkClient();   // the client itself
    
    /*
     * This is hardcoded for now until I put the host stuff somewhere.
     */
    String host = "espresso.cs";
    int port = 1998;

    try {
      client.openServer(host, port);
    } catch(Exception e) {
/*
      MessageDialog error = new MessageDialog((Frame)f, "ERROR - Proxy Connection",
                                              "Connection Refused", MessageDialog.ERROR_TYPE,
                                              1, true, null, null, null, null);
      error.show();
*/
      System.out.println("ERROR - Proxy Connection - Connection Refused");
      return -1;
    }

    DataInputStream dis = new DataInputStream(client.serverInput);
    PrintStream ps = new PrintStream(client.serverOutput);
    
    ps.println("GET #" + loc.doc_path + "##" + loc.doc_protocol + "#");
    ps.flush();
    
    /*
     * Empty for now since we are just doing text mail.
     */
    ps.println("TYPES");
    ps.flush();

    ps.println("THRESH " + callbackThreshold);
    ps.flush();
    
    ps.println("MAX " + maxChunks);
    ps.flush();

    /*
     * Here I assume that in the creation of the doc Locator a new id is created
     * that is unique. This could be moved internal to the daemon.
     */
    ps.println("ID" + loc.doc_reqid);
    ps.flush();

    ps.println("END");
    ps.flush();

    return loc.doc_reqid;
  }

  /**
   *  Get a chunk from an open document connection.  This may require
   *  fetching the chunk from the proxy if the chunk isn't already there.
   *  (ISSUE: If chunk isn't available, the call should return
   *  asynchronously & perform a callback when the chunk arrives.  Is
   *  it redundant to implement that behavior both here and in CGetDoc?
   *  Maybe CGetDoc should only return the TOC (though it may prefetch up
   *  to maxChunks chunks)?
   */
  public GM_DocChunk GetChunk(int reqid, int chunkIndex) {
    
  }

  /**
   *  Close an open document connection.  All client-allocated buffers for
   *  this document are freed, and the document is "forgotten about"; any
   *  prefetches in progress for this document are cancelled; etc.
   */
  public GM_Error DisposeDoc(int reqid) {
    return null;
  }

  /**
   *  This method is really no longer valid since the callback proc has 
   *  been moved to the chunk class. However, it could be used to update
   *  the reference point that the chunk's callback method will use to
   *  reach the app. I have not added any code that allow the chunk to
   *  no how to notify the app since that seems implementation dependent
   *  and it is not clear how we are going to implement this interface.
   * <p>
   *  Set/change the callback proc for an existing request; any future
   *  notifications on the request will go to the new proc.  Returns the
   *  pointer to the old callback procedure (like signal(1)).
   *  newThreshold and threshRelative have similar semantics as the
   *  parameters to lseek().
   */
  public int SetCallback(int reqid, int newProc,
			 int newMaxChunks, int newThreshold, 
			 byte buffer[]) {
    return 0;
  }


  /**
   * Callback procedure for when a network property of interest changes. Args
   * are an event code and any associated data. The data is currently typed as
   * Object this is done since all objects inherit from Object and whatever the
   * form of the client data we can just use a cast. 
   */
  public void eventCallback(int eventCode, Object data) {
    
  }


  public void run() {
    NetworkClient client = new NetworkClient();   // the client itself
    
    /*
     * This is hardcoded for now until I put the host stuff somewhere.
     */
    String host = "espresso.cs";
    int port = 1998;
    
    try {
      client.openServer(host, port);
    } catch(Exception e) {
      System.out.println("ERROR - Proxy Connection - Connection Refused");
      return -1;
    }
    
    DataInputStream dis = new DataInputStream(client.serverInput);
    PrintStream ps = new PrintStream(client.serverOutput);
    
    
    
  }
}
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 * $Date$
d8 1
a8 1
 * Revision: $Id$
d14 3
a16 1
import java.util.Linker;
a24 5
  static {
    Linker.loadLibrary("GloMop");
  } 


d112 51
a162 1
    return 0;
d175 1
a175 2
    GM_DocChunk dummy = null;
    return dummy;
d215 24
@


1.1.1.1
log
@initial import

@
text
@@
