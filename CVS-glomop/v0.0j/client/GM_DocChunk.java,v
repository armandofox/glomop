head	1.2;
access;
symbols
	initial:1.1.1.1
	dgourley:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.08.17.06.52.17;	author dgourley;	state Exp;
branches;
next	1.1;

1.1
date	95.08.06.22.46.05;	author dgourley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.08.06.22.46.06;	author dgourley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@took out dumb LinkLoader
@
text
@/*
 *
 * GM_DocChunk.java
 *   The base(root) class for the document chunks.
 *
 * $Date: 1995/08/06 22:46:06 $
 *
 * Revision: $Id: GM_DocChunk.java,v 1.1.1.1 1995/08/06 22:46:06 dgourley Exp $
 *
 */


package GloMop;


/**
 *  Each chunk of a document begins with a Document Reference Table,
 *  which gives ReqID's for other documents embedded in this chunk.
 *  (EXAMPLE: A MIME-encoded mail message is a chunk consisting of plain
 *  text whose Document Reference Table points to the MIME objects, each
 *  of which must be fetched with a separate CGetDoc connection.  
 *  EXAMPLE: A Web page is a chunk consisting of HTML whose
 *  Document Reference Table contains references to inlined graphics,
 *  and  possibly also references to other HTML pages accessed as
 *  links.)  Since each reference in the DRT is a GM_DocLocator, it can
 *  be passed directly to CGetDoc to fetch the corresponding document on
 *  a new pipe.
 */
public class GM_DocChunk extends Object {

  /*
   *  Chunk deltas: Used when setting the threshold at which the next
   *  callback should occur.  Semantics are similar to lseek();
   *  GM_RELATIVE and GM_ABSOLUTE are followed by another argument, the
   *  numeric value.
   */

  /**
   * Don't call me till all chunks are in.
   */
  public static short GM_ALL_CHUNKS           = 1;
  
  /**
   *
   */
  public static short GM_AS_MANY_AS_POSSIBLE  = 2;
  
  /**
   * Call when next chunk is ready.
   */
  public static short GM_NEXT_CHUNK           = 3;
  
  /**
   * Call after next N chunks arrive.
   */
  public static short GM_RELATIVE             = 4;
  
  /**
   * Call when the N'th chunk arrives.
   */
  public static short GM_ABSOLUTE             = 5;
  
  /**
   * Call whenever it's convenient(e.g. from load balancing standpoint).
   */
  public static short GM_ANYTIME              = 6;


  /**
   * Number of references in DRT.
   */
  public int chunk_nrefs;

  /**
   * The references.
   */
  public GM_DocLocator chunk_refs[];

  /**
   * This is the actual chunk data.
   */
  public byte chunk_obj[];
  

  /**
   * The constructor for the class. This should init all the non-static fields.
   */
  public GM_DocChunk(int nrefs, GM_DocLocator refs[], byte obj[]) {
    chunk_nrefs = nrefs;
    chunk_refs = new GM_DocLocator[chunk_nrefs];
  }

  
  /**
   *  Callback procedure for when a document is arriving.  Reqid
   *  identifies the document; type gives the datatype; numChunksAvail
   *  specifies the number of (possibly noncontiguous) chunks arriving;
   *  theChunks is an array of pointers to these chunks (actually all
   *  pointers into a contiguous buffer); clientOwnsBuffer is nonzero iff
   *  it is the application's responsibility to manage and eventually free
   *  the buffer (i.e. the network manager guarantees that this buffer
   *  space will not be overwritten unless the client explicitly passes
   *  the pointer in a future Get call).
   */
  public void docCallback(int reqid, GM_DocType type, int numChunksAvail, int totalChunks,
			  GM_DocChunk theChunks[], boolean clientOwnsBuffer) {
    
  }
}
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 * $Date$
d8 1
a8 1
 * Revision: $Id$
a14 2
import java.util.Linker;

a83 5

  static {
    Linker.loadLibrary("GloMop");
  } 

@


1.1.1.1
log
@initial import

@
text
@@
