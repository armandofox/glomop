head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	99.06.07.06.51.49;	author daw;	state Exp;
branches;
next	1.4;

1.4
date	99.05.28.00.23.34;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	99.05.27.21.37.27;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	99.03.31.22.33.34;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.11.21.01.12.41;	author daw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@Is my reduction non-relativizing?



Someone at TGIF suggested extractors; also suggested looking at
learning theory where some people had some results that if you have
a sufficiently high entropy source, it's hard to learn (they had
already proved it for uniform distributions, and they generalized
to the non-uniform case which was much cooler).


Here's a simple idea for dealing with non-uniformly distributed passphrases:
   Modify it to store $w, F_{k \xor w}(0)$ where $k$ is the
   (non-uniform) secret password, and where $w$ is a uniformly-random
   whitening mask selected (by the system) when the password is registered
   for the first time.
   I think you can show that this is roughly optimal.
Proof idea:
   Let B be the best adversary which given y returns i with F_i(0) = y,
   and let B' be the best adversary which given w,y returns j with
   F_{j \xor w}(0) = y.
   We are going to construct an adversary for the PRF as
      A^f = { 1 or 0 according to whether B(f(0)) \ne nil   (standard trick)
   Note that Adv A = Prob[B succeeds].
   Now the idea is that we _ought_ to be able to prove that the
   "distance" between B and B' is not too large, i.e. that
      Prob[B' succeeds] - Prob[B succeeds] <= prob. of guessing k  (*)
   Thus
      Adv A = Prob[B succeeds] >= Prob[B' succeeds] - Prob[guessing k]
   and we'll be done.  All that remains is to do is to prove (*).

Oops, this doesn't work.  Consider $F_{u,v}(0) = DES_u(v), DES_u(v+1)$,
with a distribution on keys given by $k=(0,v)$ where $v$ is uniform.
Then $w,F_{k \xor w}(0)$ leaks $k$ and thus isn't one-way.


I think the currently-best candidate is 2-universal hash functions.


Note that you can get a security-preserving reduction
for $h(k) = DES_k(0)$, if you are willing to assume
that  DES is secure with non-uniform keys.   It shows that
if DES is (t,1,e)-secure then $h$ is (t,e+1/256)-secure.
If you consider $h(k) = DES_k(0),DES_k(1)$ you can get
this to a proof that $h$ is (t,e+1/2^72)-secure, which
is much better.
(I think.  Double-check all of this.)
@


1.4
log
@*** empty log message ***
@
text
@d38 10
@


1.3
log
@*** empty log message ***
@
text
@d1 4
d35 3
@


1.2
log
@*** empty log message ***
@
text
@d27 4
@


1.1
log
@*** empty log message ***
@
text
@d6 21
@
