head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	97.12.06.02.11.51;	author abrown;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add some code stolen from top to make backend_query_nodestatus
work. There's one glitch, in that the CPU utilization is for the
last second of CPU; a background thread should accumulate this over
longer time periods.
@
text
@/* $Id$
 *
 * Cribbed stuff from top-3.5b6 machine.h and utils.h 
 * Used to get per-node status
 *
 * $Log$
 */

#ifndef _TOP_INTERFACE_H_
#define _TOP_INTERFACE_H_

#define OSREV 56 /* solaris 2.6 ONLY! */

/*
 * the statics struct is filled in by machine_init
 */
struct statics
{
    char **procstate_names;
    char **cpustate_names;
    char **memory_names;
    char **order_names;
};

/*
 * the system_info struct is filled in by a machine dependent routine.
 */
#define NUM_AVERAGES 3
struct system_info
{
    int    last_pid;
    double load_avg[NUM_AVERAGES];
    int    p_total;
    int    p_active;     /* number of procs considered "active" */
    int    *procstates;
    int    *cpustates;
    int    *memory;
};

/* cpu_states is an array of percentages * 10.  For example, 
   the (integer) value 105 is 10.5% (or .105).
 */

/*
 * the process_select struct tells get_process_info what processes we
 * are interested in seeing
 */

struct process_select
{
    int idle;           /* show idle processes */
    int system;         /* show system processes */
    int uid;            /* only this uid (unless uid == -1) */
    char *command;      /* only this command (unless == NULL) */
};

long percentages();

/*
 * This function can be called to get the current system info.
 */
int get_system_info (struct system_info *si);

/*
 * To initialize top
 */
int top_machine_init (struct statics *statics);

#endif /* _TOP_INTERFACE_H_ */
@
