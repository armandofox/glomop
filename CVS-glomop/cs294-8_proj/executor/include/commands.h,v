head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	97.12.09.06.36.30;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added some files that implement the command parser and helper
functions.
@
text
@/*
 * commands.h
 *
 * This file contains the prototypes of each individual command that
 * the client or economic agent can send us.
 */

#ifndef COMMANDS_H
#define COMMANDS_H

typedef void (*CommandFunc)(int socket, char *cookie, 
			    char *leftover, int leftover_len);

void command_stdout(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_stderr(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_cputime(int socket, char *cookie, 
		     char *leftover, int leftover_len);
void command_filespace(int socket, char *cookie, 
		       char *leftover, int leftover_len);
void command_status(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_memusage(int socket, char *cookie, 
		      char *leftover, int leftover_len);
void command_suspend(int socket, char *cookie, 
		     char *leftover, int leftover_len);
void command_kill(int socket, char *cookie, 
		  char *leftover, int leftover_len);
void command_resume(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_checkpoint(int socket, char *cookie, 
			char *leftover, int leftover_len);
void command_user_defined(int socket, char *cookie, 
			  char *leftover, int leftover_len);
void command_submit(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_node_status(int socket, char *cookie, 
			 char *leftover, int leftover_len);
void command_job_list(int socket, char *cookie, 
		      char *leftover, int leftover_len);
void command_est_submit(int socket, char *cookie, 
			char *leftover, int leftover_len);
void command_revoke(int socket, char *cookie, 
		    char *leftover, int leftover_len);
void command_reap(int socket, char *cookie, 
		  char *leftover, int leftover_len);

#define COMMAND_STRING_MAXLEN 100
typedef struct _command_binding {
  char command_string[COMMAND_STRING_MAXLEN];
  CommandFunc f;
} command_binding;

/* This function will get called if an unknown command is detected */

void command_unknown_function(int socket, char *command);


#endif
@
