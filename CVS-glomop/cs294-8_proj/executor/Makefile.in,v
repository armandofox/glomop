head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	97.12.08.02.24.03;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.12.06.05.13.35;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.12.06.02.11.49;	author abrown;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.01.50.59;	author abrown;	state Exp;
branches;
next	1.2;

1.2
date	97.11.27.04.31.38;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.11.27.02.04.44;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Much progress made in parsing and dispatching of commands.
@
text
@##
## CS294-8 executor module
##

CC = @@CC@@
CXX = @@CXX@@
INCLUDEPATH = @@INCLUDEPATH@@
INCLUDE = $(patsubst %,-I%,$(INCLUDEPATH))
CFLAGS = @@CFLAGS@@ @@CPPFLAGS@@ $(INCLUDE)
LIBS = @@LDFLAGS@@ @@LIBS@@ -lgdbm -lkstat -lkvm @@LIBTHREAD@@

ifneq "$(PURIFY)" ""
	PURIFYPATH = purify -cache-dir=/tmp -chain-length=30
endif
LD = $(PURIFYPATH) $(CXX)


TARGETS = executor TAGS

all: $(TARGETS)

install: ../sbin/frontend

../sbin/%: %
	$(INSTALL)  $< $@@

SRCS =  executor_main.c pid_cookie_table.c thr_queue.c backend.c backend_top_m_sunos5.c utils.c http_html_parse.c commands.c

OBJS = $(patsubst %.c,%.o,$(SRCS)) @@LIBOBJS@@

INCLUDES = $(wildcard include/*.h)

executor: $(OBJS)
	$(LD) -o $@@ $^ $(LIBS)

%.o: src/%.c
	$(CC) $(CFLAGS) -o $@@ -c $<

TAGS: $(patsubst %,src/%,$(SRCS)) $(INCLUDES)
	etags $^

clean:
	-/bin/rm -f *.o *~ src/*~ include/*~ executor TAGS core test.db

spotless: clean
	-/bin/rm Makefile

@


1.5
log
@Fixed teeny-tiny .c bug in Makefile.in
@
text
@d27 1
a27 1
SRCS =  executor_main.c pid_cookie_table.c thr_queue.c backend.c backend_top_m_sunos5.c utils.c
@


1.4
log
@Add some code stolen from top to make backend_query_nodestatus
work. There's one glitch, in that the CPU utilization is for the
last second of CPU; a background thread should accumulate this over
longer time periods.
@
text
@d27 1
a27 1
SRCS =  executor_main.c pid_cookie_table.c thr_queue.c backend.c backend_top_m_sunos5 utils.c
@


1.3
log
@First-cut implementation of backend. Not tested much. backend_exec() is known
to work; the rest of the functions may or may not.

Child process following not yet implemented, but CPU accounting is.
@
text
@d10 1
a10 1
LIBS = @@LDFLAGS@@ @@LIBS@@ -lgdbm @@LIBTHREAD@@
d27 1
a27 1
SRCS =  executor_main.c pid_cookie_table.c thr_queue.c backend.c utils.c
@


1.2
log
@Pulled over the thread worker pool code from transend.  Now we can
telnet to the executor and have a worker thread dispatched for us!
@
text
@d27 1
a27 1
SRCS =  executor_main.c pid_cookie_table.c thr_queue.c utils.c
@


1.1
log
@We've converted the archive to use the gnu "autoconf" tool for
architecture and site-specific configuration.
@
text
@d27 1
a27 1
SRCS =  executor_main.c pid_cookie_table.c
d43 5
a47 1
	-/bin/rm -f *.o *~ src/*~ executor TAGS core test.db
@
