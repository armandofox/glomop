head	1.8;
access;
symbols
	v15b:1.8
	v10b3:1.5
	v10b2:1.5
	v10b1:1.5;
locks; strict;
comment	@ * @;


1.8
date	97.11.15.00.26.08;	author aspolito;	state Exp;
branches;
next	1.7;

1.7
date	97.11.12.20.13.09;	author iang;	state Exp;
branches;
next	1.6;

1.6
date	97.11.09.21.43.24;	author iang;	state Exp;
branches;
next	1.5;

1.5
date	97.09.14.23.41.09;	author lcddave;	state Exp;
branches;
next	1.4;

1.4
date	97.09.12.21.46.08;	author iang;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.17.30.09;	author aspolito;	state Exp;
branches;
next	1.2;

1.2
date	97.08.28.01.16.24;	author aspolito;	state Exp;
branches;
next	1.1;

1.1
date	97.08.01.23.08.27;	author aspolito;	state Exp;
branches;
next	;


desc
@@


1.8
log
@sendURL much changed and much prettier...history works now.
@
text
@#include <Pilot.h>
#include "globals.h"
#include "callback.h"
#include "hotlist.h"
#include "history.h"
#include "send.h"
#include "utils.h"
#include "editmenu.h"

static Int editItem;

static UInt addtohotlist(CharPtr url, CharPtr name)
{
    VoidHand dataHand;
    VoidPtr dataPtr;
    UInt index = 65535;
    UInt urllen, namelen;

    if (!url) url = "";

    urllen = StrLen(url) + 1;
    namelen = name ? StrLen(name) + 1 : 0;

    dataHand = DmNewRecord(hotlistDB, &index, (ULong) urllen+namelen);
    ErrFatalDisplayIf(!dataHand, "Out of memory!");
    dataPtr = MemHandleLock(dataHand);
    DmWrite(dataPtr, 0, url, urllen);
    if (name) {
	DmWrite(dataPtr, urllen, name, namelen);
    }
    MemHandleUnlock(dataHand);
    DmReleaseRecord(hotlistDB, index, true);
    return index;
}

void AddUrlToHotList(void) {
  VoidPtr urlPtr;

  if (curURL && curURLLength) {
    urlPtr =  MemHandleLock(curURL);
    addtohotlist(urlPtr, NULL);
    MemHandleUnlock(curURL);
  }
}

void HotListDrawRecord(VoidPtr tableP, Word row, Word column, 
			     RectanglePtr bounds) {
  VoidHand recHandle;
  CharPtr recText;
  Int textLen, width;
  Boolean fits;
  UInt recordNum = 0;
  FontID currFont;

  CALLBACK_PROLOGUE

  WinEraseRectangle(bounds, 0); 
  recordNum = (UInt) TblGetItemInt (tableP, row, column);

  currFont = FntSetFont (stdFont);
  
  recHandle = DmGetRecord(hotlistDB, recordNum);
  recText = MemHandleLock(recHandle);
  if (StrLen(recText)+1 < MemHandleSize(recHandle)) {
    recText += StrLen(recText)+1;
  }
  width = bounds->extent.x - 2;
  textLen = StrLen(recText);
  FntCharsInWidth(recText, &width, &textLen, &fits);
  
  WinDrawChars(recText, textLen, bounds->topLeft.x, bounds->topLeft.y);
  
  MemHandleUnlock(recHandle);    
  
  DmReleaseRecord(hotlistDB, recordNum, false);
  
  FntSetFont (currFont);

  CALLBACK_EPILOGUE
}

Int HotListLoadTable(FormPtr frm, Int top)  {
  Word row;
  Word lastRecordNum;
  Word numRows;
  VoidHand recordH;
  TablePtr tableP;
  ULong numRecs;
  LocalID lid;
  UInt cardno;
  Int recordNum;
  

  tableP = FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));

  numRows = TblGetNumberOfRows (tableP);

  TblUnhighlightSelection(tableP);

  DmOpenDatabaseInfo(hotlistDB, &lid, NULL, NULL, &cardno, NULL);
  DmDatabaseSize(cardno, lid, &numRecs, NULL, NULL);

  if ((top+numRows) > numRecs) {
    top = numRecs - numRows;
  }
  if (top < 0) {
    top = 0;
  }
  /*
  FrmUpdateScrollers(frm, HotListUp, HotListDown, top, top+numRows 
                     < numRecs);
  */

  recordNum = top;

  for (row = 0; row < numRows; row++, recordNum++) {
    recordH = DmQueryRecord (hotlistDB, recordNum);
    
    if (recordH) {
      TblSetItemStyle (tableP, row, 0, customTableItem);      
      TblSetItemInt (tableP, row, 0, (Word) recordNum);
      TblSetRowUsable (tableP, row, true);
      lastRecordNum = recordNum;
    } else {
      TblSetRowUsable (tableP, row, false);
    }
    TblMarkRowInvalid (tableP, row); 
  }
  return top;
}

void HotListTableLoad(FormPtr frm) {
  TablePtr tableP;

  tableP = FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));
  curTop = HotListLoadTable (frm, 0);
  TblSetCustomDrawProcedure (tableP, 0, HotListDrawRecord);
  TblSetColumnUsable (tableP, 0, true);	
}

Boolean EditHotlistURLHandleEvent(EventPtr e) {
  FormPtr frm;
  Boolean handled=false;
  char * url;
  char * name; 
  char * buf;
  VoidHand rec;

  CALLBACK_PROLOGUE

  switch (e->eType) {
  case frmOpenEvent:
    rec = DmQueryRecord(hotlistDB, editItem);
    url = MemHandleLock(rec);
    if (StrLen(url)+1 < MemHandleSize(rec)) {
      name = url + StrLen(url)+1;
    } else {
      name = 0;
    }
    frm = FrmGetActiveForm();
    if (name) {
      SetFld(FrmGetObjectPtr(frm, FrmGetObjectIndex (frm, EditHLURLNameF)), 
	     name, StrLen(name));
    }
    SetFld(FrmGetObjectPtr(frm, FrmGetObjectIndex (frm, EditHLURLURLF)), 
	   url, StrLen(url));
    MemHandleUnlock(rec);
    FrmDrawForm(frm);
    handled = true;
    break;
  case ctlSelectEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
    case EditHLURLSave:
      name = FldGetTextPtr(FrmGetObjectPtr(frm, 
					FrmGetObjectIndex (frm, 
							   EditHLURLNameF)));
      url = FldGetTextPtr(FrmGetObjectPtr(frm, 
					FrmGetObjectIndex (frm, 
							   EditHLURLURLF)));
      if (name == NULL || StrLen(name) == 0) {
	DmResizeRecord(hotlistDB, editItem, StrLen(url)+1);
	rec = DmQueryRecord(hotlistDB, editItem);
	buf = MemHandleLock(rec);
	DmWrite(buf, 0, url, StrLen(url)+1);
	MemHandleUnlock(rec);
      } else {
	DmResizeRecord(hotlistDB, editItem, StrLen(url)+StrLen(name)+2);
	rec = DmQueryRecord(hotlistDB, editItem);
	buf = MemHandleLock(rec);
	DmWrite(buf, 0, url, StrLen(url)+1);
	DmWrite(buf, StrLen(url)+1, name, StrLen(name)+1);	
	MemHandleUnlock(rec);
      }
    case EditHLURLCancel:
      FrmReturnToForm(0);
    }
    handled = true;
    break;
  case menuEvent:
    MenuEraseStatus(NULL);
    if (EditMenuHandleEvent(e->data.menu.itemID, FrmGetActiveForm())) {
	handled = true;
    } else {
	switch(e->data.menu.itemID) {
	}
    }
    handled = true;
    break;

  default:
    break;
  }    

  CALLBACK_EPILOGUE
    
  return handled;
}

Boolean HotListHandleEvent (EventPtr e) {

  FormPtr frm;
  Boolean handled=false;

  CALLBACK_PROLOGUE

  switch (e->eType) {
  case winEnterEvent:
    frm = FrmGetActiveForm();  
    FrmDrawForm(frm);
    handled = true;
    break;    
  case frmOpenEvent:    
    frm = FrmGetActiveForm();  
    HotListTableLoad(frm);    
    FrmDrawForm(frm);
    handled = true;
    break;
  case keyDownEvent:
    frm = FrmGetActiveForm();  
    if (e->data.keyDown.chr == pageUpChr) {	
      if (curTop) {
	curTop = HotListLoadTable (frm, curTop-2);      
	TblDrawTable( FrmGetObjectPtr 
		      (frm, FrmGetObjectIndex (frm, HotListTable)));
      }
      handled = true;
    }
    else if (e->data.keyDown.chr == pageDownChr) {	
      curTop = HotListLoadTable (frm, curTop+2);      
      TblDrawTable( FrmGetObjectPtr 
		    (frm, FrmGetObjectIndex (frm, HotListTable)));
      handled = true;
    }
    break;
  case ctlSelectEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
      Word row, col;
      TablePtr tblP; 
      VoidHand loc;
      void * src,* dst;
      VoidHand tcurURL;
      ULong tcurURLLength;
      UInt newpos, newtop;
      Word numRows;

    case HotListGoto:  
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));
      if (TblGetSelection(tblP, &row, &col)) {

	loc = DmQueryRecord(hotlistDB, TblGetItemInt(tblP, row, col));
	src = MemHandleLock(loc);
	tcurURLLength = StrLen(src)+1;
	tcurURL = MemHandleNew((ULong) tcurURLLength);
	dst = MemHandleLock(tcurURL);
	MemMove(dst, src, tcurURLLength);
	MemHandleUnlock(loc);
	MemHandleUnlock(tcurURL);
	
	if (!SendURL(&conID, tcurURL, true, true, false, true)) {
	  if (tcurURL) {
	    MemHandleFree(tcurURL);
	  }
	}
	DmReleaseRecord(hotlistDB, TblGetItemInt(tblP, row, col), false);
      }
    case HotListCancel:
      FrmGotoForm(MainForm);
      handled = true;
      break;
    case HotListNew:
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));
      numRows = TblGetNumberOfRows (tblP);
      newpos = addtohotlist("http://", "New entry");
      newtop = curTop;
      if (newpos >= curTop + numRows) {
	newtop = newpos - numRows + 1;
      }
      if (newpos < curTop) {
	newtop = newpos;
      }
      curTop = HotListLoadTable (frm, newtop);      
      TblSelectItem(tblP, newpos - curTop, 0);
      TblDrawTable(tblP);
      /* FALLTHROUGH */
    case HotListEdit:
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));
      if (TblGetSelection(tblP, &row, &col)) {	
	editItem = TblGetItemInt(tblP, row, col);
	FrmPopupForm(EditHotlistURLForm);
      }
      handled = true;
      break;
    case HotListDelete:
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, HotListTable));
      if (TblGetSelection(tblP, &row, &col)) {	
	DmRemoveRecord(hotlistDB, TblGetItemInt(tblP, row, col));
	HotListLoadTable(frm, curTop);
	TblUnhighlightSelection(tblP);
	TblDrawTable(tblP);
      }
      handled = true;
      break;
    }
  case ctlEnterEvent:
  case ctlRepeatEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
    case HotListUp:
      if (curTop) {
	curTop = HotListLoadTable (frm, curTop-2);      
	TblDrawTable( FrmGetObjectPtr 
		      (frm, FrmGetObjectIndex (frm, HotListTable)));
      }
      handled = true;
      break;
    case HotListDown:     
      curTop = HotListLoadTable (frm, curTop+2);      
      TblDrawTable( FrmGetObjectPtr 
		    (frm, FrmGetObjectIndex (frm, HotListTable)));
      handled = true;
      break;
    }
    break;

  default:
    break;
  }

  CALLBACK_EPILOGUE

  return handled;
} 

@


1.7
log
@o Change Doc to AportisDoc
o Add "New" button to Hotlist editing page
@
text
@a270 1
	int send;
d280 2
a281 18
	send = SendURL(tcurURL, &hPage);
	if (send == 2) {
	  if (curURL) {
	    MemHandleFree(curURL);
	  }
	  curURL = tcurURL;
	  curURLLength = tcurURLLength;

	  PutInHistory(curURL, curURLLength);
	} else if (send == 1) {
	  if (transURL) {
	    MemHandleFree(transURL);
	  }
	  transURL = tcurURL;
	  transURLLength = tcurURLLength;

	  /* PutInHistory(transURL, transURLLength); */
	} else {
@


1.6
log
@Recover from CVS repository crash.  Changes include:
o Editing of entries in hotlist and storage
o Server-side imagemaps
o Recognition of ImageViewer .pdb files
@
text
@d12 24
a36 2
  VoidHand dataHand;
  VoidPtr dataPtr;
a37 1
  UInt index = 65535;
a39 3
    dataHand = DmNewRecord(hotlistDB, &index, (ULong) curURLLength);
    ErrFatalDisplayIf(!dataHand, "Out of memory!");
    dataPtr = MemHandleLock(dataHand);
d41 1
a41 2
    DmWrite(dataPtr, 0, urlPtr, curURLLength);
    MemHandleUnlock(dataHand);
a42 1
    DmReleaseRecord(hotlistDB, index, true);
d265 2
d309 15
@


1.5
log
@Following has been added

1. Stop/cancel load functionality (but buggy, transport layer state not reset)

2. Moved PutInHistory to only when a new page is loaded
   (this is a consequence of the cancel function/otherwise URL is
    put in history even if cancel is hit; this lead to history
    errors.)

3. changed event loop to drop every 200 ticks; my pilot batteries go dead
   way to fast

4. can now move back and forward by backspace/space
@
text
@d7 4
d48 3
d125 79
d212 1
a212 1
  case frmOpenEvent:   
d214 6
a219 1
    HotListTableLoad(frm);
a222 1

d254 1
a254 1
	
d256 2
a257 1
	tcurURLLength = MemHandleSize(loc);	
a259 1
	src = MemHandleLock(loc);
d289 8
@


1.4
log
@o UI fixed up: scroll bar at bottom.  It goes all black when the page is
  requested, and disappears when the page has arrived completely.  The
  view area is now 150 pixels high.
o Various bugfixes
@
text
@d189 1
a189 1
	  PutInHistory(transURL, transURLLength);
@


1.3
log
@*** empty log message ***
@
text
@d134 1
@


1.2
log
@OFFLINE MODE WORKS
@
text
@d162 2
d172 2
a173 1
	if (SendURL(tcurURL, &hPage)) {
d179 1
d181 8
@


1.1
log
@Code massivly split
@
text
@d156 2
d163 3
a165 6
	curURLLength = MemHandleSize(loc);	
	if (curURL) {
	  MemHandleFree(curURL);
	}
	curURL = MemHandleNew((ULong) curURLLength);
	dst = MemHandleLock(curURL);
d167 1
a167 1
	MemMove(dst, src, curURLLength);
d169 13
a181 4
	MemHandleUnlock(curURL);
	PutInHistory(curURL, curURLLength);
	hPage = SendURL(curURL, conID);
	currYPosOffset = 0;
a184 1
      ignoreUp = true;
@
