head	1.25;
access;
symbols
	v15b:1.25
	v10b3:1.24
	v10b2:1.23
	v10b1:1.23;
locks; strict;
comment	@ * @;


1.25
date	97.11.11.21.24.41;	author aspolito;	state Exp;
branches;
next	1.24;

1.24
date	97.10.30.02.02.04;	author aspolito;	state Exp;
branches;
next	1.23;

1.23
date	97.10.07.19.04.32;	author iang;	state Exp;
branches;
next	1.22;

1.22
date	97.09.23.21.07.46;	author iang;	state Exp;
branches;
next	1.21;

1.21
date	97.09.17.23.18.12;	author aspolito;	state Exp;
branches;
next	1.20;

1.20
date	97.09.15.23.56.57;	author aspolito;	state Exp;
branches;
next	1.19;

1.19
date	97.09.12.21.46.13;	author iang;	state Exp;
branches;
next	1.18;

1.18
date	97.09.11.23.37.46;	author iang;	state Exp;
branches;
next	1.17;

1.17
date	97.09.10.02.44.28;	author aspolito;	state Exp;
branches;
next	1.16;

1.16
date	97.09.08.00.24.34;	author lcddave;	state Exp;
branches;
next	1.15;

1.15
date	97.09.06.02.19.01;	author aspolito;	state Exp;
branches;
next	1.14;

1.14
date	97.09.04.00.24.23;	author aspolito;	state Exp;
branches;
next	1.13;

1.13
date	97.09.04.00.22.51;	author aspolito;	state Exp;
branches;
next	1.12;

1.12
date	97.09.03.00.49.26;	author aspolito;	state Exp;
branches;
next	1.11;

1.11
date	97.08.09.00.10.26;	author aspolito;	state Exp;
branches;
next	1.10;

1.10
date	97.08.04.23.03.03;	author aspolito;	state Exp;
branches;
next	1.9;

1.9
date	97.08.01.23.08.34;	author aspolito;	state Exp;
branches;
next	1.8;

1.8
date	97.07.25.01.55.02;	author aspolito;	state Exp;
branches;
next	1.7;

1.7
date	97.07.18.22.21.04;	author aspolito;	state Exp;
branches;
next	1.6;

1.6
date	97.07.11.00.03.57;	author aspolito;	state Exp;
branches;
next	1.5;

1.5
date	97.07.10.23.11.41;	author aspolito;	state Exp;
branches;
next	1.4;

1.4
date	97.07.07.21.24.26;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.06.23.00.54.45;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	97.06.22.03.12.09;	author lcddave;	state Exp;
branches;
next	1.1;

1.1
date	97.06.21.02.34.54;	author lcddave;	state Exp;
branches;
next	;


desc
@@


1.25
log
@out of memory handled gracefully.  Fallback proxies added
@
text
@#include <Pilot.h>

#include <sys/socket.h>
#include "globals.h"
#include "trans.h"


/* header is 5 32 bit unsigned words long */
/* version                                */
/* request id                             */
/* metaSize                               */
/* dataSize                               */
/* compression type                       */
#define HEADERSIZE 20
/* version of transport/program */
#define VERSIONLOC 0
/* request ID */
#define RIDLOC 4
/* meta data size */
#define METALOC 8
/* regular data size */
#define SIZELOC 12
/* compression type */
#define COMPLOC 16

#define ConID2Socket(conID) ((Int) conRecs[conID].sock)


/*ReadCallbackFuction*/
typedef void (*Rcf)(Int, unsigned char *, int, void *);

typedef struct {
  Int sock;

  Boolean inUse;

  struct sockaddr_in saddr;
  DmOpenRef db;
  
  RequestID nextRequest;
  ChunkID nextChunk;

  /* and now the info needed for reading data */
  /* getting kinda large here                 */
  VoidHand dataBufHand;
  VoidHand metaBufHand;
  int buffed;
  unsigned char headBuf[HEADERSIZE];
  DataSize dataSize;
  DataSize metaSize;
  RequestID requestID;
  DataSize left;
  DataSize seen;
  Boolean readingMeta;
  DataCallback callback;
  DataSize * total;
  DataSize * sofar;
  void * ptr;
  DWord version;

  /* and now some stuff for database evilness... THIS IS GETTING HUGE */
  ULong metaID;
  ULong dataID;

} ConRec;

static ConRec conRecs[MAX_CONNECTIONS];

Err errno;

/* returns 0 if all ok, -1 if it can't allocate the memory needed */
static int MakeDataHandle(DataSize *ds, VoidHand *dh, 
			    ULong *id, DmOpenRef db) {
  Err e;
  UInt at = 0;
  if (*ds > 0xFFFF) {
    /* 
     *  we want to read data that is larger than a short, 
     *  right now this is illegal
     */
    *dh = NULL;
    *ds = 0;
    return -1;
  } else if (*ds) {	 
    /* if there is data, make the handle for it */
    *dh = DmNewRecord(db, &at, *ds);
    if (!(*dh)) {      
      /* not enough space */
      return -1;
    }
    e = DmRecordInfo(db, at, NULL, id, NULL);
    ErrFatalDisplayIf(e, "Trans: Error finding data record");
  } else  {
    /* no data to store, therefore don't allocate a handle to store it in*/
    *dh = NULL;
  }
  return 0;
}

Err DestroyChunk(ChunkHand ch) {
  UInt index;
  ChunkPtr c;
  Err err;
  
  c = (ChunkPtr) MemHandleLock(ch);

  if ((c->conID < FIRST_CONNECTION) || (c->conID >= MAX_CONNECTIONS)) {
    return 1;
  } 

  if (conRecs[c->conID].db) {
    DmOpenRef db = conRecs[c->conID].db;

    if (c->dataSize) {
      err = DmFindRecordByID(db, c->dataID, &index);
      if (err) return err;
      err = DmRemoveRecord(db, index);
      if (err) return err;      
    }
    if (c->metaSize) {
      err = DmFindRecordByID(db, c->metaID, &index);
      if (err) return err;      
      err = DmRemoveRecord(db, index);
      if (err) return err;      
    }
  } else {
    if (c->dataSize) {
      err = MemHandleFree(c->dataHand);
      if (err) return err;      
    }
    if (c->metaSize) {
      err = MemHandleFree(c->metaHand);
      if (err) return err;      
    }
  }
  MemHandleUnlock(ch);
  err = MemHandleFree(ch);
  if (err) return err;

  return 0;
}

Int ReOpenConnection(ConID conID) {
  Err err;
  Byte allup;
  Word iferr;

  NetLibConnectionRefresh(AppNetRefnum, true, &allup, &iferr);  
  if (!allup) return -1;
  
  close(ConID2Socket(conID));
  
  conRecs[conID].sock = socket(PF_INET, SOCK_STREAM, 0);
  err = connect(conRecs[conID].sock, 
		(struct sockaddr *)&conRecs[conID].saddr, 
		sizeof(conRecs[conID].saddr));
  if (err) {
    conRecs[conID].sock = -1;
    return -1;
  }     
  return conRecs[conID].sock;
}

ConID Socket2ConID (Int s) {
  ConID id;
  for (id = 0; id < MAX_CONNECTIONS; id++) {
    if ((conRecs[id].sock == s) && (conRecs[id].inUse)) {
      return id;
    }
  }
  return -1;
}

Err StartTrans() {
  Word err = 0;
  UInt foo;
 
  AppNetTimeout = 1000;

  /* all connections are unused */
  for (foo = 0; foo < MAX_CONNECTIONS; foo++) {
    conRecs[foo].inUse = 0;
    conRecs[foo].left = 0;   
    conRecs[foo].buffed = 0;
    conRecs[foo].seen = 0;
    conRecs[foo].callback = NULL;
  }

  /* open the net library */
  err = SysLibFind("Net.lib", &AppNetRefnum);
  if (err) {
    return err;
  }
  err = NetLibOpen(AppNetRefnum, &foo);  
  return err;
}

Err StopTrans() {
  Err err = 0;

  if (AppNetRefnum) {
    err = NetLibClose(AppNetRefnum, 0);
  }
  return err;
}

static Int get_data(Int s, Rcf rc, void *rcp) {
  int read;
  char *buf;

  /* allocate us a buffer, but don't put it on the stack */
  buf = (char *) MemPtrNew(1024);

  read = read(s, buf, 1024);
  if (read <= 0) {
    conRecs[Socket2ConID(s)].sock = -1;
    MemPtrFree(buf);  
    return 1;
  } else {
    rc(s, buf, read, rcp);
    MemPtrFree(buf);
    return 0;
  }
}

static Boolean SendData(Int * s, DataSize size, unsigned char * data) {
  while (send(*s, data, size, 0) <= 0) {    

    *s = ReOpenConnection(Socket2ConID(*s));
    if (*s == -1) {
      return 1;
    }
  }
  return 0;
}

Err SendChunk(ChunkPtr chunk) {
  Err err;
  Int s;
  CompType compType = TRANS_NO_COMP;
  ConRec *cr;

  if ((chunk->conID >= MAX_CONNECTIONS) || (chunk->conID < FIRST_CONNECTION)) {
    return 1;
  }

  if (!chunk->requestID) {
    chunk->requestID = conRecs[chunk->conID].nextRequest;
    conRecs[chunk->conID].nextRequest++;
    conRecs[chunk->conID].nextChunk = 1;
  }

  if (!chunk->chunkID) {
    chunk->chunkID = conRecs[chunk->conID].nextChunk;
    conRecs[chunk->conID].nextChunk++;
  }

  s = ConID2Socket(chunk->conID);

  /* Notify that we're sending it */
  cr = &conRecs[conID];
  if (cr->callback) {
    if (cr->total) {
      *(cr->total) = 1;
    }
    if (cr->sofar) {
      *(cr->sofar) = 0;
    }
    cr->callback(cr->total, cr->sofar, cr->ptr);
  }

  err = SendData(&s, sizeof(DWord), (unsigned char *) 
		 (&(version)));
  if (err) {
    /*ErrFatalDisplayIf(err, "Error sending data");*/
    return err;
  }

  err = SendData(&s, sizeof(RequestID), (unsigned char *) 
		 (&(chunk->requestID)));
  if (err) {
    /*ErrFatalDisplayIf(err, "Error sending data");*/
    return err;
  }
  err = SendData(&s, sizeof(DataSize), (unsigned char *) (&(chunk->metaSize)));
  if (err) {
    /*ErrFatalDisplayIf(err, "Error sending data");*/
    return err;
  }
  err = SendData(&s, sizeof(DataSize), (unsigned char *) (&(chunk->dataSize)));
  if (err) {
    /*ErrFatalDisplayIf(err, "Error sending data");*/
    return err;
  }
  err = SendData(&s, sizeof(CompType), (unsigned char *) (&compType));
  if (err) {
    /*ErrFatalDisplayIf(err, "Error sending data");*/
    return err;
  }
  if (chunk->metaSize) {
    err = SendData(&s, chunk->metaSize, (unsigned char *) 
		   MemHandleLock(chunk->metaHand));
    MemHandleUnlock(chunk->metaHand);
  
    if (err) {
      /*ErrFatalDisplayIf(err, "Error sending data");*/
      return err;
    }
  }
  if (chunk->dataSize) {
    err = SendData(&s, chunk->dataSize, (unsigned char *) 
		   MemHandleLock(chunk->dataHand));
    MemHandleUnlock(chunk->dataHand);
    if (err) {
      /*ErrFatalDisplayIf(err, "Error sending data");*/
      return err;
    }
  }
  return 0;
}

static void NewChunkCallback(ConID conID, RequestID requestID, 
			     DataSize metaSize, DataSize dataSize, 
			     VoidHand metaHand, VoidHand dataHand, 
			     ULong metaID, ULong dataID,
			     VoidPtr ncp) {
  ChunkHand ch = MemHandleNew(sizeof(Chunk));
  transEvent te;

  ChunkPtr c = (ChunkPtr) MemHandleLock(ch);

  conRecs[conID].nextChunk++;

  c->conID = conID;
  c->requestID = requestID;
  c->chunkID = conRecs[conID].nextChunk;

  c->metaHand = metaHand;
  c->metaSize = metaSize;
  
  c->dataHand = dataHand;
  c->dataSize = dataSize;

  c->dataID = dataID;
  c->metaID = metaID;

  MemHandleUnlock(ch);
  
  te.eType = transNewChunk;
  te.data.newChunk.chunkHand = ch;
  EvtAddEventToQueue((EventPtr) &te);
}

static void ReadCallback(Int s, unsigned char *buf, int amt, void *rcp) {
  /* as in read.  is just size-left but this makes me happier...OK? */
  ConID conID = Socket2ConID(s);

  char *dataPtr;
  int *signal = rcp;
  int i;
  ConRec *cr = &conRecs[conID];

  /* set break to debug */

  while(amt) {
    /* read the entire header before doing anything stupid */
    if (cr->left == 0) {
      if ((amt+cr->buffed) < HEADERSIZE) {
	for (i = 0; i < amt; i++) {
	  cr->headBuf[i+cr->buffed] = buf[i];
	}
	cr->buffed += amt;
	amt = 0;
      } else {
	for (i = 0; cr->buffed+i < HEADERSIZE; i++) {      
	  cr->headBuf[i+cr->buffed] = buf[i];
	}
	/* WE HAVE AN ENTIRE HEADER!  YAY!                              */
	/* warning this may crash the machine because of word alignment */
	/* but it doesn't seem to now... may later?                     */
	cr->version = htonl(*((long*) (cr->headBuf+VERSIONLOC)));
	ErrFatalDisplayIf(
	    ((cr->version & 0xffff0000) > (version & 0xffff0000)), 
	    "Protocol version mismatch");
	cr->requestID = htonl(*((long*) (cr->headBuf+RIDLOC)));
	cr->dataSize = htonl(*((long*) (cr->headBuf+SIZELOC)));
	cr->metaSize = htonl(*((long*) (cr->headBuf+METALOC)));

	if (cr->metaSize) {
	  cr->left = cr->metaSize;
	  cr->readingMeta = 1;
	} else if (cr->dataSize) {
	  cr->left = cr->dataSize;
	  cr->readingMeta = 0;
	} else {
	  /* all we are is header! */
	  cr->left = 0;
	  if (signal) *signal = 1;
	  NewChunkCallback(Socket2ConID(s), cr->requestID, 0, 
			   0, NULL, NULL, 0, 0,
			   NULL);
	  break;
	}

	cr->seen = 0;
	if (cr->db) {
	  if (MakeDataHandle(&(cr->dataSize), &(cr->dataBufHand),
			     &(cr->dataID),  cr->db)) {	    
	    /* ERROR MAKING SPACE FOR DATA... CLOSE CONNECTION */
	    if (cr->callback) {
	      if (cr->total) {
		*cr->total = 0;
	      }
	      if (cr->sofar) {
		*cr->sofar = 0;
	      }
	      cr->callback(cr->total, cr->sofar, cr->ptr);
	    }
	    CloseConnection(conID, false);
	    FrmAlert(OutOfMemoryAlert);
	    return;
	  } else if (MakeDataHandle(&(cr->metaSize), &(cr->metaBufHand), 
				    &(cr->metaID), cr->db)) {
	    /* ERROR MAKING SPACE FOR DATA... CLOSE CONNECTION */
	    if (cr->callback) {
	      if (cr->total) {
		*cr->total = 0;
	      }
	      if (cr->sofar) {
		*cr->sofar = 0;
	      }
	      cr->callback(cr->total, cr->sofar, cr->ptr);
	    }
	    CloseConnection(conID, false);
	    FrmAlert(OutOfMemoryAlert);
	  }
	} else {
	  if (cr->dataSize) {
	    cr->dataBufHand = MemHandleNew(cr->dataSize);
	    if (!(cr->dataBufHand)) {
	      CloseConnection(conID, false);
	      FrmAlert(OutOfMemoryAlert);	      
	      return;
	    }
	  }       
	  if (cr->metaSize) {
	    cr->metaBufHand = MemHandleNew(cr->metaSize);
	    if (!(cr->metaBufHand)) {
	      CloseConnection(conID, false);
	      FrmAlert(OutOfMemoryAlert);	      
	      return;
	    }
	  }
	}
	buf += i;
	amt -= i;
	cr->buffed=0;
      }
    } else {
      if (cr->readingMeta) {
	if (amt >= cr->left) {
	  dataPtr = MemHandleLock(cr->metaBufHand);
	  if (cr->db) {
	    DmWrite(dataPtr, cr->seen, buf, cr->left);
	  } else {
	    MemMove(dataPtr+cr->seen, buf, cr->left);
	  }
	  MemHandleUnlock(cr->metaBufHand);
	  cr->seen = 0;
	  amt -= cr->left;
	  buf += cr->left;
	  cr->left = cr->dataSize;
	  cr->readingMeta = 0;
	} else {
	  dataPtr = MemHandleLock(cr->metaBufHand);
	  if (cr->db) {
	    DmWrite(dataPtr, cr->seen, buf, amt);
	  } else {
	    MemMove(dataPtr+cr->seen, buf, amt);
	  }
	  MemHandleUnlock(cr->metaBufHand);
	  cr->seen += amt;
	  cr->left -= amt;
	  amt = 0;
	}
      } else {
	/* reading the actual data now */
	if (amt >= cr->left) {
	  dataPtr = MemHandleLock(cr->dataBufHand);
	  if (cr->db) {
	    DmWrite(dataPtr, cr->seen, buf, cr->left);
	  } else {
	    MemMove(dataPtr+cr->seen, buf, cr->left);
	  }
	  MemHandleUnlock(cr->dataBufHand);
	  NewChunkCallback(Socket2ConID(s), cr->requestID, cr->metaSize, 
			   cr->dataSize, cr->metaBufHand, cr->dataBufHand,
			   cr->metaID, cr->dataID, NULL);
	  /* Signal that we created an event */
	  cr->dataBufHand = NULL;
	  cr->metaBufHand = NULL;
	  if (signal) *signal = 1;
	  cr->seen += cr->left;
	  amt -= cr->left;
  buf += cr->left;
	  cr->left = 0;
	} else {
	  dataPtr = MemHandleLock(cr->dataBufHand);
	  if (cr->db) {
	    DmWrite(dataPtr, cr->seen, buf, amt);
	  } else {
	    MemMove(dataPtr+cr->seen, buf, amt);
	  }
	  MemHandleUnlock(cr->dataBufHand);
	  cr->seen += amt;
	  cr->left -= amt;
	  amt = 0;
	}
      }
      if (cr->callback) {
	if (cr->total) {
	  *(cr->total) = cr->metaSize + cr->dataSize;
	}
	if (cr->sofar) {
	  *(cr->sofar) = cr->readingMeta ? 
	    cr->seen : cr->metaSize + cr->seen;
	}
	cr->callback(cr->total, cr->sofar, 
			    cr->ptr);
      } else {
      }
    }
  }
}

ConID OpenConnection(char * host, unsigned short port, DmOpenRef db) { 
    struct hostent *h;
    ULong **addrp;
    Word err;
    Word iferr;
    Byte allup;
    ConID conID;
    
    NetLibConnectionRefresh(AppNetRefnum, true, &allup, &iferr);
    if (!allup) return -1;

    for (conID = 0; conID < MAX_CONNECTIONS; conID++) {
      if (!conRecs[conID].inUse) {
	break;
      }
    }
   if (conRecs[conID].inUse) {      
      return -1;      
    }

    conRecs[conID].db = db;

    h = gethostbyname(host);
    if (!h) {
      /*ErrFatalDisplayIf(1, host);*/
      return -1;
    }

    conRecs[conID].saddr.sin_family = AF_INET;
    conRecs[conID].saddr.sin_port = htons(port);
    
    for(addrp=(ULong **)h->h_addr_list;*addrp;++addrp) {
      ULong a = htonl(**addrp);
      if (a != INADDR_ANY) {
	conRecs[conID].saddr.sin_addr.s_addr = a;
	break;
      }
    }

    conRecs[conID].sock = socket(PF_INET, SOCK_STREAM, 0);
    if (conRecs[conID].sock < 0) {      
      /*ErrFatalDisplayIf(1, "Cannot create socket");*/
      return -1;
    }

    err = connect(conRecs[conID].sock, 
		  (struct sockaddr *)&conRecs[conID].saddr, 
		  sizeof(conRecs[conID].saddr));
    if (err) {
      /*ErrFatalDisplayIf(1, "Could not connect");*/
	return -1;
    }

    conRecs[conID].inUse = 1;
    conRecs[conID].nextRequest = 1;

    return conID;
}

void RegisterNotifyCallback(ConID conID, DataCallback cb, 
		      DataSize * total, DataSize * sofar, void * ptr) {
  if ((conID < MAX_CONNECTIONS) && (conID >= FIRST_CONNECTION)) {
    conRecs[conID].callback = cb;
    conRecs[conID].total = total;
    conRecs[conID].sofar = sofar;
    conRecs[conID].ptr = ptr;
  }
}

/* if final is true CloseConneciton will destroy the mapping between
   the conid and the server.  Otherwise it will just close the socket */
void CloseConnection(ConID conID, Boolean final) {
  ConRec *c;

  if ((conID >= MAX_CONNECTIONS) || (conID < FIRST_CONNECTION)) {
    return;
  }

  c = &conRecs[conID];

  close(ConID2Socket(conID));

  if (final) {
    c->inUse = 0;
    c->callback = NULL;
  }

  c->left = 0;   
  c->buffed = 0;
  c->seen = 0;
  if (c->db) {
    DmOpenRef db = c->db; 
    UInt index;
    if (c->dataBufHand) {
      DmFindRecordByID(db, c->dataID, &index);
      DmRemoveRecord(db, index);
      c->dataBufHand = NULL;
    }
    if (c->metaBufHand) {
      DmFindRecordByID(db, c->metaID, &index);
      DmRemoveRecord(db, index);
      c->metaBufHand = NULL;
    }
  } else {
    if (c->dataBufHand) {
      MemHandleFree(c->dataBufHand);
      c->dataBufHand = NULL;
    }
    if (c->metaBufHand) {
      MemHandleFree(c->metaBufHand);
      c->metaBufHand = NULL;
    }
  }
}

void CheckNetwork() {
  Int maxSock = 0;
  fd_set reads;
  UInt ok;
  int read;
  int gotone = 0;
  int i;

  do {
    /* Check if there's data available */
    read = 0;
    FD_ZERO(&reads);
    FD_SET(STDIN_FILENO,&reads);
    for (i = FIRST_CONNECTION; i < MAX_CONNECTIONS; i++) {
      if (conRecs[i].inUse && (conRecs[i].sock > 0)) {
	FD_SET(conRecs[i].sock,&reads);
	maxSock = maxSock > conRecs[i].sock ? maxSock : conRecs[i].sock;
      }
    }
    ok = NetLibSelect(AppNetRefnum, maxSock+1, &reads, NULL, NULL, 
		      gotone ? 0 : evtWaitForever, &errno);
    if (ok > 0) {
      for (i = FIRST_CONNECTION; i < MAX_CONNECTIONS; i++) {
	if (conRecs[i].inUse && FD_ISSET(conRecs[i].sock, &reads)) {
	  read = 1;
	  get_data(conRecs[i].sock, ReadCallback, &gotone);
	}
      }
    }
  } while (read);
}

@


1.24
log
@*** empty log message ***
@
text
@d71 28
a361 1
  UInt at = 0;
d405 1
a405 1
	cr->seen = 0;	
d407 11
a417 6
	  if (cr->dataSize) {
	    cr->dataBufHand = DmNewHandle(cr->db, cr->dataSize);
	    DmAttachRecord(cr->db, &at, (Handle) (cr->dataBufHand), NULL);
	    if (!(cr->dataBufHand)) {
	      ErrFatalDisplayIf(1, "Trans: Out of memory");
	      return;
d419 14
a432 12
	    ErrFatalDisplayIf(DmRecordInfo(cr->db, at, NULL, 
					   &(cr->dataID), NULL), 
			      "Trans: Error finding data record");
	  } else {
	    cr->dataBufHand = NULL;
	  }
	  if (cr->metaSize) {
	    cr->metaBufHand = DmNewHandle(cr->db, cr->metaSize);
	    DmAttachRecord(cr->db, &at, (Handle) (cr->metaBufHand), NULL);
	    if (!(cr->metaBufHand)) {
	      ErrFatalDisplayIf(1, "Trans: Out of memory");
	      return;
d434 2
a435 5
	    ErrFatalDisplayIf(DmRecordInfo(cr->db, at, NULL, 
					   &(cr->metaID), NULL), 
			      "Trans: Error finding data record");
	  } else {
	    cr->metaBufHand = NULL;
d441 2
a442 1
	      ErrFatalDisplayIf(1, "Out of memory");
d449 2
a450 1
	      ErrFatalDisplayIf(1, "Out of memory");
d472 1
a472 1
	  cr->left = cr->dataSize;	  
d505 1
a505 1
	  buf += cr->left;
@


1.23
log
@Changed version to 1.0 beta1
@
text
@d572 3
a574 1
void CloseConnection(ConID conID) {
d584 6
a589 1
  c->inUse = 0;
a592 1
  c->callback = NULL;
@


1.22
log
@o Fixed logic big
o Made status bar textful
@
text
@d355 3
a357 2
	ErrFatalDisplayIf((cr->version > version), 
			  "Protocol version mismatch");
@


1.21
log
@*** empty log message ***
@
text
@d121 1
d511 1
d563 1
a563 1
  if ((conID < MAX_CONNECTIONS) || (conID >= FIRST_CONNECTION)) {
@


1.20
log
@close connection bug fixed
@
text
@d590 1
d595 1
d600 1
d604 1
@


1.19
log
@o UI fixed up: scroll bar at bottom.  It goes all black when the page is
  requested, and disappears when the page has arrived completely.  The
  view area is now 150 pixels high.
o Various bugfixes
@
text
@d465 2
d570 2
d575 3
d579 24
a602 1
  conRecs[conID].inUse = 0;
@


1.18
log
@o FlushCache was causing a fatal error.  The problem was the following:

  for (i = numRecs-1; i >= 0; i--) {

  where i was an _unsigned_ long.
  Note that the i >= 0 test can never fail. (D'oh!)

o Error pages were _still_ being cached.  I tracked the problem down to the
  following line (in metadata.c):

  if (info == FindType(data, dataSize, CacheExpr, &size)) {

  That == should have been = (Double D'oh!)

o This morning, Anthony told me about a memory handle fatal error he found
  but couldn't replicate.  I found it, replicated it, and fixed it.  The
  bug occured when you fetch a non-error page after fetching an error page.
  The problem was that a metadata handle wasn't being set to NULL if there
  was no metadata; instead it kept its previous value.
@
text
@d212 1
d231 11
d466 1
a466 1
	  cr->seen = 0;
@


1.17
log
@lots.  I dont remember
@
text
@d376 2
d389 2
@


1.16
log
@splash screen
pick your proxy host
reload changed to refresh
@
text
@a212 1

@


1.15
log
@version numbers added to the protocol
@
text
@d557 1
a557 1
  conRecs[conID].inUse = 0;  
@


1.14
log
@*** empty log message ***
@
text
@d4 1
d7 3
a9 1
/* header is 4 32 bit unsigned words long */
d14 3
a16 1
#define HEADERSIZE 16
d18 1
a18 1
#define RIDLOC 0
d20 1
a20 1
#define METALOC 4
d22 1
a22 1
#define SIZELOC 8
d24 1
a24 1
#define COMPLOC 12
d59 2
a60 1
  
d232 7
d342 3
@


1.13
log
@*** empty log message ***
@
text
@d11 1
a11 1
#define HEADERSIZE 20
a13 2
/* extention header size */
#define HEADLOC 4
d15 1
a15 1
#define METALOC 8
d17 1
a17 1
#define SIZELOC 12
d19 1
a19 1
#define COMPLOC 16
@


1.12
log
@various on/off-line fixes
@
text
@d11 2
a12 1
#define HEADERSIZE 16
d14 8
a21 3
#define METALOC 4
#define SIZELOC 8
#define COMPLOC 12
@


1.11
log
@bug fixes and offline cache
@
text
@d110 2
a111 2
  NetLibConnectionRefresh(AppNetRefnum, true, &allup, &iferr);

d155 1
a155 1
  err = NetLibOpen(AppNetRefnum, &foo);
d189 1
d202 1
@


1.10
log
@dl status bar added
@
text
@d206 11
d219 1
d491 1
a491 1

d515 1
d520 1
a520 1
void RegisterCallback(ConID conID, DataCallback cb, 
d535 1
a535 1
  conRecs[conID].inUse = 0;
@


1.9
log
@Code massivly split
@
text
@a21 1
typedef void (*DataCallback)(Int, unsigned char *, int, void *);
d46 4
d143 5
a147 4
    conRecs[foo].inUse = 0;    
    conRecs[foo].left = 0;    
    conRecs[foo].buffed = 0;    
    conRecs[foo].seen = 0;    
d434 12
d465 1
a465 1
    if (conRecs[conID].inUse) {      
d505 10
@


1.8
log
@Caching works
@
text
@d22 1
d47 1
a47 1

@


1.7
log
@*** empty log message ***
@
text
@a43 1
  /* is just size-left but this makes me happier...OK? */
@


1.6
log
@well, I think I've finally tracked down the last of those
obnoxious invalid handle bugs (knock on wood)
@
text
@d104 4
d184 1
a184 1
  while (!send(*s, data, size, 0)) {    
d438 2
a439 1

d442 2
@


1.5
log
@FIXED OBNIXOUS HANDLE BUGS THAT WERE KILLING THE PILOT.
@
text
@d67 1
a67 1
    return 10;
a73 2
      /*      err = MemHandleFree(c->dataHand);
      if (err) return 1;*/
d75 1
a75 1
      if (err) return 2;
d77 1
a77 1
      if (err) return 3;
a79 2
      /*      err = MemHandleFree(c->metaHand);
      if (err) return 4;*/
d81 1
a81 1
      if (err) return 5;      
d83 1
a83 1
      if (err) return 6;      
d88 1
a88 1
      if (err) return 7;      
d92 1
a92 1
      if (err) return 8;      
d97 1
a97 1
  if (err) return 9;
d327 1
a327 1
	    DmAttachRecord(cr->db, &at, cr->dataBufHand, NULL);
d338 1
a338 1
	    DmAttachRecord(cr->db, &at, cr->metaBufHand, NULL);
@


1.4
log
@browser works with new transport layer
@
text
@d19 1
d47 5
d58 48
d250 1
d269 3
d287 1
d322 1
a322 1
			   0, NULL, NULL, 
d331 1
d333 1
a333 1
	      ErrFatalDisplayIf(1, "Out of memory");
d336 3
d342 1
d344 1
a344 1
	      ErrFatalDisplayIf(1, "Out of memory");
d347 3
d409 2
a410 2
			   cr->dataSize, cr->metaBufHand, cr->dataBufHand, 
			   NULL);
@


1.3
log
@assorted fixes
@
text
@d6 6
a11 5
/* header is 32 bit unsigned words long */
/* request id                           */
/* size                                 */
/* compression type                     */
#define HEADERSIZE 12
d13 3
a15 2
#define SIZELOC 4
#define COMPLOC 8
d17 1
a17 2
#define ConID2Socket(conID) ((Int) conID)
#define Socket2ConID(s) (ConID) s
d22 28
d52 26
d82 11
a92 1
 /* open the net library */
d112 4
a115 1
  static unsigned char buf[1024];
d119 3
a121 2
    ErrNonFatalDisplayIf(1, "Connection Closed!");
    return 0;
d124 2
a125 1
    return s;
d129 6
a134 5
static Err SendData(Int s, DataSize size, unsigned char * data) {
  if (send(s, data, size, 0)) {
    return 0;
  } else {
    return TRANS_ERR_CON_CLOSED;
d136 1
d144 3
d150 1
a150 1
  err = SendData(s, sizeof(RequestID), (unsigned char *) 
d153 1
a153 1
    ErrFatalDisplayIf(err, "Error sending data");
d156 1
a156 1
  err = SendData(s, sizeof(DataSize), (unsigned char *) (&(chunk->size)));
d158 1
a158 1
    ErrFatalDisplayIf(err, "Error sending data");
d161 1
a161 1
  err = SendData(s, sizeof(CompType), (unsigned char *) (&compType));
d163 1
a163 1
    ErrFatalDisplayIf(err, "Error sending data");
d166 1
a166 3
  err = SendData(s, chunk->size, (unsigned char *) 
		 MemHandleLock(chunk->dataHand));
  MemHandleUnlock(chunk->dataHand);
d168 1
a168 1
    ErrFatalDisplayIf(err, "Error sending data");
d171 19
d193 4
a196 3
static void NewChunkCallback(ConID conID, RequestID requestID, DataSize size, 
			     VoidHand dataHand, VoidPtr ncp) {
  static ChunkID chunkID = 0;
d202 1
a202 1
  chunkID++;
d206 4
a209 1
  c->chunkID = chunkID;
d212 2
a213 1
  c->size = size;
a218 1
  
a221 6
  static VoidHand dataBufHand;
  static unsigned char headBuf[HEADERSIZE];
  static int buffed;
  static DataSize size = 0;
  static RequestID requestID = 0;
  static DataSize left = 0;
d223 1
a223 1
  static DataSize red  = 0;
d228 1
d233 70
a302 5
  /* read the entire header before doing anything stupid */
  if (left == 0) {
    if ((amt+buffed) < HEADERSIZE) {
      for (i = 0; i < amt; i++) {
	headBuf[i+buffed] = buf[i];
a303 2
      buffed += amt;
      amt = 0;
d305 57
a361 2
      for (i = 0; buffed+i < HEADERSIZE; i++) {      
	headBuf[i+buffed] = buf[i];
a362 13
      /* warning this may crash the machine because of word alignment */
      /* but it doesn't seem to now... may later?                     */
      requestID = htonl(*((long*) (headBuf+RIDLOC)));
      size = left = htonl(*((long*) (headBuf+SIZELOC)));
      red = 0;
      dataBufHand = MemHandleNew(size);
      if (!dataBufHand) {
	ErrFatalDisplayIf(!dataBufHand, "Out of memory");
	return;
      }
      buf += i;
      amt -= i;
      buffed=0;
a363 21
  } else {
    if (amt >= left) {
      dataPtr = MemHandleLock(dataBufHand);
      MemMove(dataPtr+red, buf, left);
      MemHandleUnlock(dataBufHand);
      NewChunkCallback(Socket2ConID(s), requestID, size, dataBufHand, NULL);
      /* Signal that we created an event */
      if (signal) *signal = 1;
      red = 0;
      amt -= left;
      buf += left;
      left = 0;
    } else {
      dataPtr = MemHandleLock(dataBufHand);
      MemMove(dataPtr+red, buf, amt);
      MemHandleUnlock(dataBufHand);
      red += amt;
      left -= amt;
      amt = 0;
    }
  }
d367 1
a367 1
ConID OpenConnection(char * host, unsigned short port) { 
a368 1
    struct sockaddr_in sockaddr; 
d371 13
a383 1
    Int sock;
d387 2
a388 2
	ErrFatalDisplayIf(1, "Can't get hostname");
	return 0;
d391 2
a392 2
    sockaddr.sin_family = AF_INET;
    sockaddr.sin_port = htons(port);
d397 1
a397 1
	sockaddr.sin_addr.s_addr = a;
d402 4
a405 4
    sock = socket(PF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
	ErrFatalDisplayIf(1, "Cannot create socket");
	return 0;
d408 3
a410 1
    err = connect(sock, (struct sockaddr *)&sockaddr, sizeof(sockaddr));
d412 2
a413 2
	ErrFatalDisplayIf(1, "Could not connect");
	return 0;
d416 3
a418 1
    return Socket2ConID(sock);
d422 3
d426 1
d429 2
a430 2
void CheckNetwork(ConID conID) {
  Int sock;
d435 2
a436 3
      
  sock = ConID2Socket(conID);
  
d440 6
a445 9
    if (sock > 0) {
      FD_ZERO(&reads);
      FD_SET(STDIN_FILENO,&reads);
      FD_SET(sock,&reads);
      ok = NetLibSelect(AppNetRefnum, sock+1, &reads, NULL, NULL, 
			gotone ? 0 : evtWaitForever, &errno);
      if (ok > 0 && FD_ISSET(sock,&reads)) {
        read = 1;
	sock = get_data(sock, ReadCallback, &gotone);
d448 11
a458 1
  } while (read);  
d460 1
@


1.2
log
@Close to working
@
text
@d50 1
a50 1
  if (read == 0) {
d239 2
d246 2
a247 2
    if (sock >= 0) {
      int gotone = 0;
d252 3
a254 2
			evtWaitForever, &errno);
      if (FD_ISSET(sock,&reads)) {
a256 1
      if (gotone) break;
d258 1
a258 1
  } while (FD_ISSET(sock,&reads));  
@


1.1
log
@.
@
text
@d139 2
@
