head	1.10;
access;
symbols
	v15b:1.10
	v10b3:1.10
	v10b2:1.8
	v10b1:1.7;
locks; strict;
comment	@ * @;


1.10
date	97.10.27.16.12.49;	author iang;	state Exp;
branches;
next	1.9;

1.9
date	97.10.26.19.40.58;	author iang;	state Exp;
branches;
next	1.8;

1.8
date	97.10.21.16.25.00;	author iang;	state Exp;
branches;
next	1.7;

1.7
date	97.09.12.21.46.06;	author iang;	state Exp;
branches;
next	1.6;

1.6
date	97.08.27.20.49.29;	author iang;	state Exp;
branches;
next	1.5;

1.5
date	97.08.04.20.48.55;	author iang;	state Exp;
branches;
next	1.4;

1.4
date	97.08.04.20.05.15;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.07.11.17.45.40;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	97.06.23.03.36.02;	author iang;	state Exp;
branches;
next	1.1;

1.1
date	97.06.23.03.03.38;	author iang;	state Exp;
branches;
next	;


desc
@@


1.10
log
@o Fixed 2bit issues with offscreen windows
o added progress bar (a la Postman)
@
text
@#include <Pilot.h>
#include <UI/ScrDriver.h>
#include "2bit.h"
#include "globals.h"
#include "callback.h"

#ifndef NOTWOBIT

#define FTR_2BIT 25  /* two bits :-) */

#define MAGICVAL 0x2b828184

static volatile DWord magic = MAGICVAL;

typedef struct {
    const void *SSA;
    unsigned char VPW;
    unsigned char PICF;
    unsigned char LBAR;
    unsigned char FRCM;
    Word GPMR;
    unsigned char POSR;
} DispParams;

static WinHandle twobitwindow = NULL;
static DispParams savedispparams;

typedef void (*ScrLineRoutineType)(WinPtr, SWord, SWord, SWord, SWord);
static ScrLineRoutineType ScrLineRoutine_1bit = NULL;

typedef void (*ScrRectangleRoutineType)(WinPtr, SWord, SWord, SWord, SWord);
static ScrRectangleRoutineType ScrRectangleRoutine_1bit = NULL;

typedef void (*ScrDrawCharsType)(WinPtr, SWord, SWord, SWord, SWord, SWord,
    SWord, SWord, SWord, CharPtr, Word, FontPtr);
static ScrDrawCharsType ScrDrawChars_1bit = NULL;

typedef Err (*ScrCopyRectangleType)(WinPtr, WinPtr, SWord, SWord, SWord,
    SWord, SWord, SWord);
static ScrCopyRectangleType ScrCopyRectangle_1bit = NULL;

static int in_2bit = 0;

static const unsigned short grlmask[8] = {
    0xffff, 0x3fff, 0x0fff, 0x03ff, 0x00ff, 0x003f, 0x000f, 0x0003 };
static const unsigned short grrmask[8] = {
    0xc000, 0xf000, 0xfc00, 0xff00, 0xffc0, 0xfff0, 0xfffc, 0xffff };
static const unsigned short bw2gr[256] = {
    0x0000, 0x0003, 0x000c, 0x000f, 0x0030, 0x0033, 0x003c, 0x003f,
    0x00c0, 0x00c3, 0x00cc, 0x00cf, 0x00f0, 0x00f3, 0x00fc, 0x00ff,
    0x0300, 0x0303, 0x030c, 0x030f, 0x0330, 0x0333, 0x033c, 0x033f,
    0x03c0, 0x03c3, 0x03cc, 0x03cf, 0x03f0, 0x03f3, 0x03fc, 0x03ff,
    0x0c00, 0x0c03, 0x0c0c, 0x0c0f, 0x0c30, 0x0c33, 0x0c3c, 0x0c3f,
    0x0cc0, 0x0cc3, 0x0ccc, 0x0ccf, 0x0cf0, 0x0cf3, 0x0cfc, 0x0cff,
    0x0f00, 0x0f03, 0x0f0c, 0x0f0f, 0x0f30, 0x0f33, 0x0f3c, 0x0f3f,
    0x0fc0, 0x0fc3, 0x0fcc, 0x0fcf, 0x0ff0, 0x0ff3, 0x0ffc, 0x0fff,
    0x3000, 0x3003, 0x300c, 0x300f, 0x3030, 0x3033, 0x303c, 0x303f,
    0x30c0, 0x30c3, 0x30cc, 0x30cf, 0x30f0, 0x30f3, 0x30fc, 0x30ff,
    0x3300, 0x3303, 0x330c, 0x330f, 0x3330, 0x3333, 0x333c, 0x333f,
    0x33c0, 0x33c3, 0x33cc, 0x33cf, 0x33f0, 0x33f3, 0x33fc, 0x33ff,
    0x3c00, 0x3c03, 0x3c0c, 0x3c0f, 0x3c30, 0x3c33, 0x3c3c, 0x3c3f,
    0x3cc0, 0x3cc3, 0x3ccc, 0x3ccf, 0x3cf0, 0x3cf3, 0x3cfc, 0x3cff,
    0x3f00, 0x3f03, 0x3f0c, 0x3f0f, 0x3f30, 0x3f33, 0x3f3c, 0x3f3f,
    0x3fc0, 0x3fc3, 0x3fcc, 0x3fcf, 0x3ff0, 0x3ff3, 0x3ffc, 0x3fff,
    0xc000, 0xc003, 0xc00c, 0xc00f, 0xc030, 0xc033, 0xc03c, 0xc03f,
    0xc0c0, 0xc0c3, 0xc0cc, 0xc0cf, 0xc0f0, 0xc0f3, 0xc0fc, 0xc0ff,
    0xc300, 0xc303, 0xc30c, 0xc30f, 0xc330, 0xc333, 0xc33c, 0xc33f,
    0xc3c0, 0xc3c3, 0xc3cc, 0xc3cf, 0xc3f0, 0xc3f3, 0xc3fc, 0xc3ff,
    0xcc00, 0xcc03, 0xcc0c, 0xcc0f, 0xcc30, 0xcc33, 0xcc3c, 0xcc3f,
    0xccc0, 0xccc3, 0xcccc, 0xcccf, 0xccf0, 0xccf3, 0xccfc, 0xccff,
    0xcf00, 0xcf03, 0xcf0c, 0xcf0f, 0xcf30, 0xcf33, 0xcf3c, 0xcf3f,
    0xcfc0, 0xcfc3, 0xcfcc, 0xcfcf, 0xcff0, 0xcff3, 0xcffc, 0xcfff,
    0xf000, 0xf003, 0xf00c, 0xf00f, 0xf030, 0xf033, 0xf03c, 0xf03f,
    0xf0c0, 0xf0c3, 0xf0cc, 0xf0cf, 0xf0f0, 0xf0f3, 0xf0fc, 0xf0ff,
    0xf300, 0xf303, 0xf30c, 0xf30f, 0xf330, 0xf333, 0xf33c, 0xf33f,
    0xf3c0, 0xf3c3, 0xf3cc, 0xf3cf, 0xf3f0, 0xf3f3, 0xf3fc, 0xf3ff,
    0xfc00, 0xfc03, 0xfc0c, 0xfc0f, 0xfc30, 0xfc33, 0xfc3c, 0xfc3f,
    0xfcc0, 0xfcc3, 0xfccc, 0xfccf, 0xfcf0, 0xfcf3, 0xfcfc, 0xfcff,
    0xff00, 0xff03, 0xff0c, 0xff0f, 0xff30, 0xff33, 0xff3c, 0xff3f,
    0xffc0, 0xffc3, 0xffcc, 0xffcf, 0xfff0, 0xfff3, 0xfffc, 0xffff
};

static void update_2bit(unsigned char *base, SWord x1, SWord y1,
    SWord x2, SWord yextent)
{
    unsigned char *bwstartline = base + y1*20;
    unsigned short *grstartline = ((unsigned short *)twobitwindow->displayAddr)
				    + y1*20;
    unsigned short lmask = grlmask[x1 & 7];
    unsigned short rmask = grrmask[x2 & 7];

    if (in_2bit) return;
    for(;yextent;--yextent) {
	if ((x1 >> 3) == (x2 >> 3)) {
	    /* Only one byte */
	    unsigned short mask = (lmask & rmask);
	    unsigned short grval = grstartline[x1 >> 3] & ~mask;
	    grval |= (bw2gr[bwstartline[x1>>3]] & mask);
	    grstartline[x1 >> 3] = grval;
	} else {
	    SWord i;
	    /* The first (partial) byte */
	    unsigned short grval = grstartline[x1 >> 3] & ~lmask;
	    grval |= (bw2gr[bwstartline[x1>>3]] & lmask);
	    grstartline[x1 >> 3] = grval;
	    /* Middle bytes */
	    for(i=(x1>>3)+1;i<(x2>>3);++i) {
		grstartline[i] = bw2gr[bwstartline[i]];
	    }
	    /* The last (partial) byte */
	    grval = grstartline[x2 >> 3] & ~rmask;
	    grval |= (bw2gr[bwstartline[x2>>3]] & rmask);
	    grstartline[x2 >> 3] = grval;
	}
	bwstartline += 20;
	grstartline += 20;
    }
}

static void ScrLineRoutine_2bit(WinPtr pWindow, SWord x1, SWord y1, SWord x2,
    SWord y2)
{
    CALLBACK_INTERAPP_PROLOGUE(APPTYPE, FTR_2BIT, magic, MAGICVAL)

    ScrLineRoutine_1bit(pWindow, x1, y1, x2, y2);
    if (x1 > x2) {
	SWord t = x1;
	x1 = x2;
	x2 = t;
    }
    if (y1 > y2) {
	SWord t = y1;
	y1 = y2;
	y2 = t;
    }
    if (! pWindow->windowFlags.offscreen) {
	update_2bit(pWindow->displayAddr,x1,y1,x2,y2-y1+1);
    }

    CALLBACK_INTERAPP_EPILOGUE
}

static void ScrRectangleRoutine_2bit(WinPtr pWindow, SWord x, SWord y,
    SWord extentX, SWord extentY)
{
    CALLBACK_INTERAPP_PROLOGUE(APPTYPE, FTR_2BIT, magic, MAGICVAL)

    ScrRectangleRoutine_1bit(pWindow, x, y, extentX, extentY);
    if (! pWindow->windowFlags.offscreen) {
	update_2bit(pWindow->displayAddr,x,y,x+extentX-1,extentY);
    }

    CALLBACK_INTERAPP_EPILOGUE
}

static void ScrDrawChars_2bit(WinPtr pWindow, SWord xLoc, SWord yLoc,
    SWord xExtent, SWord yExtent, SWord clipTop, SWord clipLeft,
    SWord clipBottom, SWord clipRight, CharPtr chars, Word len,
    FontPtr fontPtr)
{
    CALLBACK_INTERAPP_PROLOGUE(APPTYPE, FTR_2BIT, magic, MAGICVAL)

    ScrDrawChars_1bit(pWindow, xLoc, yLoc, xExtent, yExtent, clipTop,
	clipLeft, clipBottom, clipRight, chars, len, fontPtr);
    if (! pWindow->windowFlags.offscreen) {
	update_2bit(pWindow->displayAddr,xLoc,yLoc,xLoc+xExtent-1,yExtent);
    }

    CALLBACK_INTERAPP_EPILOGUE
}

static Err ScrCopyRectangle_2bit(WinPtr sourceWindow, WinPtr destWindow,
    SWord fromX, SWord fromY, SWord toX, SWord toY, SWord bitCount,
    SWord lineCount) 
{
    Err retval;
    CALLBACK_INTERAPP_PROLOGUE(APPTYPE, FTR_2BIT, magic, MAGICVAL)

    retval = ScrCopyRectangle_1bit(sourceWindow, destWindow, fromX, fromY,
	toX, toY, bitCount, lineCount);
    if (! destWindow->windowFlags.offscreen) {
	update_2bit(destWindow->displayAddr,toX,toY,
	    toX+bitCount-1,lineCount);
    }

    CALLBACK_INTERAPP_EPILOGUE
    return retval;
}

/* Set up the display in either greyscale or B/W mode.  vpw is the virtual
   page width _in words_ (word = 16 bits).  The info used here was derived
   from code in a _PDA Developers_ article by Edward Keyes. */
static void setgrey(DispParams *curparams, const void *newSSA,
    DispParams *newparams)
{
    const void * volatile *SSA = (const void**)0xfffffa00;
    volatile unsigned char *CKCON = (unsigned char *)0xfffffa27;
    volatile unsigned char *VPW = (unsigned char *)0xfffffa05;
    volatile unsigned char *PICF = (unsigned char *)0xfffffa20;
    volatile unsigned char *LBAR = (unsigned char *)0xfffffa29;
    volatile unsigned char *FRCM = (unsigned char *)0xfffffa31;
    volatile unsigned char *POSR = (unsigned char *)0xfffffa2d;
    volatile Word *GPMR = (Word *)0xfffffa32;
    unsigned gray0 = 0, gray1 = 3, gray2 = 4, gray3 = 6;

    /* Save the old display parameters */
    if (curparams) {
	curparams->SSA = *SSA;
	curparams->VPW = *VPW;
	curparams->PICF = *PICF;
	curparams->LBAR = *LBAR;
	curparams->FRCM = *FRCM;
	curparams->GPMR = *GPMR;
	curparams->POSR = *POSR;
    }

    if (newparams && !newparams->SSA && !newSSA) return;

    /* Turn off the display while we fiddle */
    *CKCON &= 0x7f;
    SysTaskDelay(2);

    if (newSSA) {
	*SSA = newSSA;
    }

    if (newparams) {
	/* We are restoring parameters */
	if (!newSSA) {
	    *SSA = newparams->SSA;
	}
	*VPW = newparams->VPW;
	*PICF = newparams->PICF;
	*LBAR = newparams->LBAR;
	*FRCM = newparams->FRCM;
	*GPMR = newparams->GPMR;
	*POSR = newparams->POSR;
    } else {
	/* We are going to greyscale */
        *VPW = 20;
        *PICF |= 0x01;
        *LBAR = 22;
        *FRCM = 0xb9;
        *GPMR = gray2 + (gray3<<4) + (gray0<<8) + (gray1<<12);
        *POSR &= 0xf0;
    }
    /*
	If we ever have to forcefully go to b/w mode, do this:

        *VPW = 10;
        *PICF &= 0xfe;
        *LBAR = 10;
        *POSR &= 0xf0;
    */

    /* Turn the display back on */
    SysTaskDelay(2);
    *CKCON |= 0x80;
}

void WinDraw2Bitmap(BitmapPtr image, SWord x, SWord y)
{
    WinHandle olddraw;
    RectangleType oldclip1bit, oldclip2bit, newclip;
    int save_2bit = in_2bit;
    
    in_2bit = 1;
    olddraw = WinGetDrawWindow();
    WinGetClip(&oldclip1bit);
    newclip.topLeft.x = 2*oldclip1bit.topLeft.x;
    newclip.topLeft.y = oldclip1bit.topLeft.y;
    newclip.extent.x = 2*oldclip1bit.extent.x;
    newclip.extent.y = oldclip1bit.extent.y;
    WinSetDrawWindow(twobitwindow);
    WinGetClip(&oldclip2bit);
    WinSetClip(&newclip);
    WinDrawBitmap(image, 2*x, y);
    WinSetClip(&oldclip2bit);
    WinSetDrawWindow(olddraw);
    in_2bit = save_2bit;
}

void WinCopy2BitRectangle(WinHandle win, RectanglePtr srcr, SWord dx, SWord dy,
    ScrOperation mode)
{
    RectangleType srcr2 = *srcr;
    int save_2bit = in_2bit;

    srcr2.topLeft.x *= 2;
    srcr2.extent.x *= 2;
    in_2bit = 1;
    WinCopyRectangle(win, win, srcr, dx, dy, mode);
    WinCopyRectangle(twobitwindow, twobitwindow, &srcr2, dx*2, dy, mode);
    in_2bit = save_2bit;
}

void enable_2bit(void)
{
    Err err;
    WinHandle olddraw;

    /* Allocate a window */
    twobitwindow = WinCreateOffscreenWindow(320,160,screenFormat,&err);
    olddraw = WinGetDrawWindow();
    WinSetDrawWindow(twobitwindow);
    WinEraseWindow();
    WinSetDrawWindow(olddraw);

    /* Set up trap patches */
    ScrLineRoutine_1bit =
	(ScrLineRoutineType)GSysDispatchTableP[sysTrapScrLineRoutine-sysTrapBase];
    GSysDispatchTableP[sysTrapScrLineRoutine-sysTrapBase] =
	(Ptr)ScrLineRoutine_2bit;

    ScrRectangleRoutine_1bit =
	(ScrRectangleRoutineType)GSysDispatchTableP[sysTrapScrRectangleRoutine-sysTrapBase];
    GSysDispatchTableP[sysTrapScrRectangleRoutine-sysTrapBase] =
	(Ptr)ScrRectangleRoutine_2bit;

    ScrDrawChars_1bit =
	(ScrDrawCharsType)GSysDispatchTableP[sysTrapScrDrawChars-sysTrapBase];
    GSysDispatchTableP[sysTrapScrDrawChars-sysTrapBase] =
	(Ptr)ScrDrawChars_2bit;

    ScrCopyRectangle_1bit =
	(ScrCopyRectangleType)GSysDispatchTableP[sysTrapScrCopyRectangle-sysTrapBase];
    GSysDispatchTableP[sysTrapScrCopyRectangle-sysTrapBase] =
	(Ptr)ScrCopyRectangle_2bit;

    /* Go 2-bit */
    setgrey(&savedispparams, (const void *)twobitwindow->displayAddr, NULL);
    REGISTER_INTERAPP_CALLBACK(APPTYPE, FTR_2BIT)
}

void disable_2bit(void)
{
    /* Go 1-bit */
    DEREGISTER_INTERAPP_CALLBACK(APPTYPE, FTR_2BIT)
    setgrey(NULL, NULL, &savedispparams);

    /* Restore traps */
    GSysDispatchTableP[sysTrapScrLineRoutine-sysTrapBase] =
	(Ptr)ScrLineRoutine_1bit;

    GSysDispatchTableP[sysTrapScrRectangleRoutine-sysTrapBase] =
	(Ptr)ScrRectangleRoutine_1bit;

    GSysDispatchTableP[sysTrapScrDrawChars-sysTrapBase] =
	(Ptr)ScrDrawChars_1bit;

    GSysDispatchTableP[sysTrapScrCopyRectangle-sysTrapBase] =
	(Ptr)ScrCopyRectangle_1bit;

    /* Delete the window */
    WinDeleteWindow(twobitwindow, false);
}

#endif /* !NOTWOBIT */
@


1.9
log
@Added a "smarter" scrolling routine; copy the overlapping rectangle, and only
erase and update the remaining gnomon
@
text
@d136 3
a138 1
    update_2bit(pWindow->displayAddr,x1,y1,x2,y2-y1+1);
d149 3
a151 1
    update_2bit(pWindow->displayAddr,x,y,x+extentX-1,extentY);
d165 3
a167 1
    update_2bit(pWindow->displayAddr,xLoc,yLoc,xLoc+xExtent-1,yExtent);
@


1.8
log
@Alarms and Find should no longer crash the Pilot.
@
text
@d277 14
@


1.7
log
@o UI fixed up: scroll bar at bottom.  It goes all black when the page is
  requested, and disappears when the page has arrived completely.  The
  view area is now 150 pixels high.
o Various bugfixes
@
text
@d4 1
d9 6
d123 1
a123 1
    CALLBACK_PROLOGUE
d138 1
a138 1
    CALLBACK_EPILOGUE
d144 1
a144 1
    CALLBACK_PROLOGUE
d149 1
a149 1
    CALLBACK_EPILOGUE
d157 1
a157 1
    CALLBACK_PROLOGUE
d163 1
a163 1
    CALLBACK_EPILOGUE
d171 1
a171 1
    CALLBACK_PROLOGUE
d180 1
a180 1
    CALLBACK_EPILOGUE
d312 1
d318 1
@


1.6
log
@Made wingman restore previous display modes upon exit, rather than
necessaily switching to b/w.
@
text
@d251 1
d256 5
d262 2
d265 1
@


1.5
log
@*** empty log message ***
@
text
@d6 11
a16 1
#ifdef TWOBIT
d19 1
a19 1
static const void *oldSSA = NULL;
d178 4
a181 3
   page width _in words_ (word = 16 bits).  This bit derived from code
   in a _PDA Developers_ article by Edward Keyes. */
static const void *setgrey(int grey, const void *newSSA, unsigned char vpw)
a182 1
    const void *oldSSA;
d193 14
a206 1
    oldSSA = *SSA;
d208 20
a227 3
    *SSA = newSSA;
    if (grey) {
        *VPW = vpw;
d233 5
a237 2
    } else {
        *VPW = vpw;
d241 3
a243 1
    }
a245 1
    return oldSSA;
d295 1
a295 1
    oldSSA = setgrey(1, (const void *)twobitwindow->displayAddr, 20);
d301 1
a301 1
    if (oldSSA) setgrey(0, oldSSA, 10);
d320 1
a320 1
#endif /* TWOBIT */
@


1.4
log
@*** empty log message ***
@
text
@a0 2
#ifdef TWOBIT

d6 2
d275 1
@


1.3
log
@super-speedy 2-bit mode
@
text
@d1 2
d275 1
@


1.2
log
@2bit works!
@
text
@d2 1
d6 158
a163 5
static const void *bwSSA = NULL;
static WinHandle disp2bit = NULL;
static WinHandle dispmask = NULL;
typedef Word (*cjevwaitType)(void *, ULong, ULong, ULong, ULong);
static cjevwaitType cjevwait = NULL;
d202 1
a202 44
static const unsigned char bw2gr[16] = {
    0x00, 0x03, 0x0c, 0x0f, 0x30, 0x33, 0x3c, 0x3f,
    0xc0, 0xc3, 0xcc, 0xcf, 0xf0, 0xf3, 0xfc, 0xff
};

static void greyify(const unsigned char *bwssa, unsigned char *grssa,
    unsigned char *grmask)
{
    const unsigned char *bwptr = bwssa;
    const unsigned char *bwend = bwssa + 20*160;
    unsigned char mask0, mask1, res;
    unsigned char mask;

    while(bwptr < bwend) {
	mask = *grmask;
	mask0 = bw2gr[mask >> 4];
	mask1 = bw2gr[mask & 0x0f];
	res = grssa[0] & mask0;
	res |= (~mask0)&bw2gr[(*bwptr)>>4];
	grssa[0] = res;
	res = grssa[1] & mask1;
	res |= (~mask1)&bw2gr[(*bwptr)&0x0f];
	grssa[1] = res;
	++grmask;
	++bwptr;
	grssa += 2;
    }
}

static Word fakecjevwait(void *a, ULong b, ULong c, ULong d, ULong e)
{
    Word ret;
    CALLBACK_PROLOGUE

    if (bwSSA && disp2bit && dispmask) {
	greyify(bwSSA, disp2bit->displayAddr, dispmask->displayAddr);
    }
    ret = cjevwait(a,b,c,d,e);

    CALLBACK_EPILOGUE
    return ret;
}

void enable_2bit(void)
a203 1
    Err err;
d205 1
a205 23

    disp2bit = WinCreateOffscreenWindow(160*2,160,screenFormat,&err);
    dispmask = WinCreateOffscreenWindow(160,160,screenFormat,&err);

    olddraw = WinGetDrawWindow();
    WinSetDrawWindow(disp2bit);
    WinEraseWindow();
    WinSetDrawWindow(dispmask);
    WinEraseWindow();
    WinSetDrawWindow(olddraw);

    cjevwait = (cjevwaitType)GSysDispatchTableP[715];
    GSysDispatchTableP[715] = (Ptr)fakecjevwait;

    bwSSA = setgrey(1, (const void *)disp2bit->displayAddr, 20);
}

void disable_2bit(void)
{
    if (bwSSA) {
	setgrey(0, bwSSA, 10);
	bwSSA = NULL;
    }
d207 1
a207 21
    if (cjevwait) {
	GSysDispatchTableP[715] = (Ptr)cjevwait;
	cjevwait = NULL;
    }

    if (disp2bit) {
	WinDeleteWindow(disp2bit, false);
	disp2bit = NULL;
    }

    if (dispmask) {
	WinDeleteWindow(dispmask, false);
	dispmask = NULL;
    }
}

void WinEraseWindow_2bit(void)
{
    WinHandle olddraw;

    WinEraseWindow();
d209 2
a210 8
    if (disp2bit) {
	WinSetDrawWindow(disp2bit);
	WinEraseWindow();
    }
    if (dispmask) {
	WinSetDrawWindow(dispmask);
	WinEraseWindow();
    }
d212 1
d215 1
a215 131
void WinDrawBitmap_2bit(BitmapPtr image, SWord x, SWord y)
{
    WinHandle olddraw;

    olddraw = WinGetDrawWindow();
    if (disp2bit) {
	WinSetDrawWindow(disp2bit);
	WinDrawBitmap(image, 2*x, y);
    }
    if (dispmask) {
	RectangleType r;

	r.topLeft.x = x;
	r.topLeft.y = y;
	r.extent.x = image->width/2;
	r.extent.y = image->height;
	WinSetDrawWindow(dispmask);
	WinDrawRectangle(&r, 0);
    }
    WinSetDrawWindow(olddraw);
}

#if 0
static void draw_2bit(void)
{
    WinHandle olddraw;
    BitmapPtr bmp;
    VoidHand hBmp;

    hBmp = DmGetResource('Tbmp', 1001);
    if (!hBmp) return;
    bmp = MemHandleLock(hBmp);

    olddraw = WinGetDrawWindow();
    WinSetDrawWindow(offwin);
    WinDrawBitmap(bmp, 85*2, 45);
    WinSetDrawWindow(olddraw);

    MemHandleUnlock(hBmp);
    DmReleaseResource(hBmp);
}

static Boolean MainFormHandleEvent (EventPtr e)
{
    Boolean handled = false;
    FormPtr frm;

    CALLBACK_PROLOGUE
    
    switch (e->eType) {
    case frmOpenEvent:
	frm = FrmGetActiveForm();
	FrmDrawForm(frm);
	draw_2bit();
	handled = true;
	break;

    case frmUpdateEvent:
    	if (e->data.frmUpdate.updateCode == frmRedrawUpdateCode) {
	    FrmUpdateForm(MainForm, 1);
	} else if (e->data.frmUpdate.updateCode == 1) {
	    /* Draw extra 2-bit stuff */
	    draw_2bit();
	    handled = true;
	}
	break;

    case frmCloseEvent:
	twobitwin = NULL;
	break;

    case menuEvent:
	MenuEraseStatus(NULL);

	switch(e->data.menu.itemID) {
	}

    	handled = true;
	break;

    case ctlSelectEvent:
	switch(e->data.ctlEnter.controlID) {
	}
	break;

#if 0
    case winEnterEvent: case winExitEvent:
	if (twobitwin && e->data.winEnter.enterWindow == twobitwin) {
	    /* Go 2-bit */
	    oldSSA = setgrey(1, (const void *)offwin->displayAddr, 20);
	} else {
	    /* Go 1-bit */
	    if (oldSSA) setgrey(0, oldSSA, 10);
	}
	break;
#endif

    default:
        break;
    }

    CALLBACK_EPILOGUE

    return handled;
}

static Boolean ApplicationHandleEvent(EventPtr e)
{
    FormPtr frm;
    Word    formId;
    Boolean handled = false;

    if (e->eType == frmLoadEvent) {
	formId = e->data.frmLoad.formID;
	frm = FrmInitForm(formId);
	twobitwin = (WinHandle)frm;
	FrmSetActiveForm(frm);

	switch(formId) {
	case MainForm:
	    FrmSetEventHandler(frm, MainFormHandleEvent);
	    break;
	}
	handled = true;
    }

    return handled;
}

/* Get preferences, open (or create) app database */
static Word StartApplication(void)
a219 3
    cjevwait = (cjevwaitType)GSysDispatchTableP[715];
    GSysDispatchTableP[715] = (Ptr)fakecjevwait;

d221 1
a221 1
    offwin = WinCreateOffscreenWindow(320,160,screenFormat,&err);
d223 1
a223 1
    WinSetDrawWindow(offwin);
d227 20
a246 1
    FrmGotoForm(MainForm);
d249 1
a249 3
    oldSSA = setgrey(1, (const void *)offwin->displayAddr, 20);

    return 0;
d252 1
a252 2
/* Save preferences, close forms, close app database */
static void StopApplication(void)
d257 3
a259 24
    FrmSaveAllForms();
    FrmCloseAllForms();

    WinDeleteWindow(offwin, false);
    GSysDispatchTableP[715] = (Ptr)cjevwait;
}

/* The main event loop */
static void EventLoop(void)
{
    Word err;
    EventType e;

    do {
	EvtGetEvent(&e, 10);
	if (! SysHandleEvent (&e)) {
	    if (! MenuHandleEvent (NULL, &e, &err)) {
		if (! ApplicationHandleEvent (&e)) {
		    FrmDispatchEvent (&e);
		}
	    }
	}
    } while (e.eType != appStopEvent);
}
d261 2
a262 5
/* Main entry point; it is unlikely you will need to change this except to
   handle other launch command codes */
DWord PilotMain(Word cmd, Ptr cmdPBP, Word launchFlags)
{
    Word err;
d264 2
a265 1
    if (cmd == sysAppLaunchCmdNormalLaunch) {
d267 2
a268 12
#ifdef DEBUG
	StartDebug();
#endif
	err = StartApplication();
	if (err) return err;

	EventLoop();
	StopApplication();

    } else {
	return sysErrParamErr;
    }
d270 2
a271 1
    return 0;
a272 1
#endif
@


1.1
log
@2bit almost ready
@
text
@d7 1
a9 1
static VoidHand clipblocks = NULL;
d53 2
a54 17
static unsigned short grmask(int bwoff)
{
    unsigned short ret = 0;
    if (bwoff < 20*45 || bwoff > 20*118) ret = 0;
    else {
	switch(bwoff%20) {
	    case 10: ret = 0x003f; break;
	    case 11: case 12: case 13: case 14: case 15: case 16:
		ret = 0xffff; break;
	    case 17: ret = 0xfc00; break;
	    default: ret = 0; break;
	}
    }
    return ret;
}

static void greyify(const unsigned char *bwssa, unsigned char *grssa)
d59 2
a60 1
    unsigned short mask;
d62 3
a64 3
	mask = grmask(bwptr-bwssa);
	mask0 = mask >> 8;
	mask1 = mask & 0xff;
d71 1
d82 3
a84 1
    if (bwSSA && disp2bit) greyify(bwSSA, disp2bit->displayAddr);
d97 1
d102 2
d128 5
d140 1
a140 5
    if (clipblocks) {
	MemHandleUnlock(clipblocks);
	MemHandleFree(clipblocks);
	clipblocks = NULL;
    }
a141 1
	olddraw = WinGetDrawWindow();
a143 1
	WinSetDrawWindow(olddraw);
d145 5
d156 1
a157 1
	olddraw = WinGetDrawWindow();
a159 1
	WinSetDrawWindow(olddraw);
d161 11
@
