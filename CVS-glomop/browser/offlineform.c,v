head	1.9;
access;
symbols
	v15b:1.9
	v10b3:1.7
	v10b2:1.6
	v10b1:1.6;
locks; strict;
comment	@ * @;


1.9
date	97.11.15.00.26.11;	author aspolito;	state Exp;
branches;
next	1.8;

1.8
date	97.11.09.21.43.27;	author iang;	state Exp;
branches;
next	1.7;

1.7
date	97.10.25.19.50.28;	author iang;	state Exp;
branches;
next	1.6;

1.6
date	97.09.18.21.48.20;	author aspolito;	state Exp;
branches;
next	1.5;

1.5
date	97.09.18.21.34.18;	author aspolito;	state Exp;
branches;
next	1.4;

1.4
date	97.09.18.21.31.05;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.21.46.11;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	97.08.28.01.16.27;	author aspolito;	state Exp;
branches;
next	1.1;

1.1
date	97.08.09.00.26.52;	author aspolito;	state Exp;
branches;
next	;


desc
@@


1.9
log
@sendURL much changed and much prettier...history works now.
@
text
@#include <Pilot.h>
#include "globals.h"
#include "callback.h"
#include "offlineform.h"
#include "send.h"
#include "history.h"
#include "cache.h"
#include "notify.h"
#include "utils.h"
#include "editmenu.h"

static Int editItem;

void OfflineDrawRecord(VoidPtr tableP, Word row, Word column, 
		       RectanglePtr bounds) {
  VoidHand recHandle;
  CharPtr recText;
  Int textLen, width;
  Boolean fits;
  UInt recordNum = 0;
  FontID currFont;
  char * buf;

  CALLBACK_PROLOGUE

  WinEraseRectangle(bounds, 0); 
  recordNum = (UInt) TblGetItemInt (tableP, row, column);

  currFont = FntSetFont (stdFont);
  
  recHandle = DmGetRecord(offlineInfoDB, recordNum);
  buf = (char *) MemHandleLock(recHandle);
  recText = buf + sizeof(ULong) + sizeof(Word) + sizeof(DWord);
  if (StrLen(recText)+1+sizeof(ULong)+sizeof(Word)+sizeof(DWord)
      < MemHandleSize(recHandle)) {
    recText = (char *) recText + StrLen(recText)+1;
  }
  width = bounds->extent.x - 2;
  textLen = StrLen(recText);
  FntCharsInWidth(recText, &width, &textLen, &fits);
  
  WinDrawChars(recText, textLen, bounds->topLeft.x, bounds->topLeft.y);
  
  MemHandleUnlock(recHandle);
  
  DmReleaseRecord(offlineInfoDB, recordNum, false);
  
  FntSetFont (currFont);

  CALLBACK_EPILOGUE
}

Int OfflineLoadTable(FormPtr frm, Int top)  {
  Word row;
  Word lastRecordNum;
  Word numRows;
  VoidHand recordH;
  TablePtr tableP;
  ULong numRecs;
  LocalID lid;
  UInt cardno;
  Int recordNum;
  

  tableP = FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, OLCacheTable));

  numRows = TblGetNumberOfRows (tableP);

  TblUnhighlightSelection(tableP);

  DmOpenDatabaseInfo(offlineDB, &lid, NULL, NULL, &cardno, NULL);
  DmDatabaseSize(cardno, lid, &numRecs, NULL, NULL);

  if ((top+numRows) > numRecs) {
    top = numRecs - numRows;
  }
  if (top < 0) {
    top = 0;
  }

  recordNum = top;

  for (row = 0; row < numRows; row++, recordNum++) {
    recordH = DmQueryRecord (offlineDB, recordNum);
    
    if (recordH) {
      TblSetItemStyle (tableP, row, 0, customTableItem);      
      TblSetItemInt (tableP, row, 0, (Word) recordNum);
      TblSetRowUsable (tableP, row, true);
      lastRecordNum = recordNum;
    } else {
      TblSetRowUsable (tableP, row, false);
    }
    TblMarkRowInvalid (tableP, row); 
  }
  return top;
}

void OfflineTableLoad(FormPtr frm) {
  TablePtr tableP;

  tableP = FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, OLCacheTable));
  curTop = OfflineLoadTable (frm, 0);
  TblSetCustomDrawProcedure (tableP, 0, OfflineDrawRecord);
  TblSetColumnUsable (tableP, 0, true);	
}

Boolean OfflineCacheHandleEvent (EventPtr e) {

  FormPtr frm;
  Boolean handled=false;

  CALLBACK_PROLOGUE

  switch (e->eType) {
  case winEnterEvent:
    frm = FrmGetActiveForm();  
    FrmDrawForm(frm);
    handled = true;
    break;    
  case frmOpenEvent:   
    frm = FrmGetActiveForm();  
    OfflineTableLoad(frm);
    FrmDrawForm(frm);
    handled = true;
    break;

  case keyDownEvent:
    frm = FrmGetActiveForm();  
    if (e->data.keyDown.chr == pageUpChr) {	
      if (curTop) {
	curTop = OfflineLoadTable (frm, curTop-2);      
	TblDrawTable( FrmGetObjectPtr 
		      (frm, FrmGetObjectIndex (frm, OLCacheTable)));
      }
      handled = true;
    }
    else if (e->data.keyDown.chr == pageDownChr) {	
      curTop = OfflineLoadTable (frm, curTop+2);      
      TblDrawTable( FrmGetObjectPtr 
		    (frm, FrmGetObjectIndex (frm, OLCacheTable)));
      handled = true;
    }
    break;
  case ctlSelectEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
      Word row, col;
      TablePtr tblP; 
      VoidHand loc;
      void * src,* dst;
      void * buf;

    case OLCacheGoto:  
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, OLCacheTable));
      if (TblGetSelection(tblP, &row, &col)) {
	loc = DmQueryRecord(offlineInfoDB, TblGetItemInt(tblP, row, col));
	src = MemHandleLock(loc);
	curURLLength = * ((Word *) (src + sizeof(ULong)));
	if (curURL) {
	  MemHandleFree(curURL);
	}
	curURL = MemHandleNew((ULong) curURLLength);
	dst = MemHandleLock(curURL);
	MemMove(dst, src + sizeof(ULong) + sizeof(Word) + sizeof(ULong), curURLLength);
	MemHandleUnlock(loc);
	MemHandleUnlock(curURL);
	SendURL(&conID, curURL, true, true, false, false);
      }
    case OLCacheCancel:
      FrmGotoForm(MainForm);
      handled = true;
      break;
    case OLCacheEdit:
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, OLCacheTable));
      if (TblGetSelection(tblP, &row, &col)) {	
	editItem = TblGetItemInt(tblP, row, col);
	FrmPopupForm(EditOLCacheForm);
      }
      handled = true;
      break;
    case OLCacheDelete:
      tblP =  FrmGetObjectPtr (frm, FrmGetObjectIndex (frm, OLCacheTable));
      if (TblGetSelection(tblP, &row, &col)) {
	char * url;
	Int size;
	VoidHand URL;

	URL = DmQueryRecord(offlineInfoDB, TblGetItemInt(tblP, row, col));
	buf = MemHandleLock(URL);
	size = * ((Word *) (buf + sizeof(ULong)));
	url = (char *) MemPtrNew(size);
	MemMove(url, (buf + sizeof(ULong) + sizeof(Word) 
		      + sizeof(ULong)), size);
	MemHandleUnlock(URL);
	RemoveFromCache(url, size, offlineInfoDB, offlineDB);
	MemPtrFree(url);
	OfflineLoadTable(frm, curTop);
	TblUnhighlightSelection(tblP);
	TblDrawTable(tblP);
      }
      handled = true;
      break;
    }
  case ctlEnterEvent:
  case ctlRepeatEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
    case OLCacheUp:
      if (curTop) {
	curTop = OfflineLoadTable (frm, curTop-2);      
	TblDrawTable( FrmGetObjectPtr 
		      (frm, FrmGetObjectIndex (frm, OLCacheTable)));
      }
      handled = true;
      break;
    case OLCacheDown:     
      curTop = OfflineLoadTable (frm, curTop+2);
      TblDrawTable( FrmGetObjectPtr
		    (frm, FrmGetObjectIndex (frm, OLCacheTable)));
      handled = true;
      break;
    }
    break;

  default:
    break;
  }

  CALLBACK_EPILOGUE

  return handled;
} 

Boolean EditOLCacheHandleEvent(EventPtr e) {
  FormPtr frm;
  Boolean handled=false;
  char * url;
  char * name; 
  char * buf;
  VoidHand rec;
  ULong id;
  Word urllen;
  DWord expr;

  CALLBACK_PROLOGUE

  switch (e->eType) {
  case frmOpenEvent:   
    frm = FrmGetActiveForm(); 
    rec = DmQueryRecord(offlineInfoDB, editItem);
    url = MemHandleLock(rec)+sizeof(ULong)+sizeof(Word)+sizeof(DWord);
    if (StrLen(url)+1+sizeof(ULong)+sizeof(Word)+sizeof(DWord)
	< MemHandleSize(rec)) {
      name = url + StrLen(url)+1;
    } else {
      name = 0;
    }
    frm = FrmGetActiveForm();
    if (name) {
      SetFld(FrmGetObjectPtr(frm, FrmGetObjectIndex (frm, EditOLCacheNameF)), 
	     name, StrLen(name));
    }
    SetFld(FrmGetObjectPtr(frm, FrmGetObjectIndex (frm, EditOLCacheURLF)), 
	   url, StrLen(url));
    MemHandleUnlock(rec); 
    FrmDrawForm(frm);
    handled = true;
    break;
  case ctlSelectEvent:
    frm = FrmGetActiveForm();  
    switch(e->data.ctlEnter.controlID) {
    case EditOLCacheSave:
      name = FldGetTextPtr(FrmGetObjectPtr(frm, 
					FrmGetObjectIndex (frm, 
							   EditOLCacheNameF)));
      url = FldGetTextPtr(FrmGetObjectPtr(frm, 
					FrmGetObjectIndex (frm, 
							   EditOLCacheURLF)));
      rec = DmQueryRecord(offlineInfoDB, editItem);
      buf = MemHandleLock(rec);
      id = * ((ULong *) (buf));
      urllen = * ((Word *) (buf+sizeof(ULong)));
      expr = * ((DWord *) (buf+sizeof(ULong)+sizeof(Word)));
      MemHandleUnlock(rec);
      if (name == NULL || StrLen(name) == 0) {
	DmResizeRecord(offlineInfoDB, editItem, 
		       StrLen(url)+1+sizeof(ULong)+sizeof(Word)+sizeof(DWord));
	rec = DmQueryRecord(offlineInfoDB, editItem);
	buf = MemHandleLock(rec);
	DmWrite(buf, sizeof(ULong)+sizeof(Word)+sizeof(DWord), 
		url, StrLen(url)+1);
      } else {
	DmResizeRecord(offlineInfoDB, editItem, 
		       StrLen(url)+StrLen(name)+2+
		       sizeof(ULong)+sizeof(Word)+sizeof(DWord));
	rec = DmQueryRecord(offlineInfoDB, editItem);
	buf = MemHandleLock(rec);
	DmWrite(buf, sizeof(ULong)+sizeof(Word)+sizeof(DWord), 
		url, StrLen(url)+1);
	DmWrite(buf, StrLen(url)+1+sizeof(ULong)+sizeof(Word)+sizeof(DWord),
		name, StrLen(name)+1);	
      }
      DmWrite(buf, 0, &id, sizeof(ULong));
      DmWrite(buf, sizeof(ULong), &urllen, sizeof(Word));
      DmWrite(buf, sizeof(ULong)+sizeof(Word), &expr, sizeof(DWord));
      MemHandleUnlock(rec);
    case EditOLCacheCancel:
      FrmReturnToForm(0);
    }
    handled = true;
    break;
  case menuEvent:
    MenuEraseStatus(NULL);
    if (EditMenuHandleEvent(e->data.menu.itemID, FrmGetActiveForm())) {
	handled = true;
    } else {
	switch(e->data.menu.itemID) {
	}
    }
    handled = true;
    break;

  default:
    break;
  }    

  CALLBACK_EPILOGUE
    
  return handled;
}

@


1.8
log
@Recover from CVS repository crash.  Changes include:
o Editing of entries in hotlist and storage
o Server-side imagemaps
o Recognition of ImageViewer .pdb files
@
text
@d168 1
a168 3
	PutInHistory(curURL, curURLLength);
	SendURL(curURL, &hPage);
	ScrollReset();
@


1.7
log
@o Added a horizontal scrollbar
o Added panning when you drag on the main form (as long as your penDown wasn't
  on something interesting); if we want to do "select text" later, something
  will have to be done.
@
text
@d9 4
d22 1
d32 6
a37 1
  recText = MemHandleLock(recHandle) + sizeof(ULong) + sizeof(Word) + sizeof(ULong);
d116 5
d152 1
d158 2
a159 1
	curURLLength = MemHandleSize(loc) -  sizeof(ULong) - sizeof(Word)- sizeof(ULong);
a164 1
	src = MemHandleLock(loc);
d176 8
d192 2
a193 1
	size = MemHandleSize(URL) - sizeof(ULong) - sizeof(Word) - sizeof(ULong);
d195 1
a195 1
	MemMove(url, (MemHandleLock(URL) + sizeof(ULong) + sizeof(Word) 
d237 97
@


1.6
log
@This time I actually WIL LTEST MY FIXES!
@
text
@d8 1
d154 1
a154 1
	currYPosOffset = 0;
@


1.5
log
@*** empty log message ***
@
text
@d141 1
a141 1
	curURLLength = MemHandleSize(loc) -  sizeof(ULong) - sizeof(Word);
d148 1
a148 1
	MemMove(dst, src + sizeof(ULong) + sizeof(Word), curURLLength);
d167 1
a167 1
	size = MemHandleSize(URL) - sizeof(ULong) - sizeof(Word);
d169 2
a170 2
	MemMove(url, (MemHandleLock(URL) + sizeof(ULong) + sizeof(Word)), 
		size);
@


1.4
log
@*** empty log message ***
@
text
@d26 1
a26 1
  recText = MemHandleLock(recHandle) + sizeof(ULong) + sizeof(Word) + sizeOf(ULong);
@


1.3
log
@o UI fixed up: scroll bar at bottom.  It goes all black when the page is
  requested, and disappears when the page has arrived completely.  The
  view area is now 150 pixels high.
o Various bugfixes
@
text
@d26 1
a26 1
  recText = MemHandleLock(recHandle) + sizeof(ULong) + sizeof(Word);
@


1.2
log
@OFFLINE MODE WORKS
@
text
@d113 1
@


1.1
log
@*** empty log message ***
@
text
@d151 1
a151 1
	hPage = SendURL(curURL, conID);
a154 1
      ignoreUp = true;
@
