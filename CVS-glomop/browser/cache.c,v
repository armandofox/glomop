head	1.9;
access;
symbols
	v15b:1.9
	v10b3:1.8
	v10b2:1.8
	v10b1:1.7;
locks; strict;
comment	@ * @;


1.9
date	97.11.09.21.43.23;	author iang;	state Exp;
branches;
next	1.8;

1.8
date	97.10.18.18.45.25;	author iang;	state Exp;
branches;
next	1.7;

1.7
date	97.09.11.23.37.44;	author iang;	state Exp;
branches;
next	1.6;

1.6
date	97.09.11.00.47.16;	author aspolito;	state Exp;
branches;
next	1.5;

1.5
date	97.09.10.23.49.23;	author iang;	state Exp;
branches;
next	1.4;

1.4
date	97.09.10.02.53.40;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.09.10.02.44.24;	author aspolito;	state Exp;
branches;
next	1.2;

1.2
date	97.08.09.00.10.16;	author aspolito;	state Exp;
branches;
next	1.1;

1.1
date	97.08.01.23.08.24;	author aspolito;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Recover from CVS repository crash.  Changes include:
o Editing of entries in hotlist and storage
o Server-side imagemaps
o Recognition of ImageViewer .pdb files
@
text
@#include <Pilot.h>
#include "globals.h"
#include "cache.h"

/*
 * cacheInfo records look like
 * ULong id of actually data record for the cache (not info) data for that
 * page;
 * Word size of url string
 * DWord expr time
 * followed by the url (null terminated string)
 * followed by the name cached page (null terminated string OR nonexistant) 
 *    (for the edit screen) 
 * right now expration date doesn't work quite right
 * if something in the cache has expired it stays in the cache but
 * will not be returned by InCache.  So it IS taking up memory.
 * not that big deal as it will be pushed out of the cache after a while
 */
VoidHand InCache(char *URL, Word URLSize, DmOpenRef infoDB, DmOpenRef DB) {  
  ULong numRecs;
  ULong i;
  UInt cardNo;
  LocalID localID;
  ULong ID;  
  VoidHand rec;
  void * recPtr;
  UInt index;

  DmOpenDatabaseInfo(infoDB, &localID, NULL, NULL, &cardNo, NULL);
  DmDatabaseSize(cardNo, localID, &numRecs, NULL, NULL);
  
  if (numRecs) {    
    for (i = 0; i < numRecs; i++) {
      Boolean match;
      rec = DmGetRecord(infoDB, i);
      recPtr = MemHandleLock(rec);
      match = false;
      if (*((Word *) (recPtr + sizeof(ULong))) == URLSize) {
	ULong t;
	
	t = *((ULong *) (recPtr + sizeof(ULong) + sizeof(Word)));
	if (!t || (t >= TimGetSeconds())) {
	  match = !(MemCmp(URL, 
			   recPtr+sizeof(ULong)+sizeof(Word)+sizeof(ULong), 
			   (ULong) URLSize));
	}
      }
      ID = *((ULong*) recPtr);
      MemHandleUnlock(rec);
      DmReleaseRecord(infoDB, i, false);      
      if (match) {
        Err err;
	DmMoveRecord(infoDB, (UInt) i, 0);
	err = DmFindRecordByID(DB, ID, &index);
	ErrFatalDisplayIf(err, "Cache corrupted!");
	rec = DmQueryRecord(DB, index);
	return rec;
      }
    }
  }
  return 0;
}

/* if url was in the cache, remove it, otherise do nothing */
void RemoveFromCache(char *URL, Word URLSize, DmOpenRef infoDB, 
		     DmOpenRef DB) {  
  ULong numRecs;
  ULong i;
  UInt cardNo;
  LocalID localID;
  ULong ID;  
  VoidHand rec;
  void * recPtr;
  UInt l;

  DmOpenDatabaseInfo(infoDB, &localID, NULL, NULL, &cardNo, NULL);
  DmDatabaseSize(cardNo, localID, &numRecs, NULL, NULL);
  
  if (numRecs) {
    for (i = 0; i < numRecs; i++) {
      Boolean match = false;
      rec = DmGetRecord(infoDB, i);
      recPtr = MemHandleLock(rec);
      if (*((Word *) (recPtr + sizeof(ULong))) == URLSize) {
	match = !(MemCmp(URL, recPtr+sizeof(ULong)+sizeof(Word)+sizeof(ULong), 
			 (ULong) URLSize));
      } else { 
	match = false;
      }
      ID = *((ULong*) recPtr);
      MemHandleUnlock(rec);
      DmReleaseRecord(infoDB, i, false);      
      if (match) {
	DmFindRecordByID(DB, ID, &l);
	if (DmQueryRecord(DB, l) != hPage) {
	  DmRemoveRecord(infoDB, i);
	  DmRemoveRecord(DB, l);
	}
      break;	  
      }
    }
  }
}

void TrimCache(ULong size) {  
  ULong numRecs;
  ULong l;
  UInt cardNo;
  LocalID localID;
  ULong ID;  
  VoidHand rec;
  void * recPtr;
  ULong curSize;
  UInt i;
  
  DmOpenDatabaseInfo(cacheInfoDB, &localID, NULL, NULL, &cardNo, NULL);
  DmDatabaseSize(cardNo, localID, &numRecs, NULL, NULL);
  
  if (numRecs) {
    for (l = numRecs-1; l >= 0; l--) {
      DmOpenDatabaseInfo(cacheDB, &localID, NULL, NULL, &cardNo, NULL);
      DmDatabaseSize(cardNo, localID, NULL, &curSize, NULL);
      if (curSize <= size) {
	break;
      } 
      rec = DmGetRecord(cacheInfoDB, l);
      recPtr = MemHandleLock(rec);
      ID = *((ULong*) recPtr);
      MemHandleUnlock(rec);
      DmReleaseRecord(cacheInfoDB, l, false);       
      DmFindRecordByID(cacheDB, ID, &i);
      if (DmQueryRecord(cacheDB, i) != hPage) {
	DmRemoveRecord(cacheInfoDB, l);
	DmRemoveRecord(cacheDB, i);
      }
    }
  }
}

void AddToCache(char * URL, Word URLSize, void * data, UInt dataSize, 
		ULong expr, DmOpenRef infoDB, DmOpenRef DB) {
  ULong ID;
  VoidHand rec;
  UInt index;
  void * recPtr;
  Err err;

  RemoveFromCache(URL, URLSize, infoDB, DB);
  if (infoDB == cacheInfoDB) {
    if (dataSize < cacheSize) {
      TrimCache(cacheSize-dataSize);
    } else {
      TrimCache(0);
    }
  }
  index = 0;  
  rec = DmNewRecord(DB, &index, dataSize);
  recPtr = MemHandleLock(rec);
  DmWrite(recPtr, 0, data, dataSize);
  MemHandleUnlock(rec);
  DmReleaseRecord(DB, index, true);
  err = DmRecordInfo(DB, index, NULL, &ID, NULL);
  ErrFatalDisplayIf(err, "Error geting record info");
  index = 0;
  rec = DmNewRecord(infoDB, &index, URLSize + 
		     sizeof(ULong) + sizeof(Word) + sizeof(ULong));
  recPtr = MemHandleLock(rec);
  DmWrite(recPtr, 0, &ID, sizeof(ULong));
  DmWrite(recPtr, sizeof(ULong), &URLSize, sizeof(Word));
  DmWrite(recPtr, sizeof(ULong) + sizeof(Word), &expr, sizeof(ULong));
  DmWrite(recPtr, sizeof(ULong) + sizeof(Word) + sizeof(ULong), URL, URLSize);
  MemHandleUnlock(rec);
  DmReleaseRecord(infoDB, index, true);  
}

void FlushCache(DmOpenRef infoDB, DmOpenRef DB) {
  ULong i;
  UInt cardNo;
  LocalID localID;
  ULong ID;  
  VoidHand rec;
  void * recPtr;
  UInt l;

  DmOpenDatabaseInfo(infoDB, &localID, NULL, NULL, &cardNo, NULL);
  DmDatabaseSize(cardNo, localID, &i, NULL, NULL);
  
  while(i) {
    --i;
    rec = DmGetRecord(infoDB, i);
    recPtr = MemHandleLock(rec);
    ID = *((ULong*) recPtr);
    MemHandleUnlock(rec);
    DmReleaseRecord(infoDB, i, false);      
    if (DmFindRecordByID(DB, ID, &l) != dmErrUniqueIDNotFound) { 
      if (DmQueryRecord(DB, l) != hPage) {
	DmRemoveRecord(infoDB, i);
	DmRemoveRecord(DB, l);
      }
    }
  }
}
@


1.8
log
@Fixed crash when you tried to delete the stored page you were viewing
@
text
@d12 3
a14 1
 * right now expration dat doesn't work quite right
d189 7
a195 7
      --i;
      rec = DmGetRecord(infoDB, i);
      recPtr = MemHandleLock(rec);
      ID = *((ULong*) recPtr);
      MemHandleUnlock(rec);
      DmReleaseRecord(infoDB, i, false);      
      DmFindRecordByID(DB, ID, &l);
d200 1
@


1.7
log
@o FlushCache was causing a fatal error.  The problem was the following:

  for (i = numRecs-1; i >= 0; i--) {

  where i was an _unsigned_ long.
  Note that the i >= 0 test can never fail. (D'oh!)

o Error pages were _still_ being cached.  I tracked the problem down to the
  following line (in metadata.c):

  if (info == FindType(data, dataSize, CacheExpr, &size)) {

  That == should have been = (Double D'oh!)

o This morning, Anthony told me about a memory handle fatal error he found
  but couldn't replicate.  I found it, replicated it, and fixed it.  The
  bug occured when you fetch a non-error page after fetching an error page.
  The problem was that a metadata handle wasn't being set to NULL if there
  was no metadata; instead it kept its previous value.
@
text
@d93 1
a93 1
	if (DmQueryRecord(cacheDB, l) != hPage) {
d194 1
a194 1
      if (DmQueryRecord(cacheDB, l) != hPage) {
@


1.6
log
@*** empty log message ***
@
text
@a174 1
  ULong numRecs;
d184 1
a184 1
  DmDatabaseSize(cardNo, localID, &numRecs, NULL, NULL);
d186 2
a187 2
  if (numRecs) {
    for (i = numRecs-1; i >= 0; i--) {
a197 1
    }
@


1.5
log
@*** empty log message ***
@
text
@d32 1
a32 1
      Boolean match = false;
d174 28
@


1.4
log
@dumb bug fix
@
text
@d50 1
d52 3
a54 3
	DmFindRecordByID(DB, ID, &index);
	rec = DmGetRecord(DB, index);
	DmReleaseRecord(DB, index, false);
d144 1
d160 2
a161 2
  ErrFatalDisplayIf(DmRecordInfo(DB, index, NULL, &ID, NULL), 
		    "Error geting record info");
@


1.3
log
@lots.  I dont remember
@
text
@d37 1
a37 1
	DWord t;
d39 1
a39 1
	t = *((DWord *) (recPtr + sizeof(ULong) + sizeof(Word)));
d42 1
a42 1
			   recPtr+sizeof(ULong)+sizeof(Word)+sizeof(DWord), 
d82 1
a82 1
	match = !(MemCmp(URL, recPtr+sizeof(ULong)+sizeof(Word)+sizeof(DWord), 
d138 1
a138 1
		DWord expr, DmOpenRef infoDB, DmOpenRef DB) {
d162 1
a162 1
		     sizeof(ULong) + sizeof(Word) + sizeof(DWord));
d166 2
a167 2
  DmWrite(recPtr, sizeof(ULong) + sizeof(Word), &expr, sizeof(DWord));
  DmWrite(recPtr, sizeof(ULong) + sizeof(Word) + sizeof(DWord), URL, URLSize);
@


1.2
log
@bug fixes and offline cache
@
text
@d5 12
a16 1

d35 1
d37 8
a44 4
	match = !(MemCmp(URL, recPtr+sizeof(ULong)+sizeof(Word), 
			 (ULong) URLSize));
      } else { 
	match = false;
d82 1
a82 1
	match = !(MemCmp(URL, recPtr+sizeof(ULong)+sizeof(Word), 
d138 1
a138 1
		DmOpenRef infoDB, DmOpenRef DB) {
d162 1
a162 1
		    sizeof(ULong) + sizeof(Word));
d166 2
a167 1
  DmWrite(recPtr, sizeof(ULong) + sizeof(Word), URL, URLSize);
@


1.1
log
@Code massivly split
@
text
@d6 1
a6 1
VoidHand InCache(char *URL, Word URLSize) {  
d16 1
a16 1
  DmOpenDatabaseInfo(cacheInfoDB, &localID, NULL, NULL, &cardNo, NULL);
d22 1
a22 1
      rec = DmGetRecord(cacheInfoDB, i);
d32 1
a32 1
      DmReleaseRecord(cacheInfoDB, i, false);      
d34 4
a37 4
	DmMoveRecord(cacheInfoDB, (UInt) i, 0);
	DmFindRecordByID(cacheDB, ID, &index);
	rec = DmGetRecord(cacheDB, index);
	DmReleaseRecord(cacheDB, index, false);      
d46 2
a47 1
void RemoveFromCache(char *URL, Word URLSize) {  
d55 1
a55 1
  UInt index;
d57 1
a57 1
  DmOpenDatabaseInfo(cacheInfoDB, &localID, NULL, NULL, &cardNo, NULL);
d63 1
a63 1
      rec = DmGetRecord(cacheInfoDB, i);
d73 1
a73 1
      DmReleaseRecord(cacheInfoDB, i, false);      
d75 6
a80 4
	DmRemoveRecord(cacheInfoDB, i);
	DmFindRecordByID(cacheDB, ID, &index);
	DmRemoveRecord(cacheDB, index);
	break;	  
d88 1
a88 1
  ULong i;
d95 1
a95 2
  UInt index;

d101 1
a101 1
    for (i = numRecs-1; i >= 0; i--) {
d107 1
a107 1
      rec = DmGetRecord(cacheInfoDB, i);
d111 6
a116 4
      DmReleaseRecord(cacheInfoDB, i, false);      
      DmRemoveRecord(cacheInfoDB, i);
      DmFindRecordByID(cacheDB, ID, &index);
      DmRemoveRecord(cacheDB, index);
d121 2
a122 1
void AddToCache(char * URL, Word URLSize, void * data, UInt dataSize) {
d128 7
a134 5
  RemoveFromCache(URL, URLSize);
  if (dataSize < cacheSize) {
    TrimCache(cacheSize-dataSize);
  } else {
    TrimCache(0);
d136 2
a137 2
  index = 0;
  rec = DmNewRecord(cacheDB, &index, dataSize);
d141 2
a142 2
  DmReleaseRecord(cacheDB, index, true);
  ErrFatalDisplayIf(DmRecordInfo(cacheDB, index, NULL, &ID, NULL), 
d145 1
a145 1
  rec = DmNewRecord(cacheInfoDB, &index, URLSize + 
d152 1
a152 1
  DmReleaseRecord(cacheInfoDB, index, true);  
d154 1
@
