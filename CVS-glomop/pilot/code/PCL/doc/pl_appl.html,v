head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PApplication Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PApplication</H1>
<P>
<BR>
This is the base class for every application. You can
create exactly <STRONG>one</STRONG> instance of this class. Any
attempt to create more than one will cause a fatal error!
<BR><BR>
Contained in this class is the main event loop and the initial
form. This form cannot be created dynamically (yet).
<BR><BR>

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLAppl.h&gt;</CODE>
<P>

<A NAME="INIT"><H2>Initialization</H2></A>
Befor you try to create any PCL-based objects, you
 <STRONG><U>must</U></STRONG> call <CODE>PCLInit()</CODE> otherwise
you will get an error as you try to run the event loop.
This should look like:
<PRE>
DWord PilotMain(Word cmd, Ptr cmdPBP, Word launchFlags)
{
  ...
  if (cmd == sysAppLaunchCmdNormalLaunch)
  {
    PCLInit();
    PApplication mainAppl(APPID, formId);
    ...
    mainAppl.run();
  }
  ...
  return(0);
}
</PRE>
<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI><A HREF="pl_evtlpi.html">PEventLoop</A><BR>
<LI><A HREF="pl_formi.html">PForm</A><BR>
   <DL>
   <LI>PApplication<BR>
   </DL>
</DL>
<P>

<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
     PApplication(const Word appId,
                  const Word frmId,
                  const Word timeOut,
                  const Boolean applicationFirst = false);
</PRE>
Creates an application form from the resource <CODE>frmId.
appID</CODE> should be the creator id for this application.
if <CODE>timeOut</CODE> is set, nilEvents will be generated
every <CODE>timeOut</CODE> ticks. Anyway, some controls, like
fields (<A HREF="pl_fieldi.html">PField</A>) generate nil events
as soon as they get the focus.
<BR>
If <CODE>applicationFirst</CODE> is <CODE>true</CODE>, the
application's event handlers will be called before the system's.
<BR><BR>
<HR align="center" size="3" width="90%">
<PRE>
     PApplication(const Word appId,
                  const Word frmId,
                  const PEvtSysCallback = 0,
                  const Word timeOut = evtWaitForever,
                  const Boolean applicationFirst = false);
</PRE>
This lets you specify a default handler function for non-handled
events (see <A HREF="pl_frmhi.html">PFormHandler</A>). This should only
be used to call any legacy code.
<P>
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
     run();
</PRE>
Shows the form and starts the event loop. <STRONG>No</STRONG>
<A HREF="pl_formi.html"><CODE>PForm::goto()</CODE></A> is necessary.
<BR>
After this function terminates and any cleanup code is done,
<CODE>PilotMain</CODE> should terminate.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    static DWord appId();
    static PString appIdString();
</PRE>
Returns the appId given in the constructor either as four bytes or
as <A HREF="pl_stri.html">PString</A>.
<P>
</BODY>
</HTML>
@


1.1.1.1
log
@Pilot Class Library
@
text
@@
