head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PString Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PString</H1>
This implements a more or less robust string helper class. 'more or less'
means, as much as the limited memory resources on the Pilot allow to.
Memory allocation is still kept simple to keep the code small (no
string tables, no garbage collection). Strings are expanded according
to the needs, but never shrunk, only deleted.
<BR>
I still lacks a lot of functionality, but I'm expanding it according to
the needs.
<P>
<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLString.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI>PBaseObj</A><BR>
   <DL>
   <LI>PString<BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
    PString();
</PRE>
Creates a NULL string. No memory is allocated, a cast to (char*) yields
0.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString(const PString& s);
</PRE>
Copy constructor. Allocates memory to hold <CODE>s</CODE>.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString(const char* p);
    PString(short i);
    PString(int i);
    PString(long i);
    PString(unsigned short i);
    PString(unsigned int i);
    PString(unsigned long i);
    PString(char c);
</PRE>
Conversion constructors. <CODE>PString(char c)</CODE> creates a one
character string (See <A HREF="pl_flti.html">PFloat</A> for
floating point conversion).
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString(const void* p, int len);
</PRE>
Constructs a string containing arbitrary data. Even '\0'-characters
are allowed.
<A NAME="OPERATORS"><H2>Operators</H2></A>
<PRE>
    operator char* () const;
</PRE>
Returns the pointer to the data (modifiable). Use <CODE>len()</CODE> to
determine the size.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString operator= (const PString&);
</PRE>
Copy assignment.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    char& operator[] (int idx);
    const char& operator[] (inst idx) const;
</PRE>
Returns the character at position <CODE>idx</CODE>. Indexing starts at
0. For the const version, array bounds are checked, the non-const
version will expand the string (not yet implemented).
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString& operator+= (const PString&);
    PString& operator+= (const char*);
</PRE>
Append.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString operator+ (const PString&, const PString&);
    PString operator+ (const PSTring&, const char*);
    PString operator+ (const char*, const PString&);
</PRE>
Concatenate
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Boolean operator== (const PString&);
    Boolean operator== (const char*);
    Boolean operator== (const char*, const PString&);
</PRE>
Contents comparison.
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    int len() const;
</PRE>
The length of the contents (may include '\0' characters).
<P>
<HR align="center" size="3" width="90%">
<PRE>
    int           asInt();
    unsigned int  asUInt();
    long          asLong();
    unsigned long asULong();
</PRE>
Conversion functions (See <A HREF="pl_flti.html">PFloat</A> for
floating point conversion).
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PString& resize(int size);
    PString& copy(const char* p, int len = -1, int size = -1);
    PString& concat(const char* p, int len = -1);
    int  concat(const char* p, int len = -1) const;
</PRE>
Not needed, used internally.
<P>
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
