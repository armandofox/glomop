head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PScrollEvt Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PScrollEvt</H1>
This is sent by <A HREF="pl_scli.html">scrollbars</A>
via a <A HREF="pl_frmhi.html"><CODE>PFormHandler::scroll()<CODE>
</A> event.
<P>
<BR>

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLEvt.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI><A HREF="pl_frmevi.html">PFormEvt</A><BR>
   <DL>
   <LI>PScrollEvt<BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
    PScrollEvt(const PFormEvt& e);
</PRE>
Constructs a scroll event from a form event.
<P>
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    Word id() const;
</PRE>
Returns the resource id of the issuing scrollbar.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PScrollEvt::ScrollType type() const;
</PRE>
Either <CODE>PScrollEvt::scroll</CODE> or <CODE>PScrollEvt::drag</CODE>
for those who are interested.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Short oldValue() const;
    Short value() const;
</PRE>
The scrollbar value before and after the scrollbar was moved.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Long time() const;
</PRE>
The time elapsed between the moves (in system ticks).
<A NAME="NESTYPE"><H2>Nested Types</H2></A>
<PRE>
    enum ScrollType { scroll = sclExitEvent, drag = sclRepeatEvent };
</PRE>
<P>
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
