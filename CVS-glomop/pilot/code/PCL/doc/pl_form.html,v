head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PForm Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PForm</H1>
<P>
<BR>
This class represents a Form resource with all it's controls.
You need one instance of this class as a parent for any control.
Creating only an object of this class is almost useless without
an attached <A HREF="pl_frmhi.html">PFormHandler</A>.
<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLUI.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI>PForm<BR>
   <DL>
   <LI><A HREF="pl_appli.html">PApplication</A><BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
    PForm(Word formId);
</PRE>
Creates an object representing the resource formId.
<P>
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    PForm& goTo();
    PForm& popUp();
</PRE>
Shows the form. <CODE>popUp()</CODE> does not close the current form,
so the new one overlaps it.
<BR>
<CODE>goTo()</CODE>closes and thereby replaces the current form.
<CODE>goTo()</CODE> is <STRONG>not</STRONG> necessary for the main
application form, this is done by <A HREF="pl_appli.html">
PApplication::run()</A>.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PForm& returnTo(const PForm* form = 0);
</PRE>
Erase the the form and return to the specified one. If none is given,
return to the previous form.
<BR>
<STRONG>Note:</STRONG> This does not send a <A HREF="pl_frmhi.html">
PFormHandler::closed()</A> event to any attached handler!
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Word doDialog();
</PRE>
Shows the form as a dialog. No event processing is done. The form is
shown until a button is pressed. If there's no button, you're stuck ;-)
The resource id of the pressed button is returned.
No child controls are accessible afterwards. If the form has been loaded
before, its values and child controls are preserved. This is
simplified processing only, use <CODE>PForm::popUp()</CODE> for
elaborate processing.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PForm& updateForm(Word code = frmRedrawUpdateCode);
</PRE>
Sends an <A HREF="pl_frmhi.html"><CODE>PFormHandler::update(Word)</CODE></A>
to the attached handlers.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    FormPtr frmPtr() const;
</PRE>
Returns the <CODE>FormPtr</CODE> if the form is already shown, otherwise
it returns 0. This can be used to access PalmOS APIs that are not
implemented yet.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Word id() const;
</PRE>
Returns the resource id of the form.
<A NAME="PROTF"><H2>Protected functions</H2></A>
<P>
<PRE>
    PForm& addChild(PControl* ctl);
</PRE>
Adds a <A HREF="pl_ctli.html">PControl</A> object as a child. If you
override this method, you should call <CODE>PForm::addChild</CODE>
otherwise your controls don't get initialized.
<P>
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
