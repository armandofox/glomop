head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PCL - The Pilot Class Library</TITLE>
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<HR align="center" size="3" width="90%">
<CENTER>
<H1>PCL - The Pilot Class Library</H1>
(preview 0.0.1)
</CENTER>
<HR align="center" size="3" width="90%">
<BR>
The Pilot Class Library (PCL) is designed to easily create
UI applications on the PalmPilot using G++ (the GNU C++).
<BR>
<BR>
I Found out that the combination GNU C++ 2.7.2.2 / prc-tools.0.5.0 is
surprisingly suitable for creating C++ applications.
<BR>
But, <STRONG>there is one major drawback:</STRONG> The compiler must be
built with the USE_COLLECT2 option. I.e., you have to change the configure
script in the 'm68k-palmos-coff*)' section, add 'use_collect2=yes' and
reconfigure/rebuild the compiler. This is needed because there are
several global objects that have to be initialized using the global
constructors. These only get called if 'collect2' prepares the code for
linking.
<BR>
As I configured/built the GNU toolchain under OS/2 myself, this is no
problem for me, nor should it be a problem for all the Linux people
out there. I do not know the Win NT/95 distribution, so I don't know
if it uses 'collect2'.
<BR>
<BR>
If anybody is still interested, this is the documentation for the
preview release of the library. Only four control classes are
implemented (
<A HREF="pl_listi.html">PList</A>,
<A HREF="pl_fieldi.html">PField</A>,
<A HREF="pl_scli.html">PScrollbar</A> and
PButton), the latter isn't even documented yet. The library is growing
and the full release should be out soon. If anybody want's to help
implementing <A HREF="pl_ctli.html">PControl</A> classes, feel free to do
so. I'd be happy if you'd <A HREF="mailto:johler@@ibm.net">send me</A>
your results so I could include them in future versions.
<BR>
<BR>
So, a good point to start reading is at <A HREF="pl_appli.html"
TARGET="_self">PApplication</A>. If you want your application to do
something useful, read <A HREF="pl_frmhi.html">PFormHandler</A>.
Look at the included samples and
<STRONG>have your PalmOS API documention ready</STRONG>. Please bear
with me, this is the first release of the documentation. For any
hints and suggestions <A HREF="mailto:johler@@ibm.net">email me</A>.
<BR>
<BR>
<STRONG>BTW:</STRONG> The library is probably only usable on PalmPilots
(PalmOS 2) devices, as I use the new controls and floating point
routines. It might work if you're not using them, but I didn't test.
<BR>
<BR>
There are two versions of the library: <CODE>libPilotCL.a</CODE> and
<CODE>libPilotCLE.a</CODE>. The second one enables you to use exception
handling with g++. To use the second one add <CODE>-fhandle-exceptions
</CODE> to your compiler switches and <CODE>#define HANDLE_EXCEPTIONS
</CODE> before including any PCL headers. <STRONG>But be warned!</STRONG>
Exception handling will triple the size of your executable, making
almost any program unlinkable. For exactly this reason it is hardly
tested!.
<STRONG>Note:</STRONG> The preview version of the library does not
contain the exception version. But, as I said, it is hardly usable
anyway.
<BR>
<BR>
Some restrictions:
<UL>
<LI>If you want to use scrollbars, you have to use a resource compiler,
    that supports them (see <A HREF="pl_scli.html">PScrollbar</A>).
    I already contacted Wes Cherry and he told me he will release
    pilrc 1.7 'this weekend' (as of 10/18/97), so check his
    <A HREF="http://www.scumby.com/scumbysoft/pilot/pilrc/index.htm">
    PilRC page</A> often.
<LI>When throwing exceptions, only a few types are passed through the
    main event loop (see <A HREF="pl_exci.html">PExc</A> for details).
<LI>When using exception handling, every class that has instances in
    a function that throws an exception <STRONG>must</STRONG> have a
    destructor defined. Otherwise the compiler will fail. This is a g++
    bug.
</UL>
There are only a few conventions:
<UL>
<LI>All Library class name start with '<CODE><STRONG>P</STRONG></CODE>'
<LI>Member functions begin with a lower case letter.
<LI>Manipulation functions return a reference to the instance. This way
    constructs like <CODE>listObj.add("Hello World").refresh();</CODE>
    are possible.
</UL>
<BR>
</BODY>
</HTML>
@


1.1.1.1
log
@Pilot Class Library
@
text
@@
