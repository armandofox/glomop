head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PControl Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PControl</H1>
<P>
<BR>
This is an abstract base class for any control element Classes.<BR>
<STRONG>Note:</STRONG> most objects don't update themselves when modified.
Use the <CODE>refresh()</CODE> method to redraw the control. This could
have been done automatically, but for speed reasons, it was not (imagine
a listbox with some 100 elements).

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLUI.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI>PBaseObj<BR>
  <DL>
  <LI>PControl</A><BR>

     <DL>
     <LI><A HREF="pl_listi.html">PList</A><BR>
     <LI><A HREF="pl_fieldi.html">PField</A><BR>
     <LI><A HREF="pl_scli.html">PScrollbar</A><BR>
     </DL>
  </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<P>
You cannot construct any instances of this class, but the minimal
constructor is
<PRE>
    PControl(PForm* parent, Word id);
</PRE>
to create a control with a parent form from a resource id.

<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    virtual PControl& refresh() = 0;
</PRE>
Redraws the control.  This functions <STRONG>
must</STRONG> be implemented by any derived class.
<HR align="center" size="3" width="90%">
<PRE>
    virtual Boolean usable()  = 0;
    virtual Boolean enabled() = 0;
    virtual Boolean visible() = 0;
</PRE>
Return the status attributes for the control. Theses functions <STRONG>
must</STRONG> be implemented by any derived class.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    virtual PControl& show(Boolean show);
    virtual PControl& show();
    virtual PControl& hide();
</PRE>
Set the visibility of the object. This calls <CODE>FrmShowObject</CODE>
if your control does not respond to this, you must override these
methods.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    virtual PControl& usable(Boolean f);
    virtual PControl& enabled(Boolean f);
</PRE>
Set the attributes of a control. Does not have an effect on all
controls.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    SWord idx();
</PRE>
Returns the object's index in the form if the parent form is already shown,
otherwise it returns -1. This can be used to access PalmOS APIs that need
the object's index and are not implemented yet.<BR>
<A NAME="PROTF"><H2>Protected functions</H2></A>
<PRE>
    virtual void loadInit();
    virtual void unloadExit();
</PRE>
These methods are called when the parent form has been loaded into memory
or is going to be closed.
The default is, to do nothing. Any initialization that can only be done
when a form is loaded should be done in <CODE>loadInit()</CODE>. This
can e.g. be setting a text that has been stored in a constructor.
<BR>
Freeing allocated memory that's not need when the form is closed, and 
similar tasks should be done in <CODE>unloadExit()</CODE>.<BR>
<STRONG>Note:</STRONG> <CODE>unloadExit</CODE> is only called when the
application is closed (switch to another application) or if a
<A HREF="pl_formi.html"><CODE>PForm::goTo()</CODE></A> is issued. In
particular it is <STRONG>not</STRONG> called when a form, which was opened
using <A HREF="pl_formi.html"><CODE>PForm::popUp()</CODE></A> issues a
<A HREF="pl_formi.html"><CODE>PForm::returnTo()</A></CODE>
<P>
<HR align="center" size="3" width="90%">
<PRE>
    VoidPtr objPtr();
    FormPtr frmPtr();
</PRE>
Return a <CODE>VoidPtr</CODE> to the controls structure or a
<CODE>FormPtr</CODE> to the parent if the parent form is already shown,
otherwise they return 0. These can be used to access PalmOS APIs.<BR>
<P>
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
