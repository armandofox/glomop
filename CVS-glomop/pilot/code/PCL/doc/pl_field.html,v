head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PField Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PField</H1>
<P>
<BR>
This is class represents a text field. This class is a little bit
problematic, because of PalmOS's intrinsic memory handling.
PalmOS seems to allow a field to grow, shrink and delete the block of
memory it has assigned. So read the descriptions of
<CODE><A HREF="#CONSTR" TARGET="_self">PField(...)</A>,
<A HREF="#fieldText" TARGET="_self">text(PString&)</A></CODE> and
<CODE><A HREF="#fieldHandle" TARGET="_self">handle(Handle)</A></CODE>
carefully.

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLField.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI><A HREF="pl_ctli.html">PControl</A><BR>
   <DL>
   <LI>PField<BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<P>
<PRE>
    PField(PForm* parent, Word id,
           Word scrollbarId,
           PString& initialText = 0, Boolean keepText = false);
</PRE>
Contructs a field from the resource <CODE>id</CODE> and adds it to
<CODE>parent</CODE> as a child. Specifying <CODE>initialText</CODE> and
<CODE>keep</CODE> does the same thing as calling
<A HREF="#fieldText" TARGET="_self"><CODE>text(initialText, keepText)</CODE>
</A>. Please read this and the notes to <A HREF="#fieldHandle" TARGET="_self">
<CODE>handle(Handle)</CODE></A>carefully.
<HR align="center" size="3" width="90%">
<P>
<PRE>
    PField(PForm* parent, Word id,
           Word scrollbarId,
           PString& initialText = 0, Boolean keepText = false);
</PRE>
Attaches a scrollbar from a resource id to the field. The class runtime
does the adjustment and the handling of the scrollbar. There is no overlap
when scrolling. I will allow this in the future. Again, please read
<A HREF="#fieldText" TARGET="_self"><CODE>text(initialText, keepText)</CODE>
</A>and <A HREF="#fieldHandle" TARGET="_self"> <CODE>handle(Handle)</CODE></A>.
<P>
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    PString text();
</PRE>
Returns the field's contents as a <A HREF="pl_stri.html">PString</A>
<P>
<HR align="center" size="3" width="90%">
<A NAME="fieldText">
<PRE>
    PField& text(const PString& text, Boolean keepText = false);
</PRE>
A new memory handle will be created, the <CODE>text</CODE> will be
copied to it and the field's text handle
will be set. When the object is destroyed, the field's handle will
be set to 0 and the allocated memory will be freed, unless
<CODE>keepText</CODE> is set to <CODE>true</CODE>. In this case,
the handle will be left to the field and will be freed when the form
is closed. Leaving <CODE>keepText false</CODE> will result in an empty
field when the object is destroyed.<BR>
The allocated handle <STRONG>cannot</STRONG> be retrieved with
<CODE>handle()</CODE> if <CODE>keepText</CODE> is <CODE>false</CODE>
and will be freed when the form is closed or the
application sets it explicitely with <CODE>handle(Handle h)</CODE>.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    Handle handle();
</PRE>
Returns the handle of the field's allocated text memory, if available
to the application, 0 otherwise. It's length can be retrieved with
<CODE>allocated()</CODE>.
<P>
<HR align="center" size="3" width="90%">
<A NAME="fieldHandle">
<PRE>
    PField& handle(Handle h, Boolean keepHandle = true);
</PRE>
Sets the field's memory handle. The meaning of <CODE>keepHandle</CODE>
differs from the one of <CODE>text(PString&)</CODE>. If it is true (default)
the memory will be left to the application. That is, if a form is closed
or another call to <CODE>handle(Handle)</CODE> is made, the field's internal
handle is reset to 0 respectively replaced. If it false, the field takes over
the management of the handle. Closing a form or calling
<CODE>handle(Handle)</CODE> again will release and invalidate the memory.
Be very carefull with this when passing handles to database records! You
can explicetely avoid this by calling <CODE>handle(0)</CODE>.
In opposite to <CODE>text(PString&)</CODE> only non-kept handles can be
retrieved by <CODE>handle()</CODE> and <CODE>allocated()</CODE>.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PField& attachScrollbar(Word id);
</PRE>
Associates a scrollbar with a field. See <A HREF="#CONSTR" TARGET="_self">
constructors</A> for details.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PField& scroll(enum directions dir, short lines = 0)
</PRE>
Scrolls the field. <CODE>dir</CODE> can be either <CODE>up</CODE> or 
<CODE>down</CODE>. If <CODE>lines</CODE> is omitted, the field scrolls
the number of visible lines.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    FieldPtr fieldPtr();
</PRE>
Returns the <CODE>FieldPtr</CODE> if the parent form is already shown,
otherwise it returns 0. This can be used to access PalmOS APIs that are not
implemented yet.<BR>
For the reasons mentioned above, be carefull when using memory related
APIs.
<P>
<HR align="center" size="3" width="90%">
See <A HREF="pl_ctli.html">PControl</A> for inherited public functions.
<A NAME="PROTF"><H2>Protected functions</H2></A>
See <A HREF="pl_ctli.html">PControl</A> for inherited protected functions.
<P>
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
