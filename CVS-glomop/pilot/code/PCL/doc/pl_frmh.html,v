head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.54;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PFormHandler Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PFormHandler</H1>
<P>
This class is used to process the events generated by the system.
Any number of form handlers can be attached to any form. The last
attached handler will get the event first. If any handling
method returns <CODE>true</CODE> it means, that the process is
handled and does not need any further processing. The default
behaviour is to return <CODE>false</CODE>.
<P>
To handle the events yourself, create a subclass and override the
virtual methods for this base class.
<BR>

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLEvt.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI>PBaseObj</A><BR>
   <DL>
   <LI>PFormHandler<BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
    PFormHandler();
</PRE>
There is only the default constructor.
<P>
<A NAME="PUBLICF"><H2>Public functions</H2></A>
<PRE>
    PFormHandler& handleFor(const PForm* frm)

</PRE>
Registers a handler for a form object.
<BR>
One handler object can be attached to multiple forms and vice versa!

<P>
<HR align="center" size="3" width="90%">
<PRE>
    PFormHandler& stopHandlingFor(const PForm* frm);
</PRE>
De-registers the handler for the object.
If frm is 0, de-registers the handler for all forms it is registered
for.
<HR align="center" size="3" width="90%">
<STRONG>Handling methods</STRONG>
<P>
<PRE>
   virtual Boolean open();
</PRE>
is called when the form is loaded and shown.
<P>
<PRE>
   virtual Boolean closed();
</PRE>
is called when the form is closed. It is, however <STRONG>not called 
</STRONG> when a form issues a <A HREF="pl_formi.html">PForm::returnTo()</A>.
<P>
<PRE>
   virtual Boolean save();
</PRE>
is called by the system when the form should save it's precious data.
It's going to be closed real soon.
<P>
<PRE>
   virtual Boolean command(PCmdEvt& cmdEvent);
</PRE>
Is called, when the user selects a menu, button or checkbox control.
See <A HREF="pl_cmdevi.html">PCmdEvt</A> for details.
<P>
<PRE>
   virtual Boolean update(const Word& code);
</PRE>
is called when the form should redraw itself. <CODE>code</CODE> is
the update code supplied by the system or the application (see
<A HREF="pl_formi.html">PForm::update</A>)
<P>
<PRE>
   virtual Boolean key(PKeyEvt& keyEvent);
</PRE>
Keys and graffiti strokes generate this event. See <A HREF="pl_keyevi.html">
PKeyEvent</A> for details.
<P>
<PRE>
   virtual Boolean nil();
</PRE>
called for system generated nil ticks. see <A HREF="pl_appli.html">
PApplication::PApplication(...)</A>
<P>
<PRE>
   virtual Boolean scroll(PScrollEvt& scrollEvent);
</PRE>
Is called, when the user selects or moves a scrollbar resource.
See <A HREF="pl_sclevi.html">PScrollEvt</A> for details. Scrollbars can
be attached to fields and tables directly (<A HREF="pl_fieldi.html">PField</A>,
<A HREF="pl_scli.html">PScrollbar</A>) so there is no need to handle this
for these resources.
<P>
<PRE>
   virtual Boolean titleSelect();
</PRE>
The user tapped on the title bar. (Beware of MenuHack. You can
specify <CODE>applicationFirst</CODE> in the <A HREF="pl_appli.html">
PApplication</A> constructor to handle this event first).
<P>
<PRE>
   virtual Boolean defaultHandler(PFormEvt& formEvent);
</PRE>
Any other events can be handled with this method. See <A HREF="pl_frmevi.html">
PFormEvt</A> for details.
<P>
<A NAME="PROTF"><H2>Protected functions</H2></A>
<PRE>
    virtual Boolean dispatch(EventPtr e, const PWin hwnd);
</PRE>
This is called by the main event loops dispatcher function, and dispatches
the events to the handling functions. There is no real need to override this,
as <CODE>defautlHandler(PFormEvt&)</CODE> receives every non-handled
event.<BR>
 Every class overriding this should
check if <CODE>(Word) hwnd == your_own_frmId</CODE>, and
return false immediately if not.
</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
