head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.53;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
<TITLE>PFloat Class</TITLE>
<BASE TARGET="contents">
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<A NAME="DESC"></A>
<H1>PFloat</H1>
Implements the basic operators and conversions for the new PalmOS 2
double precision floating point routines. I'm thinking about
using MathLib for the transcendent functions.

<P>
<BR>

<A NAME="SYNOP"><H2>Synopsis</H2></A>
<CODE>#include &lt;PLFloat.h&gt;</CODE>
<P>

<A NAME="DERIV"><H2>Derivation</H2></A>
<DL>
<LI>PBaseObj</A><BR>

   <DL>
   <LI>PFloat<BR>
   </DL>
</DL>
<P>
<P>
<A NAME="CONSTR"><H2>Constructors</H2></A>
<PRE>
    PFloat();                    /* 0.0 */
    PFloat(const PFloat&);
    PFloat(const PString&);      /* AToF */
    PFloat(double d);
    PFloat(const FlpDouble& fd);
</PRE>
Default, copy and conversion constructors.
<P>
<A NAME="OPERATORS"><H2>Operators</H2></A>
<PRE>
    operator double () const;
    operator FlpDouble () const;
    operator PString () const;
</PRE>
Converions, <CODE>operator PString ()</CODE> still uses the brain-dead
PalmOS FToA function.
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PFloat& operator = (const PFloat&);
</PRE>
Assignment
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PFloat& operator+= (const PFloat&);
    PFloat& operator+= (double);
    PFloat& operator-= (const PFloat&);
    PFloat& operator-= (double);
    PFloat& operator*= (const PFloat&);
    PFloat& operator*= (double);
    PFloat& operator/= (const PFloat&);
    PFloat& operator/= (double);
</PRE>
Operator assignments
<P>
<HR align="center" size="3" width="90%">
<PRE>
    PFloat operator+ (const PFloat&, const PFloat&);
    PFloat operator+ (const PFloat&, double);
    PFloat operator+ (double,        const PFloat&);
    ...
</PRE>
Basic operators
<P>

</BODY>
</HTML>

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
