head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef _PLUI_H
#define _PLUI_H

#include <PLSys.h>
#include <PLBase.h>
#include <PLString.h>
#include <PLEvt.h>

/**********************************************************************/
/* UI classes                                                         */
/**********************************************************************/

/*--------------------------------------------------------------------*/
/* form                                                               */
/*--------------------------------------------------------------------*/
class PControl;
class PForm;

class PFormLowLevelHandler : public PFormHandler
{
  public:
    PFormLowLevelHandler(PForm* form);

  private:
    virtual Boolean dispatch(EventPtr e, const PWin hwnd);
    PForm* form_;
};

class PForm
  : public PWindow
{
  friend class PFormLowLevelHandler;

  public:
    PForm(Word formId);
    ~PForm();
    PForm& popUp();
    PForm& goTo();
    Word   doDialog(); 
    PForm& returnTo(const PForm* form = 0);
    PForm& showObj(PControl& ctl);
    PForm& hideObj(PControl& ctl);
    inline FormPtr frmPtr() const { return(frmPtr_); }
    inline Word    id()  const { return(frmId_); }
    PForm& addChild(PControl* ctl);
    PForm& updateForm(Word code = frmRedrawUpdateCode);
  private:
    PForm& init(FormPtr ptr);
    PForm& exit();

  private:
    class Child
    {
      public:
        PControl* ctl;
        Child*    next;
    };
    PFormLowLevelHandler lowLevelHandler;
    Word frmId_;
    FormPtr frmPtr_;
    Child* children_;
};

/*--------------------------------------------------------------------*/
/*                                                                    */
/*--------------------------------------------------------------------*/
class PControl
  : public PWindow
{
  friend class PForm;

  public:
    PControl(PForm *parent, Word id);

  public:
    virtual Boolean usable()  = 0;
    virtual Boolean enabled() = 0;
    virtual Boolean visible() = 0;

    virtual PControl& show(Boolean show);
    inline  virtual PControl& show() { return(show(true)); }
    inline  virtual PControl& hide() { return(show(false)); }
    inline  virtual PControl& usable(Boolean) { return(*this); }
    inline  virtual PControl& enabled(Boolean) { return(*this); }
    virtual PControl& refresh() = 0;
    inline Word id() { return(id_); }
    SWord idx();

  protected:
    VoidPtr objPtr();
    inline FormPtr frmPtr() { return(parent_->frmPtr()); }
    virtual void loadInit() {};
    virtual void unloadExit() {};

  private:
    PControl(const PControl&);
    PControl& operator =(const PControl&);

  private:
    Word id_;
    SWord idx_;
    PForm* parent_;
    VoidPtr objPtr_;
};

class PButton : public PControl
{
  public:
    PButton(PForm * parent, Word id);
    virtual ~PButton() {};
    PString text();
    PButton& text(const PString& s);
    PButton& click();

  protected:
    virtual void loadInit();

  private:
    PButton(const PButton&);
    PButton& operator =(const PButton&);
    inline ControlPtr buttonPtr() { return((ControlPtr) objPtr()); }

  private: /* should be public */
    virtual Boolean usable() { return true; };
    virtual Boolean enabled() { return true; };
    virtual Boolean visible() { return true; };
    virtual PButton& refresh() { return *this; }

  private:
    char *text_;
};
#endif /* _PLUI_H */
@


1.1.1.1
log
@Pilot Class Library
@
text
@@
