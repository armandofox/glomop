head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef _PLLIST_H
#define _PLLIST_H

#include <PLSys.h>
#include <PLBase.h>
#include <PLString.h>
#include <PLUI.h>

class PList : public PControl
{
  public:
    PList(PForm* parent, Word id);
    virtual ~PList();

  public:
    int    ind();
    PList& ind(int sel);
    PString text();
    PList& add(const PString& s);
    PList& ins(const PString& s, const int before);
    PList& remove(const int idx);
    PList& removeAll();
    PList& replace(const PString& s, const int idx);
    inline int count() { return(numLines_); }
    PList& scroll(enum directions, short count = 0);
    PList& setTop(const int idx);
    inline ListPtr listPtr() { return((ListPtr) objPtr()); }

  /* From PControl */
  public:
    virtual PList& refresh();
    virtual Boolean usable();
    virtual Boolean enabled();
    virtual Boolean visible();
    virtual PList& show(Boolean show = true);
    inline  virtual PList& hide() { return(show(false)); }

  private: /* should be public */
    virtual PList& usable(Boolean) { return *this; }
    virtual PList& enabled(Boolean) { return *this; }

  protected:
    virtual void loadInit();

  private:
    PList(const PList&);
    PList& operator =(const PList&);
    PList& grow();
    inline PList& lock();
    inline PList& unlock();

  private:
    int  numLines_;
    int  numAlloc_;
    char **pLines_;
    int  lockInd_;
};


#endif /* _PLLIST_H */
@


1.1.1.1
log
@Pilot Class Library
@
text
@@
