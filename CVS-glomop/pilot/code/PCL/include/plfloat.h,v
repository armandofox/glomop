head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef _PLFLOAT_H
#define _PLFLOAT_H

#include <PLSys.h>
#include <PLBase.h>
#include <PLString.h>

#include <flpstub.h>

class PFloat : private PBaseObj
{
  public:
    inline PFloat() {flt_.d = 0.0;}
    inline PFloat(const PFloat& f) : flt_(f.flt_) {}
    inline PFloat(const PString& s) { flt_.fd = FlpAToF(s); }
    inline PFloat(const double d) { flt_.d = d; }
    inline PFloat(const FlpDouble& fd) { flt_.fd = fd; }
  public:
    inline operator double () const { return (flt_.d); }
    inline operator FlpDouble() const { return (flt_.fd); }
    operator PString () const;
  public:
    inline PFloat& operator= (const PFloat& r)
      {flt_ = r.flt_; return(*this);}
    inline PFloat& operator+= (const PFloat& r)
      { flt_.fd = _d_add(this->flt_.fd, r.flt_.fd); return(*this); }
    inline PFloat& operator+= (const double r)
      { register FlpCompDouble rhs; rhs.d = r;
        flt_.fd = _d_add(this->flt_.fd, rhs.fd); return(*this); }
    inline PFloat& operator-= (const PFloat& r)
      { flt_.fd = _d_sub(this->flt_.fd, r.flt_.fd); return(*this); }
    inline PFloat& operator-= (const double r)
      { register FlpCompDouble rhs; rhs.d = r;
        flt_.fd = _d_sub(this->flt_.fd, rhs.fd); return(*this); }
    inline PFloat& operator*= (const PFloat& r)
      { flt_.fd = _d_mul(this->flt_.fd, r.flt_.fd); return(*this); }
    inline PFloat& operator*= (const double r)
      { register FlpCompDouble rhs; rhs.d = r;
        flt_.fd = _d_mul(this->flt_.fd, rhs.fd); return(*this); }
    inline PFloat& operator/= (const PFloat& r)
      { flt_.fd = _d_div(this->flt_.fd, r.flt_.fd); return(*this); }
    inline PFloat& operator/= (const double r)
      { register FlpCompDouble rhs; rhs.d = r;
        flt_.fd = _d_div(this->flt_.fd, rhs.fd); return(*this); }
  private:
    FlpCompDouble flt_;
};

inline PFloat operator+(const PFloat& lf, const PFloat& rf)
  { return(PFloat(lf) += rf); }
inline PFloat operator+(const PFloat& lf, const double rd)
  { return(PFloat(lf) += rd); }
inline PFloat operator+(const double ld, const PFloat& rf)
  { return(PFloat(ld) += rf); }

inline PFloat operator-(const PFloat& lf, const PFloat& rf)
  { return(PFloat(lf) -= rf); }
inline PFloat operator-(const PFloat& lf, const double rd)
  { return(PFloat(lf) -= rd); }
inline PFloat operator-(const double ld, const PFloat& rf)
  { return(PFloat(ld) -= rf); }

inline PFloat operator*(const PFloat& lf, const PFloat& rf)
  { return(PFloat(lf) *= rf); }
inline PFloat operator*(const PFloat& lf, const double rd)
  { return(PFloat(lf) *= rd); }
inline PFloat operator*(const double ld, const PFloat& rf)
  { return(PFloat(ld) *= rf); }

inline PFloat operator/(const PFloat& lf, const PFloat& rf)
  { return(PFloat(lf) /= rf); }
inline PFloat operator/(const PFloat& lf, const double rd)
  { return(PFloat(lf) /= rd); }
inline PFloat operator/(const double ld, const PFloat& rf)
  { return(PFloat(ld) /= rf); }

#endif /* _PLFLOAT_H */

@


1.1.1.1
log
@Pilot Class Library
@
text
@@
