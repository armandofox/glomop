head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.48.55;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#include <PLAppl.h>
#include <PLUI.h>
#include <PLString.h>
#include <PLList.h>
#include <PLField.h>

#include "resource.h"

class SampApp
  : public PApplication,
    public PFormHandler
{
  public:
    SampApp();
    virtual ~SampApp() {}

  private:
    virtual Boolean command(PCmdEvt&);

  private:
    PList listbox;
    PField left, right;
    PButton doo, dont;
};

SampApp::SampApp()
  : PApplication(APPID, kidfMainForm),
    listbox(this, kidcListbox),
    left(this,  kidtField1),
    right(this, kidtField2),
    doo(this, kidcDo),
    dont(this, kidcDont)
{
  doo.text("Left");
  dont.text("Right");
  right.text("I filled something in for you!", true); /* see docs!! */
  listbox.removeAll();
  handleFor(this);
}

Boolean SampApp::command(PCmdEvt& ev)
{
  switch (ev.id())
  {
    case kidcDo:
      listbox.add(left.text()).refresh();
      return(true);
    case kidcDont:
      listbox.add(right.text()).refresh();
      return(true);
    case kidcCheckbox: /* Let's get down to business! */
    {
      PString state("Checkbox is ");
      state += ev.on() ? "on" : "off";
      /* Retrieve and lock the handle (dont' forget error checking!) */
      Handle h = right.handle();
      char* p = (char*) MemHandleLock((VoidHand) h);
      /* Manipulate the data, but be careful! */
      MemSet(p, right.text().len(), ' ');
      MemMove(p, state, state.len());
      /* release the handle */
      MemHandleUnlock((VoidHand) h);
      /* and redraw the field */
      right.refresh();
    }
    default:
      return(false);
  }
}

DWord PilotMain(Word cmd, Ptr /* cmdPBP */ , Word /* launchFlags */)
{
  if (cmd == sysAppLaunchCmdNormalLaunch)
  {
    PCLInit();
    SampApp mainAppl;

    mainAppl.run();
  }
  return(0);
}
@


1.1.1.1
log
@Pilot Class Library
@
text
@@
