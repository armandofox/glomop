head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.11.11.19.53.00;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.11.11.19.53.00;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#include <Pilot.h>

static struct LibRef *libref = 0;

extern void GLibClose(struct LibRef *);

void GLib_CrBN(void)
{
    asm ("
.global BN_CTX_free
BN_CTX_free: move.l #1,%%d0; braw dispatch
.global BN_CTX_new
BN_CTX_new: move.l #2,%%d0; braw dispatch
.global BN_MONT_CTX_free
BN_MONT_CTX_free: move.l #3,%%d0; braw dispatch
.global BN_MONT_CTX_new
BN_MONT_CTX_new: move.l #4,%%d0; braw dispatch
.global BN_MONT_CTX_set
BN_MONT_CTX_set: move.l #5,%%d0; braw dispatch
.global BN_add
BN_add: move.l #6,%%d0; braw dispatch
.global BN_add_word
BN_add_word: move.l #7,%%d0; braw dispatch
.global BN_ascii2bn
BN_ascii2bn: move.l #8,%%d0; braw dispatch
.global BN_bin2bn
BN_bin2bn: move.l #9,%%d0; braw dispatch
.global BN_bn2ascii
BN_bn2ascii: move.l #10,%%d0; braw dispatch
.global BN_bn2bin
BN_bn2bin: move.l #11,%%d0; braw dispatch
.global BN_clear
BN_clear: move.l #12,%%d0; braw dispatch
.global BN_clear_bit
BN_clear_bit: move.l #13,%%d0; braw dispatch
.global BN_clear_free
BN_clear_free: move.l #14,%%d0; braw dispatch
.global BN_cmp
BN_cmp: move.l #15,%%d0; braw dispatch
.global BN_copy
BN_copy: move.l #16,%%d0; braw dispatch
.global BN_div
BN_div: move.l #17,%%d0; braw dispatch
.global BN_div_word
BN_div_word: move.l #18,%%d0; braw dispatch
.global BN_dup
BN_dup: move.l #19,%%d0; braw dispatch
.global BN_free
BN_free: move.l #20,%%d0; braw dispatch
.global BN_from_montgomery
BN_from_montgomery: move.l #21,%%d0; braw dispatch
.global BN_gcd
BN_gcd: move.l #22,%%d0; braw dispatch
.global BN_generate_prime
BN_generate_prime: move.l #23,%%d0; braw dispatch
.global BN_get_word
BN_get_word: move.l #24,%%d0; braw dispatch
.global BN_is_bit_set
BN_is_bit_set: move.l #25,%%d0; braw dispatch
.global BN_is_prime
BN_is_prime: move.l #26,%%d0; braw dispatch
.global BN_lshift
BN_lshift: move.l #27,%%d0; braw dispatch
.global BN_lshift1
BN_lshift1: move.l #28,%%d0; braw dispatch
.global BN_mask_bits
BN_mask_bits: move.l #29,%%d0; braw dispatch
.global BN_mod
BN_mod: move.l #30,%%d0; braw dispatch
.global BN_mod_exp
BN_mod_exp: move.l #31,%%d0; braw dispatch
.global BN_mod_exp_mont
BN_mod_exp_mont: move.l #32,%%d0; braw dispatch
.global BN_mod_exp_recp
BN_mod_exp_recp: move.l #33,%%d0; braw dispatch
.global BN_mod_exp_simple
BN_mod_exp_simple: move.l #34,%%d0; braw dispatch
.global BN_mod_inverse
BN_mod_inverse: move.l #35,%%d0; braw dispatch
.global BN_mod_mul
BN_mod_mul: move.l #36,%%d0; braw dispatch
.global BN_mod_mul_montgomery
BN_mod_mul_montgomery: move.l #37,%%d0; braw dispatch
.global BN_mod_mul_reciprocal
BN_mod_mul_reciprocal: move.l #38,%%d0; braw dispatch
.global BN_mod_word
BN_mod_word: move.l #39,%%d0; braw dispatch
.global BN_mul
BN_mul: move.l #40,%%d0; braw dispatch
.global BN_new
BN_new: move.l #41,%%d0; braw dispatch
.global BN_num_bits
BN_num_bits: move.l #42,%%d0; braw dispatch
.global BN_num_bits_word
BN_num_bits_word: move.l #43,%%d0; braw dispatch
.global BN_options
BN_options: move.l #44,%%d0; braw dispatch
.global BN_rand
BN_rand: move.l #45,%%d0; braw dispatch
.global BN_reciprocal
BN_reciprocal: move.l #46,%%d0; braw dispatch
.global BN_rshift
BN_rshift: move.l #47,%%d0; braw dispatch
.global BN_rshift1
BN_rshift1: move.l #48,%%d0; braw dispatch
.global BN_set_bit
BN_set_bit: move.l #49,%%d0; braw dispatch
.global BN_set_word
BN_set_word: move.l #50,%%d0; braw dispatch
.global BN_sqr
BN_sqr: move.l #51,%%d0; braw dispatch
.global BN_sub
BN_sub: move.l #52,%%d0; braw dispatch
.global BN_ucmp
BN_ucmp: move.l #53,%%d0; braw dispatch
.global BN_value_one
BN_value_one: move.l #54,%%d0; braw dispatch
.global bn_div64
bn_div64: move.l #55,%%d0; braw dispatch
.global bn_expand2
bn_expand2: move.l #56,%%d0; braw dispatch
.global bn_mul_add_word
bn_mul_add_word: move.l #57,%%d0; braw dispatch
.global bn_mul_word
bn_mul_word: move.l #58,%%d0; braw dispatch
.global bn_qadd
bn_qadd: move.l #59,%%d0; braw dispatch
.global bn_qsub
bn_qsub: move.l #60,%%d0; braw dispatch
.global bn_sqr_words
bn_sqr_words: move.l #61,%%d0; braw dispatch

libname:
    .asciz \"Bignum Library\"
    .even

dispatch:
    lea libname(%%pc),%%a1
    move.l %%a1,%%d2
    move.l %%a4,%%d1
    move.l %%d1,%%d1
    jbeq noglobals
    lea libref(%%a4),%%a1
noglobals:
    move.l %0,%%d1
    braw GLibDispatch
    " : : "i" ('CrBN') );
}

register void *reg_a4 asm("%a4");

void GLib_CrBN_clean(Word cmd, Ptr PBP, Word flags)
{
    if (reg_a4 && libref) {
	GLibClose(libref);
	libref = 0;
    }
}

asm("
.section ehook
.long GLib_CrBN_clean
");
@


1.1.1.1
log
@pilotSSLeay-2.0
@
text
@@
