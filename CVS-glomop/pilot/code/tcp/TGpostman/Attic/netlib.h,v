head	1.2;
access;
symbols
	start:1.1.1.1
	soda445:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	97.05.19.01.56.45;	author iang;	state dead;
branches;
next	1.1;

1.1
date	97.05.13.22.39.23;	author iang;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.22.39.23;	author iang;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/* This is Ian Goldberg's attempt at a header file that will allow you to
   use the Net library contained in the Palm Pilot Pro ROM.  Comments
   and corrections to <iang@@cs.berkeley.edu>.

   This file is distributed as part of Top Gun Telnet.
   See the README file for copyright/licensing terms.

   IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
   DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.

   THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
   IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
   NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
   MODIFICATIONS.
*/

#ifndef __NETLIB_H__
#define __NETLIB_H__

/* Data structures */

struct sockaddr {
    unsigned short	sa_family;
    char		sa_data[14];
};

struct in_addr {
    ULong		s_addr;
};

struct sockaddr_in {
    unsigned short	sin_family;
    unsigned short	sin_port;
    struct in_addr	sin_addr;
    unsigned char	sin_zero[8];
};

struct iovec {
    void *		iov_base;
    int			iov_len;
};

struct msghdr {
    void *		msg_name;
    int			msg_namelen;
    struct iovec *	msg_iov;
    int			msg_iovlen;
};

struct hostent {
    char *		h_name;
    char **		h_aliases;
    int			h_addrtype;
    int			h_length;
    void **		h_addr_list;
    char		h_pad[2032];
};

typedef ULong		fd_set;

#define FD_SETSIZE	5
#define FD_ZERO(fdsetp) do { *(fdsetp) = 0; } while(0)
#define FD_SET(fd,fdsetp) do { *(fdsetp) |= (1L<<(fd)); } while(0)
#define FD_CLR(fd,fdsetp) do { *(fdsetp) &= ~(1L<<(fd)); } while(0)
#define FD_ISSET(fd,fdsetp) (*(fdsetp) & (1L<<(fd)))
#define FD_EVENT	0

/* Constants */

enum {
    IPPROTO_IP = 0,
    IPPROTO_TCP = 6,
    IPPROTO_UDP = 17,
    IPPROTO_MAX = 256
};

#define AF_INET		2
#define PF_INET		AF_INET

#define SOCK_STREAM	1
#define SOCK_DGRAM	2

#define INADDR_ANY	((ULong) 0)
#define INADDR_NONE	((ULong) 0xffffffff)

#define htons(x)	(x)
#define ntohs(x)	(x)
#define htonl(x)	(x)
#define ntohl(x)	(x)

/* Net Library function declarations */

/* The commented-out entries correspond to functions for which I haven't
   yet bothered to figure out the interface. */

Err	NetLibOpen(UInt refNum, Word *unk1) SYS_TRAP(sysLibTrapOpen);
Err	NetLibClose(UInt refNum, Word unk1) SYS_TRAP(sysLibTrapClose);
/* void	NetLibAddrINToA(void) SYS_TRAP(sysLibTrapCustom); */
ULong	NetLibAddrAToIN(UInt refNum, CharPtr addrstr)
	    SYS_TRAP(sysLibTrapCustom+1);
Word	NetLibSocketOpen(UInt refNum, UChar domain, UChar type, Word protocol,
	    Long timeout, ULong *errno) SYS_TRAP(sysLibTrapCustom+2);
Err	NetLibSocketClose(UInt refNum, Int sock, Long timeout, ULong *errno)
	    SYS_TRAP(sysLibTrapCustom+3);
/* void	NetLibSocketOptionSet(void) SYS_TRAP(sysLibTrapCustom+4); */
/* void	NetLibSocketOptionGet(void) SYS_TRAP(sysLibTrapCustom+5); */
/* void	NetLibSocketBind(void) SYS_TRAP(sysLibTrapCustom+6); */
Err	NetLibSocketConnect(UInt refNum, Int sock, struct sockaddr *addr,
	    Word unk1, Long timeout, ULong *errno)
	    SYS_TRAP(sysLibTrapCustom+7);
/* void	NetLibSocketListen(void) SYS_TRAP(sysLibTrapCustom+8); */
/* void	NetLibSocketAccept(void) SYS_TRAP(sysLibTrapCustom+9); */
/* void	NetLibSocketShutdown(void) SYS_TRAP(sysLibTrapCustom+10); */
UInt	NetLibSendPB(UInt refNum, Int sock, struct msghdr *msghdr, UInt flags,
	    Long timeout, ULong *errno) SYS_TRAP(sysLibTrapCustom+11);
UInt	NetLibSend(UInt refNum, Int sock, CharPtr data, UInt len, UInt flags,
	    struct sockaddr *sockaddr, UInt addrlen, Long timeout,
	    ULong *errno) SYS_TRAP(sysLibTrapCustom+12);
UInt	NetLibReceivePB(UInt refNum, Int sock, struct msghdr *msghdr,
	    UInt flags, Long timeout, ULong *errno)
	    SYS_TRAP(sysLibTrapCustom+13);
UInt	NetLibReceive(UInt refNum, Int sock, CharPtr data, UInt len,
	    UInt flags, struct sockaddr *sockaddr, UInt *addrlen, Long timeout,
	    ULong *errno) SYS_TRAP(sysLibTrapCustom+14);
UInt	NetLibDmReceive(UInt refNum, Int sock, ULong unk1, CharPtr data,
	    UInt len, UInt flags, struct sockaddr *sockaddr, UInt *addrlen,
	    Long timeout, ULong *errno) SYS_TRAP(sysLibTrapCustom+15);
UInt	NetLibSelect(UInt refNum, UInt n, fd_set *l1, fd_set *l2, fd_set *l3,
	    Long timeout, ULong *errno) SYS_TRAP(sysLibTrapCustom+16);
/* void	NetLibPrefsGet(void) SYS_TRAP(sysLibTrapCustom+17); */
/* void	NetLibPrefsSet(void) SYS_TRAP(sysLibTrapCustom+18); */
/* void	NetLibDrvrWake(void) SYS_TRAP(sysLibTrapCustom+19); */
/* void	NetLibInterfacePtr(void) SYS_TRAP(sysLibTrapCustom+20); */
/* void	NetLibMaster(void) SYS_TRAP(sysLibTrapCustom+21); */
struct hostent*	NetLibGetHostByName(UInt refNum, CharPtr name,
	    struct hostent *hostent, Long timeout, ULong *errno)
	    SYS_TRAP(sysLibTrapCustom+22);
/* void	NetLibSettingGet(void) SYS_TRAP(sysLibTrapCustom+23); */
/* void	NetLibSettingSet(void) SYS_TRAP(sysLibTrapCustom+24); */
/* void	NetLibIFAttach(void) SYS_TRAP(sysLibTrapCustom+25); */
/* void	NetLibIFDetach(void) SYS_TRAP(sysLibTrapCustom+26); */
/* void	NetLibIFGet(void) SYS_TRAP(sysLibTrapCustom+27); */
/* void	NetLibIFSettingGet(void) SYS_TRAP(sysLibTrapCustom+28); */
/* void	NetLibIFSettingSet(void) SYS_TRAP(sysLibTrapCustom+29); */
/* void	NetLibIFUp(void) SYS_TRAP(sysLibTrapCustom+30); */
/* void	NetLibIFDown(void) SYS_TRAP(sysLibTrapCustom+31); */
/* void	NetLibIFMediaUp(void) SYS_TRAP(sysLibTrapCustom+32); */
/* void	NetLibScriptExecute(void) SYS_TRAP(sysLibTrapCustom+33); */
/* void	NetLibGetHostByAddr(void) SYS_TRAP(sysLibTrapCustom+34); */
/* void	NetLibGetServByName(void) SYS_TRAP(sysLibTrapCustom+35); */
/* void	NetLibSocketAddr(void) SYS_TRAP(sysLibTrapCustom+36); */
/* void	NetLibFinishCloseWait(void) SYS_TRAP(sysLibTrapCustom+37); */
/* void	NetLibGetMailExchangeByName(void) SYS_TRAP(sysLibTrapCustom+38); */
/* void	NetLibPrefsAppend(void) SYS_TRAP(sysLibTrapCustom+39); */
/* void	NetLibIFMediaDown(void) SYS_TRAP(sysLibTrapCustom+40); */
/* void	NetLibOpenCount(void) SYS_TRAP(sysLibTrapCustom+41); */
/* void	NetLibTracePrintF(void) SYS_TRAP(sysLibTrapCustom+42); */
/* void	NetLibTracePutS(void) SYS_TRAP(sysLibTrapCustom+43); */
/* void	NetLibOpenIfCloseWait(void) SYS_TRAP(sysLibTrapCustom+44); */
/* void	NetLibHandlePowerOff(void) SYS_TRAP(sysLibTrapCustom+45); */
/* void	NetLibConnectionRefresh(void) SYS_TRAP(sysLibTrapCustom+46); */

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@TCP-aware programs for the Pilot
@
text
@@
