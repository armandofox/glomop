head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	97.07.11.02.22.18;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	97.07.09.17.12.59;	author iang;	state Exp;
branches;
next	1.1;

1.1
date	97.07.09.01.56.11;	author iang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@looks like it's working...
@
text
@#if 0
#include <Pilot.h>
#include <UI/ScrDriver.h>
#include "callback.h"
#endif

typedef void (*ScrLineRoutineType)(WinPtr, SWord, SWord, SWord, SWord);
static ScrLineRoutineType ScrLineRoutine_1bit = NULL;

typedef void (*ScrRectangleRoutineType)(WinPtr, SWord, SWord, SWord, SWord);
static ScrRectangleRoutineType ScrRectangleRoutine_1bit = NULL;

typedef void (*ScrDrawCharsType)(WinPtr, SWord, SWord, SWord, SWord, SWord,
    SWord, SWord, SWord, CharPtr, Word, FontPtr);
static ScrDrawCharsType ScrDrawChars_1bit = NULL;

typedef Err (*ScrCopyRectangleType)(WinPtr, WinPtr, SWord, SWord, SWord,
    SWord, SWord, SWord);
static ScrCopyRectangleType ScrCopyRectangle_1bit = NULL;

#if 0
typedef WinHandle (*WinCreateOffscreenWindowType)(SWord, SWord,
    WindowFormatType, WordPtr);
static WinCreateOffscreenWindowType WinCreateOffscreenWindow_1bit = NULL;

typedef WinHandle (*WinSaveBitsType)(RectanglePtr, WordPtr);
static WinSaveBitsType WinSaveBits_1bit = NULL;

typedef void (*WinRestoreBitsType)(WinHandle, SWord, SWord);
static WinRestoreBitsType WinRestoreBits_1bit = NULL;
#endif

/* static int in_2bit = 0; */

static const unsigned short grlmask[8] = {
    0xffff, 0x3fff, 0x0fff, 0x03ff, 0x00ff, 0x003f, 0x000f, 0x0003 };
static const unsigned short grrmask[8] = {
    0xc000, 0xf000, 0xfc00, 0xff00, 0xffc0, 0xfff0, 0xfffc, 0xffff };
static const unsigned short bw2gr[256] = {
    0x0000, 0x0003, 0x000c, 0x000f, 0x0030, 0x0033, 0x003c, 0x003f,
    0x00c0, 0x00c3, 0x00cc, 0x00cf, 0x00f0, 0x00f3, 0x00fc, 0x00ff,
    0x0300, 0x0303, 0x030c, 0x030f, 0x0330, 0x0333, 0x033c, 0x033f,
    0x03c0, 0x03c3, 0x03cc, 0x03cf, 0x03f0, 0x03f3, 0x03fc, 0x03ff,
    0x0c00, 0x0c03, 0x0c0c, 0x0c0f, 0x0c30, 0x0c33, 0x0c3c, 0x0c3f,
    0x0cc0, 0x0cc3, 0x0ccc, 0x0ccf, 0x0cf0, 0x0cf3, 0x0cfc, 0x0cff,
    0x0f00, 0x0f03, 0x0f0c, 0x0f0f, 0x0f30, 0x0f33, 0x0f3c, 0x0f3f,
    0x0fc0, 0x0fc3, 0x0fcc, 0x0fcf, 0x0ff0, 0x0ff3, 0x0ffc, 0x0fff,
    0x3000, 0x3003, 0x300c, 0x300f, 0x3030, 0x3033, 0x303c, 0x303f,
    0x30c0, 0x30c3, 0x30cc, 0x30cf, 0x30f0, 0x30f3, 0x30fc, 0x30ff,
    0x3300, 0x3303, 0x330c, 0x330f, 0x3330, 0x3333, 0x333c, 0x333f,
    0x33c0, 0x33c3, 0x33cc, 0x33cf, 0x33f0, 0x33f3, 0x33fc, 0x33ff,
    0x3c00, 0x3c03, 0x3c0c, 0x3c0f, 0x3c30, 0x3c33, 0x3c3c, 0x3c3f,
    0x3cc0, 0x3cc3, 0x3ccc, 0x3ccf, 0x3cf0, 0x3cf3, 0x3cfc, 0x3cff,
    0x3f00, 0x3f03, 0x3f0c, 0x3f0f, 0x3f30, 0x3f33, 0x3f3c, 0x3f3f,
    0x3fc0, 0x3fc3, 0x3fcc, 0x3fcf, 0x3ff0, 0x3ff3, 0x3ffc, 0x3fff,
    0xc000, 0xc003, 0xc00c, 0xc00f, 0xc030, 0xc033, 0xc03c, 0xc03f,
    0xc0c0, 0xc0c3, 0xc0cc, 0xc0cf, 0xc0f0, 0xc0f3, 0xc0fc, 0xc0ff,
    0xc300, 0xc303, 0xc30c, 0xc30f, 0xc330, 0xc333, 0xc33c, 0xc33f,
    0xc3c0, 0xc3c3, 0xc3cc, 0xc3cf, 0xc3f0, 0xc3f3, 0xc3fc, 0xc3ff,
    0xcc00, 0xcc03, 0xcc0c, 0xcc0f, 0xcc30, 0xcc33, 0xcc3c, 0xcc3f,
    0xccc0, 0xccc3, 0xcccc, 0xcccf, 0xccf0, 0xccf3, 0xccfc, 0xccff,
    0xcf00, 0xcf03, 0xcf0c, 0xcf0f, 0xcf30, 0xcf33, 0xcf3c, 0xcf3f,
    0xcfc0, 0xcfc3, 0xcfcc, 0xcfcf, 0xcff0, 0xcff3, 0xcffc, 0xcfff,
    0xf000, 0xf003, 0xf00c, 0xf00f, 0xf030, 0xf033, 0xf03c, 0xf03f,
    0xf0c0, 0xf0c3, 0xf0cc, 0xf0cf, 0xf0f0, 0xf0f3, 0xf0fc, 0xf0ff,
    0xf300, 0xf303, 0xf30c, 0xf30f, 0xf330, 0xf333, 0xf33c, 0xf33f,
    0xf3c0, 0xf3c3, 0xf3cc, 0xf3cf, 0xf3f0, 0xf3f3, 0xf3fc, 0xf3ff,
    0xfc00, 0xfc03, 0xfc0c, 0xfc0f, 0xfc30, 0xfc33, 0xfc3c, 0xfc3f,
    0xfcc0, 0xfcc3, 0xfccc, 0xfccf, 0xfcf0, 0xfcf3, 0xfcfc, 0xfcff,
    0xff00, 0xff03, 0xff0c, 0xff0f, 0xff30, 0xff33, 0xff3c, 0xff3f,
    0xffc0, 0xffc3, 0xffcc, 0xffcf, 0xfff0, 0xfff3, 0xfffc, 0xffff
};

static void update_2bit(unsigned char *base, SWord x1, SWord y1,
    SWord x2, SWord yextent)
{
    unsigned char *bwstartline = base + y1*20;
    unsigned short *grstartline = ((unsigned short *)twobitwindow->displayAddr)
				    + y1*20;
    unsigned short lmask = grlmask[x1 & 7];
    unsigned short rmask = grrmask[x2 & 7];
    for(;yextent;--yextent) {
	if ((x1 >> 3) == (x2 >> 3)) {
	    /* Only one byte */
	    unsigned short mask = (lmask & rmask);
	    unsigned short grval = grstartline[x1 >> 3] & ~mask;
	    grval |= (bw2gr[bwstartline[x1>>3]] & mask);
	    grstartline[x1 >> 3] = grval;
	} else {
	    SWord i;
	    /* The first (partial) byte */
	    unsigned short grval = grstartline[x1 >> 3] & ~lmask;
	    grval |= (bw2gr[bwstartline[x1>>3]] & lmask);
	    grstartline[x1 >> 3] = grval;
	    /* Middle bytes */
	    for(i=(x1>>3)+1;i<(x2>>3);++i) {
		grstartline[i] = bw2gr[bwstartline[i]];
	    }
	    /* The last (partial) byte */
	    grval = grstartline[x2 >> 3] & ~rmask;
	    grval |= (bw2gr[bwstartline[x2>>3]] & rmask);
	    grstartline[x2 >> 3] = grval;
	}
	bwstartline += 20;
	grstartline += 20;
    }
}

void ScrLineRoutine_2bit(WinPtr pWindow, SWord x1, SWord y1, SWord x2,
    SWord y2)
{
    CALLBACK_PROLOGUE

    ScrLineRoutine_1bit(pWindow, x1, y1, x2, y2);
    if (x1 > x2) {
	SWord t = x1;
	x1 = x2;
	x2 = t;
    }
    if (y1 > y2) {
	SWord t = y1;
	y1 = y2;
	y2 = t;
    }
    update_2bit(pWindow->displayAddr,x1,y1,x2,y2-y1+1);

    CALLBACK_EPILOGUE
}

void ScrRectangleRoutine_2bit(WinPtr pWindow, SWord x, SWord y, SWord extentX,
    SWord extentY)
{
    CALLBACK_PROLOGUE

    ScrRectangleRoutine_1bit(pWindow, x, y, extentX, extentY);
    update_2bit(pWindow->displayAddr,x,y,x+extentX-1,extentY);

    CALLBACK_EPILOGUE
}

void ScrDrawChars_2bit(WinPtr pWindow, SWord xLoc, SWord yLoc, SWord xExtent,
    SWord yExtent, SWord clipTop, SWord clipLeft, SWord clipBottom,
    SWord clipRight, CharPtr chars, Word len, FontPtr fontPtr)
{
    CALLBACK_PROLOGUE

    ScrDrawChars_1bit(pWindow, xLoc, yLoc, xExtent, yExtent, clipTop,
	clipLeft, clipBottom, clipRight, chars, len, fontPtr);
    update_2bit(pWindow->displayAddr,xLoc,yLoc,xLoc+xExtent-1,yExtent);

    CALLBACK_EPILOGUE
}

Err ScrCopyRectangle_2bit(WinPtr sourceWindow, WinPtr destWindow, SWord fromX,
    SWord fromY, SWord toX, SWord toY, SWord bitCount, SWord lineCount) 
{
    Err retval;
    CALLBACK_PROLOGUE

    retval = ScrCopyRectangle_1bit(sourceWindow, destWindow, fromX, fromY,
	toX, toY, bitCount, lineCount);
    if (! destWindow->windowFlags.offscreen) {
	update_2bit(destWindow->displayAddr,toX,toY,
	    toX+bitCount-1,lineCount);
    }

    CALLBACK_EPILOGUE
    return retval;
}

#if 0
WinHandle WinCreateOffscreenWindow_2bit(SWord width, SWord height,
    WindowFormatType format, WordPtr error)
{
    WinHandle retval;
    CALLBACK_PROLOGUE

    if (in_2bit) {
	retval = WinCreateOffscreenWindow_1bit(width, height, format, error);
    } else {
	in_2bit = 1;
	retval = WinCreateOffscreenWindow_1bit(2*width, height, format, error);
	in_2bit = 0;
    }

    CALLBACK_EPILOGUE
    return retval;
}

typedef struct {
    ULong magic;
    WinHandle l,r;
} TwoWins;

WinHandle WinSaveBits_2bit(RectanglePtr sourceP, WordPtr error)
{
    WinHandle retval;
    CALLBACK_PROLOGUE

    if (in_2bit) {
	retval = WinSaveBits_1bit(sourceP, error);
    } else {
	WinHandle oldwin = WinGetDrawWindow();
	static WindowType realwin;
	RectangleType r;
	in_2bit = 1;
#if 0
	t = (TwoWins*)MemPtrNew(sizeof(TwoWins));
	if (!t) {
	    retval = NULL;
	} else {
	    RectangleType r = *sourceP;
	    WinHandle oldwin = WinGetDrawWindow();
	    t->magic = 0x00f00ba4;
#if 0
	    t->l = WinCreateOffscreenWindow_1bit(sourceP->extent.x,
			sourceP->extent.y, screenFormat, error);
	    t->r = WinCreateOffscreenWindow_1bit(sourceP->extent.x,
			sourceP->extent.y, screenFormat, error);
	    WinCopyRectangle(twobitwindow, t->l, &r, 0, 0, scrCopy);
	    r.topLeft.x += r.extent.x;
	    WinCopyRectangle(twobitwindow, t->r, &r, 0, 0, scrCopy);
#else
	    WinSetDrawWindow(twobitwindow);
	    r.topLeft.x *= 2;
	    t->l = WinSaveBits_1bit(&r, error);
	    r.topLeft.x += r.extent.x;
	    t->r = WinSaveBits_1bit(&r, error);
	    WinSetDrawWindow(oldwin);
#endif
	    retval = (WinHandle) t;
	}
#else
	/* OK; the real WinSaveBits routine complains if the window we're
	   reading from is wider than 256 pixels (32 bytes).  Ugh.
	   Let's pretend our window is 160 pixels wide and 320 tall... */
	realwin = *oldwin;
	oldwin->displayWidth = 160;
	oldwin->displayHeight = 320;
	oldwin->displayAddr = twobitwindow->displayAddr;
	oldwin->windowBounds.topLeft.x *= 2;
	oldwin->windowBounds.topLeft.x %= 160;
	oldwin->windowBounds.topLeft.y *= 2;
	oldwin->windowBounds.extent.x *= 2;
	oldwin->windowBounds.extent.x %= 160;
	oldwin->windowBounds.extent.y *= 2;
	oldwin->clippingBounds.left *= 2;
	oldwin->clippingBounds.left %= 160;
	oldwin->clippingBounds.top *= 2;
	oldwin->clippingBounds.right *= 2;
	oldwin->clippingBounds.right += 1;
	oldwin->clippingBounds.right %= 160;
	oldwin->clippingBounds.bottom *= 2;
	oldwin->viewOrigin.x *= 2;
	oldwin->viewOrigin.x %= 160;
	oldwin->viewOrigin.y *= 2;
	if (sourceP->topLeft.x < 80 &&
	    sourceP->topLeft.x+sourceP->extent.x < 80) {
	    r.topLeft.x = sourceP->topLeft.x * 2;
	    r.extent.x = sourceP->extent.x * 2;
	} else if (sourceP->topLeft.x < 80) {
	    r.topLeft.x = 0;
	    r.extent.x = 160;
	} else {
	    r.topLeft.x = (2*sourceP->topLeft.x) % 160;
	    r.extent.x = sourceP->extent.x * 2;
	}
	r.topLeft.y = sourceP->topLeft.y * 2;
	r.extent.y = sourceP->extent.y * 2;
	retval = WinSaveBits_1bit(&r, error);
	*oldwin = realwin;
#endif
	in_2bit = 0;
    }

    CALLBACK_EPILOGUE
    return retval;
}

void WinRestoreBits_2bit(WinHandle winHandle, SWord destX, SWord destY)
{
    CALLBACK_PROLOGUE

    if (in_2bit) {
	WinRestoreBits_1bit(winHandle, destX, destY);
    } else {
	WinHandle oldwin = WinGetDrawWindow();
	static WindowType realwin;
	SWord xpos;
	in_2bit = 1;

	realwin = *oldwin;
	oldwin->displayWidth = 160;
	oldwin->displayHeight = 320;
	oldwin->displayAddr = twobitwindow->displayAddr;
	oldwin->windowBounds.topLeft.x *= 2;
	oldwin->windowBounds.topLeft.x %= 160;
	oldwin->windowBounds.topLeft.y *= 2;
	oldwin->windowBounds.extent.x *= 2;
	oldwin->windowBounds.extent.x %= 160;
	oldwin->windowBounds.extent.y *= 2;
	oldwin->clippingBounds.left *= 2;
	oldwin->clippingBounds.left %= 160;
	oldwin->clippingBounds.top *= 2;
	oldwin->clippingBounds.right *= 2;
	oldwin->clippingBounds.right += 1;
	oldwin->clippingBounds.right %= 160;
	oldwin->clippingBounds.bottom *= 2;
	oldwin->viewOrigin.x *= 2;
	oldwin->viewOrigin.x %= 160;
	oldwin->viewOrigin.y *= 2;

	if (destX < 80 && destX+(winHandle->windowBounds.extent.x/2) < 80) {
	    xpos = destX*2;
	} else if (destX < 80) {
	    xpos = 0;
	} else {
	    xpos = (destX*2)%160;
	}
	WinRestoreBits_1bit(winHandle, xpos, destY*2);
	in_2bit = 0;
    }

    CALLBACK_EPILOGUE
}
#endif
@


1.2
log
@.
@
text
@d17 91
a107 1
static int in_2bit = 0;
d112 64
a175 1
    static WindowType realwin;
d179 1
a179 1
	ScrLineRoutine_1bit(pWindow, x1, y1, x2, y2);
d182 1
a182 13
	realwin = *pWindow;
	pWindow->displayWidth *= 2;
	pWindow->displayAddr = twobitwindow->displayAddr;
	pWindow->windowBounds.topLeft.x *= 2;
	pWindow->windowBounds.extent.x *= 2;
	pWindow->clippingBounds.left *= 2;
	pWindow->clippingBounds.right *= 2;
	pWindow->viewOrigin.x *= 2;
	ScrLineRoutine_1bit(pWindow, x1*2, y1, x2*2, y2);
#if 0
	ScrLineRoutine_1bit(pWindow, x1*2+1, y1, x2*2+1, y2);
#endif
	*pWindow = realwin;
d187 1
d190 6
a195 2
void ScrRectangleRoutine_2bit(WinPtr pWindow, SWord x, SWord y, SWord extentX,
    SWord extentY)
d197 1
a197 1
    static WindowType realwin;
d201 1
a201 1
	ScrRectangleRoutine_1bit(pWindow, x, y, extentX, extentY);
d203 3
a206 11
	realwin = *pWindow;
	pWindow->displayWidth *= 2;
	pWindow->displayAddr = twobitwindow->displayAddr;
/*
	pWindow->windowBounds.topLeft.x *= 2;
	pWindow->windowBounds.extent.x *= 2;
	pWindow->clippingBounds.left *= 2;
	pWindow->clippingBounds.right *= 2;
	pWindow->viewOrigin.x *= 2;
*/
	ScrRectangleRoutine_1bit(pWindow,x,y,extentX,extentY);
d208 64
a271 1
	ScrRectangleRoutine_1bit(pWindow,x*2+1,y,extentX*2,extentY);
a272 1
	*pWindow = realwin;
d277 1
d280 1
a280 3
void ScrDrawChars_2bit(WinPtr pWindow, SWord xLoc, SWord yLoc, SWord xExtent,
    SWord yExtent, SWord clipTop, SWord clipLeft, SWord clipBottom,
    SWord clipRight, CharPtr chars, Word len, FontPtr fontPtr)
a281 1
    static WindowType realwin;
d285 1
a285 2
	ScrDrawChars_1bit(pWindow, xLoc, yLoc, xExtent, yExtent, clipTop,
	    clipLeft, clipBottom, clipRight, chars, len, fontPtr);
d287 3
d291 30
a320 11
	realwin = *pWindow;
	pWindow->displayWidth *= 2;
	pWindow->displayAddr = twobitwindow->displayAddr;
	pWindow->windowBounds.topLeft.x *= 2;
	pWindow->windowBounds.extent.x *= 2;
	pWindow->clippingBounds.left *= 2;
	pWindow->clippingBounds.right *= 2;
	pWindow->viewOrigin.x *= 2;
	ScrDrawChars_1bit(pWindow, xLoc*2, yLoc, xExtent*2, yExtent, clipTop,
	    clipLeft*2, clipBottom, clipRight*2, chars, len, fontPtr);
	*pWindow = realwin;
d326 1
@


1.1
log
@keep trying...
@
text
@d13 4
d22 1
a22 1
    WinHandle olddraw;
d27 16
a42 1
	return;
a43 6
    in_2bit = 1;
    olddraw = WinGetDrawWindow();
    WinSetDrawWindow(twobitwindow);
    WinDrawLine(x1,y1,x2,y2);
    WinSetDrawWindow(olddraw);
    in_2bit = 0;
d51 33
a83 1
    WinHandle olddraw;
d87 16
a102 2
	ScrLineRoutine_1bit(pWindow, x, y, extentX, extentY);
	return;
a103 6
    in_2bit = 1;
    olddraw = WinGetDrawWindow();
    WinSetDrawWindow(twobitwindow);
    WinDrawLine(x,y,extentX,extentY);
    WinSetDrawWindow(olddraw);
    in_2bit = 0;
@
