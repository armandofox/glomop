head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.10.14.18.35.05;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<!-- Published by Quadralay WebWorks HTML Lite 1.5.1 -->
<html>
<head>
<title>Lecture Notes, 9/29/97</title>
</head>

<body>
<a name="473591">
<center><h1> CS294-6: Internet Services<br>Lecture Notes, 9/29/97</h1></center>
</a>
<hr><p><a name="916624">
<h2> User Profiles, Cookies, and Mass Customization</h2>
</a>
<a name="916538">
<h2>I.    User Profiles</h2>
</a>
<a name="916539">
Basic idea: we need to track permanent state about each user<p>
</a>
<a name="916540">
Why is this useful?<p>
</a>
<ul>
<a name="916544">
<li>basis of ad targeting -- targeted ads are worth roughly 10x over untargetted
</a>
<a name="916652">
<li>basis of customization of content (My Yahoo!, HotBot, Zip2 -- nearly every major service now has some form of customization)
</a>
<a name="916655">
<li>tracking behavior over time
</a>
</ul>
<a name="916546">
There are several ways to do this:<p>
</a>
<ul>
<a name="916547">
<li>Track state in the URL: make sure every URL carries the state with it (and that it is easy to parse out).  HotBot does this for browsers that don't support cookies. Very difficult -- requires integration with the authoring tools and is therefore very rare.
</a>
<a name="916658">
<li>Use cookies (more later).  Basically store state on the user's hard disk. Cookie is an opaque object that the browser will hand back to you on future accesses.
</a>
<a name="916659">
<li>Use server-side state, based on a unique id
</a>
<ul>
<a name="916660">
<li>Common key is IP address.  Doesn't work for dynamic IP addresses, also doesn't work if multiple people use the same IP address.
</a>
<a name="916661">
<li>Place just the unique id in a cookie.  This is the most common solution.
</a>
<a name="916662">
<li>Require log on and then use IP address as a session key.  This solves the mobility and the dynamic IP address issues, but not multiple users per IP address.  Session-only cookies could be used to solve this, but their lifetime is not well specified (but typically lasts the whole session).
</a>
<a name="916672">
<li>This is really the best approach for several reasons:  the state is totally controlled by the server, which means it can be examined and analyzed any time, and the ``schema'' of the database can be cleanly upgraded. In contrast, keeping real state in a cookie means that the server must be able to parse and handle all past versions of the cookie, since you can always get an old cookie.
</a>
</ul>
</ul>
<a name="916226">
<h3>A.	 Cookies</h3>
</a>
<a name="916689">
Cookies are opaque name-value pairs that are stored at the client, but sent to the server on all accesses to to that server.<p>
</a>
<ul>
<a name="916690">
<li>A cookie has a domain and path, both must match for the cookie to be sent
</a>
<ul>
<a name="916698">
<li>Domain starts with a ``.'' and must match the suffix of the target server (domain=.hotbot.com)
</a>
<a name="916703">
<li>Path starts with a ``/'' and must match a prefix of the URL. Path is almost always ``/''.
</a>
</ul>
<a name="916691">
<li>Cookies expires on a server-specified date; no date implies immediate expiration (not clear what this means -- this sitting or this connection?)
</a>
<a name="916695">
<li>Cookies can have attributes: the domain, path and expiration date are set as attibutes, but there can be other attributes, such as version number, etc.
</a>
<a name="916704">
<li>A site can send multiple cookies per page, but one is usually enough. Many sites dumbly send the same cookie for the page and every image on the page...  (why is this bad? because it reduces caching of images and annoys people that pop up alerts for cookies).  The easiest way to avoid this is to have a separate server for images.
</a>
<a name="916705">
<li>Cookies can be thrown out by the browser (or the user). Stored in ``cookies.txt'' on Windows boxes
</a>
</ul>

Here is an example from Netscape to HotBot
<a href="cookie2.html">with</a> and <a href="cookie1.html">without</a> a cookie. Without a cookie, HotBot sends back a "set-cookie" header to add one, and it
also rewrites the URL to include a user id, and redirects the browser to the
new URL (which it why the response says "document moved").  With the cookie,
it just replies with the page.



<a name="916709">
<h3>B.	 Privacy</h3>
</a>
<a name="916712">
One important distinction is strong versus weak identity:<p>
</a>
<ul>
<a name="916713">
<li>Strong identity: can tie user id to real person or e-mail address or phone number.
</a>
<a name="916714">
<li>Weak identity: can track a user, but cannot tie behavior to a real person, etc.
</a>
</ul>
<a name="916721">
Question: can a series of weak identity info be tied together into strong identity? probably<p>
</a>
<ul>
<a name="916727">
<li>First, many sites have strong id with the permission of the user. Ex: NY Times, Wall Street Journal, C-Net
</a>
<a name="916728">
<li>Second, some of these are dumb: e.g. NY Times use a simple substitution cipher to hide username/password in the cookie.
</a>
<a name="916729">
<li>Third, there are several place where all or nearly all traffic passes by: proxy caches, ISPs, carriers for ISPs (like Uunet). This would allow correlation of all of the data in one spot.
</a>
<a name="916730">
<li>Note this is similar to Lucky supermarket's ``Lucky Rewards Card'', which essentially trades strong identity and tracking of all purchases for automatic coupon use. (Safeway recently copied this idea.)
</a>
</ul>
<a name="916711">
<h3>C.	 Doubleclick example</h3>
</a>
<a name="916710">
Doubleclick is an advertising service that sells ads for sites with a large number of hits, including Alta Vista. It uses cookies to track users across all of their partner sites...<p>
</a>
<a name="916722">
How it works: (<a href="doubleclick.html">here is an example</a>)<p>
</a>
<ul>
<a name="916723">
<li>Partner sites generate use generic html to create an image anchor, where both the image and the clickthru come from www.doubleclick.net.
</a>
<a name="916724">
<li>Because the image is loaded from www.doubleclick.net, the doubleclick cookie is sent (even though the page is from another site)
</a>
<a name="916725">
<li>Doubleclick uses args in the image request plus the cookie info to pick a gif to return...
</a>
<a name="916744">
<pre>
</pre>
</a>
<a name="916733">
<pre>&lt;a href="http://ad.doubleclick.net/jump/altavista.digital.com/<br>
	result_front;kw=iframe+floating+frame;ord=-110901176"&gt;
</pre>
</a>
<a name="916734">
<pre>&lt;img src="http://ad.doubleclick.net/ad/altavista.digital.com/<br>
	result_front;kw=iframe+floating+frame;ord=-110901176" ismap <br>
	width=468 height=60 border=0 alt=AD&gt;&lt;/a&gt;
</pre>
</a>
<a name="916726">
<li>Note that the ad size and alt text are totally static, but the keywords are passed as args in the URLs (the keywords in this example are ``iframe floating frame'')
</a>
<a name="916755">
<li>Clickthru is handled by an http redirection to the advertiser's site (via doubleclick.net)
</a>
<a name="916752">
<li>Question: how do they know which ad you clicked on when you click on an ad?  There is no indication of which ad gets selected in the URL, since it is generated before the ad is picked. Answer (really): they track the last image they sent your user id (might be IP address), and you clickthru to the corresponding site for that image. Simple way to prove this: load two Netscape windows with Alta Vista, being careful to load them sequentially, so that it is obvious which one was loaded last. If you click on the ad image for the first window, it will go to the ad site for the second window, which has nothing to do with the image you clicked on!!
</a>
</ul>
<a name="916759">
What can doubleclick base its ad targetting decision on:<p>
</a>
<ul>
<a name="916760">
<li>Browser
</a>
<a name="916761">
<li>OS
</a>
<a name="916762">
<li>The ISP/Company from which you surf
</a>
<a name="916763">
<li>Your location (based on your IP address or domain name)
</a>
<a name="916766">
<li>Any keywords you use
</a>
<a name="916767">
<li>The partner site that ad appears on
</a>
<a name="916768">
<li>Other partner sites you have visited in the past (!)
</a>
<a name="916769">
<li>Other keywords you have used in the past (!)
</a>
<a name="916770">
<li>How frequently you surf and the kinds of sites you visit (within their partners)
</a>
<a name="916771">
<li>The type of business that your company performs (if you're coming from a corporation)
</a>
</ul>
<a name="916772">
<h2>II.    Mass Customization</h2>
</a>
<a name="916773">
Now that we can track users, how to do customize a site?  Parameterized HTML, also known as ``dynamic html''<p>
</a>
<a name="916774">
How it works:<p>
</a>
<ul>
<a name="916775">
<li>Inktomi's TCL-based server-side scripting
</a>
<ul>
<a name="916776">
<li>Embedded TCL macros that execute a ``safe'' subset of TCL
</a>
<a name="916777">
<li>Macros are evaluated on the server and produce HTML fragments
</a>
<a name="916778">
<li>Example:  &lt;@@use Your OS is $user(OS)&gt; generates ``Your OS is WindowsNT''
</a>
<a name="916779">
<li>Global variables set up by the server: user profile, server info, date, etc.
</a>
<a name="916780">
<li>Each thread has its own interpreter (and globals)
</a>
</ul>
<a name="916781">
<li>Microsoft's Active Server Pages
</a>
<ul>
<a name="916782">
<li>General server-side scripting, but typically JavaScript or Visual Basic is the language
</a>
<a name="916783">
<li>Example: &lt;% user=Steve %&gt; generates nothing but has a side effect, while  &lt;%=user&gt; generates ``Steve'' given the previous side effect
</a>
<a name="916784">
<li>Scripts can be run at client or server, and the author may mix scripting languages
</a>
</ul>
</ul>
<a name="916790">
<p>
</a>
<a name="916791">
There are an incredible number of cool things you can do with server-side scripting. Here is a list of real examples from HotBot:<p>
</a>
<ul>
<a name="916796">
<li>Ad targetting:  the dynamic HTML simply includes the command:<br>&lt;@@ad -keywords eric+brewer&gt;<br>This generates the HTML for the image anchor, including both the image URL and the clickthru URL.  This makes it easy to ensure that the two match up.  Implicit args include all of the stuff in the user profile and the browser and OS.
</a>
<a name="916803">
<li>Images: we have a supertag for images, @@image. This automatically fills in the width and height, ensures that we have the correct alt text, and can dynamically decide to use jpeg or progressive jpeg versions on an image (if the browser can handle it).
</a>
<a name="916804">
<li>Tables: we use a table command that takes a set of rows and columns and will either generate and HTML table, or will generate proper white space so that it looks tabular. This makes it easy to support old browsers like lynx.
</a>
<a name="916805">
<li>Image maps are also abstracted like tables.
</a>
<a name="916806">
<li>Vertical alignment: the vertical stripe on HotBot is centered across many elements, on all browsers, even though browsers vary widely in their default spacing and their interpretation of centering.
</a>
<a name="916807">
<li>In general, we keep a database of abilities for each browser. For example, the command [@@supports? tables] returns true iff the current browser supports tables. This is how the @@table command is implemented. Likewise for every other non-portable feature.
</a>
<a name="916808">
<li>Fat URL support: for browsers that don't support cookies, we augment all HotBot URLs with the user ID dynamically. This is easy with an @@url tag that takes a URL and augments it as needed before output. (The system also has to remove the ID from the incoming fat URL, to get the ID and to allow the rest of the system to operate unchanged.)
</a>
<a name="916809">
<li>Database access: we use tags to read and write the Informix database (really persistent variables implemented on top of the database).  This makes it easy to program hard state.
</a>
<a name="916810">
<li>Every field of the user profile is available as a TCL variable, such as the default number of results to return.
</a>
<a name="916811">
<li>Most &lt;tag&gt; &lt;/tag&gt; pairs have a TCL command that generates both. E.g., &lt;@@bold hello&gt; generates ``&lt;b&gt;hello&lt;/b&gt;''. This makes it nearly impossible to forget matching close tags.
</a>
</ul>

<p><hr>

<h5>Last Modified: 01:53am , September 29, 1997</h5>
</body>
</html>
@
