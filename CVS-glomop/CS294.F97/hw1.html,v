head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	97.09.29.21.27.50;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.09.17.08.19.02;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.09.15.18.11.30;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.09.12.19.36.07;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.09.12.19.15.17;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@<html> <head>
<title>CS294-6 Homework 1</title>
</head>

<body>
<h1>Easy Problem Set #1</h1>

Here are some finger exercises to familiarize yourself with the basics
of HTTP interaction.  If you need to, you can refer to the RFC's for
HTTP 1.0 and HTTP Proxy mechanism; both are available at www.w3.org and
other places.<p>

Email your answers to <a href="mailto:fox@@cs.berkeley.edu">Armando</a>
sometime before Monday 9/22.

<ol>
  <li> Telnet to the HTTP port (port 80)
       of www.cs.berkeley.edu and manually request a Web page from it.
       What can you learn explicitly from the server's reply headers?
       What additional information can you deduce?
       <ul>
         <li> To telnet to a specific port of a machine, say
              "telnet&nbsp;<i>hostname&nbsp;portnumber</i>".
       </ul>
  <li> Now request the same page using the <i>if-modified-since</i>
       header, and pick a modification date that corresponds roughly to
       "right now".  (If you don't know about
       <i>if-not-modified-since</i>, look it up in the HTTP 1.0 spec.)
       How would a web client program distinguish this reply from the
       reply to the previous query?
  <li> Telnet to the HTTP proxy port (port 4444) of transend.cs.berkeley.edu
       and request the same page.  What's the difference in how you request a
       page from the origin server vs. from a proxy?  Why?
       <ul>
         <li> If TranSend is down, <a
              href="mailto:tkimball@@cs.berkeley.edu">email the TranSend
              Czar</a> (and email <a
              href="mailto:fox@@cs.berkeley.edu">me</a> too).
       </ul>
  <li> How would you
       implement a proxy to allow "stacking", such that a single
       properly-constructed URL can result in routing through multiple proxies?
  <li> Here's <a
       href="listen.pl">a simple Perl script</a> that will let you set
       up your own "proxy" by opening a listening socket on some 
       unprivileged port on your desktop workstation.  (Unprivileged
       ports are generally those numbered higher than 1024.)  Run the script
       and set your HTTP proxy in Netscape or Internet Explorer to point
       to the host and
       port where the script is running, and use the browser to request
       a page <b>by typing the URL directly to the browser</b>.  What can you
       learn explicitly, and what can you deduce,
       from the client headers sent by the browser?
  <li> Try the same exercise, but instead of typing a URL, click on a
       link on the currently displayed page.  What additional
       information, if any, can you deduce from the client headers now?
</ol>



<hr>
<address>fox@@cs.berkeley.edu</address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.4
log
@*** empty log message ***
@
text
@d21 5
a25 1
  <li> Now request the same page using the <i>if-not-modified-since</i>
d34 6
@


1.3
log
@*** empty log message ***
@
text
@d37 1
a37 1
       ports are generally those numbered higher than 2047.)  Run the script
@


1.2
log
@*** empty log message ***
@
text
@d14 1
a14 1
sometime before the next lecture.
d23 3
a25 1
       "right now".  How would a program distinguish this reply from the
@


1.1
log
@*** empty log message ***
@
text
@d31 7
a37 4
  <li> Set up your own "proxy" by opening a listening socket on some
       unprivileged port on your desktop workstation.  Here's <a
       href="listen.pl">a simple Perl script</a> that will do this.  Now
       set your HTTP proxy in Netscape or MSIE to point to the host and
d39 1
a39 1
       a page (by typing the URL directly to the browser).  What can you
d50 1
a50 1
<address></address>
@
