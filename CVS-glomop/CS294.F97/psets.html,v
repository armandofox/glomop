head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	97.09.30.04.51.37;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.09.29.21.27.55;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.09.15.18.11.32;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.09.12.19.36.11;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.08.16.06.41.14;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.08.16.06.33.26;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.08.11.04.06.18;	author fox;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@<html> <head>
<title>Problem Sets</title>
</head>

<body>
<h1>CS294-6 Internet Services: Problem Sets</h1>

<ul>
  <li> <a href="hw1.html">Problem set 1</a>: HTTP protocol and proxies
       (due 9/22, by email to <a
       href="mailto:fox@@cs.berkeley.edu"><i>fox@@cs.berkeley.edu</i></a>)
  <li> Problem set 1 solutions: will be posted when all the PS1's are in.
  <li> <a href="hw2.html">Problem set 2</a>: Build a simple filter for TranSend
</ul>

<hr>

<h1>About Perl</h1>

If you learn nothing else in this class, you'll learn a little Perl.
The best books are the O'Reilly books:

<ul>
  <li> <i>Programming Perl</i> (version 5, the "camel book" with a blue
       spine) is the best all-around reference for the latest version of
       Perl.
  <li> <i>Programming Perl</i> (version 4, the "camel book" with a
       purple spine) is less intimidating since it covers only those
       features that were in Perl 4.  90% of what you need for this
       class is covered by Perl 4; you can ask friends or use the online
       docs (below) to learn about the other 10%.  Either this or the
       blue camel book are great for learning -- if you're the kind of
       person who enjoyed learning C from the Kernighan &amp; Ritchie
       book.
  <li> If you prefer a "kinder, gentler" tutorial introduction, try
       <i>Learning Perl</i>, also from O'Reilly.  I believe it also is
       geared to version 4.
  <li> Caveat: on some machines (notably HPUXen), typing "perl" gets you
       Perl 4, whereas "perl5" gets you Perl 5.  "perl -v" will always
       tell you what version you have.  You need to be running the Perl
       5 interpreter to use the TranSend distiller stuff, although the
       code you write need not exploit Perl 5 specific features.
</ul>

There is also an online help system called <i>perldoc</i> (that's
/usr/sww/bin/perldoc for most people).  If you use GNU Emacs, its built
in Info system (type <tt>M-x info</tt> to get to it) usually
includes pages on Perl.<p>


<hr>

<address>fox@@cs.berkeley.edu</address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.6
log
@*** empty log message ***
@
text
@d13 1
@


1.5
log
@*** empty log message ***
@
text
@d11 2
a12 1
       href="mailto:fox@@cs.berkeley.edu"><i>fox@@cs.berkeley.edu</i>)
d14 35
@


1.4
log
@*** empty log message ***
@
text
@d16 1
a16 2
<hr>
<address></address>
@


1.3
log
@*** empty log message ***
@
text
@d6 1
a6 4
<h1>CS294-?? Internet Services: Problem Sets</h1>

Just a list of problem set ideas for now...<a
href="mailto:fox@@cs.berkeley.edu">email me</a> with suggestions!
d9 3
a11 22
  <li> Pick 1 or 2 existing Internet services and analyze them with
       respect to the various aspects of service development.  (Do they
       rely on caching, and for what?  What customization if any is
       supported?  Is there evidence for/against scalability of the
       service?  etc.)
  <li> Pick 1 or 2 existing Internet services and describe how you could
       cast them into the TACC model.
  <li> Write a trivial transformer/aggregator that composes with 
       TranSend as a user-specific filter -- possibly even a TranSend
       SDK reimplementation of an existing service on the Web.  Some ideas:
       <ul>
         <li> WordBot
         <li> Calendar aggregator
         <li> <a href="http://www.delorie.com/web/wpbcv.html">Web Page
              Compatibility Viewer</a>
       </ul>
  <li> Write a not-so-trivial transformer/aggregator.  Some ideas:
       <ul>
         <li> HotBot search highlighting: when you click through a URL
              from a HotBot "results" page, the resulting page should
              have the original search terms highlighted.
  <li> Try to crash TranSend or otherwise overload it.
d14 1
a14 1

@


1.2
log
@*** empty log message ***
@
text
@d20 2
a21 1
       TranSend as a user-specific filter.  Some ideas:
d25 2
a32 1
         <li> 
@


1.1
log
@*** empty log message ***
@
text
@d6 1
a6 1
<h1>CS294-?? Internet Services Problem Sets</h1>
d25 6
@
