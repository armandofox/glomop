head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	97.11.29.03.29.11;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.11.05.09.25.25;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.10.26.03.25.17;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.10.21.19.01.11;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@<html> <head>
<title>CS294-6 Internet Services Project</title>
</head>

<body>
<h1>Course Project Goals</h1>

There are 2 goals here: to give you the experience and exposure of
implementing a real Internet service that many people will use, and to
give all of us a chance to test the hypothesis that TACC is a reasonable
model for building services and really does make them easier to develop.
We'll deploy the cool services on TranSend and advertise them to the world
through both standard and unorthodox publicity channels, so
this should be a built-in incentive to do
something cool.<p>

The components on which the projects will be graded are:

<ul>
  <li> Project proposal/design (25%)
  <li> Implementation/demo (including informal poster session) (50%)
  <li> Writeup (25%)
</ul>

<hr>

<h2>Project Proposal (due Monday 11/3)</h2>

The proposal should be a max. 2 page (single spaced) exposition of what
you plan to do (here are <a href="projideas.html">some ideas</a>).  Eric
Brewer and I will be available <b>Friday, 10/31, from 10am to noon</b>
or so, to discuss your idea and help you turn it into a proposal if you
want.  We're also available by email to lay the groundwork for such a
meeting, and you can make an appointment with us if you're not available
during the Friday slot.<p>

The
high-level requirements for the design include:

<ul>
  <li> Structure the service as a TACC application.  You don't have to
       use our TACC software, but demonstrate how the service decomposes
       into these attributes.  (If your service is not a traditional
       database-like service but doesn't fit at all into the TACC model,
       that's an important result for us.)  What state is
       hard/persistent and what state is soft?  Are you able to
       structure the service such that each component can survive a
       restart?  and so on.

  <li> Significant complexity.  2 people can work together; 3 requires
       special dispensation.  (After all, the hypothesis is that we can
       make services <i>easier</i> to deploy, right?)  In terms of our
       TACC software, it shouldn't be unusual for a sophisticated
       service to consist of 2, 3, or more workers used in different ways.

  <li> Some nontrivial aspect of customization.  The use of client-side
       extensions other than HTML forms (such as Java and JavaScript) to
       implement or control customization is highly encouraged.

  <li> You'll have a brief design review with Eric and Armando
       immediately following your proposal, and can schedule another
       during the course of your design/implementation if you feel it
       would be helpful.
</ul>

<hr>
<h2>Implementation (due by Demo/Poster session, approx. 12/8)</h2>

You'll have all the tools used so far in class, plus a few new ones, and
better documentation.  Use of additional stuff such as Java or
JavaScript is highly encouraged.  Other things that are not strictly
required, but <i>highly</i> encouraged, include:

<ul>
  <li> Novel uses of the cache: to store intermediate state, and perhaps
       "semi-persistent" state, as well as
       post-transformation/post-aggregation data.
  <li> Making some of your workers reusable (the "Unix filter"
       philosophy) instead of hardwiring their functionality into your
       service.  (If you can collaborate with someone doing a
       substantially different service but can share a worker or two in
       common, that would be awesome.)
</ul>

<hr>
<h2>Project Demos/Poster Session on 12/12</h2>

We'll invite the World At Large to see posters (conference poster
session style) and demos of your projects, exact time slot TBD
(about 2 hours).  You should be prepared to:

<ul>
  <li> Demo your project in action;
  <li> Give a short prepared spiel about your project, accompanied by
       the slides on the poster.
</ul>

The poster/spiel should give a general overview of

<ul>
  <li> what your project does and why it's cool,
  <li> how it's implemented as a TACC service (assuming that is the
       case) and what benefits if any it gets from TACC (scalability,
       modularity, etc.),
  <li> what the failure semantics of your service are: how are failures
       handled?  what failure modes are expected/tolerated
       vs. unexpected/not tolerated?  What is the performance impact of
       a failure, from the user's point of view?  What is the
       correctness impact (i.e. does the user observe erroneous behavior
       in case of failure)?  To what extent are your failure semantics
       dependent on the TACC model?
</ul>

<h2>Writeup, due 12/15</h2>

The purpose of the writeup is to explain in detail what your service
does and how it works (including any novel algorithms etc. you came up
with, novel uses of parts of the architecture, or additions to the TACC
tools), and to discuss the experience of implementing it as a TACC
service.<p>

With respect to your specific service:

<ul>
  <li> What does it do, and what's the motivation for it?  (i.e. could
       users get the same functionality without your service?)
  <li> What customization is possible with your service, and how do
       users control it?
  <li> What is the breakdown of components, and the data/control flow
       among them?  (i.e. the software architecture of the service)  If
       significant functionality is placed outside the TACC server (for
       example, at the client or at an external server or database),
       what motivated this decision and what would have been the
       tradeoff to put that functionality someplace else?
  <li> What are the failure semantics of your service (in-depth
       discussion of what you talk about in the poster session)? If your
       service has a significant non-TACC component but generally relies
       on TACC to handle common failure modes, what is 
       the impact of a failure of the non-TACC part?
</ul>

With respect to your service vis-a-vis the TACC model: 

<ul>
  <li> What was hard/easy?
  <li> What didn't turn out the way you expected?
  <li> Was TACC a reasonable model
       to move your service into?
  <li> How did building your service improve your feel for what TACC
       can and can't do?  
  <li> What didn't the model provide that you would
       have found useful?
  <li> What advice would you give to others using this
       model (or to the model's developers/maintainers)?
  <li> Are there any "reusable" parts of your service that would be
       worth incorporating as part of the common TACC support
       (libraries, additional worker stubs, etc.)?  (If so, it would be
       <i>really</i> helpful for you to submit documentation on how to
       use the new component, API, or whatever.  The Pod format is
       trivial to use; say <tt>man perlpod</tt> to see a man page.)
</ul>


<hr>
<address>fox@@cs.berkeley.edu</address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.3
log
@*** empty log message ***
@
text
@d85 6
a90 4
There will be a demo day and a 2-hour poster session to which the CS
Department and others will be invited.  Your poster should be
accompanied by a short spiel such as you might give at a conference
poster session.  
d92 7
a98 2
<hr>
<h2>Writeup and Short Project Talk (due 12/8)</h2>
d100 13
a112 4
The project talk will be a short (15 min.) presentation to the class,
followed by brief Q&A.  It should give an overview of what your project
does, why it's interesting as a TACC service, and your experience in
implementing it.<p>
d114 1
d120 23
a142 2
service.  A detailed specification for the writeup is forthcoming, but
some things it should certainly mention include:
d154 7
a160 1
       model?
d162 1
@


1.2
log
@*** empty log message ***
@
text
@d27 1
a27 1
<h2>Project Proposal</h2>
d30 9
a38 2
you plan to do (here are <a href="projideas.html">some ideas</a>).  The
high-level requirements for the design are:
d67 1
a67 1
<h2>Implementation</h2>
d91 7
a97 1
<h2>Writeup</h2>
d99 1
a99 1
The purpose of the writeup is to explain in English what your service
d101 4
a104 2
with, or novel uses of parts of the architecture), and to discuss the
experience of implementing it as a TACC service:
d120 1
a120 1
<address></address>
@


1.1
log
@*** empty log message ***
@
text
@d20 1
a20 1
  <li> Project design (25%)
d30 2
a31 1
you plan to do.  The high-level requirements for the design are:
d53 4
a56 1
  <li> 
@
