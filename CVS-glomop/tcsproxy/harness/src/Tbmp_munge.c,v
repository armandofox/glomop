head	1.1;
branch	1.1.1;
access;
symbols
	Yatin-final:1.1.1.1
	Yatin:1.1.1.1.0.2
	pre-yatin-merge:1.1.1.1
	inital:1.1.1.1
	inital:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	97.09.23.00.02.26;	author tkimball;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.09.23.00.02.26;	author tkimball;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 *  Tbmp_munge: a "shell" around Ian Goldberg's ppmtoTbmp program, to
 *  allow it to be used as a distiller.
 *  A. Fox 9/97
 */

#include "../include/ARGS.h"
#include "distinterface.h" 
#include "ppmbufs.h"

/* ppmtoTbmp.c - read a portable pixmap and write a pilot Tbmp file
 *
 * Program by Ian Goldberg <iang@@cs.berkeley.edu>
 *
 * Based on ppmtopuzz.c by Jef Paskanzer, from the netpbm-1mar1994 package.
 */

DistillerStatus ppm_to_tbmp(DistillerInput *din, DistillerOutput *dout,
                            int bitsperpixel);
MonitorClientID mon;


#define MSGSIZE 256

DistillerStatus
DistillerInit(C_DistillerType dType, int argc, const char * const *argv)
{
  mon = DistillerGetMonitorClientID();
  Message("ppmtoTbmp munger started");
  return distOk;
}

DistillerStatus
DistillerMain(Argument *args, int nargs,
              DistillerInput *din, DistillerOutput *dout)
{
  int bitsperpixel = 1;
  DistillerStatus status;
  DistillerOutput d_tmp;
  int i;

  extern DistillerStatus ppmquant(Argument *args,int nargs,
                                  DistillerInput *din,DistillerOutput *dout);

  for (i = 0; i < nargs; i++) {
    switch(ARG_ID(args[i])) {
    case TBMP_2BIT:
      if (ARG_INT(args[i]) == 1)
        bitsperpixel = 2;
      break;
    default:
      break;
    }
  }

  memset(&d_tmp,  0, sizeof(struct ppmbuf)); /* BUG:: */
  status = ppmquant(args, nargs, din, &d_tmp);
  if (status != distOk) {
    return status;
  }
  status = ppm_to_tbmp(&d_tmp, dout, bitsperpixel);

  /*
   *  all done...copy d_tmp to dout for real
   */
  if (d_tmp.data.freeMe == gm_True) 
    DistillerFree(DataPtr(&d_tmp));
  if (d_tmp.metadata.freeMe == gm_True)
    DistillerFree(MetadataPtr(&d_tmp));

  return status;
}

/*
 *  actual ppmtoTbmp code starts here.
 */

static int colcompare(const void *a, const void *b)
{
    colorhist_vector ch1 = (colorhist_vector)a;
    colorhist_vector ch2 = (colorhist_vector)b;
    return
	(int) PPM_GETR(ch1->color) - (int) PPM_GETR(ch2->color) +
	(int) PPM_GETG(ch1->color) - (int) PPM_GETG(ch2->color) +
	(int) PPM_GETB(ch1->color) - (int) PPM_GETB(ch2->color);
}

DistillerStatus
ppm_to_tbmp(DistillerInput *din, DistillerOutput *dout, int bitsperpixel)
{
  pixel** pixels;
  register pixel* pP;
  colorhist_vector chv;
  colorhash_table cht;
  int rows, cols, row, colors;
  register int col;
  pixval maxval;
  unsigned char outbyte, outbit;
  int chars_per_row;
  DistillerStatus retcode = distFatalError;   /* failsafe */
#ifdef DEBUGGING
  char msg[MSGSIZE];
#endif /* DEBUGGING */
  struct ppmbuf outbuf;  
  
  pixels = ppmbuf_readppm( DataPtr(din), &cols, &rows, &maxval );

  DebugMsg( "computing colormap..." );
  chv = ppm_computecolorhist( pixels, cols, rows, 1<<bitsperpixel, &colors );
  if ( chv == (colorhist_vector) 0 )
    {
      Message( "too many colors - run ppmquant first");
      goto FINISH;
    }
  qsort((char *)chv, colors, sizeof(struct colorhist_item), colcompare);
#ifdef DEBUGGING
  sprintf(msg, "%d colors found", colors );
  DebugMsg(msg);
#endif /*DEBUGGING*/

  /* alloc the output buffer. */

  chars_per_row = 2 * (bitsperpixel == 2 ? ((cols+7)/8) : ((cols+15)/16));
  ppmbuf_alloc(&outbuf, chars_per_row*rows + 24); /* for headers etc */

    /* Write Tbmp header. */
  ppmbuf_putshort(&outbuf, cols*bitsperpixel);   /* width */
  ppmbuf_putshort(&outbuf, rows );                    /* height */
  if (bitsperpixel == 2) {
    ppmbuf_putshort(&outbuf, chars_per_row );      /* chars/row */
  } else {
    ppmbuf_putshort(&outbuf, chars_per_row);
  }
  ppmbuf_putshort(&outbuf, 0 );                       /* flags */
  ppmbuf_putlong(&outbuf,  0 );                        /* pad */
  ppmbuf_putlong(&outbuf,  0 );                        /* pad */

    /* Convert color vector to color hash table, for fast lookup. */
  cht = ppm_colorhisttocolorhash( chv, colors );
  ppm_freecolorhist( chv );

    /* And write out the data. */
  for ( row = 0; row < rows; ++row ) {
    outbyte = 0x00;
    outbit = (bitsperpixel == 2) ? 6 : 7;
    for ( col = 0, pP = pixels[row]; col < cols; ++col, ++pP ) {
      register int color;

      color = ppm_lookupcolor( cht, pP );
      if ( color == -1 ) {
        Message("Color not found! Bleah!");
        ppmbuf_free(&outbuf);
        goto FINISH;
      }
      /*
        pm_error("color not found?!?  row=%d col=%d  r=%d g=%d b=%d",
        row, col, PPM_GETR(*pP), PPM_GETG(*pP),
        PPM_GETB(*pP) );
        */
      if (bitsperpixel==2) {
        if (color == 0) {
          outbyte |= (3 << outbit);
        } else if (color == 1 && colors != 2) {
          outbyte |= (2 << outbit);
        } else if (color == 2 && colors == 4) {
          outbyte |= (1 << outbit);
        }
      } else {
        if (color == 0) {
          outbyte |= (1 << outbit);
        }
      }
      if (!outbit) {
        ppmbuf_putc(&outbuf,outbyte);
        outbyte = 0x00;
        outbit = (bitsperpixel==2 ? 6 : 7);
      } else {
        outbit -= (bitsperpixel==2 ? 2 : 1);
      }
    }
    if (bitsperpixel==2) {
      /* Output any partial byte remaining */
      if (cols & 0x03) {
        ppmbuf_putc(&outbuf,outbyte);
      }
      if (!((cols+7) & 0x04)) {
        ppmbuf_putc(&outbuf,0x00);
      }
    } else {                /* 1 bit per pixel */
      /* Output any partial byte remaining */
      if (cols & 0x07) {
        ppmbuf_putc(&outbuf,outbyte);
      }
      if (!((cols+15) & 0x08)) {
        ppmbuf_putc(&outbuf,0x00);
      }
    }
  }

  /* all done. */

  if (bitsperpixel == 2) {
    SetMimeType(dout, "image/tbmp2");
  } else {
    SetMimeType(dout, "image/tbmp");
  }
  SetMetadataLength(dout, 0);
  MetadataNeedsFree(dout, gm_False);

  SetDataLength(dout, ppmbuf_length(&outbuf));
  SetData(dout, ppmbuf_base(&outbuf));
  DataNeedsFree(dout, gm_True);

  retcode = distOk;

FINISH:
  if (cht)
    ppm_freecolorhash(cht);
  ppm_freearray(pixels, rows);
  return retcode;
}
@


1.1.1.1
log
@Final attempt at updating harness... please work
@
text
@@
