head	1.3;
access;
symbols
	Yatin-final:1.2.2.2
	Yatin:1.2.0.2
	pre-yatin-merge:1.2;
locks; strict;
comment	@# @;


1.3
date	98.01.16.22.16.02;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	97.11.05.21.59.56;	author iang;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.10.30.02.26.25;	author iang;	state Exp;
branches;
next	;

1.2.2.1
date	97.11.18.03.07.32;	author yatin;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.11.18.20.10.23;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@use TACCutils;
use clib;

sub DistillerInit {
    my $status = &InitializeDistillerCache;
    return $status if ($status != 1);

    ## The list of MIME types we can safely pass back to the client, along
    ## with the first client version that supports them
    %exitok = ( 'application/x-wingman' => [0x01000100, 0],
                'application/x-palmosdb' => [0x01000300, 1],
                'application/x-wingman-agglist' => [0x01000200, 2] );
    
    ## The list of wingman distillers, keyed by MIME type
    %dispatch = ( 'text/plain' => 'wingman.text',
                  'text/html' => 'wingman.text',
		  'image/gif' => 'wingman.text',
		  'image/jpg' => 'wingman.text',
		  'image/jpeg' => 'wingman.text',
		  'application/zip' => 'wingman.zip',
		  'application/x-zip-compressed' => 'wingman.zip',
		  'application/x-wingman-agg' => 'wingman.agg' );

    $FRONT_CLI_VERSION = "i14";
    $FRONT_SRCFLAG = "i16";

    &message("Dispatcher running\n");
    0;
}

sub message {
    &MonitorClient_Send("WingDispatch messages", shift @@_, "Log");
}

sub DistillerMain {
    my ($data,$hdrs,$type,%args) = @@_;
    my $retcode;
    my @@argarray;
    my $a;
    my ($at, $an);
    my $url = &get_my_url($hdrs);
    
    &message("Request for $url\n");
    foreach $a (keys %args) {
        ($at, $an) = $a =~ /^(.)(.*)$/;
	push(@@argarray, &make_argument($at, $an, $args{$a}));
    }

    ## Figure out if we know something we can do
    while(1) {
	$type = lc $type;
	my $exok = $exitok{$type};
	if ($exok && $args{$FRONT_CLI_VERSION} >= $exok->[0]) {
	    $retcode = 0;
	    $type = "x-wingman/" . $exok->[1];
	    my $nhdrs = &make_headers($hdrs);
	    $nhdrs->content_type($type);
	    $hdrs = $nhdrs->as_string;
	    last;
        }
	$retcode = 0, last unless defined $dispatch{$type};
	my $nextone = $dispatch{$type};
	if ($args{$FRONT_SRCFLAG} == 2 && $type =~ m!^text/!) {
	    ## Make things a little nicer
	    $data =~ s/\0//gos;
	    $data =~ s/\r\n/\n/gos;
	    $data =~ s/\r/\n/gos;
	    $nextone = 'wingman.doc';
	}
	&message("Type is $type\n");
	($retcode, $data, $hdrs) = &Distill($type, $nextone, $hdrs,
					    $data, @@argarray);
	my $nhdrs = &make_headers($hdrs);
	$type = $nhdrs->content_type;
	&message("Type is now $type\n");
	last if $retcode != 0;

	last if $nhdrs->status =~ /^HTTP\/\S+\s+3/; ## Drop out on redirect
    }

    &message("Output type is $type\n");
    return ($data,$hdrs,$type,$retcode);
}

1;
@


1.2
log
@Added text-to-doc conversion
@
text
@d10 3
a12 2
    %exitok = ( 'application/x-wingman' => 0x01000100,
                'application/x-palmosdb' => 0x01000300 );
d21 2
a22 1
		  'application/x-zip-compressed' => 'wingman.zip' );
d53 8
a60 1
	$retcode = 0, last if $exok && $args{$FRONT_CLI_VERSION} >= $exok;
d72 1
a72 1
	    $data, @@argarray);
d77 2
d81 1
@


1.2.2.1
log
@the new aggregators
@
text
@d10 2
a11 3
    %exitok = ( 'application/x-wingman' => [0x01000100, 0],
                'application/x-palmosdb' => [0x01000300, 1],
                'application/x-wingman-agglist' => [0x01000200, 2] );
d20 1
a20 2
		  'application/x-zip-compressed' => 'wingman.zip',
		  'application/x-wingman-agg' => 'wingman.agg' );
d51 1
a51 8
	if ($exok && $args{$FRONT_CLI_VERSION} >= $exok->[0]) {
	    $retcode = 0;
	    $type = "x-wingman/" . $exok->[1];
	    my $nhdrs = &make_headers($hdrs);
	    $nhdrs->content_type($type);
	    $hdrs = $nhdrs->as_string;
	    last;
        }
a67 1
	last if ! &status_ok($hdrs);
a69 1
    &message("Output type is $type\n");
@


1.2.2.2
log
@Changed the DistillerReregister API function to DistillerRename
Added gm_options support for wingman aggregators
@
text
@d72 1
a72 1
					    $data, @@argarray);
d77 1
a77 2

	last if $nhdrs->status =~ /^HTTP\/\S+\s+3/; ## Drop out on redirect
@


1.1
log
@Added winman dispatcher.  .prc's in .zip's now works
@
text
@d23 1
d53 10
a62 1
	($retcode, $data, $hdrs) = &Distill($type, $dispatch{$type}, $hdrs,
d66 1
@
