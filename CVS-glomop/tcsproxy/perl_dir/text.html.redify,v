head	1.2;
access;
symbols
	Yatin-final:1.1
	Yatin:1.1.0.2
	pre-yatin-merge:1.1
	transend-beta2:1.1
	fox-dev:1.1
	transend-beta-latest:1.1
	perl_dir-ng:1.1
	Aggregators:1.1
	NoAggregators:1.1;
locks; strict;
comment	@# @;


1.2
date	98.07.11.00.40.32;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.05.11.11.22.53;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#
#  A distiller that converts keywords identified by arg id 9000 to be
#  red.
#

use TACCutils;

sub DistillerInit {
    $formData = <<EndOfFormData;
<form name="mqform" target="_map_"
action="http://www.tripquest.com/cgi-bin/ia_find?screen=ia_find&link=ia_find&uid=u50ea1tc1c06kyjx"
method="post">
<input type="hidden" name="screen" value="ia_find">
<input type="hidden" name="link" value="ia_find">
<input type="hidden" name="uid" value="u50ea1tc1c06kyjx">
<input type="hidden" name="event" value="find_search">
<input type="hidden" name="code_mode" value="code_original">
<input type="hidden" name="address" value="DUMMY_ADDRESS">
<input type="hidden" name="city" value="palo alto">
<input type="hidden" name="state" value="ca">
<input type="hidden" name="zip" value="">
<input type="hidden" name="country" value="United States">
<input type="submit" value="Find a Map"
onClick="document.mqform.address.value=document.getSelection()">
</form><br><hr>
EndOfFormData

    $mqbeginmark = quotemeta('<!-- source file = ia_map_display_read.html (file) -->');
    $mqendmark = quotemeta('<!-- end of ia_map_display_read.html -->');
    0;    
}

sub DistillerMain {
    
    my($data,$headers,$type,%args) = @@_;

    # is this a mapquest result page?
    open(FOO,">/tmp/foo");
    print FOO "Mapquest munger Beginmark=$mqbeginmark\nData=$data";
    close FOO;


    if ($data =~ s/\A.*$mqbeginmark//s) {
        $data =~ s/$mqendmark.*\Z//s;
    } else {
        # prefix the form data
        $data = &insert_at_top($data, $formData);
    }
    # regexp to highlight
    #$pattern = $args{9000} || "interest";

    #$data =~ s!($pattern)!<font color="red"><b>$1</b></font>!ig;
    # since this is a simple distiller, return an empty string and let the
    # frontend construct the headers.
    return($data, "", "text/html", 0);
}


1;

@


1.1
log
@*** empty log message ***
@
text
@d6 2
d9 21
d34 1
d37 12
d50 1
a50 1
    $pattern = $args{9000} || "interest";
d52 1
a52 1
    $data =~ s!($pattern)!<font color="red"><b>$1</b></font>!ig;
@
