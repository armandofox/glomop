head	1.31;
access;
symbols
	Yatin-final:1.30
	Yatin:1.30.0.2
	pre-yatin-merge:1.30
	transend-beta2:1.21
	fox-dev:1.21.2.1;
locks; strict;
comment	@# @;


1.31
date	98.01.24.22.52.00;	author fox;	state Exp;
branches;
next	1.30;

1.30
date	97.10.17.18.24.45;	author gribble;	state Exp;
branches;
next	1.29;

1.29
date	97.10.16.21.50.57;	author achuang;	state Exp;
branches;
next	1.28;

1.28
date	97.10.16.21.31.40;	author achuang;	state Exp;
branches;
next	1.27;

1.27
date	97.10.16.04.36.52;	author fox;	state Exp;
branches;
next	1.26;

1.26
date	97.10.03.22.17.27;	author aspolito;	state Exp;
branches;
next	1.25;

1.25
date	97.10.02.21.28.05;	author gribble;	state Exp;
branches;
next	1.24;

1.24
date	97.10.02.21.24.37;	author gribble;	state Exp;
branches;
next	1.23;

1.23
date	97.09.30.04.09.51;	author gribble;	state Exp;
branches;
next	1.22;

1.22
date	97.08.30.21.34.40;	author fox;	state Exp;
branches;
next	1.21;

1.21
date	97.07.31.05.58.26;	author fox;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	97.07.31.05.53.24;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	97.07.31.05.47.32;	author fox;	state Exp;
branches;
next	1.18;

1.18
date	97.07.31.05.38.23;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	97.07.30.02.28.21;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	97.07.29.00.32.05;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	97.07.25.01.06.34;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	97.07.24.23.37.17;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	97.07.24.19.23.59;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	97.07.24.03.19.01;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.07.22.02.15.45;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	97.07.16.04.59.18;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.07.11.22.15.03;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.07.02.21.01.44;	author aspolito;	state Exp;
branches;
next	1.7;

1.7
date	97.06.23.04.05.58;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.06.20.18.08.03;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.06.19.00.27.10;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.06.13.00.31.07;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.06.13.00.16.20;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.06.12.18.31.49;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.06.06.00.03.52;	author fox;	state Exp;
branches;
next	;

1.21.2.1
date	97.08.11.04.13.42;	author fox;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Moved all browser/ files to wwwroot/ subdirs.  Added miniserver.pl to
eliminate need for separate webserver; notes about it are attached.
2 fixes to dispatch.c logic:
- for server-like dispatch, correct headers are now generated when the
server-mode worker attempts to do a redispatch. (previously, for this
case, the returned headers would be the headers of the original
*request*, not theserver response headers.)
- special-casing for the Prefs form URL was eliminated because it
interferes with the miniserver worker. (Ambiguity arises if a request
both matches the Prefs URL *and* matches the server-mode worker, and
it's ugly to have the miniserver worker special case this.)  Instead,
the miniserver.pl worker does  a redispatch to transend/text/html for
HTML documents, which should catch this case.  this is probably not the
Right Thing long term.

there is a new worker, miniserver.pl, which acts as a very simple
httpd.  the root of its filesystem is {proxy.home}/wwwroot.  note that
it doesn't currently handle cgi's or server-side includes or anything --
all it can do is serve simple static files.

i have made the following changes:

- new submodule tcsproxy/wwwroot, to hold the "support files" for TACC
  apps including transend and wingman.

- moved the existing support files for transend and wingman, including
  the java_gui stuff, from
  tcsproxy/browser to tcsproxy/wwwroot/transend, tcsproxy/wwwroot/wingman,
  and tcsproxy/wwwroot/java_gui, respectively.  tcsproxy/browser is now empty,
  and i will eventually prune it from the tree.

- updated the paths in the html munger transend.text.html to match the
  new structure.

- new perl_dir application miniserver.pl, and new toplevel file
  mime.types (used to map file suffixes to MIME types).  the application
  does in-memory caching and uses stat() to deduce when files need to be
  reloaded, so for local-disk files it shouldn't be too heavy of a
  load.  that the expectation is  that traffic to the wwwroot directory
   will be modest - this worker would suck for running a high-traffic
  server, since it doesn't bound the size of the in-memory cache or attempt
  to manage memory to keep "hot" items nearby as Harvest does.


the easiest way to make this mechanism work:

- add an entry to your options file:

        dist.myurl/dispatch: sbin/perl_stub -- perl_dir/miniserver.pl

- set frontend.aggString to the prefix of URL's that should be served
  from the "fake" web server.

- be sure frontend.webServerName matches frontend.aggString.  (this is
  necessary because frontend.webServerName is used by workers that want
  to access the "support files".  keeping these two properties separate
  leaves the option of running a separate web server if desired.)

- *** IMPORTANT *** because miniserver doesn't handle forms submission
   in any way, the frontend.prefsFormSubmitURL property must be
   constructed so that it DOES NOT MATCH anything that might be
   requested of miniserver.  this isn't so bad when you remember that
   the prefsFormSubmitUrl can be a totally imaginary server.
   UNFORTUNATELY, the file wwwroot/transend/prefs.html, which is the
   prefs-submission form, has to have some name wired into it; i picked
   "http://transend-prefs.cs.berkeley.edu", so that's what the config
   files will need to say for now.  i know this is kind of hacky.

-  note that for text/html files, miniserver.pl will redispatch to
   transend/text/html; for other files it will do nothing, ie just
   return the file.  i'm not sure this is the right thing all the time,
   though it's certainly right for transend (causes user prefs form to
   be filled in with existing prefs values).
@
text
@# -*- perl -*-
#  DistillerInit
#  Args: none
#  Returns: DIstillerStatus code (int)
#

use TACCutils;
use clib;
use LWP;

sub message {
    &MonitorClient_Send("Perl HTML Munger messages", shift @@_, "Log");
}

sub DistillerInit {

    $IMG_LINK = '&#164;' ;
    foreach $q (qw(prefsFormDisplayUrl prefsFormDisplayUrl webServerName)) {
        $$q = &Options_Find("frontend.$q");
    }

    $ICON_ONLY_STRING = <<iconOnlyString;
          <A href="$prefsFormDisplayUrl"><IMG NOREFINE
          ALIGN="right" BORDER=0 SRC="$webServerName/transend/logo2.gif*^i1=1^"
          WIDTH="45" HEIGHT="25"></A><P><BR CLEAR="BOTH">
iconOnlyString
    ;
    $DASHBOARD_STRING = <<dashboardString;
          <APPLET CODE="gui.class" WIDTH="100%" HEIGHT="30"
           CODEBASE="$webServerName/java_gui/"></APPLET>
          <SCRIPT LANGUAGE="JavaScript1.1">
          <!--
              function A() {
                  for (var i=0; i<document.images.length; i++) {
                      document.images[i].src +=
                         (document.images[i].src.indexOf("*^")==-1
                          ? "*^i1=1^":"i1=1^")
                         }
              }
         // -->
         </SCRIPT>
dashboardString
    ;
    $JS_STRING = <<jsString;
<SCRIPT LANGUAGE="JavaScript">
<!--
var w=open("$webServerName/java_gui/gui.html*^i1=1^", "", "width=40,height=460,toolbars=0,resizable=1");
function A() { w.S(this); }
//--></SCRIPT>
jsString
    ;
    $ON_LOAD_STRING = <<onLoadString;
 onLoad="A()"
onLoadString

    $LOG_FIELD = "TranSend HTML munger";
    
    #&MonitorClient_Send($LOG_FIELD, "Started successfully", "Log");
    0;    
}

#
#  DistillerMain
#  Args: distiller type (MIME string), data (scalar), %args
#    (%args is argID,value pairs for arguments to distiller)
#  Returns: (new data, MIME type, optional distillerStatus [default distOk])
#

sub DistillerMain {
    my ($data,$hdrs,$type,%args) = @@_;
    my $noframes = 0;
    my $frameset = 0;
    my $html = 0;
    my $body = 0;
    my $title= 0;
    my ($what,$thing,%attribs,$attribs);
    my $in_link = "";
    my ($ismap,@@magic,$alltag,$fetch_orig);
    my $userprefval;
    my $outdata = "";
    my %has;

    if (0 && length($data) > (100<<10)) {
        # >100Kbytes takes too long with this distiller.  Chain to the "fast"
        # (but less accurate) text/html distiller.
        return($data,$hdrs,'text/x-big-html',10);
    }

   while ($data) {
        ($what,$thing,$attribs) = &next_entity($data);
        #print "$thing\n"; flush;
        $outdata .= $thing, next if ($what == 0); # markup/comments
        $outdata .= $thing, next
            if ($what == 2);                # text

        # else it's a tag....

        # start link
        $outdata .= ($in_link = $attribs->{'_all_'}), next
            if ($thing eq 'a');
        
        # end link
        $outdata .= $attribs->{'_all_'}, $in_link = '', next
            if ($thing eq '/a');

        if ($thing eq 'input'
            && defined($userprefval = $args{$attribs->{'transendid'}})) {
            &message(join('', "Input field ", $attribs->{'name'}, " id=",
                          $attribs->{'transendid'}, " argval=",
                          $args{$attribs->{'transendid'}}, "\n"));
            if ($attribs->{'type'} =~ /text/i) { # includes 'textarea'
                $attribs->{'value'} = $userprefval;
            } elsif ($attribs->{'type'} =~ /radio|checkbox/i
                     && $attribs->{'transendval'} == $userprefval) {
                $attribs->{'checked'} = "";   # make the attrib "empty but defined"
            }
            $outdata .= &tag_from_attribs($thing,$attribs);
            next;
        }
            
        if ($thing eq 'frame') {
            # exclude transend icon from ref'd frames
            $attribs->{'src'} = &tomagic($attribs->{'src'}, "i6=0");
            $outdata .= &tag_from_attribs($thing, $attribs);
	    next;
	}

        if ($thing eq 'img') {
            @@magic = split(',' , $attribs->{'gmmagic'});
            delete $attribs->{'gmmagic'};
            $ismap = 0;
            $fetch_orig = &tomagic($attribs->{'src'}, "i1=1"); # fetch original
            # don't distill imagemaps
            $ismap = 1, push(@@magic, "i8=1")
                if defined ($attribs->{'usemap'}) ;
            # don't scale image if no size hints inline
            push(@@magic, "i2=1")
                unless (defined ($attribs->{'width'})
                        && defined ($attribs->{'height'})) ;
            # if inside a link, close the link then add the refine button...
            $attribs->{'src'} = &tomagic($attribs->{'src'}, join('^',@@magic))
                if scalar @@magic;
            if (delete $attribs->{'norefine'} || $args{'i14'}) {
                $outdata .= &tag_from_attribs($thing,$attribs);
            } elsif ($in_link || $ismap) {
                # don't try to make the image itself a link; instead insert
                # a  new link next to it, to fetch original
                $outdata .= &tag_from_attribs($thing,$attribs) 
                    . qq!</a><a href="$fetch_orig">$IMG_LINK</a>$in_link!;
            } else {
                # make the image itself into a link
                $attribs->{'border'} = '0';
                $outdata .= join('',
                                 qq!<a href="$fetch_orig">!,
                                 &tag_from_attribs($thing,$attribs),
                                 qq!</a>!);
            }
            next;
	} elsif (0 && $thing =~ /^input$/i) {
            ;
        } else { 
            $outdata .= $attribs->{'_all_'};
            $has{lc $1}++ if $thing =~ /^(body|title|html|frameset|noframes)$/i ;
        }
    }

    if (defined ($args{'i6'})) {
        my $string = ($args{'i6'} == 2?
                      $ON_LOAD_STRING : $ICON_ONLY_STRING);
	# if we are using the toolbar, place the onLoad string
	# in the proper tag and prepend the JavaScript string
	# to the document.
        if ($args{'i6'} == 2) {
	    if ($has{frameset}) {
		$outdata =~ s/(<\s*frameset[^>]*)/$1$string/is;
	    } elsif ($has{body}) {
		$outdata =~ s/(<\s*body[^>]*)/$1$string/is;
	    } elsif ($has{noframes}) {
		$outdata =~ s/(<\s*noframes[^>]*>)/$1$string/i;
	    } elsif ($has{html}) {
		$outdata =~ s/(<\s*html[^>]*>)/$1$string/is;
	    } elsif ($has{title}) {
		$outdata =~ s/(<\s*title[^>]*>)/$1$string/is;
	    } else {
		$outdata = <body $string> .  $outdata;
	    }
	    $outdata = $JS_STRING .  $outdata;
	}
	elsif ($args{'i6'} == 1) {
	    if ($has{noframes}) {
		$outdata =~ s/(<\s*noframes[^>]*>)/$1$string/i;
	    } elsif ($has{frameset}) {
		# do nothing if the iconString is selected
		1
	    } elsif ($has{body}) {
		$outdata =~ s/(<\s*body[^>]*>)/$1$string/is;
	    } elsif ($has{html}) {
		$outdata =~ s/(<\s*html[^>]*>)/$1$string/is;
	    } elsif ($has{title}) {
		$outdata =~ s/(<\s*title[^>]*>)/$1$string/is;
	    } else {
		$outdata = $string .  $outdata;
	    }	
	}
    }
    return ($outdata, '', 'text/html', 0);
}

sub tomagic {
    my $src = shift;
    my $magic =  shift;
    my ($m, $nm);

    if ($src =~ /\*\^(.*)\^(\?.*)?$/) {
	$m = $1;
	$m =~ s/([\[\\.*?$^()\]])/\\$1/g;
	$nm = quotemeta ($m);
	$src =~ s/$nm/$m\^$magic/;
    } elsif ($src =~ /\?(.*)$/) {
	$m = $1;
	$m =~ s/([\[\\.*?$^()\]])/\\$1/g;
	$nm = quotemeta ($m);
	$src =~ s/\?$nm/\*\^$magic\^\?$m/; 
    } else {
	$src .= "*^$magic^";	
    }

    $src;
}

1;

@


1.30
log
@javascript now points to transend.cs.berkeley.edu
@
text
@d11 4
d24 1
a24 1
          ALIGN="right" BORDER=0 SRC="$webServerName/logo2.gif*^i1=1^"
d47 1
a47 1
var w=open("http://transend.cs.berkeley.edu/java_gui/gui.html*^i1=1^", "", "width=40,height=460,toolbars=0,resizable=1");
d108 3
@


1.29
log
@A small change was made to reduce the size of the floating toolbar window.
@
text
@d43 1
a43 1
var w=open("http://www.cs.berkeley.edu/~achuang/glomop/Sept24/gui.html*^i1=1^", "", "width=40,height=460,toolbars=0,resizable=1");
@


1.28
log
@This transend.text.html includes changes that enable the floating toolbar
as well as a minor bug fix making the "has" variable local.
@
text
@d43 1
a43 1
var w=open("http://www.cs.berkeley.edu/~achuang/glomop/Sept24/gui.html*^i1=1^", "", "width=40,height=500,toolbars=0,resizable=1");
@


1.27
log
@fixed bug in TACCutils and html munger that caused comments to get gobbled instead of returned whole from next_entity (documentation claims next_entity returns the whole comment in $thing, but this was not the case)
@
text
@d39 12
d78 1
a78 1
    
d85 1
a85 1
    while ($data) {
d116 1
a116 1
            $attribs->{'src'} = &tomagic($attribs->{'src'}, "i6=2");
d118 1
a118 1
            next;
d160 1
a160 5
    if (defined ($args{'i6'})
        && ($args{'i6'} == 2 || $args{'i6'} == 1)) {
        # insert the TranSend icon and/or the dashboard panel at the
        # top of the page, *unless* this is a frame.
        
d162 36
a197 15
                      $DASHBOARD_STRING : $ICON_ONLY_STRING);
        if ($has{noframes}) {
            $outdata =~ s/(<\s*noframes[^>]*>)/$1$string/i;
        } elsif ($has{frameset}) {
            # do nothing
            1;
        } elsif ($has{body}) {
            $outdata =~ s/(<\s*body[^>]*>)/$1$string/is;
        } elsif ($has{html}) {
            $outdata =~ s/(<\s*html[^>]*>)/$1$string/is;
        } elsif ($has{title}) {
            $outdata =~ s/(<\s*title[^>]*>)/$1$string/is;
        } else {
            $outdata = $string .  $outdata;
        }	
a198 1

@


1.26
log
@%has made local to Distilier_Main so state was local to each distillation
@
text
@d76 1
a76 1
        next if ($what == 0);               # markup/comments
@


1.25
log
@Foo2 - now the java toolbar should work.  The toolbar codebase attribute
was pointing in the wrong place.  I fixed that.
@
text
@d65 1
@


1.24
log
@Foo!
@
text
@d26 1
a26 1
           CODEBASE="$webServerName/browser/"></APPLET>
@


1.23
log
@GetOptions changed to Options_Find() in DistillerInit().
@
text
@d26 1
a26 1
           CODEBASE="http://$webServerName/browser/"></APPLET>
@


1.22
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d8 2
d15 1
a15 1
        $$q = &GetOptions("frontend.$q");
d146 1
a146 1
    
@


1.21
log
@*** empty log message ***
@
text
@d121 1
a121 1
            if (delete $attribs->{'norefine'}) {
@


1.21.2.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d121 1
a121 1
            if (delete $attribs->{'norefine'} || $args{'i14'}) {
@


1.20
log
@*** empty log message ***
@
text
@d64 1
a64 1
    if (length($data) > (100<<10)) {
@


1.19
log
@*** empty log message ***
@
text
@d67 1
a67 1
        return($data,$hdrs,'text/x-big-html',8);
@


1.18
log
@*** empty log message ***
@
text
@d95 1
a95 1
            $outdata .= &tag_from_attribs($thing,%attribs);
d102 1
a102 1
            $outdata .= &tag_from_attribs($thing, %attribs);
d122 1
a122 1
                $outdata .= &tag_from_attribs($thing,%attribs);
d126 1
a126 1
                $outdata .= &tag_from_attribs($thing,%attribs) 
d133 1
a133 1
                                 &tag_from_attribs($thing,%attribs),
@


1.17
log
@Toplevel Makefile slimmed down.  lib/ subdir and corresponding install
targets added, to prep for binary dist.  client_lib now has
strerror()-style error reporting.  Fixed bug in dispatch.c that caused
prefs call for an aggregator to coredump (strcpy called on null ptr).
text/html distiller more streamlined and correctly "munges" user prefs
form items.  GetOptions moved from clib to TaccUtils.  perl_stub now
passes arguments named "s11", "i2", etc. instead of "11", "2", etc.
@
text
@d58 1
a58 1
    my ($what,$thing,@@rest);
d64 6
d71 2
a72 2
        ($what,$thing,%attribs) = &next_entity($data);
        #print "."; flush;
d80 1
a80 1
        $outdata .= ($in_link = $attribs{'_all_'}), next
d84 1
a84 1
        $outdata .= $attribs{'_all_'}, $in_link = '', next
d88 6
a93 6
            && defined($userprefval = $args{$attribs{'transendid'}})) {
            if ($attribs{'type'} =~ /text/i) { # includes 'textarea'
                $attribs{'value'} = $userprefval;
            } elsif ($attribs{'type'} =~ /radio|checkbox/i
                     && $attribs{'transendval'} == $userprefval) {
                $attribs{'checked'} = "";   # make the attrib "empty but defined"
d101 1
a101 1
            $attribs{'src'} = &tomagic($attribs{'src'}, "i6=2");
d107 2
a108 2
            @@magic = split(',' , $attribs{'gmmagic'});
            delete $attribs{'gmmagic'};
d110 1
a110 1
            $fetch_orig = &tomagic($attribs{'src'}, "i1=1"); # fetch original
d113 1
a113 1
                if defined ($attribs{'usemap'}) ;
d116 2
a117 2
                unless (defined ($attribs{'width'})
                        && defined ($attribs{'height'})) ;
d119 1
a119 1
            $attribs{'src'} = &tomagic($attribs{'src'}, join('^',@@magic))
d121 1
a121 1
            if (delete $attribs{'norefine'}) {
d130 1
a130 1
                $attribs{'border'} = '0';
d140 1
a140 1
            $outdata .= $attribs{'_all_'};
@


1.16
log
@fixed TACCutils bug that sometimes caused next_entity to enter infinite
loop.  beginning frontend cleanup to separate service-specific stuff
from core stuff.  ifdef'd out the instrumentation code in
httpsupport.c:parse_status_and_headers, which was likely causing
segfaults.  removed sbrk() monitoring from thr_mon.c because it was
bogus.  tested the Bypass feature for big pages (it works) and set
bypass threshold to about 1.5MB in clib.h.  monitor window is now
resizable though not all the fields resize intelligently.
@
text
@d61 1
a63 1
    $data .= "<DUMMY>";                       # to make sure last par is closed
d81 12
d98 3
a100 1
	} elsif ($thing eq 'img') {
d139 2
a140 2
    if (defined ($args{'6'})
        && ($args{'6'} == 2 || $args{'6'} == 1)) {
d144 1
a144 1
        my $string = ($args{'6'} == 2?
@


1.15
log
@temporary commit so anthony can make; still tracking memory bug interaction frontend/clientlib
@
text
@d1 1
a1 1
#
a7 1
use clib;
d40 1
a40 1
    &MonitorClient_Send($LOG_FIELD, "Started successfully", "Log");
d60 1
a60 1

d66 1
d73 9
a81 9
        if ($thing =~ /^a$/i) {
	    $outdata .= $attribs{'_all_'};
            $in_link = $attribs{'_all_'};    # may be undef.
            next;
	} elsif ($thing =~ m!^/a$!i) {
	    $in_link = undef;
	    $outdata .= $attribs{'_all_'};
            next;
        } elsif ($thing =~ /^frame$/i) {
d86 12
a97 21
	} elsif ($thing =~ /^img$/i) {
            my $ismap = 0;
            my $origsrc = $attribs{'src'};
            my $magic;
            if (defined ($attribs{'usemap'})
                || defined ($attribs{'ismap'})) {
                # don't shrink imagemaps
                $ismap = 1;
                $attribs{'src'} = &tomagic($attribs{'src'}, "i8=1");
            }
            if (defined ($magic = $attribs{'gmmagic'})) {
                $magic = join("^", split(",", $magic));
                # append magic to tag.  this lets us control transend directly
                # yet still maintain compatibility with non-transend users.
                $attribs{'src'} = &tomagic($attribs{'src'}, $magic);
                delete $attribs{'magic'};
            }
            unless (defined($attribs{'width'}) && defined($attribs{'height'})) {
                # don't scale since no size hints inline
                $attribs{'src'} = &tomagic($attribs{'src'}, "i2=1");
            }
d99 9
a107 5
            my $alltag = &tag_from_attribs($thing,%attribs);
            my $fetch_orig = &tomagic($origsrc, "i1=1"); # fetch original

            if (defined($attribs{'norefine'})) {
                $outdata .= $alltag;
d109 6
a114 13
                if ($in_link || $ismap) {
                    # don't try to make the image itself a link; instead insert
                    # a  new link next to it, to fetch original
                    $outdata .=
                        qq!$alltag</a><a href="$fetch_orig">$IMG_LINK</a>$in_link!;
		} else {
                    # make the image itself into a link
                    $attribs{'border'} = '0';
                    $outdata .= join('',
                                     qq!<a href="$fetch_orig">!,
                                     &tag_from_attribs($thing,%attribs),
                                     qq!</a>!);
                }
@


1.14
log
@More stuff has changed....cutthrough behaviour for large files is
defined for the cache library.
@
text
@a6 7
BEGIN {
    push(@@INC, qw(
                  /home/tomorrow/b/grad/gribble/working/tcsproxy/xs/lib
		/disks/barad-dur/now/pythia/release/lib/perl-5.002
                  ));
}

@


1.13
log
@*** empty log message ***
@
text
@d9 2
a10 1
                  /home/fox/tcsproxy/xs/lib
@


1.12
log
@Changed the enum in clib.h to a series of #defines, so that the perl
extension builder automatically makes the values available to perl.
Much work on the perl html munger (using the new lexer): <img> attribute
GMMAGIC is now converted to URL magic in the SRC attribute by the
munger.  MonitorClient_Send and GetOptions are now available to perl
distillers; this required changes to perl_stub and clib.xs.  Bug fix to
tag_from_attribs routine in TACCutils.pm.  Tcl/tk simulator now supports
"reload" and "open", and canvas is resized correctly.  Perl harness now
turns on  perl -w by default.
@
text
@d25 1
a25 1
          ALIGN="right" BORDER=0 SRC="http://$webServerName/logo2.gif*^i1=1^"
@


1.11
log
@fixed makefile bugs to compile under both linux and solaris
@
text
@d9 1
a9 3
                  xs
                  xs/lib/i586-linux/5.003
                  /disks/barad-dur/now/pythia/release/lib/perl-5.002
d18 26
a43 1
    $IMG_LINK_STRING = '&#164;' ;
d45 3
a47 17
if (0) {$ICON_ONLY_STRING = '
<A href="' . &SET_PREFS_URL . '"><IMG NOREFINE ALIGN="right" BORDER=0 SRC="http://' . &SERVER_NAME . '/logo2.gif*^i1=1^" WIDTH="45" HEIGHT="25"></A><P><BR CLEAR="BOTH">';
}
    if (0) {
$DASHBOARD_STRING = '
<APPLET CODE="gui.class" CODEBASE="http://' . &SERVER_NAME . '/~achuang/glomop/test" WIDTH="100%" HEIGHT="30"></APPLET>
<SCRIPT LANGUAGE="JavaScript1.1">
<!--
   function A() {
     for (var i=0; i<document.images.length; i++) {
       document.images[i].src += (document.images[i].src.indexOf("*^")==-1? "*^i1=1^":"i1=1^")
      }
   }
// -->
</SCRIPT>
';
}
a50 1

a59 1
    return($data,$hdrs,$type,0);
a61 1
    my $head = 0;
d72 1
a72 1
        ($what,$thing,%attrs) = &next_entity($data);
d81 1
a81 1
            $in_link = $attribs{'href'};    # may be undef.
d83 1
a83 1
	} elsif ($thing =~ /^\/a$/i) {
a88 1
            $outdata .= ">";
d90 1
a90 4
            for (keys($attribs)) {
                $outdata .= sprintf('%s="%s" ', $_, $attribs{$_});
            }
            $outdata .= ">";
d93 1
d95 1
d98 2
a99 1
                # don't shrink
d102 7
d110 1
d113 3
d117 8
a124 2
		if ($in_link !~ /^$/) {
		    $outdata .= "$tag</a><a href=\"$magicsrc\">$IMG_LINK_STRING</a>$in_link";
d126 6
a131 44
		    if ($tag =~ /(?:ismap)|(?:usemap)/i) {
			$outdata .= "$tag<a href=\"$magicsrc\">$IMG_LINK_STRING</a>";
		    } else {
			my $newtype = quotemeta ($thing);
			$tag =~ s/$newtype/$thing border="0"/;
			$outdata .= "<a href=\"$magicsrc\">$tag</a>";
		    }
		}
	    } else {
		$outdata .= $all;
	    }
	} elsif ($thing =~ /^input$/i) {
            if ($tag =~ /transendid\s*=\s*['"]?(.)([^ "']+)['"]?/i) {
                my $thing = $1;
                my $id = $2;
                my $inputtype;
                my $transcendval;

                if ($tag =~ /type\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $inputtype = $1;
		}

                if ($tag =~ /transendval\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $transendval = $1;
		}

         	if (defined($args{"$id"})) {

	            my $val = $args{"$id"};
	            if (($inputtype !~ /^text$/i) && ($inputtype !~ /^$/)) {
                        if ($transendval !~ /^$/) {
                            if ($thing =~ /s/) {
                                if ($transendval =~ $val) {
		                   $tag =~ s/>/ CHECKED>/;
		                }
    		            } else {
			        if ($transendval == $val) {
			            $tag =~ s/>/ CHECKED>/;
			        }			
		            }		    
		        } else {
		            $tag =~ s/>/ VALUE=\"$val\">/;
	                }
                    }
d133 7
a139 19
                $outdata .= $pretext . $tag;
            } else {
		$outdata .= $all;
	    }
	} else {                            # it's none of the above
	    $outdata .= $all;
	    if ($thing =~ /^body$/i) {
		$body = 1;
	    } elsif ($thing =~ /^\/head$/i) {
		$head = 1;
            } elsif ($thing =~ /^\/title$/i) {
                $title = 1;
	    } elsif ($thing =~ /^html$/i) {
		$html = 1;
	    } elsif ($thing =~ /^frameset$/i) {
		$frameset = 1;
	    } elsif ($thing =~ /^noframes$/i) {
		$noframes = 1;
	    }
d142 22
a163 19

    if ($args{'6'} == 2 || $args{'6'} == 1) {
        my $string = ($args{'6'} == 2? $DASHBOARD_STRING : $ICON_ONLY_STRING);
	if ($noframes) {
	    $outdata =~ s/(<\s*noframes[^>]*>)/\1$string/i;
	} elsif ($frameset) {
	    # do nothing
	    1;
	} elsif ($body) {
	    $outdata =~ s/(<\s*body[^>]*>)/\1$string/i;
	} elsif ($head) {
	    $outdata =~ s/(<\s*\/head[^>]*>)/\1$string/i;
	} elsif ($html) {
	    $outdata =~ s/(<\s*html[^>]*>)/\1$string/i;
        } elsif ($title) {
	    $outdata =~ s/(<\s*title[^>]*>)/\1$string/i;
	} else {
	    $outdata = $string .  $outdata;
	}	
d172 1
a172 1
    my $m, $nm;
d176 1
a176 1
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
d181 1
a181 1
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
@


1.10
log
@*** empty log message ***
@
text
@d52 1
a52 1

@


1.9
log
@*** empty log message ***
@
text
@d59 1
a59 1

d64 14
a77 41
    while (!($data =~ /^$/)) {
	my ($tag, $pretext, $type, $all);
	# this is an evil regexp.  EVIL...  what it does is match all
	# text before a tag and one tag.  That tag can have >'s inside of 
	# quotes or single quotes because of javascript type stuff
	# just right now I want to say that javascript sucks
	$data =~ s/^(
                     ([^<]*)         # all text before the next tab, put in $2
	             (<              # open tag (entire tag goes in $3)
                      (\/?\w*)       # tag type (goes in $4)
                      (?:            # inside of tag, can consist of 
                                     # groups of characters, possibly inside
                                     # "s or 's  (within 's or "s >s are legal)
                       (?:[^>"'])|  
                       (?:"          # quote blocks
                        (?:[^\\"]|   # all non \s or "s
                         (?:\\.)     # if a \ the next character is legal
                        )*"          # close block 
                       )|             
                       (?:'          # single quote blocks
                        (?:[^\\']|   # all non \s or 's
                         (?:\\.)     # if a \ the next character is legal
                        )*'          # close block
                       )
                      )*[">']?       # (because someone could have a badly
                                     # formed tag or something, so handle it
				     # somewhat gracefully)
                     )
                    ?)               # it is possible there is no tag
                    //sx;
	$all = $1;
	$pretext = $2;
	$tag = $3;
	$type = $4;
	
        if ($type =~ /^a$/i) {
	    $outdata .= $all;
	    if ($tag =~ /href\s*=/i) {
		$in_link = $tag; 
	    }
	} elsif ($type =~ /^\/a$/i) {
d79 21
a99 26
	    $outdata .= $all;
        } elsif ($type =~ /^frame$/i) {
            my ($magicsrc,$oldsrc,$resttag,$newresttag);
	    if ($tag =~ /(src\s*=\s*['"]?)([^ "']*)['"]?/io)  {
                $resttag = $1;
                $oldsrc = $2;
		$oldsrc =~ quotemeta ($oldsrc);
		$newresttag =~ quotemeta ($resttag);
                $magicsrc = &tomagic($oldsrc, "i6=2");
                $tag =~ s/$newresttag$oldsrc/$resttag$magicsrc/i;
            } 
            $outdata .= "$pretext$tag";
	} elsif ($type =~ /^img$/i) {
	    my $magicsrc;
            my $oldsrc;
	    $tag =~ /src\s*=\s*['"]?([^ "']*)['"]?/i;   #"
	    $magicsrc = $1;
            $oldsrc = $magicsrc;
            if ($oldsrc !~ /^$/) {
		if ($tag =~ /(?:ismap)|(?:usemap)/i) {
		    $magicsrc = &tomagic($magicsrc, "i8=1");
		}
		if ($tag !~ /(?:width)|(?:height)/i) {
		    $magicsrc = &tomagic($magicsrc, "i2=1");
		}
		my $newoldsrc;
a100 6
		$newoldsrc =  quotemeta ($oldsrc);
		$tag =~ s/$newoldsrc/$magicsrc/;
		$magicsrc = $oldsrc;
		$magicsrc = &tomagic($magicsrc, "i1=1");
		
		$outdata .= $pretext;
d107 2
a108 2
			my $newtype = quotemeta ($type);
			$tag =~ s/$newtype/$type border="0"/;
d115 1
a115 1
	} elsif ($type =~ /^input$/i) {
d117 1
a117 1
                my $type = $1;
d135 1
a135 1
                            if ($type =~ /s/) {
d155 1
a155 1
	    if ($type =~ /^body$/i) {
d157 1
a157 1
	    } elsif ($type =~ /^\/head$/i) {
d159 1
a159 1
            } elsif ($type =~ /^\/title$/i) {
d161 1
a161 1
	    } elsif ($type =~ /^html$/i) {
d163 1
a163 1
	    } elsif ($type =~ /^frameset$/i) {
d165 1
a165 1
	    } elsif ($type =~ /^noframes$/i) {
@


1.8
log
@fixeda few bug.  made regexp easier to read
@
text
@d22 1
a22 1
    $ICON_ONLY_STRING = '
d24 3
a26 2

    $DASHBOARD_STRING = '
d38 1
a38 1

@


1.7
log
@*** empty log message ***
@
text
@d62 1
a62 1

d69 24
a92 2
	$data =~ s/^(([^<]*)(<(\/?\w*)(?:(?:[^>"'])|(?:"(?:[^\\"]|(?:\\.))*")|(?:'(?:[^\\']|(?:\\.))*'))*[">']?)?)//s;
                             # "'
d107 2
a108 3
            my ($magicsrc,$oldsrc,$resttag);
            my $pat = q!(src\s*=\s*['"]?)([^ "']*)['"]?! ;  #"
	    if ($tag =~ /$pat/io)  {
d111 2
d114 2
a115 4
                $tag =~ s/$resttag$oldsrc/$resttag$magicsrc/i;
            } else {
                warn "Tag = $tag\n";
            }
d130 4
a133 1
		$tag =~ s/$oldsrc/$magicsrc/;
d144 2
a145 1
			$tag =~ s/$type/$type border="0"/;
d234 1
a234 1
    my $m;
d239 2
a240 1
	$src =~ s/$m/$m\^$magic/;
d244 2
a245 1
	$src =~ s/\?$m/\*\^$magic\^\?$m/; 
@


1.6
log
@made UI prefs values backwards compat
@
text
@d9 2
@


1.5
log
@changes and additions to transend.text.piml (pilot markup language html
distiller).  commented the ARGS.h file for distillers.  distillers now
only observe Quality arg if it has a reasonable value.  Changes to main
prefs to make values of FRONT_SHOW_ICON arg agree with perl html distiller.
@
text
@d181 2
a182 2
    if ($args{'6'}) {
        my $string = ($args{'6'} == 2 ? $ICON_ONLY_STRING : $DASHBOARD_STRING);
@


1.4
log
@Revved xs, perl_dir, and transend.text.html back to default perl.
@
text
@a8 1
                  /home/tomorrow/b/grad/gribble/working/tcsproxy/xs/lib/perl-5.002
@


1.3
log
@OK....I think....checked in and working better.
@
text
@d9 1
a9 2
                  /home/tomorrow/b/grad/gribble/working/tcsproxy/xs/lib/perl5/perl-5.004/
                  /home/tomorrow/b/grad/fox/286proj/tcsproxy/xs/lib/perl-5.002
@


1.2
log
@various changes to makefiles to support auto-installation into sbin and bin directories.  perl HTML distiller no longer inserts UI in pages with frames.  PREFS_URL and similar strings are now static char* instead of #defines, but still need them to be initialized in PTM stub so distillers can get at them.  "run" targets are better now, they run stuff from the sbin and bin directories.
@
text
@d9 1
d69 1
a69 1
	$data =~ s/^(([^<]*)(<(\/?\w*)(?:(?:[^>"'])|(?:"(?:[^\\"]|(?:\\.))*")|(?:'(?:[^\\']|(?:\\.)*)*'))*[">']?)?)//s;
@


1.1
log
@new perl text/html distiller
@
text
@d7 10
a17 3
$SET_PREFS_URL = "http://HTTP.CS.Berkeley.EDU/prefs.html";
$SERVER_HTTP = "http://HTTP.CS.Berkeley.EDU";
$REALSERVER_HTTP = "http://transend.CS.Berkeley.EDU";
d19 4
a22 1
$ICON_ONLY_STRING = '<A href="' . $SET_PREFS_URL . '"><IMG NOREFINE ALIGN="right" BORDER=0 SRC="" . $REALSERVER_HTTP . "/logo2.gif*^i6=0^i1=1^" WIDTH="45" HEIGHT="25"></A><P><BR CLEAR="BOTH">';
d24 2
a25 1
$DASHBOARD_STRING = '<APPLET CODE="gui.class" CODEBASE="' . $SERVER_HTTP . '/~achuang/glomop/test" WIDTH="100%" HEIGHT="30"></APPLET>
d56 1
d69 1
d75 1
a75 14
	if (!($type =~ /^(?:\/?a)|(?:img)|(?:input)$/i)) {
	    $outdata .= $all;
	    if ($type =~ /^body$/i) {
		$body = 1;
	    } elsif ($type =~ /^\/head$/i) {
		$head = 1;
	    } elsif ($type =~ /^html$/i) {
		$html = 1;
	    } elsif ($type =~ /^frameset$/i) {
		$frameset = 1;
	    } elsif ($type =~ /^noframes$/i) {
		$noframes = 1;
	    }
	} elsif ($type =~ /^a$/i) {
d80 15
d98 1
a98 1
	    $tag =~ /src\s*=\s*['"]?([^ "']*)['"]?/i;
d114 1
a114 1
		    $outdata .= "$tag</a><a href=\"$magicsrc\">&\#164;</a>$in_link";
d117 1
a117 1
			$outdata .= "$tag<a href=\"$magicsrc\">&\#164;</a>";
d164 1
a164 2
	} elsif ($type =~ /^\/a$/i) {
	    $in_link = "";
d166 14
a179 1
	}
d182 2
a183 2
    if ($args{'6'} == 0  ||  $args{'6'} == 1) {
        my $string = ($args{'6'} == 0 ? $ICON_ONLY_STRING : $DASHBOARD_STRING);
d195 2
@
