head	1.4;
access;
symbols
	Yatin-final:1.4
	Yatin:1.4.0.2
	pre-yatin-merge:1.4
	transend-beta2:1.4
	fox-dev:1.4
	perl_dir-ng:1.4
	transend-beta-latest:1.4
	Aggregators:1.3
	NoAggregators:1.3
	iang:1.2.0.4
	transend-beta:1.2.0.2;
locks; strict;
comment	@# @;


1.4
date	97.06.04.01.53.52;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.05.11.11.22.52;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.04.24.01.19.01;	author aspolito;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.21.22.36.58;	author aspolito;	state Exp;
branches;
next	;

1.2.2.1
date	97.04.28.22.08.30;	author aspolito;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.04.30.21.06.30;	author aspolito;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	97.04.30.21.23.41;	author aspolito;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	97.05.09.01.01.57;	author fox;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	97.05.13.21.39.43;	author aspolito;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	97.05.14.20.48.06;	author aspolito;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	97.05.14.21.04.36;	author aspolito;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merged in Anthony's cool new text/html perl distiller.
@
text
@#
#  DistillerInit
#  Args: none
#  Returns: DIstillerStatus code (int)
#

sub DistillerInit {
    $ICON_STRING = "<A href=\"http://transend.CS.Berkeley.EDU/prefs.html\"><IMG ALIGN=\"right\" BORDER=0 SRC=\"http://transend.CS.Berkeley.EDU/logo2.gif*^i1=1^\" WIDTH=\"45\" HEIGHT=\"25\"></A><P><BR CLEAR=\"BOTH\">";

    0;    
}

#
#  DistillerMain
#  Args: distiller type (MIME string), data (scalar), %args
#    (%args is argID,value pairs for arguments to distiller)
#  Returns: (new data, MIME type, optional distillerStatus [default distOk])
#

sub DistillerMain {
    my $type = pop;
    my $data = pop;

    my $noframes = 0;
    my $frameset = 0;
    my $head = 0;
    my $html = 0;
    my $body = 0;

    my $in_link = "";

    my $outdata = "";


    %args = @@_;
   
    while (!($data =~ /^$/)) {
	my ($tag, $pretext, $type, $all);
	# this is an evil regexp.  EVIL...  what it does is match all
	# text before a tag and one tag.  That tag can have >'s inside of 
	# quotes or single quotes because of javascript type stuff
	# just right now I want to say that javascript sucks
	$data =~ s/^(([^<]*)(<(\/?\w*)(?:(?:[^>"'])|(?:"(?:[^\\"]|(?:\\.))*")|(?:'(?:[^\\']|(?:\\.)*)*'))*[">']?)?)//s;
	$all = $1;
	$pretext = $2;
	$tag = $3;
	$type = $4;
	
	if (!($type =~ /^(?:\/?a)|(?:img)|(?:input)$/i)) {
	    $outdata .= $all;
	    if ($type =~ /^body$/i) {
		$body = 1;
	    } elsif ($type =~ /^\/head$/i) {
		$head = 1;
	    } elsif ($type =~ /^html$/i) {
		$html = 1;
	    } elsif ($type =~ /^frameset$/i) {
		$frameset = 1;
	    } elsif ($type =~ /^noframes$/i) {
		$noframes = 1;
	    }
	} elsif ($type =~ /^a$/i) {
	    $outdata .= $all;
	    if ($tag =~ /href\s*=/i) {
		$in_link = $tag; 
	    }
	} elsif ($type =~ /^img$/i) {
	    my $magicsrc;
            my $oldsrc;
	    $tag =~ /src\s*=\s*['"]?([^ "']*)['"]?/i;
	    $magicsrc = $1;
            $oldsrc = $magicsrc;
            if ($oldsrc !~ /^$/) {
		if ($tag =~ /(?:ismap)|(?:usemap)/i) {
		    $magicsrc = &tomagic($magicsrc, "i8=1");
		}
		if ($tag !~ /(?:width)|(?:height)/i) {
		    $magicsrc = &tomagic($magicsrc, "i2=1");
		}
		$tag =~ s/$oldsrc/$magicsrc/;
		$magicsrc = $oldsrc;
		$magicsrc = &tomagic($magicsrc, "i1=1");
		
		$outdata .= $pretext;
		if ($in_link !~ /^$/) {
		    $outdata .= "$tag</a><a href=\"$magicsrc\">&\#164;</a>$in_link";
		} else {
		    if ($tag =~ /(?:ismap)|(?:usemap)/i) {
			$outdata .= "$tag<a href=\"$magicsrc\">&\#164;</a>";
		    } else {
			$tag =~ s/$type/$type border="0"/;
			$outdata .= "<a href=\"$magicsrc\">$tag</a>";
		    }
		}
	    } else {
		$outdata .= $all;
	    }
	} elsif ($type =~ /^input$/i) {
            if ($tag =~ /transendid\s*=\s*['"]?(.)([^ "']+)['"]?/i) {
                my $type = $1;
                my $id = $2;
                my $inputtype;
                my $transcendval;

                if ($tag =~ /type\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $inputtype = $1;
		}

                if ($tag =~ /transendval\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $transendval = $1;
		}

         	if (defined($args{"$id"})) {

	            my $val = $args{"$id"};
	            if (($inputtype !~ /^text$/i) && ($inputtype !~ /^$/)) {
                        if ($transendval !~ /^$/) {
                            if ($type =~ /s/) {
                                if ($transendval =~ $val) {
		                   $tag =~ s/>/ CHECKED>/;
		                }
    		            } else {
			        if ($transendval == $val) {
			            $tag =~ s/>/ CHECKED>/;
			        }			
		            }		    
		        } else {
		            $tag =~ s/>/ VALUE=\"$val\">/;
	                }
                    }
                }
                $outdata .= $pretext . $tag;
            } else {
		$outdata .= $all;
	    }
	} elsif ($type =~ /^\/a$/i) {
	    $in_link = "";
	    $outdata .= $all;
	}
    }

    if ($args{'6'} == 1) {

	if ($noframes) {
	    $outdata =~ s/(<\s*noframes[^>]*>)/\1$ICON_STRING/i;
	} elsif ($frameset) {
	    # do nothing
	    1;
	} elsif ($body) {
	    $outdata =~ s/(<\s*body[^>]*>)/\1$ICON_STRING/i;
	} elsif ($head) {
	    $outdata =~ s/(<\s*\/head[^>]*>)/\1$ICON_STRING/i;
	} elsif ($html) {
	    $outdata =~ s/(<\s*html[^>]*>)/\1$ICON_STRING/i;
	} else {
	    $outdata = $ICON_STRING .  $outdata;
	}	
    }

    return ($outdata, 'text/html');
}

sub tomagic {
    my $src = shift;
    my $magic =  shift;
    my $m;

    if ($src =~ /\*\^(.*)\^(\?.*)?$/) {
	$m = $1;
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
	$src =~ s/$m/$m\^$magic/;
    } elsif ($src =~ /\?(.*)$/) {
	$m = $1;
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
	$src =~ s/\?$m/\*\^$magic\^\?$m/; 
    } else {
	$src .= "*^$magic^";	
    }

    $src;
}

1;

@


1.3
log
@*** empty log message ***
@
text
@d1 5
a5 10
BEGIN {
    push(@@INC, qw(
                  /home/tomorrow/b/grad/fox/286proj/tcsproxy/xs/lib/perl-5.002
                  /disks/barad-dur/now/pythia/release/lib/perl-5.002
                  ));
}
         
use clib;
use LWP;
require "html_utils.pl";
d8 2
d13 7
d21 157
a177 33
    my $type = pop @@_;
    my $metadata = pop @@_;
    my $data = pop @@_;
    my %args = @@_;
    
    my($stat,$hdr,$data) = &Clib_Fetch("http://www.cs.berkeley.edu/~iang/",
                                       "");
    my($stat2,$hdr2,$data2) =
    &Clib_Fetch("http://www.cs.berkeley.edu/~gribble/",
                "");

    if ($stat == 0  && $stat2 == 0) {
        # collate steve's and ian's pages
        $final_data = <<endofpage;
<html>
<body>
<table border="1">
<tr>
<td> $data </td>
<td> $data2 </td>
</table>
</body>
</html>
endofpage

        return($final_data,$hdr,"text/html", 0);
    } else {    
        $data = "<H1>Get failed: code = $stat</H1>";
        return($data,
               ("Content-type: text-html\r\nContent-length: "
                . length($data) . "\r\n\r\n"),
               "text/html",
               0);
d179 2
@


1.2
log
@text.html actually does text/html munging
@
text
@d2 4
a5 1
    push(@@INC, "/disks/barad-dur/now/pythia/release/lib/perl-5.002");
d7 2
a8 1

d10 1
a10 2


a12 4
    require "/home/tomorrow/a/ugrad/aspolito/work/tcsproxy/perl_stub/html_parser.pl";  

    $ICON_STRING = "<A href=\"http://transend.CS.Berkeley.EDU/prefs.html\"><IMG ALIGN=\"right\" BORDER=0 SRC=\"http://transend.CS.Berkeley.EDU/logo2.gif*^i1=1^\" WIDTH=\"45\" HEIGHT=\"25\"></A><P><BR CLEAR=\"BOTH\">";

a15 1

d17 33
a49 146
    my $type = pop;
    
    $p = new html_parser(pop @@_, \&htmltext, \&htmlcomment, 
			 \&tagbegin, \&tagend);
    
    # now add all the special cases
    $p->tag_begin(img, \&imgbegin);
    $p->tag_begin(input, \&inputbegin);
 
    $p->tag_begin(a, \&abegin);
    $p->tag_end(a, \&aend);

    %args = @@_;

    $p->parse_html_string;

    if ($args{'6'} == 1) {

	if (defined ($$p{'body'})) {
	    $$p{'outdata'} =~ s/(<\s*body[^>]*>)/\1$ICON_STRING/i;
	} elsif (defined ($$p{'head'})) {
	    $$p{'outdata'} =~ s/(<\s*\/head[^>]*>)/\1$ICON_STRING/i;
	} elsif (defined ($$p{'html'})) {
	    $$p{'outdata'} =~ s/(<\s*html[^>]*>)/\1$ICON_STRING/i;
	} else {
	    $$p{'outdata'} = $ICON_STRING .  $$p{'outdata'};
	}	
    }

    return ($$p{'outdata'}, 'text/html');
}

sub tagbegin {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;

    $$parser{'body'} = 1 if ($tag =~ /^body$/);
    $$parser{'html'} = 1 if ($tag =~ /^html$/);
    
    $$parser{'outdata'} .= $text;
}

sub tagend {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;

    my $explicit = shift;      

    $$parser{'head'} = 1 if ($tag =~ /^head$/);
    
    $$parser{'outdata'} .= $text;
}

sub htmltext {
    my $parser = shift;

    $$parser{'outdata'} .=  $_[0];
}

sub htmlcomment {
    my $parser = shift;

    $$parser{'outdata'} .=  "<!--" . $_[0] . "-->";
}

sub imgbegin {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;
    
    my $magicsrc;

    # if img has a src value
    if (defined $attribs{'src'}) {
	$magicsrc = $attribs{'src'};
	#if img doesn't have either a hieght or a source
	if (!defined($attribs{'width'}) && !defined($attribs{'height'})) {
	    $magicsrc = tomagic ($magicsrc, "i2=1");
	}
	#if img is an imagemap
	if (defined($attribs{'ismap'}) || defined($attribs{'usemap'})) {
	    $magicsrc = tomagic ($magicsrc, "i8=1");
	}

	#now relplace our text with the magic text
	$text =~ s/$attribs{'src'}/$magicsrc/; 

	$magicsrc = tomagic ($attribs{'src'}, "i1=1");
	# if we are within a link
	if (defined($$parser{'inlink'})) {
	    $$parser{'outdata'} .= "$text</a><a href=\"$magicsrc\">&#164;</a>".
		$$parser{'inlink'};	    
	} else {
	    # img is not within a link
	    $text =~ s/$tag/$tag border=0/i;
	    $$parser{'outdata'} .= "<a href=\"$magicsrc\">$text</a>";
	}
    } else {
	# no src value
	$$parser{'outdata'} .= $text;
    }
}

sub inputbegin {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;

    if ($attribs{'transendid'} =~ /^\s*(.)(\d+)/) {
	my $type = $1;
	my $id = $2;
	
	if (defined($args{"$id"})) {
	    my $val = $args{"$id"};
	    if ((defined($attribs{'type'})) && 
		!($attribs{'type'} =~ /text/i)) {
		if (defined($attribs{'transendval'})) {
		    if ($type =~ /s/) {
			if ($attribs{'transendval'} =~ $val) {
			    $text =~ s/>/ CHECKED>/;
			}
		    } else {
			if ($attribs{'transendval'} == $val) {
			    $text =~ s/>/ CHECKED>/;			    
			}			
		    }		    
		}		
	    } else {
		$text =~ s/>/ VALUE=\"$val\">/;
	    }
	}
	    
a50 52
    
    $$parser{'outdata'} .= $text;	 
}

sub abegin {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;
    
    if (defined($attribs{'href'})) {
	$$parser{'inlink'} = $text;
    }
    
    $$parser{'outdata'} .= $text;	 
}

sub aend {
    my $parser = shift;
    my $tag = shift;
    my $text = shift;
    
    my $a = shift;
    my %attribs = %$a;

    my $explicit = shift;      # tag_end callback only	 

    my $img;
    
    undef($$parser{'inlink'});

    $$parser{'outdata'} .= $text;
}

sub tomagic {
    my $src = shift;
    my $magic =  shift;
    my $m;

    if ($src =~ /\*\^(.*)\^(\?.*)?$/) {
	$m = $1;
	$src =~ s/$m/$m\^$magic/;
    } elsif ($src =~ /\?(.*)$/) {
	$m = $1;
	$src =~ s/\?$m/\*\^$magic\^\?$m/;	
    } else {
	$src .= "*^$magic^";	
    }

    $src;
@


1.2.2.1
log
@fixed a stupid regexp bug that was making the distiller die
@
text
@d115 1
a115 4
	my $srcattrib = $attribs{'src'};
	$srcattrib =~ s/([\[\\.*?$^()\]])/\\\1/g;

	$text =~ s/$srcattrib/$magicsrc/; 
d124 2
a125 7
	    if (!defined($attribs{'ismap'}) && !defined($attribs{'usemap'})) {
		# and not an image map
		$text =~ s/$tag/$tag border=0/i;
		$$parser{'outdata'} .= "<a href=\"$magicsrc\">$text</a>";
	    } else {
		$$parser{'outdata'} .= "$text<a href=\"$magicsrc\">&#164;</a>";
	    }
a208 1
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
d212 1
a212 2
	$m =~ s/([\[\\.*?$^()\]])/\\\1/g;
	$src =~ s/\?$m/\*\^$magic\^\?$m/; 
@


1.2.2.2
log
@added support so $ICON_STRING is added in the right place with frame pages
@
text
@d37 1
a37 7
	if (defined ($$p{'noframes'})) {
	    $$p{'outdata'} =~ s/(<\s*noframes[^>]*>)/\1$ICON_STRING/i;

	} elsif (defined ($$p{'framset'})) {
	    # do nothing
	    1;
	} elsif (defined ($$p{'body'})) {
d61 1
a61 3
    $$parser{'frameset'} = 1 if ($tag =~ /^frameset$/);
    $$parser{'noframes'} = 1 if ($tag =~ /^noframes$/);

@


1.2.2.3
log
@oops, typo
@
text
@d39 2
a40 1
	} elsif (defined ($$p{'frameset'})) {
@


1.2.2.4
log
@fixed minor buglets in interaction of htmlmunger and java gui
@
text
@a7 5
#
#  DistillerInit
#  Args: none
#  Returns: DIstillerStatus code (int)
#
a16 6
#
#  DistillerMain
#  Args: distiller type (MIME string), data (scalar), %args
#    (%args is argID,value pairs for arguments to distiller)
#  Returns: (new data, MIME type, optional distillerStatus [default distOk])
#
@


1.2.2.5
log
@fixed some errors that were cause the branch not to compile
@
text
@d1 7
d15 2
d31 10
a40 1
    my $data = pop;
d42 1
a42 6
    local $outdata;
    local $noframes = 0;
    local $frameset = 0
    local $head = 0;
    local $html = 0;
    local $body = 0;
d44 1
a44 1
    %args = @@_;
d48 3
a50 3
	if ($noframes) {
	    $outdata =~ s/(<\s*noframes[^>]*>)/\1$ICON_STRING/i;
	} elsif ($frameset) {
d53 6
a58 6
	} elsif ($body) {
	    $outdata =~ s/(<\s*body[^>]*>)/\1$ICON_STRING/i;
	} elsif ($head) {
	    $outdata =~ s/(<\s*\/head[^>]*>)/\1$ICON_STRING/i;
	} elsif ($html) {
	    $outdata =~ s/(<\s*html[^>]*>)/\1$ICON_STRING/i;
d60 1
a60 1
	    $outdata = $ICON_STRING .  $$p{'outdata'};
d64 1
a64 1
    return ($outdata, 'text/html');
@


1.2.2.6
log
@new faster, uglier perl text/html distiller
@
text
@d24 6
a29 10
    my $noframes = 0;
    my $frameset = 0;
    my $head = 0;
    my $html = 0;
    my $body = 0;

    my $in_link = "";

    my $outdata = "";

a31 103
   
    while (!($data =~ /^$/)) {
	my ($tag, $pretext, $type, $all);
	# this is an evil regexp.  EVIL...  what it does is match all
	# text before a tag and one tag.  That tag can have >'s inside of 
	# quotes or single quotes because of javascript type stuff
	# just right now I want to say that javascript sucks
	$data =~ s/^(([^<]*)(<(\/?\w*)(?:(?:[^>"'])|(?:"(?:[^\\"]|(?:\\.))*")|(?:'(?:[^\\']|(?:\\.)*)*'))*[">']?)?)//s;
	$all = $1;
	$pretext = $2;
	$tag = $3;
	$type = $4;
	
	if (!($type =~ /^(?:\/?a)|(?:img)|(?:input)$/i)) {
	    $outdata .= $all;
	    if ($type =~ /^body$/i) {
		$body = 1;
	    } elsif ($type =~ /^\/head$/i) {
		$head = 1;
	    } elsif ($type =~ /^html$/i) {
		$html = 1;
	    } elsif ($type =~ /^frameset$/i) {
		$frameset = 1;
	    } elsif ($type =~ /^noframes$/i) {
		$noframes = 1;
	    }
	} elsif ($type =~ /^a$/i) {
	    $outdata .= $all;
	    if ($tag =~ /href\s*=/i) {
		$in_link = $tag; 
	    }
	} elsif ($type =~ /^img$/i) {
	    $tag =~ /src\s*=\s*['"]?([^"']*)['"]?/i;
	    my $magicsrc = $1;
            my $oldsrc = $magicsrc;
            if ($oldsrc !~ /^$/) {
		if ($tag =~ /(?:ismap)|(?:usemap)/i) {
		    $magicsrc = &tomagic($magicsrc, "i8=1");
		}
		if ($tag !~ /(?:width)|(?:height)/i) {
		    $magicsrc = &tomagic($magicsrc, "i2=1");
		}
		$tag =~ s/$oldsrc/$magicsrc/;
		$magicsrc = $oldsrc;
		$magicsrc = &tomagic($magicsrc, "i1=1");
		
		$outdata .= $pretext;
		if ($in_link !~ /^$/) {
		    $outdata .= "$tag</a><a href=\"$magicsrc\">&\#164;</a>$in_link";
		} else {
		    if ($tag =~ /(?:ismap)|(?:usemap)/i) {
			$outdata .= "$tag<a href=\"$magicsrc\">&\#164;</a>";
		    } else {
			$tag =~ s/$type/$type border="0"/;
			$outdata .= "<a href=\"$magicsrc\">$tag</a>";
		    }
		}
	    } else {
		$outdata .= $all;
	    }
	} elsif ($type =~ /^input$/i) {
            if ($tag =~ /transendid\s*=\s*['"]?(.)([^ "']+)['"]?/i) {
                my $type = $1;
                my $id = $2;
                my $inputtype;
                my $transcendval;

                if ($tag =~ /type\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $inputtype = $1;
		}

                if ($tag =~ /transendval\s*=\s*['"]?([^ "']+)['"]?/i) {
		    $transendval = $1;
		}

         	if (defined($args{"$id"})) {

	            my $val = $args{"$id"};
	            if (($inputtype !~ /^text$/i) && ($inputtype !~ /^$/)) {
                        if ($transendval !~ /^$/) {
                            if ($type =~ /s/) {
                                if ($transendval =~ $val) {
		                   $tag =~ s/>/ CHECKED>/;
		                }
    		            } else {
			        if ($transendval == $val) {
			            $tag =~ s/>/ CHECKED>/;
			        }			
		            }		    
		        } else {
		            $tag =~ s/>/ VALUE=\"$val\">/;
	                }
                    }
                }
                $outdata .= $pretext . $tag;
            } else {
		$outdata .= $all;
	    }
	} elsif ($type =~ /^\/a$/i) {
	    $in_link = "";
	    $outdata .= $all;
	}
    }
d47 1
a47 1
	    $outdata = $ICON_STRING .  $outdata;
d52 161
@


1.2.2.7
log
@ops, stupid bug
@
text
@d68 3
a70 5
	    my $magicsrc;
            my $oldsrc;
	    $tag =~ /src\s*=\s*['"]?([^ "']*)['"]?/i;
	    $magicsrc = $1;
            $oldsrc = $magicsrc;
@


1.1
log
@the perl_stub and perl_dir directories have been added
perl_stub has the source for the c stubs to allow for perl
distillers.

perl_dir is where the distillers live.  It is the location of the PERL_DIR
#define in config_tr.h
@
text
@d1 8
d10 4
d17 1
d20 172
a191 3
    my $data = pop;
    my %args = @@_;
    my $newdata = $data;
d193 22
a214 2
    if ($args{'1000'} >= 4) {
	$newdata =~ s/aspolito/aspo/ig;
d216 2
a217 1
    return ($newdata, 'text/html');
d220 1
@
