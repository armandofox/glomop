head	1.3;
access;
symbols
	steve:1.1.1.1
	steve:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	96.10.28.01.14.28;	author gribble;	state dead;
branches;
next	1.2;

1.2
date	96.10.27.23.44.31;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.23.51.44;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.23.51.44;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changed the directory structure around to match armando/yatin's.
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include "clib.h"
#include "part.h"
#include "utils.h"
#include "icp.h"

#define CLIB_UDP_TIMEOUT_SEC  0
#define CLIB_UDP_TIMEOUT_USEC 100000
#define CLIB_UDP_RETRIES      5

extern struct sockaddr *localaddr;
extern int              localaddrlen;
extern ll               config_list;

struct timeval query_tv;
int            udp_retries;

void   get_header_content(char *data, int dlen,
		     char **mime_headers,
		     clib_u32 *mime_size,
		     char **content,
		     clib_u32 *content_size);

clib_response Clib_Initialize(char *configfile)
{
  clib_response  presp;
  cfg_nv        *cfg_el;
  ll             tmp;
  
  if ((presp = Part_Initialize(configfile)) != CLIB_OK)
    return presp;
  /* Grab retry info out of config file */
  tmp = config_list;
  cfg_el = get_next_matching("udp_retries", &tmp);
  if (tmp == NULL)
    udp_retries = CLIB_UDP_RETRIES;
  else {
    if (sscanf(cfg_el->value, "%d", &udp_retries) != 1)
      udp_retries = CLIB_UDP_RETRIES;
  }

  tmp = config_list;
  cfg_el = get_next_matching("udp_timeout_sec", &tmp);
  if (tmp == NULL)
    query_tv.tv_sec = CLIB_UDP_TIMEOUT_SEC;
  else {
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_sec)) != 1)
      query_tv.tv_sec = CLIB_UDP_TIMEOUT_SEC;
  }

  tmp = config_list;
  cfg_el = get_next_matching("udp_timeout_usec", &tmp);
  if (tmp == NULL)
    query_tv.tv_usec = CLIB_UDP_TIMEOUT_USEC;
  else {
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_usec)) != 1)
      query_tv.tv_usec = CLIB_UDP_TIMEOUT_USEC;
  }

  return CLIB_OK;
}

clib_response Clib_Query(char *url)
{
  clib_response  resp = CLIB_OK, presp;
  int            tries, num_ready = 0, fd, iresp;
  fd_set         fdset;
  icp_message_t  message_obj;

  if ((presp = Part_GetUDPsock(url, &fd)) != CLIB_OK)
    return presp;

  FD_ZERO(&fdset);
  for (tries=0; tries < udp_retries; tries++) {
    if (do_icp_query(fd, url, *((struct in_addr *) &localaddr), 1) <= 0) {
      close(fd);
      return CLIB_SOCKETOP_FAIL;
    }
    FD_SET(fd, &fdset);
    num_ready = select(FD_SETSIZE, &fdset, NULL, NULL, &query_tv);
    if (num_ready < 0) {
      close(fd);
      return CLIB_SOCKETOP_FAIL;
    }
    if (num_ready > 0)
      break;
  }
  if (num_ready <= 0) {
    close(fd);
    return CLIB_SERVER_TIMEOUT;
  }

  iresp = do_icp_udp_receive(fd, &message_obj);
  close(fd);
  if (message_obj.header.opcode == ICP_OP_HIT) {
    free(message_obj.op.hit.h_url);
    return CLIB_CACHE_HIT;
  } else if (message_obj.header.opcode == ICP_OP_MISS) {
    free(message_obj.op.miss.m_url);
    return CLIB_CACHE_MISS;
  } else if (message_obj.header.opcode == ICP_OP_INVALID) {
    return CLIB_BAD_URL;
  } else {
    return CLIB_SERVER_INTERNAL;
  }
  return resp;
}

clib_response Clib_Fetch(char *url, clib_data *returned_data)
{
  int            iresp, fd;
  unsigned int   dlen;
  clib_response  presp;
  char          *data;

  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;

  if ((iresp = do_http_send(fd, url, NULL, 1, ICP_GET)) != 1) {
    close(fd);
    return CLIB_SERVER_DOWN;
  }

  if ((iresp = do_http_receive(fd, &dlen, &data)) != 0) {
    close(fd);
    return CLIB_SERVER_DOWN;
  }

  /* Parse out the header and content from the return data */
  get_header_content(data, dlen,
		     &(returned_data->mime_headers),
		     &(returned_data->mime_size),
		     &(returned_data->data),
		     &(returned_data->data_size));
  close(fd);
  return CLIB_OK;
}

clib_response Clib_Push(char *url, clib_data data)
{
  clib_response presp;
  int           putresp, fd;
  
  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;

  putresp = do_http_put(fd, url, data.mime_headers, data.data, data.data_size);
  if (putresp <= 0) {
    close(fd);
    return CLIB_SERVER_DOWN;
  }

  return CLIB_OK;
}

void Clib_Perror(clib_response response, char *err_str)
{
  switch(response) {
  case CLIB_OK:
    fprintf(stderr, "%s: everything is just fine.\n", err_str);
    break;

  case CLIB_CACHE_HIT:
    fprintf(stderr, "%s: cache hit\n", err_str);
    break;
  case CLIB_CACHE_MISS:
    fprintf(stderr, "%s: cache miss\n", err_str);
    break;         /* URL is not in the cache */

  case CLIB_NO_CONFIGFILE:
    fprintf(stderr, "%s: couldn't find configuration file\n", err_str);
    break;
  case CLIB_CONFIG_ERROR:
    fprintf(stderr, "%s: error while reading configuration file\n", err_str);
    break; 
  case CLIB_NO_SERVERS:
    fprintf(stderr, "%s: couldn't find any cache partitions\n", err_str);
    break;

  case CLIB_BAD_URL:
    fprintf(stderr, "%s: ill-formed URL\n", err_str);
    break;
  case CLIB_BAD_VERSION:
    fprintf(stderr, "%s: harvest partition version not same as clib\n",
	    err_str);
    break;
  case CLIB_TIMEOUT:
    fprintf(stderr,
	    "%s: harvest partition timed out talking to a web server\n",
	    err_str);
    break;
  case CLIB_ACCESS_DENIED:
    fprintf(stderr, "%s: harvest partition denied us access\n", err_str);
    break;
  case CLIB_SERVICE_UNAVAIL:
    fprintf(stderr, "%s: harvest partition doesn't support the operation\n",
	    err_str);
    break;
  case CLIB_SERVER_INTERNAL:
    fprintf(stderr, "%s: harvest partition suffered internal error\n",
	    err_str);
    break;
  case CLIB_SERVER_DOWN:
    fprintf(stderr, "%s: couldn't connect to any cache server\n",
	    err_str);
    break;
  case CLIB_SERVER_TIMEOUT:
    fprintf(stderr, "%s: we timed out talking to the harvest partition\n",
	    err_str);
    break;
  case CLIB_NO_FD:
    fprintf(stderr, "%s: no more file descriptors\n", err_str);
    break;
  case CLIB_NO_SUCH_PART:
    fprintf(stderr, "%s: no such partition (part_delete)\n", err_str);
    break;
  case CLIB_PTHREAD_FAIL:
    fprintf(stderr, "%s: pthread failure\n", err_str);
    break;
  case CLIB_SOCKETOP_FAIL:
    fprintf(stderr, "%s: a socket operation failed\n", err_str);
    break;
  default:
    fprintf(stderr, "%s: (unrecognized error)\n", err_str);
    break;
  }
}

void   get_header_content(char *data, int dlen,
		     char **mime_headers,
		     clib_u32 *mime_size,
		     char **content,
		     clib_u32 *content_size)
{
  /* Our task is simple - run through the data, looking for CRLFCRLF,
     CRCR, or LFLF.  We know the request was HTTP/1.0 or greater, so
     this pair will definitely happen before the data proper */
  char *cr, *lf, *crsplit = NULL, *lfsplit = NULL, *split = NULL;
  int   charsleft;

  crsplit = data;
  while ((crsplit-data) < dlen) {
    /* Get ready to try CRCR and CRLFCRLF */
    cr = (char *) memchr((void *) crsplit, 0x0D, dlen - (crsplit-data));
    if (cr  == NULL)
      break;

    charsleft = dlen - ((int) (cr-crsplit)) - 1;
    crsplit = cr+1;

    /* Try for crcr */
    if (charsleft > 0) {
      if (*(cr+1) == 0x0D) {
	split = cr + 2;
	break;
      }
    } else {
      break;
    }

    /* Try for crlfcrlf */
    if ((split == NULL) && (charsleft >= 3)) {
      if ( (*(cr+1) == 0x0A) &&
	   (*(cr+2) == 0x0D) &&
	   (*(cr+3) == 0x0A)) {
	split = cr + 4;
	break;
      }
    } else {
      break;
    }
  }
  crsplit = split;

  lfsplit = data;
  split = NULL;
  while ((lfsplit-data) < dlen) {
    /* Last ditch attempt for LFLF */
    lf = (char *) memchr((void *) lfsplit, 0x0A, dlen - (lfsplit-data));
    if (lf == NULL)
      break;

    charsleft = dlen - ((int) (lf-lfsplit)) - 1;
    lfsplit = lf+1;

    if (charsleft > 0) {
      if ( *(lf+1) == 0x0A ) {
	split = lf + 2;
	break;
      }
    } else
      break;
  }
  lfsplit = split;

  if ((lfsplit == NULL) && (crsplit == NULL)) {
    *mime_headers = *content = NULL;
    *mime_size = *content_size = 0;
    return;
  }
  if (lfsplit > crsplit) {
    if (crsplit == NULL)
      split = lfsplit;
    else
      split = crsplit;
  }
  if (crsplit >= lfsplit) {
    if (lfsplit == NULL)
      split = crsplit;
    else
      split = lfsplit;
  }

  /* OK - We'd better have a sensible split now */
  if ((split - data) > dlen) {
    *mime_headers = *content = NULL;
    *mime_size = *content_size = 0;
    return;
  }

  /* Good. We have a split point.  Allocate space for header and content,
     and copy it in. */
  *mime_size = (clib_u32) (split - data);
  *content_size = (clib_u32) dlen - *mime_size;
  *mime_headers = (char *) malloc(*mime_size + 1);
  *content = (char *) malloc(*content_size + 1);
  if ((*mime_headers == NULL) || (*content == NULL)) {
    if (*mime_headers != NULL) {
      free(*mime_headers);
      *mime_headers = NULL;
    }
    if (*content != NULL) {
      *content = NULL;
      free(*content);
    }
    *mime_size = *content_size = 0;
    return;
  }
  memcpy((void *) *mime_headers, data, *mime_size);
  *(*mime_headers + *mime_size) = '\0';
  memcpy((void *) *content, split, *content_size);
  *(*content + *content_size) = '\0';
}


@


1.2
log
@Great!  Pretty much everything works now.  I'm still a little worried about
blocking vs. non-blocking.
@
text
@@


1.1
log
@Initial revision
@
text
@d1 6
d9 341
@


1.1.1.1
log
@Client-library for talking with the partitioned harvest cache subsystem.
@
text
@@
