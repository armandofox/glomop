head	1.4;
access;
symbols
	steve:1.1.1.1
	steve:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	96.10.28.01.14.29;	author gribble;	state dead;
branches;
next	1.3;

1.3
date	96.10.27.23.44.32;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.10.26.01.02.34;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.23.51.44;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.23.51.44;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changed the directory structure around to match armando/yatin's.
@
text
@/*
 * File:          clib.h
 * Purpose:       To define the structures and public functions available
 *                to clients for communicating with the Harvest partitioned
 *                cache.
 * Author:        Steve Gribble
 * Creation Date: September 25th, 1996
*/        

#ifndef CLIB_H
#define CLIB_H

/** XXX - The following really should be taken from autoconf.h **/
typedef unsigned long  clib_u32;
typedef long           clib_s32;

typedef enum {

  /***** Generic success message - operation succeeded *****/
  CLIB_OK,

  /***** Messages pertinent only to Clib_Query() *****/
  CLIB_CACHE_HIT,         /* URL is in the cache */
  CLIB_CACHE_MISS,        /* URL is not in the cache */

  /***** Messages pertinent only to Clib_Initialize() *****/
  CLIB_NO_CONFIGFILE,     /* Couldn't find configuration file */
  CLIB_CONFIG_ERROR,      /* Error occured while reading config file */
  CLIB_NO_SERVERS,        /* Couldn't find any cache servers */

  /***** Generic error messages, could be returned anytime *****/
  CLIB_BAD_URL,           /* URL is ill-formed */
  CLIB_BAD_VERSION,       /* Harvest server is running old/new version */
  CLIB_TIMEOUT,           /* Cache server returned "timeout" error */
  CLIB_ACCESS_DENIED,     /* Denied access to operation */
  CLIB_SERVICE_UNAVAIL,   /* Cache server doesn't support the operation */
  CLIB_SERVER_INTERNAL,   /* Cache server suffered internal error */
  CLIB_SERVER_DOWN,       /* Couldn't connect to the cache server */
  CLIB_SERVER_TIMEOUT,    /* Cache server response itself timed out */
  CLIB_NO_FD,             /* Ran out of file descriptors */
  CLIB_NO_SUCH_PART,      /* No such partition (part_delete) */ 
  CLIB_PTHREAD_FAIL,      /* Generic pthread failure */
  CLIB_SOCKETOP_FAIL      /* Socket operation (read,write,connect,...) fail */
} clib_response;

typedef struct {
  char          *mime_headers; /* NULL-termed headers associated with data */
  clib_u32       mime_size;    /* size of returned mime headers */
  char          *data;         /* the data itself - may be binary */
  clib_u32       data_size;    /* size of returned data */
} clib_data;

/*
 * Initialize this client library - read in the config file, attempt to
 * ping all of the the cache servers to ensure that they are alive.
*/

clib_response Clib_Initialize(char *configfile);

/*
 * Query the cache substrate to see if a certain URL is in the cache.
*/

clib_response Clib_Query(char *url);

/*
 * Ask the cache substrate to return a piece of data.  If the data is
 * not in the cache, it will go out and attempt to retrieve it.  Caller
 * is responsible for free'ing the "mime_headers" and "data" fields of
 * the returned_data structure.
*/

clib_response Clib_Fetch(char *url, clib_data *returned_data);

/*
 * Force some data into the cache as a particular URL and mime type.
*/

clib_response Clib_Push(char *url, clib_data data);

/*
 * Print out a (helpful?) error message for a given response, prepended
 * with err_str, to stderr.
*/

void Clib_Perror(clib_response response, char *err_str);

#endif
@


1.3
log
@Great!  Pretty much everything works now.  I'm still a little worried about
blocking vs. non-blocking.
@
text
@@


1.2
log
@Woohoo!  Partitioning worked out.  Plus, I've thread-safefied the
part.c partition adding/removing/querying functions.
@
text
@d42 2
a43 1
  CLIB_PTHREAD_FAIL       /* Generic pthread failure */
d47 4
a50 3
  clib_u32       timestamp;   /* when object was retrieved from server */
  clib_u32       data_size;   /* size of returned data, in bytes */
  unsigned char *data;        /* the data itself.  Caller must free(). */
d58 1
a58 1
clib_response Clib_Initialize(void);
d68 3
a70 1
 * not in the cache, it will go out and attempt to retrieve it.
d82 2
a83 1
 * Print out a (helpful?) error message for a given response.
@


1.1
log
@Initial revision
@
text
@d41 2
a42 1
  CLIB_NO_SUCH_PART       /* No such partition (part_delete) */
@


1.1.1.1
log
@Client-library for talking with the partitioned harvest cache subsystem.
@
text
@@
