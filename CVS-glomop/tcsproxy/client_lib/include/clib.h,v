head	1.16;
access;
symbols
	Yatin-final:1.15.2.1
	Yatin:1.15.0.2
	pre-yatin-merge:1.15
	transend-beta2:1.12
	fox-dev:1.12.4.1
	client_lib-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.2
	transend-beta:1.7.0.2
	SOSP:1.4
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@ * @;


1.16
date	98.01.16.22.15.50;	author yatin;	state Exp;
branches;
next	1.15;

1.15
date	97.10.18.00.26.46;	author iang;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	97.09.12.01.57.36;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	97.08.30.21.33.53;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	97.07.30.02.28.17;	author fox;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	97.07.29.00.31.58;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	97.07.24.23.36.59;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.07.24.03.18.56;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.04.28.19.03.51;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.04.19.00.16.23;	author gribble;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	97.04.08.00.02.24;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.04.05.18.27.17;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.02.15.00.33.10;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.02.05.01.39.41;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.11.21.02.35.06;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.10.28.01.14.40;	author gribble;	state Exp;
branches;
next	;

1.7.2.1
date	97.05.08.21.53.00;	author gribble;	state Exp;
branches;
next	;

1.12.4.1
date	97.08.11.04.13.40;	author fox;	state Exp;
branches;
next	;

1.15.2.1
date	97.11.17.22.06.43;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@/*
 * File:          clib.h
 * Purpose:       To define the structures and public functions available
 *                to clients for communicating with the Harvest partitioned
 *                cache.
 * Author:        Steve Gribble
 * Creation Date: September 25th, 1996
*/        

#ifndef CLIB_H
#define CLIB_H

/** XXX - The following really should be taken from autoconf.h **/
typedef unsigned long  clib_u32;
typedef long           clib_s32;

typedef int clib_response;

  /***** Generic success message - operation succeeded *****/
#define  CLIB_OK        0

  /***** Messages pertinent only to Clib_Query() *****/
#define  CLIB_CACHE_HIT  1         /* URL is in the cache */
#define  CLIB_CACHE_MISS 2        /* URL is not in the cache */

  /***** Messages pertinent only to Clib_Initialize() *****/
#define  CLIB_NO_CONFIGFILE 3     /* Couldn't find configuration file */
#define  CLIB_CONFIG_ERROR 4      /* Error occured while reading config file */
#define  CLIB_NO_SERVERS 5        /* Couldn't find any cache servers */

  /***** Generic error messages, could be returned anytime *****/
#define  CLIB_BAD_URL 6           /* URL is ill-formed */
#define  CLIB_BAD_VERSION 7       /* Harvest server is running old/new version */
#define  CLIB_TIMEOUT 8           /* Cache server returned "timeout" error */
#define  CLIB_ACCESS_DENIED 9     /* Denied access to operation */
#define  CLIB_SERVICE_UNAVAIL 10 /* Cache server doesn't support the operation */
#define  CLIB_SERVER_INTERNAL 11   /* Cache server suffered internal error */
#define  CLIB_SERVER_DOWN 12       /* Couldn't connect to the cache server */
#define  CLIB_SERVER_TIMEOUT 13    /* Cache server response itself timed out */
#define  CLIB_NO_FD 14             /* Ran out of file descriptors */
#define  CLIB_NO_SUCH_PART 15      /* No such partition (part_delete) */ 
#define  CLIB_PTHREAD_FAIL 16      /* Generic pthread failure */
#define  CLIB_SOCKETOP_FAIL 17     /* Socket operation (read,write,connect,...) fail */

#ifdef __GNUC__
static const char * clib_error_str[] __attribute__ ((unused)) = {
#else  /* not gcc */
static const char * clib_error_str[] = {
#endif
  "Everything is just fine",
  "Cache hit",
  "Cache miss",
  "Can't find configuration file",
  "Configuration file error",
  "No cache servers available",
  "Bad URL",
  "Cache server says: wrong version",
  "Cache server says: timeout error",
  "Access denied",
  "Cache server says: service unavailable",
  "Cache server says: internal error",
  "Couldn't connect to cache server",
  "Cache server response timed out",
  "Ran out of file descriptors",
  "Part_delete says no such partition!",
  "Generic pthreads failure",
  "Socket operation failed"
};

#define clib_strerror(x) \
        ((x)>=0 && (x)<(int)(sizeof(clib_error_str)/sizeof(const char *)) \
         ? clib_error_str[(x)] : "(Error code out of range)")

#define CLIB_CUTTHROUGH_THRESH ((1<<20)+(1<<19)) /* 1.5 MByte limit */
#define CLIB_CUTTHROUGH 18         /* Cutthrough operation in effect */

typedef struct {
  char          *mime_headers; /* NULL-termed headers associated with data */
  clib_u32       mime_size;    /* size of returned mime headers */
  char          *data;         /* the data itself - may be binary */
  clib_u32       data_size;    /* size of returned data */
  int            fd;           /* cutthrough filedescriptor */
} clib_data;

/*
 * Initialize this client library - read in the config file, attempt to
 * ping all of the the cache servers to ensure that they are alive.
*/

#include "config_tr.h"
#include "libmon.h"
#include "optdb.h"

clib_response Clib_Initialize(Options opts, Monitor *defMon);

/*
 * Query the cache substrate to see if a certain URL is in the cache.
*/

clib_response Clib_Query(char *url);

/*
 * Ask the cache substrate to return a piece of data.  If the data is
 * not in the cache, it will go out and attempt to retrieve it.  Caller
 * is responsible for free'ing the "mime_headers" and "data" fields of
 * the returned_data structure.
 *
 * "url" should be the URL of the requested data, for example:
 *     "http://www.cs.berkeley.edu/~gribble"
 *
 *  A GET request will be issued to retrieve the data.
 *
 * The mime_headers field you pass in should have the double \r\n
 * terminating it.  If mime_headers is NULL, default headers are passed
 * on by the client-side library.
*/

clib_response Clib_Fetch(char *url, char *mime_headers,
			 clib_data *returned_data);

/*
 * Like Clib_Fetch, but follow redirects up to follow_redirects times (if > 0)
 */
clib_response Clib_Redir_Fetch(char *url, char *mime_headers,
			 clib_data *returned_data, int follow_redirects);

/*
 * Hint to the cache substrate that you will soon be asking it to return a 
 * piece of data.  This will cause the cache to make sure that the data is
 * in the cache by fetching it.
 *
 * This takes advantage of the fact that caches will continue to load data
 * from a server even when the client closes it's connection.
 *
 * "url" should be the URL of the requested data, for example:
 *     "http://www.cs.berkeley.edu/~gribble"
 *
 *  A GET request will be issued to retrieve the data.
 *
 * The mime_headers field you pass in should have the double \r\n
 * terminating it.  If mime_headers is NULL, default headers are passed
 * on by the client-side library.
 *
*/

clib_response Clib_Async_Fetch(char *url, char *mime_headers);

/*
 * Ask the cache substrate to post and return a piece of data. 
 * Caller is responsible for free'ing the "mime_headers" and "data" fields 
 * of the returned_data structure.
 *
 * "url" should be the URL of the requested data, for example:
 *     "http://www.cs.berkeley.edu/~gribble"
 *
 *  A POST request will be issued to retrieve the data.
 *
 * The mime_headers field you pass in should have the double \r\n
 * terminating it.  If mime_headers is NULL, default headers are passed on
 * by the client-side library, including a "content-length" header and a
 * content-type header that is constructed for the data.  If mime_headers
 * is not null, make sure the headers have content-length and content-type
 * in them.  The "data" and "data_len" arguments are the data to pass in,
 * and the length of data, respectively.  */

clib_response Clib_Post(char *url, char *mime_headers,
                        char *data, unsigned data_len,
			clib_data *returned_data);

/*
 *  Free the buffers associated with a previous request, if they appear to have
 *  been malloc'd by this library.
 */

void Clib_Free(clib_data *dat);

/*
 * This function is a lower-level version of the Clib_Fetch routine that
 * allows callers to provide all of the data that is to be sent to the
 * harvest partitioned cache, including the mime headers of the request.
 * A block of data is returned, which is simply all of the returned data
 * from the cache (or server if cache miss).
 *
 * The data to be sent will be parsed and an URL extracted, so that the
 * partitioning works properly.
*/

clib_response Clib_Lowlevel_Op(char *indata, unsigned inlen,
			       char **outdata, unsigned *outlen,
			       int *fd);
/* 
 * Given an HTTP/1.x response from a server (presumably returned by
 * Clib_Lowlevel_Op), parse out the headers and content from the
 * response.  Memory will be allocated for the headers and content
 * fields if this routine is successful.  The response headers will
 * be canonicalized - right now this means lines will be forced to
 * terminate with \r\n, not just \n as NCSA/1.4 does.
 *
 * If an error occurs (mainly because of ill-formed data from the server),
 * both *mime_headers and *content_size will be NULL, otherwise
 * *mime_headers will be the newly allocated buffer for mime headers and
 * *mime_size will be the size of the headers (including the \r\n\r\n),
 * and similarly for *content and *content_size.
 *
 * You should pass in "data" and "dlen".  Note that clib_u32 is just
 * unsigned long.
 */

void   get_header_content(char *data, int dlen,
                     char **mime_headers,
                     clib_u32 *mime_size,
                     char **content,
                     clib_u32 *content_size);

/*
 * Force some data into the cache as a particular URL and mime type.
*/

clib_response Clib_Push(char *url, clib_data data);

/*
 * Print out a (helpful?) error message for a given response, prepended
 * with err_str, to stderr.
*/

void Clib_Perror(clib_response response, char *err_str);

#endif
@


1.15
log
@Added Clib_Redir_Fetch
@
text
@d71 1
a71 1
        ((x)>=0 && (x)<(sizeof(clib_error_str)/sizeof(const char *)) \
@


1.15.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@d71 1
a71 1
        ((x)>=0 && (x)<(int)(sizeof(clib_error_str)/sizeof(const char *)) \
@


1.14
log
@Added Clib_Async_fetch to clib.c, clib.h, and to the xs glue.
@
text
@a115 1
 *
d120 6
@


1.13
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d123 21
@


1.12
log
@Toplevel Makefile slimmed down.  lib/ subdir and corresponding install
targets added, to prep for binary dist.  client_lib now has
strerror()-style error reporting.  Fixed bug in dispatch.c that caused
prefs call for an aggregator to coredump (strcpy called on null ptr).
text/html distiller more streamlined and correctly "munges" user prefs
form items.  GetOptions moved from clib to TaccUtils.  perl_stub now
passes arguments named "s11", "i2", etc. instead of "11", "2", etc.
@
text
@a164 1

@


1.12.4.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d165 1
@


1.11
log
@fixed TACCutils bug that sometimes caused next_entity to enter infinite
loop.  beginning frontend cleanup to separate service-specific stuff
from core stuff.  ifdef'd out the instrumentation code in
httpsupport.c:parse_status_and_headers, which was likely causing
segfaults.  removed sbrk() monitoring from thr_mon.c because it was
bogus.  tested the Bypass feature for big pages (it works) and set
bypass threshold to about 1.5MB in clib.h.  monitor window is now
resizable though not all the fields resize intelligently.
@
text
@d45 28
@


1.10
log
@More stuff has changed....cutthrough behaviour for large files is
defined for the cache library.
@
text
@d46 1
a46 1
#define CLIB_CUTTHROUGH_THRESH 10000000
@


1.9
log
@Changed the enum in clib.h to a series of #defines, so that the perl
extension builder automatically makes the values available to perl.
Much work on the perl html munger (using the new lexer): <img> attribute
GMMAGIC is now converted to URL magic in the SRC attribute by the
munger.  MonitorClient_Send and GetOptions are now available to perl
distillers; this required changes to perl_stub and clib.xs.  Bug fix to
tag_from_attribs routine in TACCutils.pm.  Tcl/tk simulator now supports
"reload" and "open", and canvas is resized correctly.  Perl harness now
turns on  perl -w by default.
@
text
@d45 4
d54 1
d135 2
a136 1
			       char **outdata, unsigned *outlen);
@


1.8
log
@distiller chaining is alive sort of
@
text
@d17 1
a17 1
typedef enum {
d20 1
a20 1
  CLIB_OK,
d23 2
a24 2
  CLIB_CACHE_HIT,         /* URL is in the cache */
  CLIB_CACHE_MISS,        /* URL is not in the cache */
d27 3
a29 3
  CLIB_NO_CONFIGFILE,     /* Couldn't find configuration file */
  CLIB_CONFIG_ERROR,      /* Error occured while reading config file */
  CLIB_NO_SERVERS,        /* Couldn't find any cache servers */
d32 12
a43 13
  CLIB_BAD_URL,           /* URL is ill-formed */
  CLIB_BAD_VERSION,       /* Harvest server is running old/new version */
  CLIB_TIMEOUT,           /* Cache server returned "timeout" error */
  CLIB_ACCESS_DENIED,     /* Denied access to operation */
  CLIB_SERVICE_UNAVAIL,   /* Cache server doesn't support the operation */
  CLIB_SERVER_INTERNAL,   /* Cache server suffered internal error */
  CLIB_SERVER_DOWN,       /* Couldn't connect to the cache server */
  CLIB_SERVER_TIMEOUT,    /* Cache server response itself timed out */
  CLIB_NO_FD,             /* Ran out of file descriptors */
  CLIB_NO_SUCH_PART,      /* No such partition (part_delete) */ 
  CLIB_PTHREAD_FAIL,      /* Generic pthread failure */
  CLIB_SOCKETOP_FAIL      /* Socket operation (read,write,connect,...) fail */
} clib_response;
@


1.7
log
@Client lib now uses unified options file.
@
text
@d113 7
@


1.7.2.1
log
@More minor fixes.
@
text
@a112 7
 *  Free the buffers associated with a previous request, if they appear to have
 *  been malloc'd by this library.
 */

void Clib_Free(clib_data *dat);

/*
@


1.6
log
@Canonicalization and Clib_Post now work (I hope).
@
text
@d58 1
d60 1
d62 1
a62 1
clib_response Clib_Initialize(char *configfile, Monitor *defMon);
@


1.5
log
@Added get_header_content
@
text
@d89 22
d128 3
a130 1
 * fields if this routine is successful.
@


1.4
log
@Umm...ok.
@
text
@d102 22
@


1.3
log
@Changed client library interface to accept a preinitialized monitor
object.
@
text
@d79 4
d85 2
a86 1
clib_response Clib_Fetch(char *url, clib_data *returned_data);
@


1.2
log
@Fixed up various sniglets.
@
text
@d58 3
a60 1
clib_response Clib_Initialize(char *configfile);
@


1.1
log
@Changed the directory structure around to match armando/yatin's.
@
text
@d71 6
d80 14
@
