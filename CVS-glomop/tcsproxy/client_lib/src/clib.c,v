head	1.29;
access;
symbols
	Yatin-final:1.28.2.1
	Yatin:1.28.0.2
	pre-yatin-merge:1.28
	transend-beta2:1.25
	fox-dev:1.25
	client_lib-ng:1.24
	transend-beta-latest:1.24
	Aggregators:1.23
	NoAggregators:1.23
	iang:1.20.0.2
	transend-beta:1.19.0.2
	SOSP:1.12
	merged_preintegrate:1.7
	heisenbug:1.7
	PRE_INTEGRATION:1.7;
locks; strict;
comment	@ * @;


1.29
date	98.01.16.22.15.50;	author yatin;	state Exp;
branches;
next	1.28;

1.28
date	97.10.25.22.56.59;	author gribble;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	97.10.18.00.26.47;	author iang;	state Exp;
branches;
next	1.26;

1.26
date	97.09.12.01.57.37;	author gribble;	state Exp;
branches;
next	1.25;

1.25
date	97.07.24.23.37.01;	author gribble;	state Exp;
branches;
next	1.24;

1.24
date	97.06.04.01.28.33;	author gribble;	state Exp;
branches;
next	1.23;

1.23
date	97.05.09.02.01.25;	author gribble;	state Exp;
branches;
next	1.22;

1.22
date	97.05.08.21.47.50;	author fox;	state Exp;
branches;
next	1.21;

1.21
date	97.05.08.21.41.44;	author gribble;	state Exp;
branches;
next	1.20;

1.20
date	97.04.28.19.03.53;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	97.04.19.00.23.41;	author gribble;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	97.04.19.00.16.27;	author gribble;	state Exp;
branches;
next	1.17;

1.17
date	97.04.08.00.02.27;	author gribble;	state Exp;
branches;
next	1.16;

1.16
date	97.04.07.00.41.35;	author gribble;	state Exp;
branches;
next	1.15;

1.15
date	97.04.06.21.28.55;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	97.04.05.18.42.49;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	97.04.05.18.27.21;	author gribble;	state Exp;
branches;
next	1.12;

1.12
date	97.02.15.00.33.12;	author gribble;	state Exp;
branches;
next	1.11;

1.11
date	97.02.14.08.18.03;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.02.05.01.39.43;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.01.29.01.42.51;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.01.28.01.56.32;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	96.12.11.00.18.10;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	96.11.28.14.27.39;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.22.36.41;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.21.40.45;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.11.15.04.48.27;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.02.33.57;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.10.28.01.14.46;	author gribble;	state Exp;
branches;
next	;

1.19.2.1
date	97.05.08.21.40.01;	author gribble;	state Exp;
branches;
next	1.19.2.2;

1.19.2.2
date	97.05.08.21.53.02;	author gribble;	state Exp;
branches;
next	1.19.2.3;

1.19.2.3
date	97.05.09.02.01.56;	author gribble;	state Exp;
branches;
next	;

1.28.2.1
date	97.11.17.22.06.44;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.29
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include "clib.h"
#include "part.h"
#include "utils.h"
#include "icp.h"
#include "libmon.h"
#include "optdb.h"

#define CLIB_UDP_TIMEOUT_SEC  0
#define CLIB_UDP_TIMEOUT_USEC 100000
#define CLIB_UDP_RETRIES      5

extern struct sockaddr *localaddr;
extern int              localaddrlen;
extern ll               config_list;
extern int              num_partitions;

struct timeval query_tv;
int            udp_retries;

Options part_opts;

char  *get_url_from_data(char *indata, int inlen);
char  *canonicalize_headers(char *header_data, int header_len);

clib_response Clib_Initialize(Options opts, Monitor *defMon)
{
  clib_response  presp;
  cfg_nv        *cfg_el;
  ll             tmp;

  part_opts = opts;
  if ((presp = Part_Initialize(opts, defMon)) != CLIB_OK)
    return presp;
  /* Grab retry info out of config file */
  tmp = config_list;
  cfg_el = get_next_matching("cache.udp_retries", &tmp);
  if (tmp == NULL)
    udp_retries = CLIB_UDP_RETRIES;
  else {
    if (sscanf(cfg_el->value, "%d", &udp_retries) != 1)
      udp_retries = CLIB_UDP_RETRIES;
  }

  tmp = config_list;
  cfg_el = get_next_matching("cache.udp_timeout_sec", &tmp);
  if (tmp == NULL)
    query_tv.tv_sec = CLIB_UDP_TIMEOUT_SEC;
  else {
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_sec)) != 1)
      query_tv.tv_sec = CLIB_UDP_TIMEOUT_SEC;
  }

  tmp = config_list;
  cfg_el = get_next_matching("cache.udp_timeout_usec", &tmp);
  if (tmp == NULL)
    query_tv.tv_usec = CLIB_UDP_TIMEOUT_USEC;
  else {
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_usec)) != 1)
      query_tv.tv_usec = CLIB_UDP_TIMEOUT_USEC;
  }

  return CLIB_OK;
}

clib_response Clib_Query(char *url)
{
  clib_response  resp = CLIB_OK, presp;
  int            tries, num_ready = 0, fd, iresp;
  fd_set         fdset;
  icp_message_t  message_obj;

  if ((presp = Part_GetUDPsock(url, &fd)) != CLIB_OK)
    return presp;

  FD_ZERO(&fdset);
  for (tries=0; tries < udp_retries; tries++) {
    if (do_icp_query(fd, url, *((struct in_addr *) &localaddr), 1) <= 0) {
      Part_HandleFailure(fd);
      close(fd);
      if (num_partitions == 0)
	return CLIB_SOCKETOP_FAIL;
      else
	return Clib_Query(url);
    }
    FD_SET(fd, &fdset);
    num_ready = select(fd+1, &fdset, NULL, NULL, &query_tv);
    if (num_ready < 0) {
      Part_HandleFailure(fd);
      close(fd);
      if (num_partitions == 0)
	return CLIB_SOCKETOP_FAIL;
      else
	return Clib_Query(url);
    }
    if (num_ready > 0)
      break;
  }
  if (num_ready <= 0) {
    Part_HandleFailure(fd);
    close(fd);
    if (num_partitions == 0)
      return CLIB_SERVER_TIMEOUT;
    return Clib_Query(url);
  }

  iresp = do_icp_udp_receive(fd, &message_obj);
  close(fd);
  if (message_obj.header.opcode == ICP_OP_HIT) {
    free(message_obj.op.hit.h_url);
    return CLIB_CACHE_HIT;
  } else if (message_obj.header.opcode == ICP_OP_MISS) {
    free(message_obj.op.miss.m_url);
    return CLIB_CACHE_MISS;
  } else if (message_obj.header.opcode == ICP_OP_INVALID) {
    return CLIB_BAD_URL;
  } else {
    return CLIB_SERVER_INTERNAL;
  }
  return resp;
}

clib_response Clib_Fetch(char *url, char *mime_headers,
			 clib_data *returned_data)
{
  int            iresp, fd;
  unsigned int   dlen;
  clib_response  presp;
  char          *data = NULL;

  returned_data->fd = -1;

  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;

  if ((iresp = do_http_send(fd, url, mime_headers, 
			    NULL, 0, 1, ICP_GET)) != 1) {
    Part_HandleFailure(fd);
    close(fd);
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Fetch(url, mime_headers, returned_data);
  }

  if ((iresp = do_http_receive(fd, &dlen, &data)) != 0) {

    if (iresp == -2) {
      /* Cutthrough! */
      returned_data->mime_headers = NULL;
      returned_data->mime_size = 0;
      returned_data->data = data;
      returned_data->data_size = dlen;
      returned_data->fd = fd;
      return CLIB_CUTTHROUGH;
    }

    Part_HandleFailure(fd);
    close(fd);
    if (data != NULL) {
      free(data);
      data = NULL;
    }
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Fetch(url, mime_headers, returned_data);
  }

  /* Parse out the header and content from the return data */
  get_header_content(data, dlen,
		     &(returned_data->mime_headers),
		     &(returned_data->mime_size),
		     &(returned_data->data),
		     &(returned_data->data_size));
  if ((returned_data->data == NULL) || (returned_data->mime_headers == NULL)) {
    close(fd);
    if (data)
      free(data);
    return CLIB_SERVER_DOWN;
  }
  close(fd);
  if (data)
   free(data);
  return CLIB_OK;
}

clib_response Clib_Redir_Fetch(char *url, char *mime_headers,
			    clib_data *returned_data, int follow_redirects)
{
    char *theurl = NULL;
    int done = 0;
    clib_response ret = CLIB_SERVER_INTERNAL;

    if (follow_redirects <= 0) {
	return Clib_Fetch(url, mime_headers, returned_data);
    }
    theurl = strdup(url);
    assert(theurl);
    returned_data->mime_headers = NULL;
    returned_data->data = NULL;
    while(!done && follow_redirects--) {
	char *hp;
	clib_u32 hl;

	/* Fetch the page */
	free(returned_data->mime_headers);
	free(returned_data->data);
	ret = Clib_Fetch(theurl, mime_headers, returned_data);
	if (ret != CLIB_OK) {
	    return ret;
	}

	/* Check returned_data->mime_headers for a redirect code */
	hp = returned_data->mime_headers;
	while(hp && *hp && *hp != ' ' && *hp != '\n') ++hp;
	if (!hp || *hp != ' ' || *(hp+1) != '3') {
	    /* It wasn't a redirect */
	    return ret;
	}

	/* OK, we got a redirect.  To where? */
	done = 1;
	hp = returned_data->mime_headers;
	hl = returned_data->mime_size;
	while(*hp && hl) {
	    if (*hp == '\n' && hl >= 10 &&
		!strncasecmp(hp+1, "location: ", 10)) {
		char *locstart;
		hp += 10;
		hl -= 10;
		locstart = hp;
		while(*hp && hl) {
		    if (*hp == '\r' || *hp == '\n') break;
		    ++hp;
		    --hl;
		}
		free(theurl);
		theurl = malloc(hp-locstart+1);
		assert(theurl);
		memmove(theurl, locstart, hp-locstart);
		theurl[hp-locstart] = '\0';
		done = 0;
		break;
	    }
	    ++hp;
	    --hl;
	}
    }
    return ret;
}

clib_response Clib_Async_Fetch(char *url, char *mime_headers)
{
  int            iresp, fd;
  clib_response  presp;

  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;

  if ((iresp = do_http_send(fd, url, mime_headers, 
			    NULL, 0, 1, ICP_GET)) != 1) {
    Part_HandleFailure(fd);
    close(fd);
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Async_Fetch(url, mime_headers);
  }
  close(fd);
  return CLIB_OK;
}

clib_response Clib_Post(char *url, char *mime_headers,
                        char *data, unsigned data_len,
			clib_data *returned_data)
{
  int            iresp, fd;
  unsigned int   dlen;
  clib_response  presp;
  char          *cpdata = NULL;

  returned_data->fd = -1;
  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;
  if ((iresp = do_http_send(fd, url, mime_headers, 
			    data, data_len, 1, ICP_POST)) != 1) {
    Part_HandleFailure(fd);
    close(fd);
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Post(url, mime_headers, data, data_len, returned_data);
  }

  if ((iresp = do_http_receive(fd, &dlen, &cpdata)) != 0) {

    if (iresp == -2) {
      /* Cutthrough! */
      returned_data->mime_headers = NULL;
      returned_data->mime_size = 0;
      returned_data->data = cpdata;
      returned_data->data_size = dlen;
      returned_data->fd = fd;
      return CLIB_CUTTHROUGH;
    }

    Part_HandleFailure(fd);
    close(fd);
    if (cpdata != NULL) {
      free(cpdata);
      cpdata = NULL;
    }
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Post(url, mime_headers, data, data_len, returned_data);
  }

  /* Parse out the header and content from the return data */
  get_header_content(cpdata, dlen,
		     &(returned_data->mime_headers),
		     &(returned_data->mime_size),
		     &(returned_data->data),
		     &(returned_data->data_size));
  if ((returned_data->data == NULL) || (returned_data->mime_headers == NULL)) {
    close(fd);
    if (cpdata)
      free(cpdata);
    return CLIB_SERVER_DOWN;
  }
  close(fd);
  if (cpdata)
   free(cpdata);
  return CLIB_OK;
}

clib_response Clib_Lowlevel_Op(char *indata, unsigned inlen,
			       char **outdata, unsigned *outlen,
			       int *fd)
{
  int            iresp, fud, rv;
  clib_response  presp;
  char *url;

  *outdata = NULL;
  *outlen = 0;

  url = get_url_from_data(indata, inlen);
  if (url == NULL) {
    *outdata = NULL;
    return CLIB_SERVER_DOWN;
  }

  if ((presp = Part_GetTCPsock(url, &fud)) != CLIB_OK) {
    free(url);
    return presp;
  }
  free(url);

  *outdata = NULL;
  if ((rv = correct_write(fud, indata, inlen)) != inlen) {
    Part_HandleFailure(fud);
    close(fud);
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Lowlevel_Op(indata, inlen, outdata, outlen, fd);
  }

  *outdata = NULL;
  *outlen = 0;
  if ((iresp = do_http_receive(fud, (unsigned *) outlen, outdata)) != 0) {

    if (iresp == -2) {
      /* Cutthrough! */
      *fd = fud;
      return CLIB_CUTTHROUGH;
    }

    Part_HandleFailure(fud);
    close(fud);
    if (*outdata != NULL) {
      free(*outdata);
      *outlen = 0;
      *outdata = NULL;
    }
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else 
      return Clib_Lowlevel_Op(indata, inlen, outdata, outlen, fd);
  }

  close(fud);
  return CLIB_OK;
}

clib_response Clib_Push(char *url, clib_data data)
{
  clib_response presp;
  int           putresp, fd;

  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK)
    return presp;

  putresp = do_http_put(fd, url, data.mime_headers, data.mime_size, data.data, data.data_size);
  if (putresp <= 0) {
    Part_HandleFailure(fd);
    close(fd);
    if (num_partitions == 0)
      return CLIB_SERVER_DOWN;
    else
      return Clib_Push(url, data);
  }

  close(fd);
  return CLIB_OK;
}

void Clib_Perror(clib_response response, char *err_str)
{
  switch(response) {
  case CLIB_OK:
    fprintf(stderr, "%s: everything is just fine.\n", err_str);
    break;

  case CLIB_CACHE_HIT:
    fprintf(stderr, "%s: cache hit\n", err_str);
    break;
  case CLIB_CACHE_MISS:
    fprintf(stderr, "%s: cache miss\n", err_str);
    break;         /* URL is not in the cache */

  case CLIB_NO_CONFIGFILE:
    fprintf(stderr, "%s: couldn't find configuration file\n", err_str);
    break;
  case CLIB_CONFIG_ERROR:
    fprintf(stderr, "%s: error while reading configuration file\n", err_str);
    break; 
  case CLIB_NO_SERVERS:
    fprintf(stderr, "%s: couldn't find any cache partitions\n", err_str);
    break;

  case CLIB_BAD_URL:
    fprintf(stderr, "%s: ill-formed URL\n", err_str);
    break;
  case CLIB_BAD_VERSION:
    fprintf(stderr, "%s: harvest partition version not same as clib\n",
	    err_str);
    break;
  case CLIB_TIMEOUT:
    fprintf(stderr,
	    "%s: harvest partition timed out talking to a web server\n",
	    err_str);
    break;
  case CLIB_ACCESS_DENIED:
    fprintf(stderr, "%s: harvest partition denied us access\n", err_str);
    break;
  case CLIB_SERVICE_UNAVAIL:
    fprintf(stderr, "%s: harvest partition doesn't support the operation\n",
	    err_str);
    break;
  case CLIB_SERVER_INTERNAL:
    fprintf(stderr, "%s: harvest partition suffered internal error\n",
	    err_str);
    break;
  case CLIB_SERVER_DOWN:
    fprintf(stderr, "%s: couldn't connect to any cache server\n",
	    err_str);
    break;
  case CLIB_SERVER_TIMEOUT:
    fprintf(stderr, "%s: we timed out talking to the harvest partition\n",
	    err_str);
    break;
  case CLIB_NO_FD:
    fprintf(stderr, "%s: no more file descriptors\n", err_str);
    break;
  case CLIB_NO_SUCH_PART:
    fprintf(stderr, "%s: no such partition (part_delete)\n", err_str);
    break;
  case CLIB_PTHREAD_FAIL:
    fprintf(stderr, "%s: pthread failure\n", err_str);
    break;
  case CLIB_SOCKETOP_FAIL:
    fprintf(stderr, "%s: a socket operation failed\n", err_str);
    break;
  default:
    fprintf(stderr, "%s: (unrecognized error)\n", err_str);
    break;
  }
}

void   get_header_content(char *data, int dlen,
		     char **mime_headers,
		     clib_u32 *mime_size,
		     char **content,
		     clib_u32 *content_size)
{
  /* Our task is simple - run through the data, looking for CRLFCRLF,
     CRCR, or LFLF.  We know the request was HTTP/1.0 or greater, so
     this pair will definitely happen before the data proper */
  char *cr, *lf, *crsplit = NULL, *lfsplit = NULL, *split = NULL;
  int   charsleft;

  crsplit = data;
  while ((crsplit-data) < dlen) {
    /* Get ready to try CRCR and CRLFCRLF */
    cr = (char *) memchr((void *) crsplit, 0x0D, dlen - (crsplit-data));
    if (cr  == NULL)
      break;

    charsleft = dlen - ((int) (cr-data)) - 1;
    crsplit = cr+1;

    /* Try for crcr */
    if (charsleft > 0) {
      if (*(cr+1) == 0x0D) {
	split = cr + 2;
	break;
      }
    } else {
      break;
    }

    /* Try for crlfcrlf */
    if ((split == NULL) && (charsleft >= 3)) {
      if ( (*(cr+1) == 0x0A) &&
	   (*(cr+2) == 0x0D) &&
	   (*(cr+3) == 0x0A)) {
	split = cr + 4;
	break;
      }
    } else {
      break;
    }
  }
  crsplit = split;

  lfsplit = data;
  split = NULL;
  while ((lfsplit-data) < dlen) {
    /* Last ditch attempt for LFLF */
    lf = (char *) memchr((void *) lfsplit, 0x0A, dlen - (lfsplit-data));
    if (lf == NULL)
      break;

    charsleft = dlen - ((int) (lf-data)) - 1;
    lfsplit = lf+1;

    if (charsleft > 0) {
      if ( *(lf+1) == 0x0A ) {
	split = lf + 2;
	break;
      }
    } else
      break;
  }
  lfsplit = split;

  if ((lfsplit == NULL) && (crsplit == NULL)) {
    *mime_headers = *content = NULL;
    *mime_size = *content_size = 0;
    return;
  }
  if (lfsplit > crsplit) {
    if (crsplit == NULL)
      split = lfsplit;
    else
      split = crsplit;
  }
  if (crsplit >= lfsplit) {
    if (lfsplit == NULL)
      split = crsplit;
    else
      split = lfsplit;
  }

  /* OK - We'd better have a sensible split now */
  if ((split - data) > dlen) {
    *mime_headers = *content = NULL;
    *mime_size = *content_size = 0;
    return;
  }

  /* Good. We have a split point.  Allocate space for header and content,
     and copy it in. */
  *mime_size = (clib_u32) (split - data);
  *content_size = (clib_u32) dlen - *mime_size;
  *content = (char *) malloc(*content_size + 1);
  *mime_headers = canonicalize_headers(data, *mime_size);
  *mime_size = strlen(*mime_headers);

  if ((*mime_headers == NULL) || (*content == NULL)) {
    if (*mime_headers != NULL) {
      free(*mime_headers);
      *mime_headers = NULL;
    }
    if (*content != NULL) {
      *content = NULL;
      free(*content);
    }
    *mime_size = *content_size = 0;
    return;
  }
  memcpy((void *) *content, split, *content_size);
  *(*content + *content_size) = '\0';
}

char  *get_url_from_data(char *indata, int inlen)
{
  char *start, *end, *buf;
  int   buflen;

  if ((start = strchr(indata, ' ')) == NULL)
    return NULL;

  start++;
  if ((end = strchr(start, ' ')) == NULL)
    return NULL;

  buflen = (int) (end - start) + 1;
  buf = (char *) malloc(sizeof(char) * buflen);
  if (buf == NULL) {
    fprintf(stderr, "Out of memory in get_url_from_data\n");
    exit(1);
  }
  memcpy(buf, start, buflen-1);
  *(buf + (buflen-1)) = '\0';
  return buf;
}

char  *canonicalize_headers(char *header_data, int header_len)
{
  /* Memory is (relatively) cheap, so we'll be nasty and just allocate
     twice of what we'd normally need, to ensure the canonicalization
     works.  This is not so bad, I think. */

  char *ret_hdr, *curpos, *bufpos;

  ret_hdr = (char *) malloc((sizeof(char)*2*header_len)+1);
  if (ret_hdr == NULL)
    return NULL;

  /* Now swing through the headers, line by line, and canonicalize that
     puppy.  Strategy:  scan through looking for either \r or \n;  copy
     everything up to that, then replace as many \r or \n 's that appear
     with a single \r\n.  Then, append one more to very end to get
     header termination. */

  curpos = header_data;
  bufpos = ret_hdr;
  while ( (curpos - header_data) < header_len) {
    if ((*curpos == '\r') || (*curpos == '\n')) {
      /* Aha - let's ignore all of this crazy stuff... */
      while ( (curpos - header_data < header_len) &&
	      ((*curpos == '\r') || (*curpos == '\n')) )
	curpos++;
      *bufpos = '\r';  bufpos++;
      *bufpos = '\n';  bufpos++;
    } else {
      /* Regular old character - just copy in. */
      *bufpos = *curpos;
      curpos++;
      bufpos++;
    }
  }
  *bufpos = '\r'; bufpos++;
  *bufpos = '\n'; bufpos++;
  *bufpos = '\0';
  return ret_hdr;
}

void
Clib_Free(clib_data *dat)
{
  if ((dat->mime_headers) && (dat->mime_size != 0)) {
    FREE(dat->mime_headers);
    dat->mime_headers = NULL;
  }
  if ((dat->data) && (dat->data_size != 0)) {
    FREE(dat->data);
    dat->data = NULL;
  }
}
@


1.28
log
@Clib_Push from PERL works - was XS lossage.
@
text
@d93 1
a93 1
    num_ready = select(FD_SETSIZE, &fdset, NULL, NULL, &query_tv);
@


1.28.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@d93 1
a93 1
    num_ready = select(fd+1, &fdset, NULL, NULL, &query_tv);
@


1.27
log
@Added Clib_Redir_Fetch
@
text
@d408 1
a408 1
  
@


1.26
log
@Added Clib_Async_fetch to clib.c, clib.h, and to the xs glue.
@
text
@d194 65
@


1.25
log
@More stuff has changed....cutthrough behaviour for large files is
defined for the cache library.
@
text
@d194 21
@


1.24
log
@Merged transend branch into main trunk.
@
text
@d137 2
d153 11
d203 1
d217 11
d259 2
a260 1
			       char **outdata, unsigned *outlen)
d262 1
a262 1
  int            iresp, fd, rv;
d266 3
d275 1
a275 1
  if ((presp = Part_GetTCPsock(url, &fd)) != CLIB_OK) {
d282 3
a284 3
  if ((rv = correct_write(fd, indata, inlen)) != inlen) {
    Part_HandleFailure(fd);
    close(fd);
d288 1
a288 1
      return Clib_Lowlevel_Op(indata, inlen, outdata, outlen);
d293 10
a302 3
  if ((iresp = do_http_receive(fd, (unsigned *) outlen, outdata)) != 0) {
    Part_HandleFailure(fd);
    close(fd);
d311 1
a311 1
      return Clib_Lowlevel_Op(indata, inlen, outdata, outlen);
d314 1
a314 1
  close(fd);
@


1.23
log
@clib.c bug - didn't close a socket.
@
text
@a191 1

@


1.22
log
@added Clib_Free
@
text
@d301 1
@


1.21
log
@do_hppt put now takes mime header len
@
text
@d557 12
@


1.20
log
@distiller chaining is alive sort of
@
text
@a233 12
void Clib_Free(clib_data *dat)
{
  if ((dat->mime_headers) && (dat->mime_size != 0)) {
    FREE(dat->mime_headers);
    dat->mime_headers = NULL;
  }
  if ((dat->data) && (dat->data_size != 0)) {
    FREE(dat->data);
    dat->data = NULL;
  }
}

d291 1
a291 1
  putresp = do_http_put(fd, url, data.mime_headers, data.data, data.data_size);
@


1.19
log
@Fixed UMR.
@
text
@d234 12
@


1.19.2.1
log
@More minor fixes - passed in metadata len to do_http_put
@
text
@d291 1
a291 1
  putresp = do_http_put(fd, url, data.mime_headers, data.mime_size, data.data, data.data_size);
@


1.19.2.2
log
@More minor fixes.
@
text
@a556 12
void
Clib_Free(clib_data *dat)
{
  if ((dat->mime_headers) && (dat->mime_size != 0)) {
    FREE(dat->mime_headers);
    dat->mime_headers = NULL;
  }
  if ((dat->data) && (dat->data_size != 0)) {
    FREE(dat->data);
    dat->data = NULL;
  }
}
@


1.19.2.3
log
@Modified so that now clib.c closes the socket.
@
text
@a300 1
  close(fd);
@


1.18
log
@Client lib now uses unified options file.
@
text
@d539 2
a540 2
      while ( ((*curpos == '\r') || (*curpos == '\n')) &&
	      (curpos - header_data < header_len))
@


1.17
log
@Canonicalization and Clib_Post now work (I hope).
@
text
@d13 1
d27 1
a27 1
char   *configfilename;
d32 1
a32 1
clib_response Clib_Initialize(char *configfile, Monitor *defMon)
d38 2
a39 10
  /* just don't ask. */
  configfilename = (char *) malloc(sizeof(char)*(strlen(configfile)+1));
  if (configfilename == NULL) {
    fprintf(stderr, "Out of memory in Clib_Initialize\n");
    exit(1);
  }
  *configfilename = '\0';
  strcat(configfilename, configfile);

  if ((presp = Part_Initialize(configfile, defMon)) != CLIB_OK)
d43 1
a43 1
  cfg_el = get_next_matching("udp_retries", &tmp);
d52 1
a52 1
  cfg_el = get_next_matching("udp_timeout_sec", &tmp);
d61 1
a61 1
  cfg_el = get_next_matching("udp_timeout_usec", &tmp);
d135 1
a135 1
  char          *data;
d153 4
d188 1
a188 1
  char          *cpdata;
d206 4
@


1.16
log
@Oops.
@
text
@d29 1
d147 2
a148 1
  if ((iresp = do_http_send(fd, url, mime_headers, 1, ICP_GET)) != 1) {
d184 49
a471 1
  *mime_headers = (char *) malloc(*mime_size + 1);
d473 3
a487 2
  memcpy((void *) *mime_headers, data, *mime_size);
  *(*mime_headers + *mime_size) = '\0';
d514 42
@


1.15
log
@Fixed typo.
@
text
@d212 1
a212 1
  outlen = 0;
d218 1
a218 1
      outlen = 0;
@


1.14
log
@Fixed memory leak.
@
text
@d216 1
a216 1
    if (*outlen != NULL) {
@


1.13
log
@Added get_header_content
@
text
@d200 2
a201 1
  
d211 2
d216 5
d223 1
a223 1
    else
@


1.12
log
@Umm...ok.
@
text
@a28 5
void   get_header_content(char *data, int dlen,
		     char **mime_headers,
		     clib_u32 *mime_size,
		     char **content,
		     clib_u32 *content_size);
@


1.11
log
@Fixed minibuglet
@
text
@d140 2
a141 1
clib_response Clib_Fetch(char *url, clib_data *returned_data)
d151 1
a151 1
  if ((iresp = do_http_send(fd, url, NULL, 1, ICP_GET)) != 1) {
d157 1
a157 1
      return Clib_Fetch(url, returned_data);
d166 1
a166 1
      return Clib_Fetch(url, returned_data);
@


1.10
log
@Changed client library interface to accept a preinitialized monitor
object.
@
text
@d340 1
a340 1
    charsleft = dlen - ((int) (cr-crsplit)) - 1;
d375 1
a375 1
    charsleft = dlen - ((int) (lf-lfsplit)) - 1;
@


1.9
log
@fixed slight bug in clib.c's analysis of data back from HTTP server;  now
returns error code in an error condition whereas before it just returned
NULL data.
@
text
@d12 1
d35 1
a35 1
clib_response Clib_Initialize(char *configfile)
d50 1
a50 1
  if ((presp = Part_Initialize(configfile)) != CLIB_OK)
@


1.8
log
@cool!  partitioning scheme adapts as partitions die, and when you send
any component using the client library a SIGUSR1, it rereads the partition
list and assumes the partitioning is back to normal.
@
text
@d173 6
@


1.7
log
@Found memory leak in Clib_Fetch; fixed.
@
text
@d3 1
d20 1
d25 2
d39 10
a48 1
  
d95 1
d97 4
a100 1
      return CLIB_SOCKETOP_FAIL;
d105 1
d107 4
a110 1
      return CLIB_SOCKETOP_FAIL;
d116 1
d118 3
a120 1
    return CLIB_SERVER_TIMEOUT;
d150 1
d152 4
a155 1
    return CLIB_SERVER_DOWN;
d159 1
d161 4
a164 1
    return CLIB_SERVER_DOWN;
d199 1
d201 4
a204 1
    return CLIB_SERVER_DOWN;
d208 1
d210 4
a213 1
    return CLIB_SERVER_DOWN;
d230 1
d232 4
a235 1
    return CLIB_SERVER_DOWN;
@


1.6
log
@Hack hack hack...fixed lots of small buglets..
@
text
@d142 2
@


1.5
log
@Fixed snafu if broken connection in mid-parse.
@
text
@d164 1
a164 1
  if ((rv = write(fd, indata, inlen)) != inlen) {
@


1.4
log
@Added utils to library.
@
text
@d153 5
@


1.3
log
@Woohoo!  Got the partition front end working, fixed a few bugs here and
there.
@
text
@d53 1
a53 1
    if (sscanf(cfg_el->value, "%lu", &(query_tv.tv_sec)) != 1)
d62 1
a62 1
    if (sscanf(cfg_el->value, "%lu", &(query_tv.tv_usec)) != 1)
@


1.2
log
@Making partitioned harvest frontend
@
text
@d53 1
a53 1
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_sec)) != 1)
d62 1
a62 1
    if (sscanf(cfg_el->value, "%u", &(query_tv.tv_usec)) != 1)
@


1.1
log
@Changed the directory structure around to match armando/yatin's.
@
text
@d23 1
d145 28
d379 4
d384 17
@
