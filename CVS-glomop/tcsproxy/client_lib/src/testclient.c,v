head	1.10;
access;
symbols
	Yatin-final:1.10
	Yatin:1.10.0.2
	pre-yatin-merge:1.10
	transend-beta2:1.9
	fox-dev:1.9
	client_lib-ng:1.9
	transend-beta-latest:1.9
	Aggregators:1.9
	NoAggregators:1.9
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.5
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@ * @;


1.10
date	97.09.12.01.57.38;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.05.08.21.41.46;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.04.20.22.58.01;	author gribble;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	97.04.19.00.16.29;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.04.08.00.02.29;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.02.15.00.33.14;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.02.08.02.27.35;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.02.05.01.39.44;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.11.28.14.27.40;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.10.28.01.14.49;	author gribble;	state Exp;
branches;
next	;

1.8.2.1
date	97.05.08.21.40.04;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Added Clib_Async_fetch to clib.c, clib.h, and to the xs glue.
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <netdb.h>
#include <errno.h>
#include <unistd.h>

#include "clib.h"
#include "icp.h"
#include "utils.h"
#include "utils.h"
#include "part.h"
#include "libmon.h"

#include "../../config_tr.h"
#include "optdb.h"

extern struct sockaddr *localaddr;
Monitor *gMon = NULL;

char defaulturl[] = "http://www.cs.berkeley.edu/";

int do_proper_read(int tcp_fd, char *buff, size_t size);

int main(int argc, char **argv)
{
  clib_data           returned_data, put_data;
  char                *url = defaulturl;
  char                srv1[2048], srv2[2048];
  char                url1[2048], url2[2048], urlfin[4096];
  clib_response       clresp, clresp1;

  Options             myOpt;

  if (argc == 2) {
    url = argv[1];
  }

  if (Options_New(&myOpt, "gm_options.testclient") != success) {
    fprintf(stderr, "Options_New failed.\n");
    exit(1);
  }
  Clib_Initialize(myOpt, NULL);

  clresp = Clib_Async_Fetch(url, NULL);

  exit(0);

/*  clresp = Clib_Post("http://www.matisse.net/cgi-bin/test",
		     NULL, "test", 4, &returned_data);
  printf("(%lu):%s\n(%lu):%s\n", returned_data.mime_size,
	 returned_data.mime_headers, returned_data.data_size,
	 returned_data.data);
  sleep(2);
  clresp = Clib_Query(url);
  Clib_Perror(clresp, "Query");
  clresp = Clib_Fetch(url, NULL, &returned_data);
  Clib_Perror(clresp, "Fetch");
  printf("(%lu):%s\n(%lu):%s\n", returned_data.mime_size,
	 returned_data.mime_headers, returned_data.data_size,
	 returned_data.data);*/

  /* Go out and fetch an URL/IP */
  printf("Enter hostname of real server: ");
  scanf("%s", srv1);
  printf("Enter URL of real data: ");
  scanf("%s", url1);
  printf("Enter hostname of duped server: ");
  scanf("%s", srv2);
  printf("Enter URL of duped data: ");
  scanf("%s", url2);

  sprintf(urlfin, "http://%s%s", srv1, url1);
  clresp1 = Clib_Fetch(urlfin, NULL, &returned_data);
  if (clresp1 != CLIB_OK) {
    fprintf(stderr, "Fetch of real data failed.\n");
    Clib_Perror(clresp1, "Fetch real");
    exit(1);
  }
  
  sprintf(urlfin, "http://%s%s", srv2, url2);
  put_data.mime_headers = returned_data.mime_headers;
  put_data.mime_size = returned_data.mime_size;  /* Isn't looked at on PUT */
  put_data.data = returned_data.data;
  put_data.data_size = returned_data.data_size;
  clresp = Clib_Push(urlfin, put_data);
  Clib_Perror(clresp, "Push");
  free(returned_data.mime_headers);
  free(returned_data.data);

  exit(0);
}

/****
**  This function will perform a blocking read of exactly size bytes from the
**  stream-oriented file descriptor, or will fail.  It returns the number of bytes
**  read, 0 for end-of-file, or -1 for error.
****/

int do_proper_read(int tcp_fd, char *buff, size_t size)
{
  int result, num_so_far = 0;

  while (num_so_far != size) {
    result = read(tcp_fd, buff + (unsigned) num_so_far, size-num_so_far);
    if (result < 0) {
       perror("do_proper_read: ");
    }
    if (result < 0) 
      return result;
    num_so_far += result;
    if (result == 0)
      return num_so_far;
  }

#if 0
  {
    int i, j;

    for (i=0; i<num_so_far/5; i++) {
      for (j=0; j<5; j++) {
	printf("%.02x ", *((unsigned char *) (buff + (unsigned) (5*i+j))));
      }
      printf("\n");
    }
    if ((num_so_far/5)*5 != num_so_far) {
      for (j=0; j<num_so_far % 5; j++)
	printf("%.02x ", *((unsigned char *) (buff + (unsigned) (5 * (num_so_far/5) + j))));
      printf("\n");
    }
  }
#endif
  return num_so_far;
}

@


1.9
log
@do_hppt put now takes mime header len
@
text
@d46 4
@


1.8
log
@Some minor changes to get testclient working.
@
text
@d46 1
a46 1
  clresp = Clib_Post("http://www.matisse.net/cgi-bin/test",
d58 1
a58 1
	 returned_data.data);
@


1.8.2.1
log
@More minor fixes - passed in metadata len to do_http_put
@
text
@d46 1
a46 1
/*  clresp = Clib_Post("http://www.matisse.net/cgi-bin/test",
d58 1
a58 1
	 returned_data.data);*/
@


1.7
log
@Client lib now uses unified options file.
@
text
@d16 3
a23 2
int get_data(char *host, char *port, char *url, char **header, char **body,
	     int *bdlen);
a29 3
  char                *header1 = NULL, *body1 = NULL;
  char                *header2 = NULL, *body2 = NULL;
  int                 bdlen1, bdlen2;
d32 3
a34 1
  clib_response       clresp;
d40 5
a44 1
  Clib_Initialize("part.config", NULL);
d51 1
a51 1
  sleep(5);
d69 8
a77 2
  get_data(srv1, "80", url1, &header1, &body1, &bdlen1);
  get_data(srv2, "80", url2, &header2, &body2, &bdlen2);
d79 4
a82 4
  put_data.mime_headers = header1;
  put_data.mime_size = 0;  /* Isn't looked at on PUT */
  put_data.data = body1;
  put_data.data_size = bdlen1;
d85 2
a88 94
}

int get_data(char *host, char *port, char *url, char **header, char **body, 
	     int *bdlen)
{
  int                 tcp_fd, totbodylen=0, totheaderlen=0, tlen;
  int                 on_body = 0;
  struct sockaddr_in  to_addr;
  struct sockaddr_in  from_addr;
  struct protoent     *tcp_proto;
  char                superbuf[4096];

  *header = *body = NULL;

  make_inetaddr(host, port, &to_addr);
  from_addr.sin_family = AF_INET;
  from_addr.sin_addr.s_addr = inet_addr("0.0.0.0");
  from_addr.sin_port = htons(0);

  tcp_proto = getprotobyname("tcp");
  if (tcp_proto == NULL) {
    perror("getprotobyname(\"tcp\") failed: ");
    exit(1);
  }

  tcp_fd = socket(PF_INET, SOCK_STREAM, tcp_proto->p_proto);
  if (tcp_fd < 0) {
    perror("(tcp!) socket failed: ");
    exit(1);
  }

  if (bind(tcp_fd, (struct sockaddr *) &from_addr, sizeof(from_addr)) < 0) {
    perror("(tcp!) bind failed: ");
    exit(1);
  }

  if (connect(tcp_fd, (struct sockaddr *) &to_addr, sizeof(to_addr)) < 0) {
    perror("(tcp!) connect failed: ");
    exit(1);
  }

  correct_write(tcp_fd, "GET ", 4);
  correct_write(tcp_fd, url, strlen(url));
  correct_write(tcp_fd, " HTTP/1.0\r\n\r\n", strlen(" HTTP/1.0\r\n\r\n"));

  while(1) {
    int nextlen;
    char *swappo;

    if ((nextlen = do_proper_read(tcp_fd, superbuf, 4096)) <= 0) {
      /* done reading */
      close(tcp_fd);
      return 1;
    }
    if (on_body == 0) {
      swappo = realloc(*header, totheaderlen+nextlen+1);
      if (swappo == NULL)
	exit(1);
      *header = swappo;
      memcpy(*header+totheaderlen, superbuf, nextlen);
      totheaderlen += nextlen;

      if ((swappo = strstr(*header, "\r\n\r\n")) != NULL)
	tlen = 4;
      else if ((swappo = strstr(*header, "\n\n")) != NULL)
	tlen = 2;
      else if ((swappo = strstr(*header, "\r\n\n")) != NULL)
	tlen = 3;

      if (swappo != NULL) {
	char bup;

	on_body = 1;
	bup = 	*(swappo + (unsigned) (tlen-1));
	*(swappo + (unsigned) (tlen-1)) = '\0';
	totbodylen = totheaderlen - strlen(*header) - 1;
	*body = malloc(totbodylen);
	if (*body == NULL)
	  exit(1);
	memcpy(*body, swappo+tlen, totbodylen);
	totheaderlen = strlen(*header) + 1;
	*(swappo + (unsigned) (tlen-1)) = bup;
	*(swappo + (unsigned) (tlen)) = '\0';
      }
    } else {
      swappo = realloc(*body, totbodylen+nextlen+1);
      if (swappo == NULL)
	exit(1);
      *body = swappo;
      memcpy(*body+totbodylen, superbuf, nextlen);
      totbodylen += nextlen;
      *bdlen = totbodylen;
    }
  }
@


1.6
log
@Canonicalization and Clib_Post now work (I hope).
@
text
@a11 1
#include "configure.h"
a15 1
extern ll config_list;
@


1.5
log
@Umm...ok.
@
text
@d44 6
@


1.4
log
@Stripped "extern int errno" out of much code - left it to errno.h
@
text
@d46 1
a46 1
  clresp = Clib_Fetch(url, &returned_data);
@


1.3
log
@Changed client library interface to accept a preinitialized monitor
object.
@
text
@a16 1
extern int errno;
@


1.2
log
@Hack hack hack...fixed lots of small buglets..
@
text
@d15 1
d20 1
d43 1
a43 1
  Clib_Initialize("part.config");
@


1.1
log
@Changed the directory structure around to match armando/yatin's.
@
text
@d113 3
a115 3
  write(tcp_fd, "GET ", 4);
  write(tcp_fd, url, strlen(url));
  write(tcp_fd, " HTTP/1.0\r\n\r\n", strlen(" HTTP/1.0\r\n\r\n"));
@
