head	1.10;
access;
symbols
	Yatin-final:1.4
	Yatin:1.4.0.2
	pre-yatin-merge:1.4
	transend-beta2:1.4
	fox-dev:1.4
	transend-ng:1.3
	transend-beta-latest:1.3
	Aggregators:1.3
	NoAggregators:1.3
	iang:1.3.0.4
	transend-beta:1.3.0.2
	SOSP:1.3
	merged_preintegrate:1.3
	heisenbug:1.3
	PRE_INTEGRATION:1.3;
locks; strict;
comment	@# @;


1.10
date	97.12.15.23.12.51;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.12.15.04.57.16;	author tkimball;	state Exp;
branches;
next	1.8;

1.8
date	97.12.13.22.57.41;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.12.09.02.54.06;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.12.05.22.12.13;	author tkimball;	state Exp;
branches;
next	1.5;

1.5
date	97.11.25.20.51.04;	author tkimball;	state Exp;
branches;
next	1.4;

1.4
date	97.07.30.02.28.13;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.11.22.23.07.43;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.10.27.22.04.50;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.10.09.01.02.25;	author fox;	state Exp;
branches;
next	;


desc
@@


1.10
log
@added gunk
@
text
@This is the binary distribution of the TranSend transformational HTTP
proxy.

You need the following support:

1. Kernel support for Multicast 
   You must have an ethernet card
2. libpthreads support
   you can get libpthreads from ftp://tsx-11.mit.edu
3. TCL/TK 7.5 or greater
4. X11 library files
5. PERL 5.004_01 with LWP installed (libwww for perl), and all of the
   modules that LWP depends on must also be installed.  Currently, this
   includes Data-Dumper, IO, MD5, , MIME-Base64, libnet, and Socket.
   PERL 5.004_01 needs to have libperl.so (not libperl.a) installed
   in the CORE directory

TOC:

   I. What is tcsproxy?
  II. Configuration
 III. Start up
  IV. What now?
   V. Bugs
  VI. Contact us!
 VII. License agreement and restrictions

I. What is tcsproxy?

Tcsproxy ("the Berkeley Smart Proxy") is a cluster based, scalable
platform for running interactive Internet applications, particularly
those that use the proxy model.  Common examples today include
anonymization, compression/filtering, content collation/aggregation,
data format transformation, etc.

The binary distribution comes "out of the box" ready to run the Berkeley
TranSend application, which speeds up web browsing by a factor of 3 to 7
through lossy compression of inline images.  To use TranSend, once the
cluster service is running, users simply select the TranSend host and
port as their HTTP proxy (in the configuration dialogs for their Web
browsers).

Other applications, and complete documentation for writing your own,
are being made available on an ongoing basis; see the FAQ for details
(URL at end of this document).  One application that will be available
Real Soon Now is the Wingman service, which enables graphical Web
access from the PalmPilot Professional PDA using our client-side
software Top Gun Wingman (http://www.isaac.cs.berkeley.edu/pilot/wingman).

At UC Berkeley, we have found that a cluster of four Sparcstation-10's,
or a single Ultra-1 167Mhz, supports the entire dialup IP population.
This population consists primarily of a bank of 700 modems (some 14.4,
mostly 28.8) connected to the campus network via a single 10 Mbit shared
Ethernet segment, which is rarely observed to saturate.  The peak load
observed from this population has been about 15 hits per second at the
proxy; average load is less than 1/2 this amount.

Various refereed papers about the Berkeley Smart Proxy project can be
found at http://www.cs.berkeley.edu/~fox/glomop/.


II. Configuration.

   1. gm_options file.

   Copy gm_options to gm_options.<your username> and edit the following values 
   in the copy:

   proxy.home 
   proxy.perlmod
   frontend.* (most specifically: frontend.http_listen_port)
   cache.Partition
   ptm.multicast
   Monitor.listen

   2. Caches

   Inside the harvest/lib directory, edit the cached.conf file. 
   Modify only the following entries, and only if necessary:

   local_domain
   cache_mem
   cache_swap
   cache_dir
   cache_access_log
   cache_hierarchy_log
   cache_log
   connect_timeout
   dns_children
   cache_mgr
   cache_effective_user

   Then, go into harvest/bin and modify RunCache and RunCache.flush so
   that HARVEST_HOME points to the 'harvest' directory (i.e. the
   directory that contains bin and lib).
 
III. Start up.
  
    1. To start the base system say:
       gmake run_base_system
       This starts the fe_check.pl which will start up the frontend.

    2. To just start the monitor say: 
       gmake run_monitor
       The monitor panel should appear on your display somewhere.

    3. To just start the frontend say:
       gmake run_frontend
       The front end's status bar should be added to the monitor panel.

    4. To just start the PTM say:
       gmake run_ptm
       The PTM's status bar should be added to the monitor panel.
   
    5. To just start the caches say:
       gmake run_caches

At this point the front end should be running, and you should be able to
connect to it as an HTTP proxy on the port specified in the gm_options file
under frontend.http_listen_port.

NOTE:
 - each frontend maintains an internal list of caches that it knows
   about, as specified in the gm_options file.  If a cache goes down,
   the frontend permanently strikes that cache off of it's list of known
   caches.  Send the frontend process a SIGHUP (kill -HUP <pid>) in
   order to tell it to rebuild it's list of known caches from the
   gm_options file, and **MAKE SURE** to do it whenever a cache crashes
   and then comes back up.


IV. What now?


V. Bugs

1. Frontend
2. PTM
3. Caches

  - The harvest cache incorrectly caches web pages that have cookies
    associated with them, which can cause cookied sites to break.
  - The harvest caches' fault tolerance should be integrated into the
    PTM - the frontend SIGHUP mechanism is a bad hack.

4. Monitor
5. Other


VI. Contact us!

Problems installing or running the cluster software: Tim Kimball 
<tkimball@@uclink4.berkeley.edu>

Bug reports: transend-bugs@@latte.cs.berkeley.edu

FAQ List:  http://transend.cs.berkeley.edu/provider_faq.html

Technology questions and all other inquiries: Armando Fox
<fox@@cs.berkeley.edu>


VII.  License agreement and restrictions

This software is copyrighted by the Regents of the University of
California.  The following terms apply to all files associated with
the software unless explicitly disclaimed in individual files.

The authors hereby grant permission to use, copy, and modify this
software, without fee or royalty, for any purpose whatsoever, provided
this copyright and a copy of this license (for reference) are retained
in all distributed copies.

IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS.

RESTRICTED RIGHTS: Use, duplication or disclosure by the government
is subject to the restrictions as set forth in subparagraph (c) (1) (ii)
of the Rights in Technical Data and Computer Software Clause as DFARS
252.227-7013 and FAR 52.227-19.
@


1.9
log
@Commiting any files that need commiting!
@
text
@d12 3
a14 1
5. PERL 5.004_01 with LWP installed (libwww for perl).
@


1.8
log
@added intro and Licensing terms to README
@
text
@d18 7
a24 7
I. What is tcsproxy?
II. Configuration
III. Start up
IV. What now?
V. Bugs
VI. Contact us!
VII. License agreement and restrictions
a120 3
<PUT ANY SPECIAL ISSUES ASSOCIATED WITH START UP HERE> (i.e. cache failure,
PTM failure frontend failure!)

a130 1
<Great I have it up, what do I do now?
d134 1
d150 1
a150 1
Problems installing or running the cluster software:  Tim Kimball
@


1.7
log
@Added cache instructions.
@
text
@a15 2


d24 1
d28 32
a151 1
<SOMEONE STICK CONTACT INFORMATION HERE!>
d153 39
@


1.6
log
@Commiting README
@
text
@a43 1
   
d45 19
d93 9
d110 6
@


1.5
log
@Updating README file.
@
text
@d4 12
a15 1
You need the following external programs:
a16 2
    Perl 5.002 or later (preferably 5.003 or later)
    Tcl/Tk 7.5/4.1 or later
@


1.4
log
@Toplevel Makefile slimmed down.  lib/ subdir and corresponding install
targets added, to prep for binary dist.  client_lib now has
strerror()-style error reporting.  Fixed bug in dispatch.c that caused
prefs call for an aggregator to coredump (strcpy called on null ptr).
text/html distiller more streamlined and correctly "munges" user prefs
form items.  GetOptions moved from clib to TaccUtils.  perl_stub now
passes arguments named "s11", "i2", etc. instead of "11", "2", etc.
@
text
@d9 1
a9 1
If you want to build your own modules, you also need:
d11 6
a16 5
    GNU gmake, gcc, etc.
        
The following libraries must exist in a "standard" place on your system
(or a place pointed to by the LD_LIBRARY_PATH environment variable) to
resolve dependencies at load time:
d18 1
a18 2
1. Change the pathnames for PERL and WISH in the toplevel Makefile, as
   appropriate for your system.
d20 1
a20 2
2. Copy the file gm_options.transend to gm_options.<yourusername>, and
   edit the following values in the copy:
d22 1
d24 2
d27 6
a32 1
3. Say:  gmake run_monitor
d34 2
d37 24
a60 1
   The monitor panel should appear on your display somewhere.
d62 3
a64 1
4. Say:  gmake run_ptm
d66 2
a67 1
   The PTM's status bar should be added to the monitor panel.
a68 3
5. Say:  gmake run_frontend
  
   The front end's status bar should be added to the monitor panel.
d70 6
a75 3
At this point the front end should be running, and you should be able to
connect to it as an HTTP proxy on the port specified in
gm_options.transend.
d78 2
@


1.3
log
@minor changes to autoconfig stuff
@
text
@d1 42
a42 14
Configure needs to be able to find the following libraries and headers:
Tcl 7.5, Purify, NetPBM.  You tell it where to look by supplying
optional command line arguments (which currently default to /usr/sww if
not given).  To see what they are, say "./configure --help".

(Remember to run autoconf first, after deleting config.cache if you just
did a 'cvs update'.)

If you need to make changes to what configure does, make them in
configure.in.  If you need to add machine-specific defines or
dependencies, add them to config.h.in.  In general, the configure script
generates foo from foo.in, by replacing @@FOO@@ with the value of variable
$FOO generated by running configure.  See the info pages on autoconf for
more.
@


1.2
log
@cleaned up and added some stuff to autoconf files
@
text
@d1 14
a14 28
To run configure:

- checkout all the sources
- in *this* directory, say: autoconf
  (this generates the configure script itself)
- run ./configure

Autoconf produces the following files in *this* directory,
for your very much enjoyment:

- config.h (made from config.h.in), which defines the following:
        - typedefs for UINT16 and UINT32
        - proper prototypes for strcasecmp and strncasecmp, even if the
          target OS doesn't support them

- Makefile (made from Makefile.in), which defines the following
  environment variables for sub-Makefiles:
        - the programs CC, CXX, LEX, RANLIB
        - LIBS, which includes the necessary linking for Pthreads and
          sockets, depending on platform
        - CFLAGS, which includes minimal "defensive compilation" flags,
          as well as the -D's required by Solaris and Linux for thread
          compilation (-D_REENTRANT or -D_MIT_POSIX_THREADS resp.)

Your subdirs should not have a Makefile, but rather a Makefile.in.  A
Makefile will be generated by configure by replacing @@FOO@@ with the value
of $FOO generated by running configure.

@


1.1
log
@Do this right from the beginning, using autoconf.
@
text
@d1 29
a29 1
This will be a README, eventually.  Needed for now by autoconf.
@
