head	1.14;
access;
symbols
	Yatin-final:1.14
	Yatin:1.14.0.2
	pre-yatin-merge:1.14
	transend-beta2:1.13
	fox-dev:1.13
	ptm-ng:1.12
	transend-beta-latest:1.12
	Aggregators:1.12
	NoAggregators:1.12
	iang:1.12.0.4
	transend-beta:1.12.0.2
	SOSP:1.12
	stable_ptm:1.9
	merged_preintegrate:1.7
	heisenbug:1.6
	PRE_INTEGRATION:1.5
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	97.09.18.22.45.17;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.07.21.21.30.18;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.03.06.02.49.10;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.02.26.04.14.46;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.02.17.03.01.00;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	97.01.29.22.15.06;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.01.04.09.55.33;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.12.15.23.34.50;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.12.13.03.52.18;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.12.05.01.27.05;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.24.08.12.06;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.22.00.42.24;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.25;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@added mash_stub
mash_stub is compiled only if --with-mashdir flag is set
added a --enable/disable-mkdep flag to configure
configure can read default arguments from a special file .configure in
the toplevel tcsproxy directory
@
text
@#ifndef __COMMUNICATION_H__
#define __COMMUNICATION_H__

#include "eventhan.h"


#define DefaultServerQLength 32
typedef int Port;
class gm_Packet;


class CommunicationObject : public EventHandler {
public:
  CommunicationObject();
  virtual ~CommunicationObject();

  virtual int getID()=0;
  //virtual int getObjectType()=0; // SOCK_STREAM, SOCK_DGRAM, -1
  virtual gm_Bool Write(const char *data, int size)=0;
  virtual int Read(char *data, int size, timeval *tv)=0;

  virtual gm_Bool Write(gm_Packet *packet)=0;
  virtual gm_Bool Read (gm_Packet *packet, timeval *tv=NULL)=0;

  static  gm_Bool GetIPAddress(const char* host, char* ipAddr);
  static  gm_Bool GetHostIPAddress(char* ipAddr);
  static  gm_Bool GetHostName(char* hostName);

protected:
  gm_Bool HandleEvent(EventSystem *evs, EventType eventType, void *args)=0;
};


class Socket : public CommunicationObject {
public:
  Socket(int sID=0, gm_Bool closeSocketFlag=gm_True) : socketID(sID), 
    destructorClosesSocket(closeSocketFlag), CommunicationObject() { };

  Socket(Socket& socket) : socketID(socket.socketID), 
    destructorClosesSocket(gm_False) { };

  virtual ~Socket();

  virtual void Close();
  virtual gm_Bool Write(const char *data, int size);
  virtual int     Read (char *data, int size, timeval *tv=NULL);

  virtual gm_Bool Write(gm_Packet *packet);
  virtual gm_Bool Read (gm_Packet *packet, timeval *tv=NULL);

  virtual int  getID() { return socketID; };
  //virtual int  getObjectType(); // SOCK_STREAM, SOCK_DGRAM, -1
  virtual Port getLocalPort();
  /*virtual gm_Bool getLocalIP(char *ipAddress);
    virtual gm_Bool getLocalAddress(char *ipAddress, Port &port);*/

protected:
  virtual gm_Bool HandleEvent(EventSystem *evs, EventType event, void *args);
  virtual gm_Bool EvSelect(EventSystem *evs);

  int  socketID;
  gm_Bool destructorClosesSocket;
};


class UdpSocket : public Socket {
public:
  UdpSocket(int _socketID=0, gm_Bool destructorClosesSocket=gm_True)
    : Socket(_socketID, destructorClosesSocket) { };
  
  gm_Bool Connect(const char* host, Port port, gm_Bool useIPAddrOnly=gm_True);
};



class TcpSocket : public Socket {
public:
  TcpSocket(TcpSocket& socket) : Socket(socket) { };
  TcpSocket(int _socketID=0, gm_Bool destructorClosesSocket=gm_True)
    : Socket(_socketID, destructorClosesSocket) { };
  
  gm_Bool Connect(const char* host, Port port, gm_Bool useIPAddrOnly=gm_True);
};


class TcpServer : public TcpSocket {
public:
  TcpServer(Port port, int qLength=DefaultServerQLength);

protected:
  virtual gm_Bool HandleEvent(EventSystem *evs, EventType event, void *args);
  virtual gm_Bool EvSelect(EventSystem *evs);
  virtual gm_Bool EvConnectionReceived(EventSystem *evs, int socketID);

  gm_Bool Initialize(Port port, int qLength);
  int  ConnectToClient();
};


class MulticastSocket : public Socket {
public:
  MulticastSocket(int _socketID=0, gm_Bool destructorClosesSocket=gm_True)
    : Socket(_socketID, destructorClosesSocket) { };
  
  gm_Bool CreateSender  (const char *ipAddress, Port port, int ttl);
  gm_Bool CreateListener(const char *ipAddress, Port port);
  virtual int Read(char *data, int size, timeval *tv=NULL);
  virtual gm_Bool Write(const char *data, int size);
  virtual gm_Bool Write(gm_Packet *packet);
  virtual gm_Bool Read (gm_Packet *packet, timeval *tv=NULL);
};


class gm_CoordinationBus {
public:
  gm_CoordinationBus(const char *ipAddress, Port port, int ttl, 
		  gm_Bool listener_=gm_True, gm_Bool sender_=gm_True);
  virtual ~gm_CoordinationBus() { };

  virtual gm_Bool Write(const char *data, int size) 
  { return sender.Write(data,size); };
  virtual int Read(char *data, int size, timeval *tv=NULL) { 
    return listener.Read(data, size, tv);
  };

  MulticastSocket *getListener() { return &listener; };
  MulticastSocket *getSender()   { return &sender;   };

protected:
  virtual gm_Bool EvSelect(EventSystem */*evs*/) { return gm_True; };
  class gm_CoordinationListener : public MulticastSocket {
  public:
    gm_CoordinationListener(gm_CoordinationBus *b) :MulticastSocket(),bus(b){};

  protected:
    virtual gm_Bool EvSelect(EventSystem *evs) { return bus->EvSelect(evs); }

  private:
    gm_CoordinationBus *bus;
  };

private:
  MulticastSocket sender;
  gm_CoordinationListener listener;
};




#endif // __COMMUNICATION_H__
@


1.13
log
@Changes to monitor to do unicast and multicast listening properly
Modified distiller database so that everything after "--" is assumed to
be command line args to the distiller
@
text
@d9 1
a9 1
class Packet;
d22 2
a23 2
  virtual gm_Bool Write(Packet *packet)=0;
  virtual gm_Bool Read (Packet *packet, timeval *tv=NULL)=0;
d48 2
a49 2
  virtual gm_Bool Write(Packet *packet);
  virtual gm_Bool Read (Packet *packet, timeval *tv=NULL);
d109 2
a110 2
  virtual gm_Bool Write(Packet *packet);
  virtual gm_Bool Read (Packet *packet, timeval *tv=NULL);
d114 1
a114 1
class CoordinationBus {
d116 1
a116 1
  CoordinationBus(const char *ipAddress, Port port, int ttl, 
d118 1
a118 1
  virtual ~CoordinationBus() { };
d131 1
a131 1
  class CoordinationListener : public MulticastSocket {
d133 1
a133 1
    CoordinationListener(CoordinationBus *b) : MulticastSocket(), bus(b) { }; 
d139 1
a139 1
    CoordinationBus *bus;
d144 1
a144 1
  CoordinationListener listener;
@


1.12
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d66 9
@


1.11
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d22 3
@


1.10
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d9 1
d17 2
a18 2
  virtual int  getID()=0;
  virtual int  getObjectType()=0; // SOCK_STREAM, SOCK_DGRAM, -1
d20 1
a20 1
  virtual int  Read (char *data, int size)=0;
d43 4
a46 1
  virtual int  Read (char *data, int size);
d49 1
a49 1
  virtual int  getObjectType(); // SOCK_STREAM, SOCK_DGRAM, -1
d95 1
a95 1
  virtual int  Read (char *data, int size);
d97 2
d110 3
a112 1
  virtual int  Read (char *data, int size) { return listener.Read(data,size);};
@


1.9
log
@Changes to the monitor for killing
@
text
@a92 2
  
protected:
d117 2
d122 1
@


1.8
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d23 1
@


1.7
log
@Various changes and 'fixes' but they are not stable yet.  the 'heisenbug' contour seems more stable; should debug from that contour, then merge diffs with head (i.e. this) contour.
@
text
@d111 1
a111 1
  virtual gm_Bool EvSelect(EventSystem */*evs*/) { gm_BoolErrorReturn(success); };
@


1.6
log
@made specific Read method for MluticastSocket, to get correct read() behavior for UDP
@
text
@d91 1
@


1.5
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d90 1
@


1.4
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d18 1
a18 1
  virtual Bool Write(const char *data, int size)=0;
d21 2
a22 2
  static  Bool GetIPAddress(const char* host, char* ipAddr);
  static  Bool GetHostIPAddress(char* ipAddr);
d25 1
a25 1
  Bool HandleEvent(EventSystem *evs, EventType eventType, void *args)=0;
d31 1
a31 1
  Socket(int sID=0, Bool closeSocketFlag=TRUE) : socketID(sID), 
d35 1
a35 1
    destructorClosesSocket(FALSE) { };
d40 1
a40 1
  virtual Bool Write(const char *data, int size);
d46 2
a47 2
  /*virtual Bool getLocalIP(char *ipAddress);
    virtual Bool getLocalAddress(char *ipAddress, Port &port);*/
d50 2
a51 2
  virtual Bool HandleEvent(EventSystem *evs, EventType event, void *args);
  virtual Bool EvSelect(EventSystem *evs);
d54 1
a54 1
  Bool destructorClosesSocket;
d62 1
a62 1
  TcpSocket(int _socketID=0, Bool destructorClosesSocket=TRUE)
d65 1
a65 1
  Bool Connect(const char* host, Port port, Bool useIPAddrOnly=TRUE);
d74 3
a76 3
  virtual Bool HandleEvent(EventSystem *evs, EventType event, void *args);
  virtual Bool EvSelect(EventSystem *evs);
  virtual Bool EvConnectionReceived(EventSystem *evs, int socketID);
d78 1
a78 1
  Bool Initialize(Port port, int qLength);
d85 1
a85 1
  MulticastSocket(int _socketID=0, Bool destructorClosesSocket=TRUE)
d88 2
a89 2
  Bool CreateSender  (const char *ipAddress, Port port, int ttl);
  Bool CreateListener(const char *ipAddress, Port port);
d98 1
a98 1
		  Bool listener_=TRUE, Bool sender_=TRUE);
d101 1
a101 1
  virtual Bool Write(const char *data, int size) 
d109 1
a109 1
  virtual Bool EvSelect(EventSystem */*evs*/) { BoolErrorReturn(success); };
d115 1
a115 1
    virtual Bool EvSelect(EventSystem *evs) { return bus->EvSelect(evs); }
@


1.3
log
@Just before adding stuff for using the monitoring GUI
@
text
@d18 1
a18 1
  virtual Bool Write(char *data, int size)=0;
d21 1
a21 1
  static  Bool GetIPAddress(char* host, char* ipAddr);
d40 1
a40 1
  virtual Bool Write(char *data, int size);
d65 1
a65 1
  Bool Connect(char* host, Port port, Bool useIPAddrOnly=TRUE);
d88 2
a89 2
  Bool CreateSender  (char *ipAddress, Port port, int ttl);
  Bool CreateListener(char *ipAddress, Port port);
d97 2
a98 2
  CoordinationBus(char *ipAddress, Port port, int ttl, Bool listener_=TRUE, 
		  Bool sender_=TRUE);
d101 2
a102 1
  virtual Bool Write(char *data, int size) { return sender.Write(data,size); };
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@a84 1
  MulticastSocket(MulticastSocket& socket);
d95 25
a119 1
class ConferenceBus : public CommunicationObject {
@


1.1
log
@Initial revision
@
text
@d45 3
a47 1
  virtual int  getPortNumber();
@


1.1.1.1
log
@include files for PTM
@
text
@@
