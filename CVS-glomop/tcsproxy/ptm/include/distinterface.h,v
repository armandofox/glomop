head	1.33;
access;
symbols
	Yatin-final:1.32.2.3
	Yatin:1.32.0.2
	pre-yatin-merge:1.32
	transend-beta2:1.28
	fox-dev:1.28.2.4
	ptm-ng:1.26
	transend-beta-latest:1.26
	Aggregators:1.26
	NoAggregators:1.26
	iang:1.23.0.2
	transend-beta:1.20.0.2
	SOSP:1.17
	stable_ptm:1.14
	merged_preintegrate:1.9
	heisenbug:1.9
	PRE_INTEGRATION:1.9;
locks; strict;
comment	@ * @;


1.33
date	98.01.16.22.16.12;	author yatin;	state Exp;
branches;
next	1.32;

1.32
date	97.10.26.00.30.48;	author fox;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	97.10.24.19.29.21;	author fox;	state Exp;
branches;
next	1.30;

1.30
date	97.09.22.20.33.00;	author fox;	state Exp;
branches;
next	1.29;

1.29
date	97.08.30.21.34.44;	author fox;	state Exp;
branches;
next	1.28;

1.28
date	97.06.14.15.30.48;	author yatin;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	97.06.14.05.05.41;	author yatin;	state Exp;
branches;
next	1.26;

1.26
date	97.05.14.23.15.15;	author fox;	state Exp;
branches;
next	1.25;

1.25
date	97.05.11.10.24.34;	author fox;	state Exp;
branches;
next	1.24;

1.24
date	97.05.01.21.46.37;	author aspolito;	state Exp;
branches;
next	1.23;

1.23
date	97.04.30.07.55.29;	author fox;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	97.04.28.18.46.37;	author yatin;	state Exp;
branches;
next	1.21;

1.21
date	97.04.28.17.35.39;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	97.04.17.21.45.15;	author aspolito;	state Exp;
branches;
next	1.19;

1.19
date	97.04.15.22.36.44;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.03.18.01.00.01;	author yatin;	state Exp;
branches;
next	1.17;

1.17
date	97.02.26.04.14.49;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.02.25.21.05.07;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	97.02.24.22.36.36;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	97.02.14.20.47.56;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	97.02.12.20.03.24;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.02.08.03.07.03;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.22.15.06;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.01.29.06.00.49;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	96.12.13.00.18.41;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.12.11.05.25.59;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.12.10.22.36.49;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.12.05.01.27.07;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.24.08.12.08;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.08.21.32;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.15.00.37.05;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.21.27.43;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.23.42.30;	author yatin;	state Exp;
branches;
next	;

1.23.2.1
date	97.05.06.23.49.46;	author iang;	state Exp;
branches;
next	1.23.2.2;

1.23.2.2
date	97.05.08.23.29.10;	author iang;	state Exp;
branches;
next	;

1.28.2.1
date	97.08.11.04.13.46;	author fox;	state Exp;
branches;
next	1.28.2.2;

1.28.2.2
date	97.08.14.16.42.23;	author fox;	state Exp;
branches;
next	1.28.2.3;

1.28.2.3
date	97.08.15.07.02.57;	author fox;	state Exp;
branches;
next	1.28.2.4;

1.28.2.4
date	97.08.16.07.04.21;	author fox;	state Exp;
branches;
next	;

1.32.2.1
date	97.11.17.22.06.58;	author yatin;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	97.11.18.20.10.25;	author yatin;	state Exp;
branches;
next	1.32.2.3;

1.32.2.3
date	97.12.01.22.19.30;	author iang;	state Exp;
branches;
next	;


desc
@@


1.33
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __DISTINTERFACE_H__
#define __DISTINTERFACE_H__

#include "config_tr.h"
#include "monitor.h"

#define MAX_ARGS 50             /* max # args allowed to send to distiller */
#define MAX_ARG_STRING 80       /* max length of a string-type arg */
#include <stdlib.h> 
#include <string.h>


#define DistillerMalloc(size)           malloc( (size) )
#define DistillerFree(pointer)          free( (pointer) )
#define DistillerRealloc(pointer, size) realloc( (pointer), (size) )

#define MAXDISTILLER_TYPE_STRING 80
typedef struct C_DistillerType {
  char string[MAXDISTILLER_TYPE_STRING];
} C_DistillerType;


#define  SET_DISTILLER_TYPE(arg,str)  strncpy((arg).string, (str), MAXDISTILLER_TYPE_STRING)
#define  GET_DISTILLER_TYPE(arg)      ((arg).string)


typedef enum ArgumentType {
  typeInt, 
  typeString, 
  typeDouble
} ArgumentType;

/*
 *  WARNING:  The following list must be consistent with the array of
 *  strings in cacheman.cc which are returned by
 *  FE_getDistillerStatusString 
 */
typedef enum DistillerStatus {
  distOk=0,
  distNoCacheManager,       /*the cache manager seems to have disappeared*/
  distDistillerNotFound,    /*No distiller found; or PTM does not exist*/
  distSendError,            /*Error occurred while sending data*/
  distReplyTimeout,         /*Timed out while waiting for reply*/
  distOutOfLocalMemory,     /*Proxy front-end ran out of memory*/
  distConnectionBroken,     /*Connection to the distiller was broken*/
  distLaunchTimeout,        /*Timed out while asking PTM for a new distiller*/

  distFatalError,           /*Fatal error at the distiller*/
  distBadInput,             /*Distiller received bad input*/
  distRedispatch,           /*Redispatch needed (chained distillation) */

  distRendezvousTimeout     /*The distill wasn't ready when it was checked */
} DistillerStatus;


typedef struct DistillationCost {
  UINT32 estimatedTime_ms; /* currently always set to 1 => load metric is
                              the same as queue length */
} DistillationCost;


typedef struct Argument {
#ifdef __cplusplus
  Argument() : type(typeInt), id(0) { };
#endif

  ArgumentType type;
  UINT32       id;
  union Union {
#ifdef __cplusplus
    Union() : arg_int(0) { };
#endif

    INT32 arg_int;
    char   arg_string[MAX_ARG_STRING];
    double arg_double;
  } a;
} Argument;

typedef struct ArgumentList {
  int nargs;
  Argument arg[MAX_ARGS];
} ArgumentList;

typedef struct DistillerBuffer {
#ifdef __cplusplus
  DistillerBuffer() : data(0), length(0), maxLength(0), freeMe(gm_True) { };
  ~DistillerBuffer() { Free(); }
  void StaticBuffer(void *data_, size_t len) {
    data = data_;
    freeMe = gm_False;
    length = maxLength = (UINT32)len;
  }
  /*
   *  StringBuffer sets the buffer to be a string of length L:
   *  - the string passed in must be guaranteed to be allocated L+1 bytes
   *  - the L+1'st byte of the string is set to a NULL terminator
   *  - the length field of the buffer reflects the length of the string (ie
   *    what strlen() would return)
   *  - the maxLength field reflects the number of bytes actually occupied by
   *    the string, which is 1+the length
   */
  void StringBuffer(char *str, size_t len) {
    data = (void *)str;
    ((char*)data)[len] = '\0';
    length = len;
    maxLength = 1+len;
    freeMe = gm_False;
  }
  void Free() {
    if (freeMe==gm_True && data!=NULL) {
      DistillerFree(data);
      data = NULL;
      freeMe = gm_False;
    }
    data = NULL;
    length = maxLength = 0;
  }
  void SetLength(UINT32 length_) {
    assert(length_ <= maxLength);
    length = length_;
  }
  gm_Bool Alloc(size_t size) {
    data = DistillerMalloc(size);
    assert(data != NULL);
    freeMe = gm_True;
    length = maxLength = (UINT32)size;
    return gm_True;
  }
  gm_Bool Realloc(size_t size) {
    if (size > maxLength) {
      if (data != NULL) {
        data = DistillerRealloc(data, size);
      } else {
        data = DistillerMalloc(size);
        memset(data, 0, size);
        length = 0;
        freeMe = gm_True;
      }
      assert(data != NULL);
      maxLength = (UINT32)size;
    }
    return gm_True;
  }
  void Clone(struct DistillerBuffer *dst) {
    dst->Alloc(maxLength);
    assert(dst->data);
    memcpy(dst->data, data, maxLength);
    dst->maxLength = maxLength;
    dst->length = length;
    dst->freeMe = freeMe;
  }

  void FreeMe(gm_Bool freeMe_=gm_True) { freeMe = freeMe_; }
  void DontFreeMe() { FreeMe(gm_False); }
#endif
  void    *data;
  UINT32  length;
  UINT32  maxLength;
  gm_Bool freeMe;
} DistillerBuffer;

#ifdef __cplusplus
extern "C" {
#endif

#define DistillerBufferLength(d) ((d)->length)
#define DistillerBufferData(d)   ((d)->data)
#define DistillerBufferFreeMe(d,w) ((d)->freeMe = (w))
gm_Bool DistillerBufferAlloc(DistillerBuffer *dBuf, size_t size);
gm_Bool DistillerBufferRealloc(DistillerBuffer *dBuf, size_t size);
void    DistillerBufferClone(DistillerBuffer *dst, DistillerBuffer *src);
void    DistillerBufferFree(DistillerBuffer *dBuf);
void    DistillerBufferSetLength(DistillerBuffer *dBuf, UINT32 len);
void    DistillerBufferSetStatic(DistillerBuffer *dBuf, void *buf_, size_t len);
void    DistillerBufferSetString(DistillerBuffer *dBuf, char *str, size_t len);

#ifdef __cplusplus
}
#endif

#define MAX_MIMETYPE 50

typedef struct DistillerData {
#ifdef __cplusplus
  DistillerData() /*: data(0), length(0), metadata(0), metalength(0)*/ {
    strcpy(mimeType, "");
  }

  void DontFreeMe() {
    data.DontFreeMe();
    metadata.DontFreeMe();
  }

  void Free() {
    data.Free();
    metadata.Free();
  }
#endif

  /*void   *data;
  UINT32 length;
  void   *metadata;
  UINT32 metalength;*/


  /* XXX: If you add any more DistillerBuffers to this data structure,
   * update the DontFreeMe() method above
   */
  DistillerBuffer data;
  DistillerBuffer metadata;
  char   mimeType[MAX_MIMETYPE];
} DistillerData;

#define DataPtr(d)      ((d)->data.data)
#define DataLength(d)    ((d)->data.length)
#define MetadataPtr(d)  ((d)->metadata.data)
#define MetadataLength(d) ((d)->metadata.length)
#define MimeType(d)     ((d)->mimeType)
#define SetData(d,t)    ((d)->data.data = (void *)(t))
#define SetDataLength(d,t)  ((d)->data.length = (UINT32)(t))
#define SetMetadata(d,t)  ((d)->metadata.data = (void *)(t))
#define SetMetadataLength(d,t) ((d)->metadata.length = (UINT32)(t))
#define SetMimeType(d,t)   (strncpy((d)->mimeType,(t),MAX_MIMETYPE))
#define DataNeedsFree(d,t) ((d)->data.freeMe = (t))
#define MetadataNeedsFree(d,t) ((d)->metadata.freeMe = (t))


typedef DistillerData DistillerInput;
typedef DistillerData DistillerOutput;



#define SET_ARG_ID(arg,i)      ((arg).id = i)
#define SET_ARG_STRING(arg,s)   { (arg).type = typeString; \
                                  strncpy((arg).a.arg_string,s,MAX_ARG_STRING-1); }
#define SET_ARG_INT(arg,i)      { (arg).type = typeInt; (arg).a.arg_int = i; }
#define SET_ARG_DOUBLE(arg,d)   { (arg).type=typeDouble; (arg).a.arg_double=d; }

#define ARG_TYPE(arg)     ((arg).type)
#define ARG_ID(arg)       ((arg).id)
#define ARG_STRING(arg)   ((arg).type == typeString? (arg).a.arg_string: "")
#define ARG_INT(arg)      ((arg).type == typeInt? (arg).a.arg_int: 0)
#define ARG_DOUBLE(arg)   ((arg).type == typeDouble? (arg).a.arg_double: 0.0)

#define _ARG_STRING(arg)  ((arg).a.arg_string)
#define _ARG_INT(arg)     ((arg).a.arg_int)
#define _ARG_DOUBLE(arg)  ((arg).a.arg_double)

#ifdef __cplusplus
extern "C" {
#endif


Argument *getArgumentFromId(Argument *args, int numberOfArgs, UINT32 id);
#define getArgumentFromIdInList(al,id)  \
                getArgumentFromId((al)->arg,(al)->nargs,(id))
/*
 * returns a pointer to the argument corresponding to id
 * NULL, if no such arg can be found
 */


DistillerStatus DistillerInit(C_DistillerType distType, 
			      int argc, const char * const * argv);
/*
 * Front-end calls this function to perform startup stuff
 * Returns distOk on success, distFatalError on failure
 */

void DistillerCleanup();
/*
 * Front-end calls this function before exiting
 */


DistillerStatus
DistillerMain(Argument *args, int numberOfArgs,
	      DistillerInput *input, DistillerOutput *output);

DistillerStatus
ComputeDistillationCost(Argument *args, int numberOfArgs,
			DistillerInput *input, DistillationCost *cost);
/*
 * This function should calculate an estimate of the time to perform a
 * distillation.
 * The function returns distOk on success.
 */

#ifdef OLD
void *DistillerMalloc(size_t size);
void *DistillerRealloc(void *ptr, size_t size);
/*
 * Use these function to malloc memory for the output buffer
 */

void DistillerFree(void *pointer);
/*
 * Use this function to free memory allocated using DistillerMalloc
 * DO NOT free the output buffer if the "freeOutputBuffer" return arg is 
 * set to gm_True inside DistillerMain.
 */
#endif


MonitorClientID DistillerGetMonitorClientID();
void DistillerRename(C_DistillerType type);

#ifdef __cplusplus
}
#endif

#endif 
@


1.32
log
@changed ptm to always alloc and fill in a null term when receiving
metadata (headers) from workers.  also added StringBuffer function for
setting a distillerbuffer to an ascii string, which implements the same
behavior (adding the null term and setting length and maxLength appropriately).
@
text
@d50 3
a52 1
  distRedispatch           /*Redispatch needed (chained distillation) */
d194 5
d307 1
a307 1

@


1.32.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@d300 1
a300 1
void DistillerReregister(C_DistillerType type);
@


1.32.2.2
log
@Changed the DistillerReregister API function to DistillerRename
Added gm_options support for wingman aggregators
@
text
@d300 1
a300 1
void DistillerRename(C_DistillerType type);
@


1.32.2.3
log
@Added DistillAsync and friends
@
text
@d50 1
a50 3
  distRedispatch,           /*Redispatch needed (chained distillation) */

  distRendezvousTimeout     /*The distill wasn't ready when it was checked */
a190 5
  }

  void Free() {
    data.Free();
    metadata.Free();
@


1.31
log
@Added a couple of fields to 'feedback' form.  Fixed bugs and added to
documentation for distiller writing.  Added Dispatcher that allows
user-specified chaining of filters per mime type.  Fixed bug in harness:
it wasn't finding LWP correctly when it lived in a nonstandard place.
Fixed header-generation bug in TACCutils.  Added "stupid TACC tricks"
file, content to be filled in.  safetified DistillerBufferRealloc.
@
text
@d7 1
a7 1
#define MAX_ARGS 24             /* max # args allowed to send to distiller */
d92 16
d144 1
a144 1
    dst->Alloc(length);
d146 3
a148 2
    memcpy(dst->data, data, length);
    dst->maxLength = length;
a149 1
    dst->length = length;
d174 1
@


1.30
log
@max_length wasn't getting set properly in distiller stub routines in
cachenet.cc and distnet.cc.  also modified SET_ARG_STRING macro to copy
at most N-1 characters of the arg, to ensure there is room for strncpy
to add a terminating null
@
text
@d50 1
a50 2
  distRedispatch,           /*Redispatch needed (chained distillation) */
  distAsyncBegin            /* Asynchronously queue fetches for more stuff */
a112 1
    assert(data != NULL);
d114 8
a121 1
      data = DistillerRealloc(data, size);
@


1.29
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d207 1
a207 1
                                  strncpy((arg).a.arg_string,s,MAX_ARG_STRING); }
@


1.28
log
@changes to the DistillerInit() API
@
text
@d33 5
a37 1

d79 4
a82 1

d86 8
a93 3
  DistillerBuffer() : data(0), length(0), freeMe(gm_True) { };
  ~DistillerBuffer()
  {
d96 23
d120 9
d130 3
a132 1
  void DontFreeMe() { freeMe = gm_False; }
d136 1
d140 17
@


1.28.2.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d75 1
a75 4
typedef struct ArgumentList {
  int nargs;
  Argument arg[MAX_ARGS];
} ArgumentList;
d79 3
a81 8
  DistillerBuffer() : data(0), length(0), maxLength(0), freeMe(gm_True) { };
  ~DistillerBuffer() { Free(); }
  void StaticBuffer(void *data_, size_t len) {
    data = data_;
    freeMe = gm_False;
    length = maxLength = (UINT32)len;
  }
  void Free() {
a84 14
    data = NULL;
    length = maxLength = 0;
  }
  void SetLength(UINT32 length_) {
    assert(length_ <= maxLength);
    length = length_;
  }
  gm_Bool Alloc(size_t size) {
    Free();
    data = DistillerMalloc(size);
    assert(data != NULL);
    freeMe = gm_True;
    length = maxLength = (UINT32)size;
    return (data==NULL) ? gm_False : gm_True;
d86 1
a86 11
  gm_Bool Realloc(size_t size) {
    if (length + size <= maxLength) {
      length += size;
    } else {
      data = DistillerRealloc(data, size);
      length = maxLength = (UINT32)size;
    }
    return (data==NULL) ? gm_False : gm_True;
  }
  void FreeMe(gm_Bool freeMe_=gm_True) { freeMe = freeMe_; }
  void DontFreeMe() { FreeMe(gm_False); }
a89 1
  UINT32  maxLength;
a92 17
#define DistillerBufferLength(d) ((d)->length)
#define DistillerBufferData(d)   ((d)->data)
#define DistillerBufferFreeMe(d,w) ((d)->freeMe = (w))

#ifdef __cplusplus
extern "C" {
#endif

gm_Bool DistillerBufferAlloc(DistillerBuffer *dBuf, size_t size);
gm_Bool DistillerBufferRealloc(DistillerBuffer *dBuf, size_t size);
void    DistillerBufferFree(DistillerBuffer *dBuf);
void    DistillerBufferSetLength(DistillerBuffer *dBuf, UINT32 len);
void    DistillerBufferSetStatic(DistillerBuffer *dBuf, void *buf_, size_t len);

#ifdef __cplusplus
}
#endif
@


1.28.2.2
log
@*** empty log message ***
@
text
@a108 1
    assert(data != NULL);
@


1.28.2.3
log
@*** empty log message ***
@
text
@a91 2
      data = NULL;
      freeMe = gm_False;
d101 1
d127 4
a134 3
#define DistillerBufferLength(d) ((d)->length)
#define DistillerBufferData(d)   ((d)->data)
#define DistillerBufferFreeMe(d,w) ((d)->freeMe = (w))
@


1.28.2.4
log
@a huge amount of frontend reengineering, plus added a Clone() method to
the DistillerBuffer.  basic operation of frontend seems stable.
things that haven't been tested yet:
- POST
- cache cut through behavior
- client timeout doesn't seem to work (never times out??)
- redispatch and similar support for aggregators
and some things still to be implemented:
- support for listening/dispatching on multiple ports
- documentation of what all the files do (and rename the http-specific
sourcefiles)
- eliminate redundant .h inclusions from various sourcefiles
- 'makedepend' for the Makefile.in
@
text
@d107 1
a107 1
    return gm_True;
d111 3
a113 1
    if (size > maxLength) {
d115 1
a115 2
      assert(data != NULL);
      maxLength = (UINT32)size;
d117 1
a117 1
    return gm_True;
a118 9
  void Clone(struct DistillerBuffer *dst) {
    dst->Alloc(length);
    assert(dst->data);
    memcpy(dst->data, data, length);
    dst->maxLength = length;
    dst->freeMe = freeMe;
    dst->length = length;
  }

a136 1
void    DistillerBufferClone(DistillerBuffer *dst, DistillerBuffer *src);
@


1.27
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d172 1
a172 1
			      int argc, const char *const * argv);
@


1.26
log
@moved GET/SET_DISTILLER_TYPE macros to distinterface.h
@
text
@d171 2
a172 1
DistillerStatus DistillerInit(C_DistillerType distType);
@


1.25
log
@added distAsyncBegin to distiller return code.  modified ptm and distiller stubs to allow passing of options file name on distiller cmd line with -o
@
text
@d22 5
@


1.24
log
@fixed stupid bug in SetMetadata
@
text
@d41 2
a42 1
  distRedispatch            /*Redispatch needed (chained distillation) */
d121 1
d126 1
d129 1
@


1.23
log
@frontend and ptm changes for new distiller api
@
text
@d122 1
a122 1
#define SetMetadata(d)  ((d)->metadata.data = (void *)(t))
@


1.23.2.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@d8 1
a8 1
#define MAX_ARG_STRING 500       /* max length of a string-type arg */
@


1.23.2.2
log
@Type 1-style rewebber
@
text
@d122 1
a122 1
#define SetMetadata(d,t)  ((d)->metadata.data = (void *)(t))
@


1.22
log
@Added the DistillerBuffer data structure to provide a more elegant way of
freeing buffers between the library and the main program
@
text
@d12 5
d74 6
a79 1
  ~DistillerBuffer();
d85 1
a85 1
};
d116 10
a200 7



#define DistillerMalloc(size)           malloc( (size) )
#define DistillerFree(pointer)          free( (pointer) )
#define DistillerRealloc(pointer, size) realloc( (pointer), (size) )

@


1.21
log
@added metadata support to distiller data struct
@
text
@d66 12
d82 1
a82 1
  DistillerData() : data(0), length(0), metadata(0), metalength(0) {
d85 5
d92 1
a92 1
  void   *data;
d95 8
a102 1
  UINT32 metalength;
d156 1
a156 7
	      DistillerInput *input, DistillerOutput *output,
	      gm_Bool *freeOutputBuffer);
/* 
 * the freeOutputBuffer arg indicates whether the distiller front-end should
 * free the output buffer or not. Valid values are gm_True and gm_False
 */

d167 1
a167 1
#ifndef DEBUGGING
a179 4
#else  /* DEBUGGING */
#define DistillerMalloc malloc
#define DistillerFree   free
#define DistillerRealloc realloc
d181 7
@


1.20
log
@config.h is now config_tr.h
@
text
@d35 2
a36 1
  distBadInput              /*Distiller received bad input*/
d70 1
a70 1
  DistillerData() : data(0), length(0) {
d77 2
@


1.19
log
@Added an extra arg to distillerinit to specify the distiller's name
@
text
@d4 1
a4 1
#include "config.h"
@


1.18
log
@Added a new error status distBadInput
@
text
@d12 5
d115 1
a115 1
DistillerStatus DistillerInit();
@


1.17
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d29 2
a30 1
  distFatalError
@


1.16
log
@added distillerRealloc def to DEBUGGING clause
@
text
@d34 2
a35 1
  UINT32 estimatedTime;
@


1.15
log
@added functionality in dispatch.c to bypass too-small content. added new
function get_header_value which returns the value of a MIME header (or
NULL if the header doesn't exist), and (temporarily) duplicated the
getArgumentById code in order to search for the FRONT_MTU arg, which is
used as the cutoff for distillation.
Made larger default buffer in munge_magic.c "generic process tag"
routine to avoid stupid segfaults (thanks Purify!)
@
text
@d155 1
@


1.14
log
@Upped the MAX_ARGS definition.
@
text
@d100 2
@


1.13
log
@Added DistillerRealloc
@
text
@d7 1
a7 1
#define MAX_ARGS 8              /* max # args allowed to send to distiller */
@


1.12
log
@added macro to get type of an argument
@
text
@d139 1
d141 1
a141 1
 * Use this function to malloc memory for the output buffer
@


1.11
log
@Changes to the monitor for killing
@
text
@d84 1
@


1.10
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d39 4
a42 1
  
d45 5
a49 1
  union {
d61 6
@


1.9
log
@Changed "int" argument type to be signed rather than unsigned.  Required
addition of INT32 type to config.h.in, and addition of overload
operators '<<', '>>' for type "long int" to IStream and OStream classes
in ptm (mods to packet.{cc,h}).  Added various "make run" targets at top
level.  Minor fixes to monitor's GUI.  Added simple argument parsing to
gif_munge in ARGS.h, which will be the standard filename where distiller
args are defined.  Added tags target to ptm makefile.
@
text
@d5 2
d10 1
d50 15
d105 3
a107 4
DistillerMain(Argument *args,   int    numberOfArgs,
	      void     *input,  UINT32 inputLength,
	      void     **output,UINT32 *outputLength,
	      gm_Bool     *freeOutputBuffer);
d115 2
a116 3
ComputeDistillationCost(Argument *args,   int    numberOfArgs,
			void     *input,  UINT32 inputLength, 
			DistillationCost *cost);
d139 4
@


1.8
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d40 1
a40 1
    UINT32 arg_int;
@


1.7
log
@*** empty log message ***
@
text
@d4 3
a6 2
#include <config.h>
#define MAX_ARG_STRING 80
@


1.6
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d106 1
a106 1

d118 4
@


1.5
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d89 1
a89 1
	      Bool     *freeOutputBuffer);
d92 1
a92 1
 * free the output buffer or not. Valid values are TRUE and FALSE
d116 1
a116 1
 * set to TRUE inside DistillerMain.
@


1.4
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d29 5
d94 12
@


1.3
log
@added accessor/mutator macros in proxyinterface.h
@
text
@d40 1
d60 20
d83 6
a88 1
	      void     **output,UINT32 *outputLength);
d91 4
d96 5
@


1.2
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d40 1
a40 1
#define SET_ARG_ID(arg,id)      ((arg).id = id)
@


1.1
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d17 8
d49 5
a53 1
#define ARG_DOUBLE(arg)   ((arg).type == typeDouble? (arg).a.arg_double: 0.0L)
@
