head	1.2;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.6
	pre-yatin-merge:1.2
	transend-beta2:1.2
	fox-dev:1.2
	ptm-ng:1.2
	transend-beta-latest:1.2
	Aggregators:1.2
	NoAggregators:1.2
	iang:1.2.0.4
	transend-beta:1.2.0.2
	SOSP:1.2;
locks; strict;
comment	@ * @;


1.2
date	97.02.26.04.14.50;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	97.02.17.03.02.47;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@#ifndef __GARBAGE_H__
#define __GARBAGE_H__

#include "gm_mutex.h"


class GarbageCollectedObject {
public:
  GarbageCollectedObject() : numberOfRefs(0), isDeleted(gm_False),
    mutex("*-garbage") { };
  virtual ~GarbageCollectedObject() { };

  gm_Bool IsDeleted() { 
    gm_Bool returnValue;
    mutex.Lock();
    returnValue = isDeleted; 
    mutex.Unlock();
    return returnValue;
  };
  void MarkForDeletion() { 
    mutex.Lock();
    if (numberOfRefs==0) delete this; // don't unlock the mutex here, 
				      // since it's already deleted
    else {
      isDeleted = gm_True; 
      mutex.Unlock();
    }
  }
  void IncrReference() { 
    mutex.Lock();
    numberOfRefs++; 
    mutex.Unlock();
  };
  void DecrReference() { 
    mutex.Lock();
    numberOfRefs--; 
    if (isDeleted==gm_True && numberOfRefs==0) delete this;
    else mutex.Unlock();
  };
private:
  UINT32  numberOfRefs;
  gm_Bool isDeleted;
  Mutex   mutex;
};


#endif // __GARBAGE_H__
@


1.1
log
@Forgot to add garbage.h in the previous commit
@
text
@d1 3
d9 2
a10 1
  GarbageCollectedObject() : numberOfRefs(0), isDeleted(gm_False) { };
d47 1
@
