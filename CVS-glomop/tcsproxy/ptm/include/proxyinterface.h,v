head	1.21;
access;
symbols
	Yatin-final:1.20.2.1
	Yatin:1.20.0.2
	pre-yatin-merge:1.20
	transend-beta2:1.19
	fox-dev:1.19
	ptm-ng:1.18
	transend-beta-latest:1.18
	Aggregators:1.18
	NoAggregators:1.18
	iang:1.17.0.2
	transend-beta:1.15.0.2
	SOSP:1.13
	stable_ptm:1.11
	merged_preintegrate:1.9
	heisenbug:1.9
	PRE_INTEGRATION:1.9;
locks; strict;
comment	@ * @;


1.21
date	98.01.16.22.16.15;	author yatin;	state Exp;
branches;
next	1.20;

1.20
date	97.09.15.03.09.33;	author yatin;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	97.06.14.05.05.42;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.05.14.23.15.16;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	97.04.28.18.48.11;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.04.28.18.46.37;	author yatin;	state Exp;
branches;
next	1.15;

1.15
date	97.04.18.19.36.27;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.04.15.22.36.44;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.03.06.02.49.13;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.02.27.01.13.55;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.06.00.50;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.01.29.00.22.00;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	96.12.05.01.27.11;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	96.11.24.08.12.11;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.06.03.21;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.22.09.42.46;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.08.21.33;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.00.42.25;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.15.00.37.06;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.21.27.45;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.23.42.35;	author yatin;	state Exp;
branches;
next	;

1.20.2.1
date	97.12.01.22.19.31;	author iang;	state Exp;
branches;
next	;


desc
@@


1.21
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __PROXYINTERFACE_H__
#define __PROXYINTERFACE_H__

#include <sys/time.h>
#include "distinterface.h"
#include "optdb.h"

#ifdef __cplusplus
extern "C" {
#endif


gm_Bool InitializeDistillerCache(Options options, const char *monitorUnitID);
/* 
 * call this function when the proxy front end starts up.
 * If the PTM IP address and port number are known, then pass them as
 * arguments, otherwise pass them as "" and 0 respectively. The Distiller 
 * Cache Manager will figure out the address through beaconing packets from
 * PTM which are sent every couple of seconds
 *
 * optionsFile indicates the pathname of the file containing the various 
 * options for the system. Have a look at tcsproxy/ptm/.gm_options.sample for
 * an example of the options file
 *
 * proxyPort is used simply to identify this frontend to the monitor
 */


DistillerStatus
Distill(C_DistillerType *type,  Argument *args, int numberOfArgs,
	DistillerInput  *input, DistillerOutput *output);
/*gm_Bool *freeOutputBuffer);*/

/*void FreeOutputBuffer(DistillerOutput *output);*/

typedef void *DistillerRequestType;

DistillerStatus
DistillAsync(C_DistillerType *type,  Argument *args, int numberOfArgs,
	DistillerInput  *input, DistillerRequestType *request);

DistillerStatus
DistillRendezvous(DistillerRequestType *request, DistillerOutput *output,
    struct timeval *tv);

void DistillDestroy(DistillerRequestType *request);

const char *
FE_getDistillerStatusString(DistillerStatus status);
const char *
FE_GetMonitorClientUnitID();


void
WaitForPTM();


#ifdef __cplusplus
}
#endif



#endif /* __PROXYINTERFACE_H__ */
@


1.20
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d4 1
d35 12
@


1.20.2.1
log
@Added DistillAsync and friends
@
text
@a3 1
#include <sys/time.h>
a33 12

typedef void *DistillerRequestType;

DistillerStatus
DistillAsync(C_DistillerType *type,  Argument *args, int numberOfArgs,
	DistillerInput  *input, DistillerRequestType *request);

DistillerStatus
DistillRendezvous(DistillerRequestType *request, DistillerOutput *output,
    struct timeval *tv);

void DistillDestroy(DistillerRequestType *request);
@


1.19
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d12 1
a12 1
gm_Bool InitializeDistillerCache(Options options);
@


1.18
log
@moved GET/SET_DISTILLER_TYPE macros to distinterface.h
@
text
@d12 1
a12 3
gm_Bool InitializeDistillerCache(Options options, 
				 const char *ptmIPAddress, 
				 Port ptmPort, Port proxyPort);
@


1.17
log
@changed c++ style comments to c style
@
text
@a6 4

#define  SET_DISTILLER_TYPE(arg,str)  strncpy((arg).string, (str), MAXDISTILLER_TYPE_STRING)
#define  GET_DISTILLER_TYPE(arg)      ((arg).string)

@


1.16
log
@Added the DistillerBuffer data structure to provide a more elegant way of
freeing buffers between the library and the main program
@
text
@d37 1
a37 1
	//gm_Bool *freeOutputBuffer);
d39 1
a39 1
//void FreeOutputBuffer(DistillerOutput *output);
@


1.15
log
@Changed the ptmstub init function to take in the options database as
an argument rather than the options filename
@
text
@d36 2
a37 2
	DistillerInput  *input, DistillerOutput *output,
	gm_Bool *freeOutputBuffer);
d39 1
a39 1
void FreeOutputBuffer(DistillerOutput *output);
@


1.14
log
@Added an extra arg to distillerinit to specify the distiller's name
@
text
@d5 1
d16 1
a16 1
gm_Bool InitializeDistillerCache(const char *optionsFile, 
@


1.13
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@a4 1
#define MAXDISTILLER_TYPE_STRING 80
a5 4

typedef struct C_DistillerType {
  char string[MAXDISTILLER_TYPE_STRING];
} C_DistillerType;
@


1.12
log
@Added priorities to remote execution
Added FE_getDistillerStatusString to cacheman.cc
Modified PTM invocation from the frontend to use the gm_options file rather
than pass all options via the command line
@
text
@a19 5
  /*gm_Bool InitializeDistillerCache(char *ptmExecutable, char *multicastAddress, 
			      Port multicastPort, int ttl,
			      char *ptmIPAddress, Port port,
			      char *monitorIPAddress, Port monitorPort,
			      int monitorTTL);*/
d21 2
a22 1
				 const char *ptmIPAddress, Port port);
d33 2
@


1.11
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d48 2
@


1.10
log
@*** empty log message ***
@
text
@d41 3
a43 3
Distill(C_DistillerType *type, Argument *args,   int    numberOfArgs,
	void     *input,  UINT32 inputLength,
	void     **output,UINT32 *outputLength);
d45 1
a45 1
void FreeOutputBuffer(void *output);
@


1.9
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d47 3
@


1.8
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d20 1
a20 1
  /*Bool InitializeDistillerCache(char *ptmExecutable, char *multicastAddress, 
d25 2
a26 2
Bool InitializeDistillerCache(const char *optionsFile, 
			      const char *ptmIPAddress, Port port);
@


1.7
log
@Removed bugs from stub.cc etc.
@
text
@d20 1
a20 1
Bool InitializeDistillerCache(char *ptmExecutable, char *multicastAddress, 
d24 3
a26 1
			      int monitorTTL);
d34 3
a36 4
 * If the location of the PTM executable is know pass it through ptmExecutable
 * otherwise set it to NULL or "". The Cache Manager will look for the PTM
 * executable in the following places: ./.ptmrc $HOME/.ptmrc or directly
 * try to execute "./ptm"
@


1.6
log
@The proxy front-ends can now spawn new PTM if it detects that there isn't
any PTM running.
@
text
@d47 4
@


1.5
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d20 2
a21 2
Bool InitializeDistillerCache(char *multicastAddress, Port multicastPort, 
			      int ttl,
d31 5
@


1.4
log
@Just before adding stuff for using the monitoring GUI
@
text
@a14 5
#ifndef __cplusplus
typedef int Port;
typedef enum Bool {FALSE, TRUE} Bool;
#endif

d20 5
a24 2
Bool InitializeDistillerCache(char *multicastAddress, Port multicastPort,
			      char *ptmIPAddress, Port port);
@


1.3
log
@added accessor/mutator macros in proxyinterface.h
@
text
@d37 1
a37 1
Distill(C_DistillerType type, Argument *args,   int    numberOfArgs,
@


1.2
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d12 2
@


1.1
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d39 3
@
