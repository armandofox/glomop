head	1.12;
access;
symbols
	Yatin-final:1.12
	Yatin:1.12.0.2
	pre-yatin-merge:1.12
	transend-beta2:1.12
	fox-dev:1.12
	ptm-ng:1.10
	transend-beta-latest:1.10
	Aggregators:1.10
	NoAggregators:1.10
	iang:1.10.0.4
	transend-beta:1.10.0.2
	SOSP:1.10
	stable_ptm:1.10
	merged_preintegrate:1.5
	heisenbug:1.4
	PRE_INTEGRATION:1.3;
locks; strict;
comment	@ * @;


1.12
date	97.07.22.18.36.47;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.07.21.21.30.19;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.02.07.21.54.47;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	97.01.29.22.15.06;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.01.29.00.21.59;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	97.01.08.03.39.22;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.01.04.09.55.36;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.12.15.13.46.35;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.12.13.03.52.19;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.12.05.01.27.09;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.24.08.12.09;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.22.08.21.33;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@bug fix: MAXHOSTNAMELEN redefinition problems
@
text
@#ifndef __LOG_H__
#define __LOG_H__

#include "packet.h"
#include "communication.h"
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>


class MonitorClient {
public:
  MonitorClient(const char *unitID_, const char *ipAddr, Port port, 
		int ttl);
  gm_Bool Send(const char *fieldID, const char *value, const char *script) {
    return Send(unitID, fieldID, value, script);
  };
  gm_Bool Send(const char *unitID, const char *fieldID, const char *value, 
	    const char *script);
  
  void GaspOnSignals(int nsigs, int sigs[]);
  void GaspOnStdSignals();
  void Gasp(int sig);

  const char *getAddress() { return address; };
  const char *getUnitID() { return unitID; };
protected:
  static void SigHandler(int);

  char   hostName[MAXLINE];
  UINT32 pid;

  char   unitID[MAXLINE];
  char   address[MAXLINE];
  Socket *socket;		// may be a UdpSocket or a MulticastSocket

  static MonitorClient *defaultClient;
  static char Separator;
};

class Log {
protected:
  MonitorClient *client;
  FILE *logFD;
  char *prefix;
  static Log log_;

public:
  Log() : client(NULL), logFD(NULL), prefix("") { };
  ~Log() { if (logFD!=NULL) { fclose(logFD); logFD = NULL; } };
  void LogRemotely(MonitorClient *client_) { client = client_; };
  void LogToFile(char *filename) { logFD = fopen(filename, "w"); };
  void LogToStderr(char *prefix_) { prefix = prefix_; };
  Log& operator << (const char *string);
  static Log& getInstance() { return log_; };

};


#define gm_Log(x) \
{ \
  OStream stream; \
  stream << x; \
  Log::getInstance() << stream.getData(); \
}


#define SetRemoteLogging(monitorClient) \
  Log::getInstance().LogRemotely(monitorClient)


#define SetFileLogging(filename) \
  Log::getInstance().LogToFile(filename)


#define SetStderrLogging(prefix) \
  Log::getInstance().LogToStderr(prefix)


#endif // __LOG_H__
@


1.11
log
@Changes to monitor to do unicast and multicast listening properly
Modified distiller database so that everything after "--" is assumed to
be command line args to the distiller
@
text
@a10 5
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 256
#endif


d30 1
a30 1
  char   hostName[MAXHOSTNAMELEN];
@


1.10
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d16 1
a16 1
class MonitorClient : public MulticastSocket {
d18 1
a18 1
  MonitorClient(const char *unitID_, const char *multicastAddr, Port port, 
d30 1
a30 1
  const char *getMulticast() { return multicast; };
d39 2
a40 1
  char   multicast[MAXLINE];
@


1.9
log
@Changes to the monitor for killing
@
text
@d80 2
a81 2
#define SetStderrLogging(filename) \
  Log::getInstance().LogToStderr(filename)
@


1.8
log
@*** empty log message ***
@
text
@d10 6
d25 1
d27 3
a29 1
  static void DyingGasp(void);
d33 3
d37 6
a42 2
  char unitID[MAXLINE];
  char multicast[MAXLINE];
@


1.7
log
@Added "dying gasp" functionality to MonitorClient class: whenever a new
monitor is created, globals are set to record its socket id and unit
name, so that the program can respond to signals by jumping to a signal
handler that announces the program's death by sending a death packet.
New functions in monitor.cc: DyingGasp (class method), GaspOnSignals
(instance method), extern "C" void MonitorClientSigHandler (C signal
handler), CurrentMonitorSock and CurrentUnitId (static variables in
monitor.h).  If you can think of a better way to do this, please change
it.

Fixed bug in frontend HTTP request parsing that caused multi-packet
requests not to be read correctly.

Many changes to the monitor, mostly cosmetic, some functional, including
addition of "kill" button (there is now a "death protocol") and more
sane show/hide behavior that is integrated with iconifying.
@
text
@d22 1
@


1.6
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d19 2
a26 1

@


1.5
log
@Yatin's first commit from India
@
text
@d31 1
d35 1
a35 1
  Log() : client(NULL), logFD(NULL) { };
d39 1
a39 1

d46 1
a46 1
#define LOG(x) \
d60 4
@


1.4
log
@made specific Read method for MluticastSocket, to get correct read() behavior for UDP
@
text
@d6 1
d19 1
a19 1

d23 1
d28 5
d34 2
a35 1
  Log() : client(NULL) { };
d37 1
d41 1
a41 3
protected:
  MonitorClient *client;
  static Log log_;
d55 4
@


1.3
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d6 2
a7 1

d20 1
@


1.2
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d12 1
a12 1
  Bool Send(const char *fieldID, const char *value, const char *script) {
d15 1
a15 1
  Bool Send(const char *unitID, const char *fieldID, const char *value, 
@


1.1
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d10 3
a12 2
  MonitorClient(char *unitID_, char *multicastAddr, Port port, int ttl);
  Bool Send(char *fieldID, char *value, char *script) {
d15 2
a16 1
  Bool Send(char *unitID, char *fieldID, char *value, char *script);
d19 1
a19 1
  char unitID[80];
d28 1
a28 1
  Log& operator << (char *string);
@
