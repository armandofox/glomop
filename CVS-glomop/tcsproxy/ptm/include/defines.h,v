head	1.33;
access;
symbols
	Yatin-final:1.31.2.2
	Yatin:1.31.0.2
	pre-yatin-merge:1.31
	transend-beta2:1.28
	fox-dev:1.28
	ptm-ng:1.26
	transend-beta-latest:1.26
	Aggregators:1.26
	NoAggregators:1.26
	iang:1.26.0.4
	transend-beta:1.26.0.2
	SOSP:1.22
	stable_ptm:1.13
	merged_preintegrate:1.9
	heisenbug:1.9
	PRE_INTEGRATION:1.9
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.33
date	98.01.16.22.16.10;	author yatin;	state Exp;
branches;
next	1.32;

1.32
date	98.01.16.21.58.45;	author iang;	state Exp;
branches;
next	1.31;

1.31
date	97.10.23.21.32.54;	author tkimball;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	97.09.24.00.30.47;	author yatin;	state Exp;
branches;
next	1.29;

1.29
date	97.09.15.03.09.30;	author yatin;	state Exp;
branches;
next	1.28;

1.28
date	97.06.14.05.05.39;	author yatin;	state Exp;
branches;
next	1.27;

1.27
date	97.06.06.00.08.06;	author fox;	state Exp;
branches;
next	1.26;

1.26
date	97.04.18.19.26.39;	author yatin;	state Exp;
branches;
next	1.25;

1.25
date	97.04.17.21.45.14;	author aspolito;	state Exp;
branches;
next	1.24;

1.24
date	97.04.11.03.22.17;	author yatin;	state Exp;
branches;
next	1.23;

1.23
date	97.04.07.00.26.28;	author yatin;	state Exp;
branches;
next	1.22;

1.22
date	97.03.07.20.36.50;	author yatin;	state Exp;
branches;
next	1.21;

1.21
date	97.03.06.06.57.22;	author yatin;	state Exp;
branches;
next	1.20;

1.20
date	97.03.06.05.42.42;	author yatin;	state Exp;
branches;
next	1.19;

1.19
date	97.03.06.02.49.10;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.02.27.01.13.55;	author yatin;	state Exp;
branches;
next	1.17;

1.17
date	97.02.26.04.14.46;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.02.17.03.01.02;	author yatin;	state Exp;
branches;
next	1.15;

1.15
date	97.02.16.19.35.20;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.02.16.19.30.04;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.02.08.02.13.58;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.02.07.21.54.45;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.06.00.48;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.01.04.09.55.34;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	96.12.11.05.25.58;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.11.24.08.12.06;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.00.51.18;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.22.09.42.45;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.08.21.31;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.00.42.24;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.08.21.27.42;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.27;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches;
next	;

1.31.2.1
date	97.11.17.22.06.57;	author yatin;	state Exp;
branches;
next	1.31.2.2;

1.31.2.2
date	97.12.01.22.19.29;	author iang;	state Exp;
branches;
next	;


desc
@@


1.33
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __DEFINES_H__
#define __DEFINES_H__

#include "config_tr.h"
#include "gmdebug.h"
#include <iostream.h>


#define Opt_PTMExecutable           "ptm.executable"
#define Opt_PTMMulticast            "ptm.multicast"
#define Opt_PTMMulticast_IP         "ptm.multicast.ip"
#define Opt_PTMMulticast_port       "ptm.multicast.port"
#define Opt_PTMMulticast_TTL        "ptm.multicast.ttl"

#define Opt_PTMUnicast_IP           "ptm.unicast.ip"
#define Opt_PTMUnicast_port         "ptm.unicast.port"

#define Opt_MonitorMulticast        "Monitor.listen"
#define Opt_MonitorMulticast_IP     "Monitor.listen.ip"
#define Opt_MonitorMulticast_port   "Monitor.listen.port"
#define Opt_MonitorMulticast_TTL    "Monitor.listen.ttl"
#define Opt_DistillerDB             "distiller.db"
#define Opt_Rsh                     "rexec.rsh"
#define Opt_RshArgs                 "rexec.args"
#define Opt_Hosts                   "rexec.hosts"
#define Opt_OptionsFile             "global.optfile"

#define Opt_PTMBeacon_ms            "ptm.beacon_ms"
#define Opt_PTMOptionsReRead_ms     "ptm.optionsrefresh"
#define Opt_LostBeacons             "ptm.lost_beacons"

#define DefaultPTMExecutable        "ptm"
#define DefaultMulticastAddress     "224.9.9.9"
#define DefaultMulticastPort        9999
#define DefaultTTL                  1
#define DefaultMonitorAddress       "228.8.8.8"
#define DefaultMonitorPort          8888
#define DefaultDistillerDB          "distillers.db"
#define DefaultRsh                  ""
#define DefaultRshArgs              ""
#define DefaultAutoLaunchLimit      5

#define NoLoadTimeout_sec             (5*60*60)
#define LaunchTimeout_ms              8000
#define MaxLaunchTimeouts             3

#define DefaultLostBeacons            5
#define DefaultBeaconingPeriod_ms     1000
#define DefaultNotificationTimeout_ms 1000

#define DefaultLoadHistoryPeriod_ms   10000
#define DefaultLoadHistorySize \
  (DefaultLoadHistoryPeriod_ms/DefaultNotificationTimeout_ms)

#define AutoLaunchHysteresisInterval_ms 7500
#define DistillerRequestTimeout_ms  180000  // 3 minutes
#define AskForDistillerTimeout_ms   25000
#define MaxNCSize                   32

//#define NoPTMWait_ms                4000
#define NoPTMRandom_ms              2000
#define ReportStats_ms              8000
#define DefaultDistillerMainTimeout_ms 60000

#define NoRequestReply 0


#define SECONDS(ms)  ((ms) / 1000)
#define USECONDS(ms) (((ms) % 1000) * 1000)
#define timeval_to_ms(tv) (((tv).tv_sec*1000) + ((tv).tv_usec/1000))
/*#define DEBUG(x) cout << x
//#define DEBUG(x) */

#define MAXIP   20
#define MAXPATH 1024
#define MAXARGS 1024
#define MAXLINE 256

#define NEW(objectPtr, constructor) \
{ \
  if ((objectPtr = new constructor)==NULL) VoidReturn(errOutOfMemory); \
  if (Error::getStatus()!=success) return; \
}

#define DELETE(objectPtr) \
{ \
    if (objectPtr!=0) { delete objectPtr; objectPtr = 0; } \
}


enum PTMPacketTypes {
  pktRegisterDistiller=100,
  pktDeregisterDistiller,
  pktReregisterDistiller,
  pktAskForDistiller,
  pktAskForDistillerReply,

  pktPTMBeacon,

  pktDistillerInput,
  pktDistillerOutput,
  pktDistillerLoad,

  pktWillStartPTM,
  pktAskForUnicastBeacon,
  pktDistillerSleep,
  pktFlushNCache
};


enum AskForDistillerStatus {
  ptmOk,
  ptmNoDistiller,
  ptmDistillerLaunchTimeout,
  ptmAskForDistillerTimeout,
  ptmNoPTM
};

enum DistillerSleepStatus {
  distSleep, distKill, distWakeUp
};



#include "error.h"

#endif
@


1.32
log
@.
@
text
@d94 1
@


1.31
log
@Updating PTM with changes for the options reload every N ms
Added field to options file of 'ptm.optionsrefresh' where the
value of the field is how often to check the options file for modifications,
in ms
@
text
@d56 1
a56 1
#define DistillerRequestTimeout_ms  45000  // 45 seconds
@


1.31.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@a93 1
  pktReregisterDistiller,
@


1.31.2.2
log
@Added DistillAsync and friends
@
text
@d56 1
a56 1
#define DistillerRequestTimeout_ms  120000  // 2 min
@


1.30
log
@the distiller InitializeDistillerCache() function call should know
about the PTM's unicast location. Fixed that
@
text
@d29 1
@


1.29
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d14 4
@


1.28
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d58 1
@


1.27
log
@Many changes to support SDK, including bin and sbin directories,
and modified make targets and names of some binary targets.  Calling
convention changed for perl distillers, so fixed html distiller and
added it as transend.text.html.  monitor.multicast property is now
Monitor.listen; all relevant code was changed.  Monitor can now parse
this from the options file.  Updated all UI changes from branch head.
@
text
@d70 1
d99 2
a100 1
  pktDistillerSleep
@


1.26
log
@Added rexec.args, so now you can pass arguments to rsh
Cleaned up the ptm to always read options from the options file
@
text
@d14 4
a17 4
#define Opt_MonitorMulticast        "monitor.multicast"
#define Opt_MonitorMulticast_IP     "monitor.multicast.ip"
#define Opt_MonitorMulticast_port   "monitor.multicast.port"
#define Opt_MonitorMulticast_TTL    "monitor.multicast.ttl"
@


1.25
log
@config.h is now config_tr.h
@
text
@d20 1
d35 1
@


1.24
log
@Increased the no load timeout to 5 hours
@
text
@d4 1
a4 1
#include "config.h"
@


1.23
log
@Removed debugging information from the PTM code.
Removed the setspecific/getspecific calls from frontend code
@
text
@d36 1
a36 1
#define NoLoadTimeout_sec             (5*60)
@


1.22
log
@Added sleep mechanism to the distillers
@
text
@d48 1
a48 1
#define AutoLaunchHysteresisInterval_ms 15000
@


1.21
log
@Distiller reports avg queue length every 8 seconds
@
text
@d36 1
d95 2
a96 1
  pktAskForUnicastBeacon
d108 3
@


1.20
log
@stupid fixes
@
text
@d54 1
a54 1
#define ReportStats_ms              2500
@


1.19
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d52 1
a52 1
#define NoPTMWait_ms                4000
@


1.18
log
@Added priorities to remote execution
Added FE_getDistillerStatusString to cacheman.cc
Modified PTM invocation from the frontend to use the gm_options file rather
than pass all options via the command line
@
text
@d23 2
d36 11
a46 7
#define LostBeacons                 10
#define BeaconingPeriod_ms          1000
#define LaunchTimeout_ms            8000
#define MaxLaunchTimeouts           3
#define NotificationTimeout_ms      1000
#define LoadHistoryPeriod_ms        10000
#define LoadHistorySize (LoadHistoryPeriod_ms/NotificationTimeout_ms)
d93 2
a94 1
  pktWillStartPTM
@


1.17
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d21 2
d36 1
a36 1
#define LaunchTimeout_ms            5000
d43 2
a44 1
#define AskForDistillerTimeout_ms   20000
@


1.16
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d30 1
d32 1
a32 1
#define LostBeacons                 5
d37 3
d45 1
a45 1
#define ReportStats_ms              2000
d52 1
a52 1

@


1.15
log
@RTAGS works!
@
text
@d6 2
d36 1
a36 1
#define DistillerRequestTimeout_ms  300000  // 5 minutes
@


1.14
log
@Testing the rtag for the ptm module
@
text
@a0 2
/* Adding this comment to test my rtags stuff */

@


1.13
log
@Committing changes before going in to modify the linked list routines
@
text
@d1 2
@


1.12
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d27 1
a27 1
#define DefaultRsh                  "rsh"
@


1.11
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d17 2
d27 1
d39 1
@


1.10
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d70 2
a71 4
  pktDistillerArguments,
  pktDistillerData,
  pktDistillerStatus,
  pktDistillerReply,
@


1.9
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d5 1
d26 1
d42 4
a45 2
/* #define DEBUG(x) cout << x */
#define DEBUG(x) 
d52 2
a53 2
  if ((objectPtr = new constructor)==NULL) VoidErrorReturn(errOutOfMemory); \
  if (GlobalErrorCode!=success) return; \
d84 2
a85 1
  ptmAskForDistillerTimeout
@


1.8
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d40 2
a41 1
#define DEBUG(x) cout << x
@


1.7
log
@Update after merging config.h.in
@
text
@d6 10
d17 1
a17 1
#define DefaultPTMPort              4444
d21 3
a23 1
#define DefaultLaunchDB             "distillers.db"
d43 1
d69 1
@


1.6
log
@The proxy front-ends can now spawn new PTM if it detects that there isn't
any PTM running.
@
text
@a42 7
#ifdef Bool
#undef Bool
#endif

enum Bool { FALSE=0, TRUE };


a50 2
  /*pktNoDistiller,
  pktDistillerLaunchTimeout,*/
@


1.5
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d20 3
d64 3
a66 1
  pktDistillerReply
@


1.4
log
@Just before adding stuff for using the monitoring GUI
@
text
@a6 1
#define LOG(x)                      cout << x
a75 1

@


1.3
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d24 2
d41 3
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d15 1
a15 1
#define LaunchTimeout               5
d18 2
d47 2
a48 1
  pktFindDistillers,
d51 2
a52 2
  pktNoDistiller,
  pktDistillerLaunchTimeout,
d58 8
@


1.1
log
@Initial revision
@
text
@d4 3
d12 6
a17 1
#define BeaconingPeriod             2
d19 1
d23 2
a24 2
#define MAXIP 20
#define MAXDISTILLER_TYPE_STRING 80
a38 1
typedef unsigned long uint32;
d45 1
d47 8
a54 1
  pktPTMBeacon
@


1.1.1.1
log
@include files for PTM
@
text
@@
