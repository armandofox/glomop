head	1.9;
access;
symbols
	Yatin-final:1.8.6.1
	Yatin:1.8.0.6
	pre-yatin-merge:1.8
	transend-beta2:1.8
	fox-dev:1.8
	ptm-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.8
	stable_ptm:1.4
	merged_preintegrate:1.4
	heisenbug:1.4
	PRE_INTEGRATION:1.4;
locks; strict;
comment	@ * @;


1.9
date	98.01.16.22.16.16;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.03.07.20.36.52;	author yatin;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	97.03.06.02.49.14;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.02.26.04.14.53;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	97.02.17.03.01.08;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.12.05.01.27.12;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.24.08.12.12;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.21.27.46;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.23.42.36;	author yatin;	state Exp;
branches;
next	;

1.8.6.1
date	97.11.17.22.07.01;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __PTMDB_H__
#define __PTMDB_H__

#include "distdb.h"


class OStream;
class LaunchRecord;
class PrivateConnection;


struct DistillerRecord : public BasicDistiller {
  DistillerRecord(PrivateConnection *privateConnection_,
		  RemoteID& _rid, DistillerType& _type, 
		  DistillerSleepStatus status, gm_Bool mustRestartOnDeath_);
  ~DistillerRecord();
  void Update(Load &newLoad);
  gm_Bool WakeUp();
  void EvUnnaturalDeath();

  PrivateConnection *privateConnection;
  DistillerSleepStatus sleepStatus;
private:
  Load *history;
  int  historySize;
  Load loadOverHistory;
  int  currentPos;
  LaunchRecord *launchRecord; // NULL if there isn't any

  gm_Bool mustRestartOnDeath;
};


class DistillerDatabase : public BasicDistillerDatabase {
public:
  gm_Bool FindMatchingDistillers(DistillerType *type, 
				 List<DatabaseRecord> *list);
  DistillerRecord *WakeSleepingDistiller(DistillerType *type);

protected:
  struct MatchingDistillerFinder {
    MatchingDistillerFinder(DistillerType *type,
			    List<DatabaseRecord> *list)
      : distillerType(type), distillerList(list) { };

    DistillerType        *distillerType;
    List<DatabaseRecord> *distillerList;
  };

  static gm_Bool MatchEachDistiller(Database *db, DatabaseRecord *record, 
				 void *args);
  static gm_Bool MatchSleepingDistiller(Database *db, DatabaseRecord *record, 
					void *args);
};


#endif // __PTMDB_H__
@


1.8
log
@Added sleep mechanism to the distillers
@
text
@d15 1
a15 1
		  DistillerSleepStatus status);
d19 1
d29 2
@


1.8.6.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@d15 1
a15 1
		  DistillerSleepStatus status, gm_Bool mustRestartOnDeath_);
a18 1
  void EvUnnaturalDeath();
a27 2

  gm_Bool mustRestartOnDeath;
@


1.7
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d9 1
d13 3
a15 1
  DistillerRecord(RemoteID& _rid, DistillerType& _type);
d18 1
d20 2
a21 1
  CommunicationObject *privateConnection;
d35 1
d49 2
@


1.6
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d18 2
a19 1
  Load history[LoadHistorySize];
@


1.5
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d8 1
d12 3
a14 3
  DistillerRecord(RemoteID& _rid, DistillerType& _type)
    : BasicDistiller(_rid, _type), privateConnection(NULL) { };
  void Update(Load &newLoad) { load = newLoad; };
d17 5
@


1.4
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d22 1
a22 1
			      LinkedList<DatabaseRecord> *list);
d27 1
a27 1
			    LinkedList<DatabaseRecord> *list)
d30 2
a31 2
    DistillerType              *distillerType;
    LinkedList<DatabaseRecord> *distillerList;
@


1.3
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d21 1
a21 1
  Bool FindMatchingDistillers(DistillerType *type, 
d34 1
a34 1
  static Bool MatchEachDistiller(Database *db, DatabaseRecord *record, 
@


1.2
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d13 1
@


1.1
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@a13 4
  /*UINT32 getMarshalledLength();
  void Marshall(char *marshalledString);*/
  friend OStream& operator << (OStream &stream, DistillerRecord &record);

d33 2
a34 1
  static Bool MatchEachDistiller(DatabaseRecord *record, void *args);
@
