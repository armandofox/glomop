head	1.29;
access;
symbols
	Yatin-final:1.28.2.2
	Yatin:1.28.0.2
	pre-yatin-merge:1.28
	transend-beta2:1.25
	fox-dev:1.25.2.1
	ptm-ng:1.24
	transend-beta-latest:1.24
	Aggregators:1.24
	NoAggregators:1.24
	iang:1.23.0.2
	transend-beta:1.22.0.2
	SOSP:1.19
	stable_ptm:1.13
	merged_preintegrate:1.9
	heisenbug:1.9
	PRE_INTEGRATION:1.9;
locks; strict;
comment	@ * @;


1.29
date	98.01.16.22.16.09;	author yatin;	state Exp;
branches;
next	1.28;

1.28
date	97.09.18.22.45.16;	author yatin;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	97.09.15.03.09.28;	author yatin;	state Exp;
branches;
next	1.26;

1.26
date	97.08.30.21.34.43;	author fox;	state Exp;
branches;
next	1.25;

1.25
date	97.06.14.05.05.38;	author yatin;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	97.05.01.00.55.00;	author yatin;	state Exp;
branches;
next	1.23;

1.23
date	97.04.28.18.46.34;	author yatin;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	97.04.18.19.36.27;	author yatin;	state Exp;
branches;
next	1.21;

1.21
date	97.04.18.19.26.39;	author yatin;	state Exp;
branches;
next	1.20;

1.20
date	97.04.07.00.26.27;	author yatin;	state Exp;
branches;
next	1.19;

1.19
date	97.03.06.07.18.18;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.03.06.05.42.41;	author yatin;	state Exp;
branches;
next	1.17;

1.17
date	97.03.06.02.49.08;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.02.27.01.13.54;	author yatin;	state Exp;
branches;
next	1.15;

1.15
date	97.02.26.04.14.45;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.02.17.03.00.59;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.02.07.21.54.45;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.01.29.06.00.46;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.00.21.59;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.01.04.09.55.32;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	96.12.05.01.27.05;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	96.11.24.08.12.05;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.06.03.21;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.22.09.42.45;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.08.21.31;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.00.42.23;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.08.21.27.41;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.23;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.44.08;	author yatin;	state Exp;
branches;
next	;

1.23.2.1
date	97.05.06.23.49.45;	author iang;	state Exp;
branches;
next	;

1.25.2.1
date	97.08.15.07.02.56;	author fox;	state Exp;
branches;
next	;

1.28.2.1
date	97.11.17.22.06.56;	author yatin;	state Exp;
branches;
next	1.28.2.2;

1.28.2.2
date	97.12.01.22.19.27;	author iang;	state Exp;
branches;
next	;


desc
@@


1.29
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __CACHEMAN_H__
#define __CACHEMAN_H__

#include "reqrep.h"
#include "options.h"
#include "rexec.h"
#include "cache.h"

class Thread;
#define evAskForDistiller (evUserDefinedEvent+1)



class StartPTMTimer {
public:
  StartPTMTimer() : timeout_ms(DefaultLostBeacons*DefaultBeaconingPeriod_ms),
    timer(NULL), mutex("*-start-ptm") { };
  void Initialize(UINT32 timeout_ms_) { timeout_ms = timeout_ms_; };

  void Disable() { 
    mutex.Lock();
    timer = NULL; 
    mutex.Unlock();
  };
  gm_Bool IsDisabled() { 
    mutex.Lock();
    gm_Bool returnValue = (timer==NULL) ? gm_True : gm_False; 
    mutex.Unlock();
    return returnValue;
  };

  gm_Bool NewTimer(EventSystem *evs) { 
    mutex.Lock();
    timer = new ActualTimer(this, evs, RandomDelay());
    if (timer==NULL) {
      mutex.Unlock();
      Return(gm_False, errOutOfMemory);
    }
    mutex.Unlock();
    return gm_True;
  }

protected:
  gm_Timer *getTimer() {
    mutex.Lock();
    gm_Timer *t = timer;
    mutex.Unlock();
    return t;
  }
  class ActualTimer : public gm_Timer {
  public:
    ActualTimer(StartPTMTimer *parent_, EventSystem *evs, UINT32 delay_ms)
      : gm_Timer(evs, SECONDS(delay_ms), USECONDS(delay_ms), gm_False), 
	parent(parent_) { 
      gm_Log("Creating a timer for starting the PTM (" << (UINT32)this 
	     << ")\n");
    }
    
  protected:
    gm_Bool EvTimer(EventSystem *evs) {
      if (parent->getTimer()==this) {
	gm_Log("StartPTMTimer (" << (UINT32)this 
	       << ") expired; invoking EvTimer()\n");
	// no one deleted the timer yet, so it is a real timeout
	if (parent->EvTimer(evs)==gm_False) return gm_False;
      } else {
	gm_Log("StartPTMTimer (" << (UINT32) this 
	       << ") expired, but this timer is obsolete\n");
      }
      delete this;
      return gm_True;
    };
    StartPTMTimer *parent;
  };


  gm_Bool EvTimer(EventSystem *evs);
  UINT32 RandomDelay();

  UINT32 timeout_ms;
  ActualTimer *timer;
  Mutex mutex;
  friend class ActualTimer;
};




class CacheManager {
public:
  CacheManager(OptionDatabase *options, const char *monitorUnitID);
  virtual ~CacheManager();
  
  /* called by the distiller threads */
  DistillerStatus Distill(DistillerType *type, Argument *args,int numberOfArgs,
			  DistillerInput *input, DistillerOutput *output);
  DistillerStatus DistillAsync(DistillerType *type, Argument *args,
  			  int numberOfArgs, DistillerInput *input,
			  DistillerRequest *& newrequest);
  DistillerStatus DistillRendezvous(DistillerRequest *& newrequest,
			  DistillerOutput *output, struct timeval *tv);
  void DistillDestroy(DistillerRequest *& newrequest);
  RequestReplyEventSystem *getEventSystem() { return evs; }
  MonitorClient *getMonitorClient() { return monitorClient; }

  /* Invoked by socket threads */
  gm_Bool EvPTMLocationReceived__(RemoteID &newPtmAddress);
  gm_Bool UpdateCache__(DistillerInfoHandler *handler) { 
    return cache->Update(handler); 
  }
  void FlushNCache() { cache->FlushNCache(); }

  gm_Bool RestartPTMTimer__();
  gm_Bool ClosePTMConnection__();
  gm_Bool StartPTM__();
  gm_Bool IsConnectedToPTM__() { 
    gm_Bool returnValue;
    mgrMutex.Lock();
    returnValue = IsConnectedToPTM_();
    mgrMutex.Unlock();
    return returnValue;
  };
  gm_Bool IsConnectedToPTM_() {
    return (ptmConnection_==NULL) ? gm_False:gm_True; 
  }
  void WaitForPTM__();
  gm_Bool AskPTMForDistiller__(DistillerType *type, 
			       AskForDistillerStatus &status);
  gm_Bool AskPTMForUnicastBeacon() {
    FE_PTMConnection *conn = ptmConnection_;
    if (conn==NULL) return gm_True;
    conn->IncrReference();
    gm_Packet packet(pktAskForUnicastBeacon, 0, 0);
    if (conn->Write(&packet)==gm_False) {
      return gm_False;
    }
    conn->DecrReference();
    return gm_True;
  }

  
  static CacheManager* getInstance() { return instance; };
  static void Abort(const char *string);
  static void CtlCPressed(int sig);
  static gm_Bool CreateInstance(OptionDatabase *options, 
				const char *monitorUnitID);


private:
  gm_Bool ConnectToPTM_(RemoteID &ptmAddress_);
  gm_Bool EvPTMConnectionLost_();
  gm_Bool EvPTMConnectionLost__() {
    mgrMutex.Lock();
    gm_Bool returnValue = EvPTMConnectionLost_();
    mgrMutex.Unlock();
    return returnValue;
  }

  class NoBeaconTimer : public gm_Timer {
  public:
    NoBeaconTimer(EventSystem *evs, UINT32 timeout_ms) 
      : gm_Timer(evs, SECONDS(timeout_ms),
	      USECONDS(timeout_ms), gm_True),
	beaconRecvd(gm_False), askedForUnicastBeacon(gm_False) { };
    
    gm_Bool EvTimer(EventSystem *evs);
    gm_Bool EvBeaconReceived(EventSystem */*evs*/) { 
      beaconRecvd = gm_True; 
      askedForUnicastBeacon = gm_False;
      return gm_True;
    };
    
  private:
    gm_Bool beaconRecvd;
    gm_Bool askedForUnicastBeacon;
  };
  
  static void *ForkHelper(void *);
  void Main();
  gm_Bool ExpandOptions(OptionDatabase *options_);

  RequestReplyEventSystem *evs;
  FE_PTMConnection *ptmConnection_;
  SharedBus        *bus;
  Thread           *managerThread;
  DistillerCache   *cache;
  MonitorClient    *monitorClient;
  StartPTMTimer    startPTMTimer;
  NoBeaconTimer    *noBeaconTimer;
  OptionDatabase   *options;
  RExec            rexec;

  Mutex            mgrMutex;
  Mutex            ptmFoundMutex;
  Condition        ptmFoundCond;
  
  static CacheManager *instance;
  


  struct AskForDistiller : public RequestReply {
    AskForDistiller(RequestReplyEventSystem *evs) 
      : RequestReply(evs, SECONDS(AskForDistillerTimeout_ms),
		     USECONDS(AskForDistillerTimeout_ms)), mutex("ask-ptm"){ };
    gm_Bool SendAndWait(FE_PTMConnection *connection, DistillerType *type);
    AskForDistillerStatus Status() { return status; };
    
  protected:
    gm_Bool EvReplyReceived(RequestReplyEventSystem *evs, void *args);
    gm_Bool EvTimer(RequestReplyEventSystem *evs);
    
    AskForDistillerStatus status;
    Mutex     mutex;
    Condition condition;
  };
};


extern "C" {
#include "thr_cntl.h"
}
inline void SetThreadState(thread_state_t state) {
  extern pthread_key_t index_key;
  INST_set_thread_state((int)pthread_getspecific(index_key), state);
}




#endif // __CACHEMAN_H__
@


1.28
log
@added mash_stub
mash_stub is compiled only if --with-mashdir flag is set
added a --enable/disable-mkdep flag to configure
configure can read default arguments from a special file .configure in
the toplevel tcsproxy directory
@
text
@d13 1
d54 5
a58 1
	parent(parent_) { };
d62 2
d66 3
d97 6
@


1.28.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@a12 1

d53 1
a53 5
	parent(parent_) { 
      gm_Log("Creating a timer for starting the PTM (" << (UINT32)this 
	     << ")\n");
    }
    
a56 2
	gm_Log("StartPTMTimer (" << (UINT32)this 
	       << ") expired; invoking EvTimer()\n");
a58 3
      } else {
	gm_Log("StartPTMTimer (" << (UINT32) this 
	       << ") expired, but this timer is obsolete\n");
@


1.28.2.2
log
@Added DistillAsync and friends
@
text
@a96 6
  DistillerStatus DistillAsync(DistillerType *type, Argument *args,
  			  int numberOfArgs, DistillerInput *input,
			  DistillerRequest *& newrequest);
  DistillerStatus DistillRendezvous(DistillerRequest *& newrequest,
			  DistillerOutput *output, struct timeval *tv);
  void DistillDestroy(DistillerRequest *& newrequest);
@


1.27
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d43 1
a43 1
  Timer *getTimer() {
d45 1
a45 1
    Timer *t = timer;
d49 1
a49 1
  class ActualTimer : public Timer {
d52 1
a52 1
      : Timer(evs, SECONDS(delay_ms), USECONDS(delay_ms), gm_False), 
d117 1
a117 1
    Packet packet(pktAskForUnicastBeacon, 0, 0);
d143 1
a143 1
  class NoBeaconTimer : public Timer {
d146 1
a146 1
      : Timer(evs, SECONDS(timeout_ms),
@


1.26
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d81 1
a81 1
  CacheManager(OptionDatabase *options);
d114 1
a114 1
    PTMConnection *conn = ptmConnection_;
d129 2
a130 1
  static gm_Bool CreateInstance(OptionDatabase *options);
d167 13
a179 13
  PTMConnection   *ptmConnection_;
  SharedBus       *bus;
  Thread          *managerThread;
  DistillerCache  *cache;
  MonitorClient   *monitorClient;
  StartPTMTimer   startPTMTimer;
  NoBeaconTimer   *noBeaconTimer;
  OptionDatabase  *options;
  RExec           rexec;

  Mutex           mgrMutex;
  Mutex           ptmFoundMutex;
  Condition       ptmFoundCond;
d189 1
a189 1
    gm_Bool SendAndWait(PTMConnection *connection, DistillerType *type);
a206 4
  /*extern int *index_array__;
  if (index_array__!=NULL)
    INST_set_thread_state(index_array__[(unsigned)pthread_self()],state);
    */
@


1.25
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d208 2
a209 1
    inst_set_thread_state(index_array__[(unsigned)pthread_self()],state);*/
d211 1
a211 1
  inst_set_thread_state((int)pthread_getspecific(index_key), state);
@


1.25.2.1
log
@*** empty log message ***
@
text
@d208 1
a208 2
    INST_set_thread_state(index_array__[(unsigned)pthread_self()],state);
    */
d210 1
a210 1
  INST_set_thread_state((int)pthread_getspecific(index_key), state);
@


1.24
log
@Use pthread_get/setspecific to get at the thrindex for the thread within
the PTM stub
@
text
@d81 1
a81 1
  CacheManager(OptionDatabase *options, RemoteID &ptm, Port proxyPort);
d87 2
a88 2
  RequestReplyEventSystem *getEventSystem() { return evs; };
  MonitorClient *getMonitorClient() { return monitorClient; };
d94 2
a95 1
  };
d129 1
a129 2
  static gm_Bool CreateInstance(OptionDatabase *options, RemoteID &ptmAddress,
				Port proxyPort);
d163 1
a163 7
  gm_Bool InstallAllOptions();
  


  


@


1.23
log
@Added the DistillerBuffer data structure to provide a more elegant way of
freeing buffers between the library and the main program
@
text
@d212 1
a212 1
  extern int *index_array__;
d214 3
a216 1
    inst_set_thread_state(index_array__[(unsigned)pthread_self()],state);
@


1.23.2.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@d212 1
a212 1
  /*extern int *index_array__;
d214 1
a214 3
    inst_set_thread_state(index_array__[(unsigned)pthread_self()],state);*/
  extern pthread_key_t index_key;
  inst_set_thread_state((int)pthread_getspecific(index_key), state);
@


1.22
log
@Changed the ptmstub init function to take in the options database as
an argument rather than the options filename
@
text
@d86 1
a86 2
			  DistillerInput *input, DistillerOutput *output,
			  gm_Bool *freeOutputBuffer);
@


1.21
log
@Added rexec.args, so now you can pass arguments to rsh
Cleaned up the ptm to always read options from the options file
@
text
@d81 1
a81 1
  CacheManager(const char *optionsFile, RemoteID &ptm, Port proxyPort);
d129 1
a129 1
  static gm_Bool CreateInstance(const char *optionsFile, RemoteID &ptmAddress,
d180 1
a180 1
  OptionDatabase  options;
@


1.20
log
@Removed debugging information from the PTM code.
Removed the setspecific/getspecific calls from frontend code
@
text
@d164 1
a164 1
  gm_Bool InstallAllOptions(const char *optionsFile);
@


1.19
log
@Modified the frontend and libptmstub to provide a more detailed "blinking
light" view of the stuff being done inside the Distill() call
@
text
@a211 1
extern pthread_key_t thread_index_key__;
d213 3
a215 1
  inst_set_thread_state((int)pthread_getspecific(thread_index_key__),state);
@


1.18
log
@stupid fixes
@
text
@d209 11
@


1.17
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d15 3
a17 1
  StartPTMTimer() : timer(NULL), mutex("*-start-ptm") { };
d68 1
a68 1
  static UINT32 RandomDelay();
d70 1
@


1.16
log
@Added priorities to remote execution
Added FE_getDistillerStatusString to cacheman.cc
Modified PTM invocation from the frontend to use the gm_options file rather
than pass all options via the command line
@
text
@d78 1
a78 1
  CacheManager(const char *optionsFile, RemoteID &ptm);
d110 12
a121 1
  
d126 2
a127 1
  static gm_Bool CreateInstance(const char *optionsFile, RemoteID &ptmAddress);
d142 4
a145 4
    NoBeaconTimer(EventSystem *evs) 
      : Timer(evs, SECONDS(LostBeacons*BeaconingPeriod_ms),
	      USECONDS(LostBeacons*BeaconingPeriod_ms), gm_True),
	noBeacon(gm_True) { };
d149 2
a150 1
      noBeacon = gm_False; 
d155 2
a156 1
    gm_Bool noBeacon;
@


1.15
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d147 1
a147 1
  gm_Bool InstallAllOptions();
@


1.14
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d13 1
a13 1
class StartPTMTimer : public Timer {
d15 24
a38 3
  StartPTMTimer(EventSystem *evs, UINT32 delay_ms) 
    : Timer(evs, SECONDS(delay_ms), USECONDS(delay_ms), gm_False), 
      disabled(gm_False) { };
a39 3
  void Disable() { disabled = gm_True; };
  gm_Bool IsDisabled() { return disabled; };
  static UINT32 RandomDelay();
d41 24
d66 5
a70 1
  gm_Bool disabled;
d76 1
a76 1
class CacheManager : public EventHandler {
d81 1
a81 5
  /*gm_Bool IsPTMFound() { return (strcmp(ptmAddress.ipAddress, "")==0) ?
			   gm_False : gm_True; };
  gm_Bool NoPTM();
  gm_Bool PTMLocationReceived(RemoteID &newPtmAddress);*/
  
d85 6
a90 3
  
  gm_Bool EvPTMLocationReceived(RemoteID &newPtmAddress);
  gm_Bool UpdateCache(DistillerInfoHandler *handler) { 
d93 12
a104 12
  SharedBus               *getSharedBus()     { return bus; };
  PTMConnection           *getPTMConnection() { return ptmConnection_; };
  RequestReplyEventSystem *getEventSystem()   { return evs; };
  MonitorClient           *getMonitorClient() { return monitorClient; };
  StartPTMTimer           *getStartPTMTimer() { return startPTMTimer; };
  void SetStartPTMTimer(StartPTMTimer *timer) { startPTMTimer = timer; };

  /*gm_Bool ConnectToPTM();
  gm_Bool ClosePTMConnection();*/
  gm_Bool ClosePTMConnection();
  gm_Bool StartPTM();
  gm_Bool IsConnectedToPTM() { 
d106 4
a109 4
  };
  void WaitForPTM();
  gm_Bool AskPTMForDistiller(DistillerType *type, 
			     AskForDistillerStatus &status);
d118 1
a118 1
protected:
d120 7
a126 2
  gm_Bool EvPTMConnectionLost();

d149 2
a150 1
  gm_Bool HandleEvent(EventSystem *evs, EventType eventType, void *args);
d152 3
a154 1
  //RemoteID        ptmAddress;
d161 1
a161 1
  StartPTMTimer   *startPTMTimer;
d165 2
a166 1
  
d172 2
d177 2
a178 2
		     USECONDS(AskForDistillerTimeout_ms)) { };
    gm_Bool SendAndWait(DistillerType *type);
@


1.13
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d7 1
a8 4

class RequestReplyEventSystem;
class PTMConnection;
class SharedBus;
a9 2
class DistillerCache;

d28 2
d35 2
a36 2
  gm_Bool IsPTMFound() { return (strcmp(ptmAddress.ipAddress, "")==0) ?
			gm_False : gm_True; };
d38 1
a38 1
  gm_Bool PTMLocationReceived(RemoteID &newPtmAddress);
d40 1
a40 1
  DistillerStatus Distill(DistillerType &type, Argument *args,int numberOfArgs,
d43 5
a47 1

d49 1
a49 1
  PTMConnection           *getPTMConnection() { return ptmConnection; };
a50 1
  DistillerCache          *getCache()         { return cache; };
d54 3
a56 1
  gm_Bool ConnectToPTM();
d59 3
d63 4
a66 1

d71 2
d74 4
d83 2
a84 2
      noBeacon(gm_True) { };

d90 2
a91 2

  protected:
d94 1
a94 1

d98 1
a98 4

  gm_Bool AskPTMForDistiller(DistillerType *type, 
			     AskForDistillerStatus &status);

d100 2
a101 2

  RemoteID        ptmAddress;
d103 1
a103 1
  PTMConnection   *ptmConnection;
d112 1
a112 1

d115 1
a115 1

d117 1
a117 1

d124 1
a124 1

d128 1
a128 1

@


1.12
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d6 1
d100 1
@


1.11
log
@*** empty log message ***
@
text
@d43 2
a44 2
			  void *input,   UINT32 inputLength,
			  void **output, UINT32 *outputLength);
@


1.10
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d50 1
@


1.9
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d62 17
d83 2
a84 1
  gm_Bool AskPTMForDistiller(DistillerType *type, AskForDistillerStatus &status);
d96 1
@


1.8
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d20 2
a21 2
    : Timer(evs, SECONDS(delay_ms), USECONDS(delay_ms), FALSE), 
      disabled(FALSE) { };
d23 2
a24 2
  void Disable() { disabled = TRUE; };
  Bool IsDisabled() { return disabled; };
d27 2
a28 2
  Bool EvTimer(EventSystem *evs);
  Bool disabled;
d37 4
a40 4
  Bool IsPTMFound() { return (strcmp(ptmAddress.ipAddress, "")==0) ?
			FALSE : TRUE; };
  Bool NoPTM();
  Bool PTMLocationReceived(RemoteID &newPtmAddress);
d52 3
a54 3
  Bool ConnectToPTM();
  Bool ClosePTMConnection();
  Bool StartPTM();
d60 1
a60 1
  static Bool CreateInstance(const char *optionsFile, RemoteID &ptmAddress);
d64 1
a64 1
  Bool InstallAllOptions();
d66 1
a66 1
  Bool AskPTMForDistiller(DistillerType *type, AskForDistillerStatus &status);
d68 1
a68 1
  Bool HandleEvent(EventSystem *evs, EventType eventType, void *args);
d89 1
a89 1
    Bool SendAndWait(DistillerType *type);
d93 2
a94 2
    Bool EvReplyReceived(RequestReplyEventSystem *evs, void *args);
    Bool EvTimer(RequestReplyEventSystem *evs);
@


1.7
log
@Removed bugs from stub.cc etc.
@
text
@d5 1
d34 1
a34 2
  CacheManager(char *ptmExecutable, RemoteID &ptm, RemoteID &multicast, 
	       int ttl, RemoteID &logAddr, int logTTL);
d58 1
a58 1
  static void Abort(char *string);
d60 1
a60 3
  static Bool CreateInstance(char *ptmExecutable, RemoteID &ptm, 
			     RemoteID &multicast, int ttl,
			     RemoteID &logAddr, int logTTL);
d64 1
d78 1
a78 1
  char            *ptmExecutable;
a81 2

  char            monitorMulticast[MAXIP+30], coordinationMulticast[MAXIP+30];
@


1.6
log
@The proxy front-ends can now spawn new PTM if it detects that there isn't
any PTM running.
@
text
@d55 1
d80 3
@


1.5
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d24 1
d33 2
a34 2
  CacheManager(RemoteID &ptm, RemoteID &multicast, int ttl,
	       RemoteID &logAddr, int logTTL);
d50 2
d54 1
d59 2
a60 1
  static Bool CreateInstance(RemoteID &ptm, RemoteID &multicast, int ttl,
a64 1
  Bool StartPTM();
d78 3
@


1.4
log
@Just before adding stuff for using the monitoring GUI
@
text
@d19 2
a20 1
    : Timer(evs, SECONDS(delay_, USECONDS(delay), FALSE), disabled(FALSE)) { };
d25 1
a25 1
  Bool EvTimer(EventSystem *evs) { };
d32 2
a33 1
  CacheManager(RemoteID &ptm, RemoteID &multicast, int ttl);
d55 2
a56 1
  static Bool CreateInstance(RemoteID &ptm, RemoteID &multicast);
d72 1
@


1.3
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d9 1
a9 1
class Listener;
d16 13
d31 1
a31 1
  CacheManager(RemoteID &ptm, RemoteID &multicast);
d36 1
a36 1
  void NoPTM() { strcpy(ptmAddress.ipAddress, ""); ptmAddress.port = 0; };
d43 1
a43 1
  Listener                *getListener()      { return listener; };
d48 1
a48 1
  void ClosePTMConnection();
d57 2
d66 1
a66 1
  Listener        *listener;
d69 1
d75 2
a76 2
      : RequestReply(evs, AskForDistillerTimeout_ms/1000,
		     AskForDistillerTimeout_ms%1000) { };
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d4 2
d13 1
a13 1
#define evFindDistillersFromPTM (evUserDefinedEvent+1)
d16 1
a16 1
class CacheManager {
d19 1
a19 1
  ~CacheManager();
a20 3
  /*Bool IsPTMFound() { return (strcmp(ptmAddress.ipAddress, "")==0) ?
			FALSE : TRUE; };
  void NoPTM() { strcpy(ptmAddress.ipAddress, ""); ptmAddress.port = 0; };*/
d26 4
d33 1
a33 1

d39 1
d44 1
d46 1
a46 1
  //Bool HandleEvent(EventSystem *evs, EventType eventType, void *args) { };
d56 16
@


1.1
log
@*** empty log message ***
@
text
@d5 1
d10 2
a11 1
class CMPacketHandler;
d16 1
a16 1
  CacheManager(char *mip, Port mp, char *ip, Port p);
d19 6
a24 1
  void Main();
d27 6
a32 2
  CMPacketHandler *getPacketHandler() { return packetHandler; }
  Listener        *getListener() { return listener; }
d34 1
d36 2
d39 4
a42 2
  static CacheManager *cm;
protected:
d44 1
a44 2
  EventSystem     *evs;
  CMPacketHandler *packetHandler;
d48 1
d50 1
a50 1
  DistillerCache  *cache;
@
