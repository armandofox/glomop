head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.11.06.23.42.23;	author yatin;	state dead;
branches;
next	1.1;

1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.24.23.45.49;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@#ifndef __CACHEINTERFACE_H__
#define __CACHEINTERFACE_H__


#include "defines.h"
#include "communication.h"


struct C_DistillerType {
  char string[MAXDISTILLER_TYPE_STRING];
};


typedef void *DistillerID;


#ifndef __cplusplus
typedef struct C_DistillerType C_DistillerType;
typedef enum { FALSE=0, TRUE } Bool;
typedef int Port;
#endif


#ifdef __cplusplus
extern "C" {
#endif

Bool InitializeDistillerCache(char *multicastAddress, Port multicastPort,
			      char *ptmIPAddress, Port port);
/* call this function when the proxy front end starts up.
 * If the PTM IP address and port number are known, then pass them as
 * arguments, otherwise pass them as "" and 0 respectively. The Distiller 
 * Cache Manager will figure out the address through beaconing packets from
 * PTM which are sent every couple of seconds
 */

DistillerID GetDistillerID(C_DistillerType *type);
/* call this function every time you need a distiller of type "type"
 * The function returns a distiller-id on success. It returns 0 on failure
 */

void DestroyDistillerID(DistillerID id);
/* call this function when you are done using the DistillerID
 * This function must be called so that all state associated with that 
 * id is freed up
 */

Bool Send(DistillerID id, char *sendData, int sendLength, 
	  char *receiveData, int *receiveLength);
/* call this function to communicate with the distiller.
 * Returns TRUE on success, FALSE on failure
 * If the distiller-id has become invalid between calling GetDistillerID()
 * and Send(), this function will return FALSE. You must call 
 * DestroyDistillerID() and call GetDistillerID() again to get a new 
 * distillerID
 */



/*
 * All non-void functions set an error-code if an error occurs
 * Use the macros GlobalErrorCode, ErrorFilname and ErrorLineNo defined 
 * in error.h to retrieve error information
 */

#ifdef __cplusplus
}
#endif



#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@include files for PTM
@
text
@@
