head	1.9;
access;
symbols
	Yatin-final:1.8.6.1
	Yatin:1.8.0.6
	pre-yatin-merge:1.8
	transend-beta2:1.8
	fox-dev:1.8
	ptm-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.8
	stable_ptm:1.6
	merged_preintegrate:1.5
	heisenbug:1.5
	PRE_INTEGRATION:1.5
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	98.01.16.22.16.16;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.02.26.04.14.55;	author yatin;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	97.02.17.03.01.11;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.01.04.09.55.38;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.12.05.01.27.13;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.06.03.22;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.22.09.15.05;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.40;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.24.23.45.50;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.24.23.45.50;	author yatin;	state Exp;
branches;
next	;

1.8.6.1
date	98.01.16.20.35.05;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __THREADS_H__
#define __THREADS_H__


#include <pthread.h>
#include "database.h"
#include "defines.h"
#include "gm_mutex.h"

#if 0
class Thread;

class ThreadDatabase : public Database {
public:
  ThreadDatabase();
  ~ThreadDatabase();

  gm_Bool Add   (DatabaseRecord *record);
  void    Remove(DatabaseRecord *record);
  Thread *Find  (pthread_t id);

protected:
  class ThreadIndex : public Index {
  protected:
    IndexKey *getIndexKey(DatabaseRecord *record);
  };

private:
  Mutex       mutex;
  ThreadIndex index;
};




struct ThreadID : public IndexKey {
  pthread_t id;

  gm_Bool   Equal(IndexKey *key) {
    ThreadID *idKey = (ThreadID*) key;
    return ((pthread_equal(idKey->id, id)!=0) ? gm_True : gm_False);
  };
  UINT32 Hash() { return (UINT32) id; };
};
#endif


class Thread /*: public DatabaseRecord*/ {
public:
  Thread();
  virtual ~Thread();
  gm_Bool Fork(void* (*proc)(void*), void* args);
  gm_Bool Join(void *&returnStatus);
  gm_Bool Join();
  gm_Bool Exit(void *returnStatus, gm_Bool deleteThis=gm_False);

  pthread_t *getID()  { return &id; };
  /*pthread_t *getID()  { return &id.id; };
  ThreadID  *getKey() { return &id;    };
  static Thread* CurrentThread();*/
  static void ThreadExit(Thread *exitThread, void *returnStatus, 
			 gm_Bool deleteThread);
  static void* ThreadProcedure(void *args);
private:
  pthread_attr_t attr;
  //ThreadID id;
  pthread_t id;

  //static ThreadDatabase allThreads;
};




/*inline
ThreadDatabase::ThreadDatabase()
  : mutex("*-thrdb")
{
  AddIndex(&index);
}


inline
ThreadDatabase::~ThreadDatabase()
{
  RemoveIndex(&index);
}



inline gm_Bool
ThreadDatabase::Add(DatabaseRecord *record)
{
  gm_Bool returnValue;
  mutex.Lock();
  returnValue = Database::Add(record);
  mutex.Unlock();

  return returnValue;
}


inline void
ThreadDatabase::Remove(DatabaseRecord *record)
{
  mutex.Lock();
  Database::Remove(record);
  mutex.Unlock();
}


inline Thread*
ThreadDatabase::Find(pthread_t id)
{
  Thread  *thread;
  ThreadID key;
  key.id = id;

  mutex.Lock();
  thread = (Thread*) index.FindOne(&key);
  mutex.Unlock();
  return thread;
}


inline IndexKey *
ThreadDatabase::ThreadIndex::getIndexKey(DatabaseRecord *record) 
{ 
  return ((Thread*)record)->getKey(); 
}*/





inline
Thread::Thread()
{
  int te;
  if (ThreadError(pthread_attr_init(&attr)) != 0) return;

  if (ThreadError(pthread_attr_setstacksize(&attr,4000000))!=0) return;
  te = pthread_attr_setscope(&attr,PTHREAD_SCOPE_SYSTEM);
#ifdef ENOSYS
  if (te!=ENOSYS) { // ENOSYS => this function is not implemented; ignore it
    if (ThreadError(te)!=0) return;
  }
#else
  if (ThreadError(te)!=0) return;
#endif
}


inline
Thread::~Thread()
{
  pthread_attr_destroy(&attr);
  //allThreads.Remove(this);
}


inline gm_Bool 
Thread::Join(void *&returnStatus)
{ 
  return (ThreadError(pthread_join(id, &returnStatus))==0) ? gm_True : gm_False; 
}


inline gm_Bool 
Thread::Join()
{ 
  void *dummyReturnStatus;
  return Join(dummyReturnStatus);
}


/*inline Thread* 
Thread::CurrentThread() 
{ 
  return allThreads.Find(pthread_self()); 
}*/


inline void
Thread::ThreadExit(Thread *exitThread, void *returnStatus, gm_Bool deleteThread)
{
  if (deleteThread==gm_True) delete exitThread;
  pthread_exit(returnStatus);
}


inline gm_Bool
Thread::Exit(void *returnStatus, gm_Bool deleteThis)
{
  if (id==pthread_self()) ThreadExit(this, returnStatus, deleteThis);
  Return(gm_False, errThreadError);
}


#endif // __THREADS_H__
@


1.8
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d142 1
a142 1
  //if (ThreadError(pthread_attr_setstacksize(&attr,4000000))!=0) return;
@


1.8.6.1
log
@changes
@
text
@d142 1
a142 1
  if (ThreadError(pthread_attr_setstacksize(&attr,4000000))!=0) return;
@


1.7
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d10 1
a10 1

d45 1
d48 1
a48 1
class Thread : public DatabaseRecord {
d57 2
a58 1
  pthread_t *getID()  { return &id.id; };
d60 1
a60 1
  static Thread* CurrentThread();
d66 2
a67 1
  ThreadID id;
d69 1
a69 1
  static ThreadDatabase allThreads;
d75 1
a75 1
inline
d77 1
d130 1
a130 1
}
d158 1
a158 1
  allThreads.Remove(this);
d165 1
a165 1
  return (ThreadError(pthread_join(id.id, &returnStatus))==0) ? gm_True : gm_False; 
d177 1
a177 1
inline Thread* 
d181 1
a181 1
}
d195 2
a196 2
  if (this==CurrentThread()) ThreadExit(this, returnStatus, deleteThis);
  return gm_False;
@


1.6
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d8 1
a8 81


class Mutex {
public:
  Mutex()  { ThreadError(pthread_mutex_init(&mp, NULL)); };
  virtual ~Mutex() { ThreadError(pthread_mutex_destroy(&mp)); };

  gm_Bool Lock()
  { return (ThreadError(pthread_mutex_lock(&mp))==0) ? gm_True : gm_False; };
  gm_Bool Unlock()
  { return (ThreadError(pthread_mutex_unlock(&mp))==0) ? gm_True:gm_False; };

  pthread_mutex_t* getID() { return &mp; };
protected:
  pthread_mutex_t mp;
};


class OwnerMutex : public Mutex {
public:
  OwnerMutex() : Mutex(), owner(0) { };
  gm_Bool Lock() {
    if (Mutex::Lock()==gm_False) return gm_False;
    if (ownerMutex.Lock()==gm_False) {
      Mutex::Unlock();
      return gm_False;
    }
    owner = pthread_self();
    if (ownerMutex.Unlock()==gm_False) {
      Mutex::Unlock();
      return gm_False;
    }
    return gm_True;
  }

  gm_Bool Unlock() {
    if (ownerMutex.Lock()==gm_False) return gm_False;
    owner = 0;
    if (ownerMutex.Unlock()==gm_False) return gm_False;
    if (Mutex::Unlock()==gm_False) return gm_False;
    return gm_True;
  }

  gm_Bool DidILock() {
    gm_Bool flag;
    pthread_t me = pthread_self();
    if (me==0) return gm_False;
    if (ownerMutex.Lock()==gm_False) return gm_False;
    flag = ((me==owner) ? gm_True : gm_False);
    if (ownerMutex.Unlock()==gm_False) return gm_False;
    return flag;
  }

protected:
  Mutex ownerMutex;
  pthread_t owner;
};


class Condition {

public:
  Condition()  { ThreadError(pthread_cond_init(&cond, NULL)); };
  virtual ~Condition() { ThreadError(pthread_cond_destroy(&cond)); };
  
  gm_Bool Wait(Mutex *mutex)
  { 
    pthread_mutex_t *mID=mutex->getID();
    return (ThreadError(pthread_cond_wait(&cond, mID))==0) ? gm_True:gm_False;
  };
  gm_Bool Signal() 
  { return (ThreadError(pthread_cond_signal (&cond))==0) ? gm_True:gm_False; };
  gm_Bool Broadcast()
  { return (ThreadError(pthread_cond_broadcast(&cond))==0) ? gm_True:gm_False;};
  
  pthread_cond_t* getID() { return &cond; };
protected:
  pthread_cond_t cond;
};


d18 1
a18 1
  gm_Bool    Add   (DatabaseRecord *record);
d25 1
a25 1
    IndexKey *GetIndexKey(DatabaseRecord *record);
d28 1
d62 1
a62 1
protected:
d123 1
a123 1
ThreadDatabase::ThreadIndex::GetIndexKey(DatabaseRecord *record) 
@


1.5
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d26 39
@


1.4
log
@Removed bugs from stub.cc etc.
@
text
@d15 4
a18 4
  Bool Lock()
  { return (ThreadError(pthread_mutex_lock(&mp))==0) ? TRUE : FALSE; };
  Bool Unlock()
  { return (ThreadError(pthread_mutex_unlock(&mp))==0) ? TRUE:FALSE; };
d34 1
a34 1
  Bool Wait(Mutex *mutex)
d37 1
a37 1
    return (ThreadError(pthread_cond_wait(&cond, mID))==0) ? TRUE:FALSE;
d39 4
a42 4
  Bool Signal() 
  { return (ThreadError(pthread_cond_signal (&cond))==0) ? TRUE:FALSE; };
  Bool Broadcast()
  { return (ThreadError(pthread_cond_broadcast(&cond))==0) ? TRUE:FALSE;};
d59 1
a59 1
  Bool    Add   (DatabaseRecord *record);
d79 1
a79 1
  Bool   Equal(IndexKey *key) {
d81 1
a81 1
    return ((pthread_equal(idKey->id, id)!=0) ? TRUE : FALSE);
d91 4
a94 4
  Bool Fork(void* (*proc)(void*), void* args);
  Bool Join(void *&returnStatus);
  Bool Join();
  Bool Exit(void *returnStatus, Bool deleteThis=false);
d100 1
a100 1
			 Bool deleteThread);
d127 1
a127 1
inline Bool
d130 1
a130 1
  Bool returnValue;
d198 1
a198 1
inline Bool 
d201 1
a201 1
  return (ThreadError(pthread_join(id.id, &returnStatus))==0) ? TRUE : FALSE; 
d205 1
a205 1
inline Bool 
d221 1
a221 1
Thread::ThreadExit(Thread *exitThread, void *returnStatus, Bool deleteThread)
d223 1
a223 1
  if (deleteThread==TRUE) delete exitThread;
d228 2
a229 2
inline Bool
Thread::Exit(void *returnStatus, Bool deleteThis)
d232 1
a232 1
  return FALSE;
@


1.3
log
@Took out thread_cancel.
@
text
@d175 1
d177 10
a186 2
  if (ThreadError(pthread_attr_setscope(&attr,PTHREAD_SCOPE_SYSTEM))!=0)
    return;
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@a93 1
  Bool Cancel();
a200 7
}


inline Bool 
Thread::Cancel()
{ 
  return (ThreadError(pthread_cancel(id.id))==0) ? TRUE : FALSE; 
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
  pthread_mutex_t getID() { return mp; };
d36 2
a37 2
    pthread_mutex_t mID=mutex->getID();
    return (ThreadError(pthread_cond_wait(&cond,&mID))==0) ? TRUE:FALSE;
d44 1
a44 1
  pthread_cond_t getID() { return cond; };
d83 1
a83 1
  uint32 Hash() { return (uint32) id; };
d97 2
a98 2
  pthread_t getID()   { return id.id; };
  ThreadID  *getKey() { return &id;   };
@


1.1.1.1
log
@include files for PTM
@
text
@@
