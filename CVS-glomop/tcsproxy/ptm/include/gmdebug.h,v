head	1.2;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.6
	pre-yatin-merge:1.2
	transend-beta2:1.2
	fox-dev:1.2
	ptm-ng:1.2
	transend-beta-latest:1.2
	Aggregators:1.2
	NoAggregators:1.2
	iang:1.2.0.4
	transend-beta:1.2.0.2
	SOSP:1.2
	stable_ptm:1.1;
locks; strict;
comment	@ * @;


1.2
date	97.02.26.04.14.51;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	97.01.04.09.55.35;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@#ifndef __GMDEBUG_H__
#define __GMDEBUG_H__


#define dbgError 'e'
#define dbgTmp   't'
#include <fstream.h>


class Debug_ {
public:
  Debug_() : codes(0), prefix(""), foutPtr(NULL) { };
  ~Debug_() { if (codes!=0) delete [] codes; };
  void Initialize(char *codes_, char *prefix_, char *fileName=NULL) {
    if (codes!=0) delete [] codes;
    codes = new char[strlen(codes_)+1];
    strcpy(codes, codes_);
    prefix = prefix_; 
    if (fileName!=NULL) {
      fout.open(fileName, ios::out | ios::app);
      if (fout.good()) foutPtr = &fout;
    }
    if (foutPtr==NULL) foutPtr = &cerr;
  };
  gm_Bool ShouldPrint(char code) {
    if (codes==0) return gm_False;
    return (strchr(codes, code)!=NULL) ? gm_True : gm_False; 
  }
  char *getPrefix() { return prefix; };
  ostream &getStream() { return *foutPtr; }
  static Debug_* getInstance() { return &instance_; };
protected:
  char *codes;
  char *prefix;
  ofstream fout;
  ostream *foutPtr;
  static Debug_ instance_;
};


#ifdef gm_No_Debug
#define gm_Debug(code, x)
#else
#define gm_Debug(code, x) \
  if (Debug_::getInstance()->ShouldPrint(code)==gm_True) \
    Debug_::getInstance()->getStream()<<Debug_::getInstance()->getPrefix()<< x;
#endif



#endif // __GMDEBUG_H__
@


1.1
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d7 1
d12 1
a12 1
  Debug_() : codes(0), prefix("") { };
d14 1
a14 1
  void Initialize(char *codes_, char *prefix_) {
d19 5
d29 2
a30 2
  char* getPrefix() { return prefix; };

d35 2
d46 1
a46 1
    cerr << Debug_::getInstance()->getPrefix() << x;
@
