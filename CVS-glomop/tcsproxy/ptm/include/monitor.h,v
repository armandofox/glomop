head	1.5;
access;
symbols
	Yatin-final:1.5
	Yatin:1.5.0.2
	pre-yatin-merge:1.5
	transend-beta2:1.4
	fox-dev:1.4
	ptm-ng:1.4
	transend-beta-latest:1.4
	Aggregators:1.4
	NoAggregators:1.4
	iang:1.4.0.4
	transend-beta:1.4.0.2
	SOSP:1.4
	stable_ptm:1.4
	merged_preintegrate:1.4
	heisenbug:1.4
	PRE_INTEGRATION:1.4;
locks; strict;
comment	@ * @;


1.5
date	97.09.15.03.09.32;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.12.07.01.47.45;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.12.05.01.27.10;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.24.08.12.10;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.22.08.21.33;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@#ifndef __MONITOR_H__
#define __MONITOR_H__


#ifdef __cplusplus
extern "C"
{
#endif


typedef void *MonitorClientID;

/*
 * Create a client object for the monitoring GUI
 * Returns the ID of the object. Returns 0 on failure
 * -- for now the monitoring client only supports multicast
 * -- will add unicast when possible
 */
MonitorClientID
MonitorClientCreate(const char *unitID, const char *multicastAddr, 
		    Port port, int ttl);

/*
 * Destroy a monitor client object
 */
void MonitorClientDestroy(MonitorClientID client);

const char *
MonitorClientUnitID(MonitorClientID client);

/*
 * Send a message to the monitor
 * script can be one of the following:
 *    "" - do the default i.e. print the fieldID, latest sender and value on
 *         a separate line
 *    "Log" - log this message inside a log window
 *    "proc new_unit { toplevel unit } { ... }\n 
 *     proc new_field { frame unit field } { ... }\n
 *     proc update_field { frame unit field value sender } { ... }\n"
 *         - the above 3 line script can be used to define arbitrary
 *           scripts to create new fields and update them
 */
gm_Bool
MonitorClientSend(MonitorClientID client, const char *fieldID, 
		  const char *value, const char *script);

/*
 * Same as above, but can be used to send a message with a unitID that is
 * different from the default one set in MonitorClientCreate
 */
gm_Bool
MonitorClientSend_With_Unit(MonitorClientID client, const char *unitID, 
			    const char *fieldID, const char *value, 
			    const char *script);


#ifdef __cplusplus
}
#endif


#endif /* __MONITOR_H__ */
@


1.4
log
@Just doing a commit before leaving for India
@
text
@d28 3
@


1.3
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@a11 1
typedef int Port;
@


1.2
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d41 1
a41 1
Bool
d49 1
a49 1
Bool
@


1.1
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d21 2
a22 1
MonitorClientCreate(char *unitID, char *multicastAddr, Port port, int ttl);
d42 2
a43 2
MonitorClientSend(MonitorClientID client, char *fieldID, char *value, 
		  char *script);
d50 3
a52 2
MonitorClientSend_With_Unit(MonitorClientID client, char *unitID, 
			    char *fieldID, char *value, char *script);
@
