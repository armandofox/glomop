head	1.4;
access;
symbols
	Yatin-final:1.3.2.1
	Yatin:1.3.0.2
	pre-yatin-merge:1.3
	transend-beta2:1.2
	fox-dev:1.2
	ptm-ng:1.2
	transend-beta-latest:1.2
	Aggregators:1.2
	NoAggregators:1.2
	iang:1.2.0.4
	transend-beta:1.2.0.2;
locks; strict;
comment	@ * @;


1.4
date	98.01.16.22.16.14;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.15.03.09.33;	author yatin;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	97.04.17.02.42.40;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	97.04.17.02.15.42;	author yatin;	state Exp;
branches;
next	;

1.3.2.1
date	97.11.17.22.07.00;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#ifndef __OPTDB_H__
#define __OPTDB_H__


#include "error.h"


typedef void *Options;


#ifdef __cplusplus
extern "C" {
#endif

  /*
   * Options_New: Create a new options database
   *              e.g. Options options;
   *                   Options_New(&options, "gm_options.yatin");
   *
   * Options_Add: Add a char string option to the database
   * Options_Add_UINT32: Add an integer value to the database
   *
   * The above functions return "success" on success, and an integer error 
   * code on failure. Check ptm/include/error.h (enum Errors) for 
   * definitions of the various kinds of errors.
   * 
   * Options_Find: Returns the value corresponding to the input key.
   *               If no value exists, returns NULL
   * Options_Find_UINT32: Returns the integer value corresponding to the 
   *                      input key. If no value exists, returns 0
   */


int     Options_New(Options *options, char *filename);
void    Options_Delete(Options options);
int     Options_Add(Options options, const char *key, const char *value);
int     Options_Add_UINT32(Options options, const char *key, UINT32 value);
const   char *Options_Find(Options options, const char *key);
UINT32  Options_Find_UINT32(Options options, const char *key);
void    Options_Remove(Options options, const char *key);
Options Options_DefaultDb();

#ifdef __cplusplus
}
#endif




#endif /* __OPTDB_H__ */
@


1.3
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d40 1
@


1.3.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@a39 1
void    Options_Remove(Options options, const char *key);
@


1.2
log
@added Options_Delete and included error.h
@
text
@d34 7
a40 6
int  Options_New(Options *options, char *filename);
void Options_Delete(Options options);
int  Options_Add(Options options, const char *key, const char *value);
int  Options_Add_UINT32(Options options, const char *key, UINT32 value);
const char *Options_Find(Options options, const char *key);
UINT32 Options_Find_UINT32(Options options, const char *key);
@


1.1
log
@Added the C interface to the options database
@
text
@d5 3
d23 3
a25 3
   * The above functions return 0 on success, and an integer error code
   * on failure. Check ptm/include/error.g (enum Errors) for definitions
   * of the various kinds of errors.
d34 4
a37 3
int Options_New(Options *options, char *filename);
int Options_Add(Options options, const char *key, const char *value);
int Options_Add_UINT32(Options options, const char *key, UINT32 value);
@
