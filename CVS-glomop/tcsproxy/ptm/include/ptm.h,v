head	1.16;
access;
symbols
	Yatin-final:1.16
	Yatin:1.16.0.2
	pre-yatin-merge:1.16
	transend-beta2:1.14
	fox-dev:1.14
	ptm-ng:1.13
	transend-beta-latest:1.13
	Aggregators:1.13
	NoAggregators:1.13
	iang:1.13.0.4
	transend-beta:1.13.0.2
	SOSP:1.12
	stable_ptm:1.10
	merged_preintegrate:1.8
	heisenbug:1.7
	PRE_INTEGRATION:1.7
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	97.10.23.21.32.55;	author tkimball;	state Exp;
branches;
next	1.15;

1.15
date	97.09.18.22.45.19;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.06.14.05.05.43;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.04.18.19.26.41;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.03.06.02.49.13;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.02.17.03.01.07;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.02.07.21.54.48;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	97.01.04.09.55.37;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	96.12.15.13.46.36;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.12.05.01.27.11;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.24.08.12.12;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.08.21.34;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.00.42.25;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.08.21.27.45;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.36;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.24.23.45.50;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.24.23.45.50;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Updating PTM with changes for the options reload every N ms
Added field to options file of 'ptm.optionsrefresh' where the
value of the field is how often to check the options file for modifications,
in ms
@
text
@#ifndef __PTM_H__
#define __PTM_H__
#include <sys/types.h>
#include "communication.h"
#include "packet.h"
#include "ptmnet.h"
#include "reqrep.h"


class DistillerRecord;
class DistillerDatabase;
class DistillerLauncher;
class BeaconTimer;
class OptionsFileTimer;
class MonitorClient;
class OptionDatabase;


class PTM {
public:
  PTM(OptionDatabase *options);
  ~PTM();
  gm_Bool Run();
  gm_Bool OptionsUpdate(OptionDatabase *options);

  gm_Bool Register  (DistillerRecord *record);
  void Deregister(DistillerRecord *record);
  gm_Bool EvAskForDistiller(DistillerType *distillerType,
			 PrivateConnection *replyObject,
			 UINT32 replyID);

  void Beacon(PrivateConnection *privateConnection=NULL);

  RemoteID                &getAddress()           { return myAddress; };
  RemoteID                &getMulticast()         { return myMulticast; };
  RequestReplyEventSystem *getEventSystem()       { return evs; };
  DistillerDatabase       *getDistillerDB()       { return distillerDB; };
  DistillerLauncher       *getDistillerLauncher() { return distillerLauncher;};
  MonitorClient           *getMonitorClient()     { return monitorClient; };

  gm_Bool AddConnection(PrivateConnection *socket) {
    return listOfConnections.InsertAtTail(socket);
  }
  void RemoveConnection(PrivateConnection *socket) {
    listOfConnections.Remove(socket);
  }

  int CompareBeacon(RemoteID &otherAddr, UINT32 otherRandomID);
  static void CtlCPressed(int sig);
  static void Abort(char *string);
  static void Usage();
  static PTM* getInstance() { return instance; };
  static gm_Bool CreateInstance(OptionDatabase *options);
protected:
  static void OptionsUpdate_static(int sig);
  gm_Bool ExpandOptions(OptionDatabase *optDB);

  RemoteID                myAddress, myMulticast;
  UINT32                  myRandomID;

  RequestReplyEventSystem *evs;
  PrivateConnectionServer *server;
  SharedBus               *bus;

  BeaconTimer             *beaconTimer;
  OptionsFileTimer        *optionsTimer;

  DistillerDatabase       *distillerDB;
  DistillerLauncher       *distillerLauncher;
  MonitorClient           *monitorClient;

  List<PrivateConnection> listOfConnections;
  static PTM              *instance;
};


class BeaconTimer : public gm_Timer {
public:
  BeaconTimer(EventSystem *evs, UINT32 beaconingPeriod_ms) 
    : gm_Timer(evs, SECONDS(beaconingPeriod_ms), 
	       USECONDS(beaconingPeriod_ms)) {};

protected:
  virtual gm_Bool EvTimer(EventSystem */*evs*/) 
  { PTM::getInstance()->Beacon(); return gm_True; };
};

class OptionsFileTimer : public gm_Timer {
private:
   OptionDatabase *options;
   time_t lastModified;
public:
   OptionsFileTimer(EventSystem *evs, UINT32 beaconingPeriod_ms, 
                    OptionDatabase *opt);
protected:
   virtual gm_Bool EvTimer(EventSystem */*evs*/);
};





#endif // __PTM_H__
@


1.15
log
@added mash_stub
mash_stub is compiled only if --with-mashdir flag is set
added a --enable/disable-mkdep flag to configure
configure can read default arguments from a special file .configure in
the toplevel tcsproxy directory
@
text
@d3 1
a3 1

d14 1
d66 1
d86 11
@


1.14
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d75 1
a75 1
class BeaconTimer : public Timer {
d78 2
a79 1
    : Timer(evs, SECONDS(beaconingPeriod_ms), USECONDS(beaconingPeriod_ms)) {};
@


1.13
log
@Added rexec.args, so now you can pass arguments to rsh
Cleaned up the ptm to always read options from the options file
@
text
@d15 1
d20 1
a20 3
  PTM(RemoteID &multicast, int ttl, const char *launchDBPath, const char *rsh,
      const char *rshArgs, const char *rhosts, RemoteID &logAddr, int logTTL, 
      UINT32 beaconingPeriod_ms);
d23 1
d40 7
d52 1
a52 5
  static gm_Bool CreateInstance(RemoteID &multicast, int ttl, 
				const char *launchDBPath, const char *rsh, 
				const char *rshArgs, const char *rhosts, 
				RemoteID &logAddr, int logTTL,
				UINT32 beaconingPeriod_ms);
d54 3
d70 1
@


1.12
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d19 3
a21 2
  PTM(RemoteID &multicast, int ttl, char *launchDBPath, char *rsh, 
      char *rhosts, RemoteID &logAddr, int logTTL, UINT32 beaconingPeriod_ms);
d46 2
a47 1
				char *launchDBPath, char *rsh, char *rhosts,  
@


1.11
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d20 1
a20 1
      char *rhosts, RemoteID &logAddr, int logTTL);
d30 1
a30 1
  void Beacon();
d33 1
d46 2
a47 1
				RemoteID &logAddr, int logTTL);
d49 1
a49 1
  RemoteID                myAddress;
d68 2
a69 2
  BeaconTimer(EventSystem *evs) 
    : Timer(evs, SECONDS(BeaconingPeriod_ms), USECONDS(BeaconingPeriod_ms)) {};
@


1.10
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d48 1
a48 1
  long                    myRandomID;
@


1.9
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d19 2
a20 2
  PTM(RemoteID &multicast, int ttl, char *launchDBPath, RemoteID &logAddr, 
      int logTTL);
d44 2
a45 2
				char *launchDBPath,  RemoteID &logAddr,
				int logTTL);
d48 1
a48 1
  UINT32                  myRandomID;
@


1.8
log
@Yatin's first commit from India
@
text
@d71 1
a71 1
  { PTM::getInstance()->Beacon(); gm_BoolErrorReturn(success); };
@


1.7
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@a30 2
  /*gm_Bool SendBeaconPacket(CommunicationObject *object, UINT32 requestReplyID,
			LinkedList<DatabaseRecord> *list);*/
d43 3
a45 3
  static gm_Bool CreateInstance(RemoteID &multicast, int ttl, char *launchDBPath, 
			     RemoteID &logAddr,
			     int logTTL);
@


1.6
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d22 1
a22 1
  Bool Run();
d24 1
a24 1
  Bool Register  (DistillerRecord *record);
d26 1
a26 1
  Bool EvAskForDistiller(DistillerType *distillerType,
d31 1
a31 1
  /*Bool SendBeaconPacket(CommunicationObject *object, UINT32 requestReplyID,
d45 1
a45 1
  static Bool CreateInstance(RemoteID &multicast, int ttl, char *launchDBPath, 
d72 2
a73 2
  virtual Bool EvTimer(EventSystem */*evs*/) 
  { PTM::getInstance()->Beacon(); BoolErrorReturn(success); };
@


1.5
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d19 2
a20 2
  PTM(Port ptmPort, RemoteID &multicast, int ttl, char *launchDBPath,
      RemoteID &logAddr, int logTTL);
d34 1
a34 1
  RemoteID                *getAddress()           { return &myAddress; };
d45 2
a46 2
  static Bool CreateInstance(Port ptmPort, RemoteID &multicast, int ttl,
			     char *launchDBPath, RemoteID &logAddr,
@


1.4
log
@Just before adding stuff for using the monitoring GUI
@
text
@d14 1
d19 2
a20 1
  PTM(Port ptmPort, RemoteID &multicast, int ttl, char *launchDBPath);
d34 1
a34 1
  RemoteID                *getAddress()           { return &myAddress; }
d37 2
a38 1
  DistillerLauncher       *getDistillerLauncher() { return distillerLauncher; }
d46 2
a47 1
			     char *launchDBPath);
d60 1
@


1.3
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d37 1
d46 2
d64 1
a64 1
    : Timer(evs, BeaconingPeriod_ms/1000, BeaconingPeriod_ms%1000) { };
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d8 1
a8 1
#include <iostream.h>
d24 3
a26 3
  Bool RequestForDistillersReceived(DistillerType *distillerType,
				    CommunicationObject *replyObject,
				    UINT32 replyID);
d29 2
a30 2
  Bool SendBeaconPacket(CommunicationObject *object, UINT32 requestReplyID,
			LinkedList<DatabaseRecord> *list);
@


1.1
log
@Initial revision
@
text
@d7 1
d12 1
d18 1
a18 1
  PTM(Port ptmPort, RemoteID &multicast);
d24 12
a35 5
  void SendBeacon();

  EventSystem       *getEventSystem()   { return evs; };
  DistillerDatabase *getDistillerDB()   { return distillerDB; };
  PTMPacketHandler  *getPacketHandler() { return packetHandler; };
d40 3
a42 2

  static PTM *ptm;
d45 1
a45 1
  EventSystem             *evs;
a47 1
  PTMPacketHandler        *packetHandler;
d52 3
d60 2
a61 1
  BeaconTimer(EventSystem *evs) : Timer(evs, BeaconingPeriod, 0) { };
d65 1
a65 1
  { PTM::ptm->SendBeacon(); BoolErrorReturn(success); };
@


1.1.1.1
log
@include files for PTM
@
text
@@
