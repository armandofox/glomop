head	1.3;
access;
symbols
	Yatin-final:1.3
	Yatin:1.3.0.6
	pre-yatin-merge:1.3
	transend-beta2:1.3
	fox-dev:1.3
	ptm-ng:1.3
	transend-beta-latest:1.3
	Aggregators:1.3
	NoAggregators:1.3
	iang:1.3.0.4
	transend-beta:1.3.0.2
	SOSP:1.3
	stable_ptm:1.2
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@// @;


1.3
date	97.02.26.04.15.15;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.12.05.01.27.33;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.40.40;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.40.40;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@#include "threads.h"


//ThreadDatabase Thread::allThreads;
char* Mutex::log_file=NULL;
FILE* Mutex::log = NULL;

/*struct ThreadArguments {
  ThreadArguments(Thread *t, void * (*p)(void*), void *a)
    : thread(t), proc(p), args(a) { };

  Thread *thread;
  void * (*proc)(void*);
  void *args;
};*/


gm_Bool
Thread::Fork(void* (*proc)(void*), void* args)
{
  //ThreadArguments *realArgs = new ThreadArguments(this, proc, args);

  /*return (ThreadError(pthread_create(&id.id, &attr, ThreadProcedure, 
				     (void *)realArgs))==0) ? gm_True : gm_False;*/
  return (ThreadError(pthread_create(&id, &attr, proc, 
				     (void *)args))==0) ? gm_True : gm_False;
}


/*void *
Thread::ThreadProcedure(void *args)
{
  ThreadArguments *realArgsPtr = (ThreadArguments*) args;
  ThreadArguments realArgs = *realArgsPtr;

  delete realArgsPtr;
  allThreads.Add(realArgs.thread);
  return (*realArgs.proc)(realArgs.args);
}*/
@


1.2
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d4 3
a6 1
ThreadDatabase Thread::allThreads;
d8 1
a8 2

struct ThreadArguments {
d15 1
a15 1
};
d21 1
a21 1
  ThreadArguments *realArgs = new ThreadArguments(this, proc, args);
d23 4
a26 2
  return (ThreadError(pthread_create(&id.id, &attr, ThreadProcedure, 
				     (void *)realArgs))==0) ? gm_True : gm_False;
d30 1
a30 1
void *
d39 1
a39 1
}
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
Bool
d23 1
a23 1
				     (void *)realArgs))==0) ? TRUE : FALSE;
@


1.1.1.1
log
@
@
text
@@
