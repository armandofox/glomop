head	1.3;
access;
symbols
	Yatin-final:1.3
	Yatin:1.3.0.2
	pre-yatin-merge:1.3
	fox-dev:1.1.2.2;
locks; strict;
comment	@// @;


1.3
date	97.10.26.00.31.03;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.08.30.21.34.47;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.08.15.05.32.30;	author fox;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.08.15.05.32.30;	author fox;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.08.16.07.04.23;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changed ptm to always alloc and fill in a null term when receiving
metadata (headers) from workers.  also added StringBuffer function for
setting a distillerbuffer to an ascii string, which implements the same
behavior (adding the null term and setting length and maxLength appropriately).
@
text
@#include "distinterface.h"

#ifdef __cplusplus
extern "C" {
#endif

void  
DistillerBufferClone(DistillerBuffer *dst, DistillerBuffer *src)
{
  assert(src != NULL);
  src->Clone(dst);
}

gm_Bool
DistillerBufferAlloc(DistillerBuffer *dBuf, size_t size)
{
  return dBuf->Alloc(size);
}

gm_Bool
DistillerBufferRealloc(DistillerBuffer *dBuf, size_t size)
{
  return dBuf->Realloc(size);
}

void
DistillerBufferFree(DistillerBuffer *dBuf)
{
  dBuf->Free();
}

void
DistillerBufferSetLength(DistillerBuffer *dBuf, UINT32 len)
{
  dBuf->SetLength(len);
}

void
DistillerBufferSetString(DistillerBuffer *dBuf, char *str, size_t len)
{
  dBuf->StringBuffer(str, len);
}

void
DistillerBufferSetStatic(DistillerBuffer *dBuf, void *buf_, size_t len)
{
  dBuf->StaticBuffer(buf_, len);
}

#ifdef __cplusplus
}
#endif

@


1.2
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d38 8
a45 1
void    DistillerBufferSetStatic(DistillerBuffer *dBuf, void *buf_, size_t len)
@


1.1
log
@file buffer.cc was initially added on branch fox-dev.
@
text
@d1 46
@


1.1.2.1
log
@*** empty log message ***
@
text
@a0 39
#include "distinterface.h"

#ifdef __cplusplus
extern "C" {
#endif

gm_Bool
DistillerBufferAlloc(DistillerBuffer *dBuf, size_t size)
{
  return dBuf->Alloc(size);
}

gm_Bool
DistillerBufferRealloc(DistillerBuffer *dBuf, size_t size)
{
  return dBuf->Realloc(size);
}

void
DistillerBufferFree(DistillerBuffer *dBuf)
{
  dBuf->Free();
}

void
DistillerBufferSetLength(DistillerBuffer *dBuf, UINT32 len)
{
  dBuf->SetLength(len);
}

void    DistillerBufferSetStatic(DistillerBuffer *dBuf, void *buf_, size_t len)
{
  dBuf->StaticBuffer(buf_, len);
}

#ifdef __cplusplus
}
#endif

@


1.1.2.2
log
@a huge amount of frontend reengineering, plus added a Clone() method to
the DistillerBuffer.  basic operation of frontend seems stable.
things that haven't been tested yet:
- POST
- cache cut through behavior
- client timeout doesn't seem to work (never times out??)
- redispatch and similar support for aggregators
and some things still to be implemented:
- support for listening/dispatching on multiple ports
- documentation of what all the files do (and rename the http-specific
sourcefiles)
- eliminate redundant .h inclusions from various sourcefiles
- 'makedepend' for the Makefile.in
@
text
@a6 7
void  
DistillerBufferClone(DistillerBuffer *dst, DistillerBuffer *src)
{
  assert(src != NULL);
  src->Clone(dst);
}

@
