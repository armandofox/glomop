head	1.5;
access;
symbols
	Yatin-final:1.5
	Yatin:1.5.0.2
	pre-yatin-merge:1.5
	transend-beta2:1.4
	fox-dev:1.4
	ptm-ng:1.4
	transend-beta-latest:1.4
	Aggregators:1.4
	NoAggregators:1.4
	iang:1.4.0.4
	transend-beta:1.4.0.2
	SOSP:1.4
	stable_ptm:1.3
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@// @;


1.5
date	97.09.15.03.09.43;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	97.02.17.03.01.33;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	97.01.04.09.55.53;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.12.05.01.27.33;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.23.43.07;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@#include "reqrep.h"


//RequestReplyEventSystem *RequestReply::eventSystem = NULL;


gm_Bool
RequestReplyEventSystem::AddRequestReply(RequestReply *object)
{
  gm_Bool returnValue;

  requestReplyMutex.Lock();

  if (transactionCount==NoRequestReply) transactionCount++;
  object->SetID(transactionCount);
  transactionCount++;
  returnValue = requestReplyIndex.Add(object);

  requestReplyMutex.Unlock();
  return returnValue;
}


void
RequestReplyEventSystem::RemoveRequestReply(RequestReply *object)
{
  requestReplyMutex.Lock();
  requestReplyIndex.Remove(object);
  requestReplyMutex.Unlock();
}


gm_Bool
RequestReplyEventSystem::SendReplyReceivedEvent(UINT32 requestReplyID,
						void *args)
{
  RequestReply *record;

  if (requestReplyID==NoRequestReply) return gm_True;

  requestReplyMutex.Lock();
  RequestReplyKey key;
  key.id = requestReplyID;
  record = (RequestReply*) requestReplyIndex.FindOne(&key);
  requestReplyMutex.Unlock();
  if (record==NULL) return gm_True;
  
  return SendEvent(evReplyReceived, record, args);
}


RequestReply::RequestReply(RequestReplyEventSystem *evs, 
			   long timeoutSec, long timeoutUsec)
  : timer(NULL), eventSystem(evs)
{
  if (timeoutSec==0 && timeoutUsec==0) {
    timer = NULL;
  }
  else {
    timer = new RequestReplyTimer(evs, this, timeoutSec, timeoutUsec);
    if (timer==NULL) VoidReturn(errOutOfMemory);
  }

  if (evs->AddRequestReply(this)==gm_False) return;
}


RequestReply::~RequestReply()
{
  if (timer!=NULL) { delete timer; timer = NULL; }
  eventSystem->RemoveRequestReply(this);
}


gm_Bool
RequestReply::Retry(long timeoutSec, long timeoutUsec)
{
  if (timer!=NULL) { delete timer; timer = NULL; }

  timer = new RequestReplyTimer(eventSystem, this, timeoutSec, timeoutUsec);
  if (timer==NULL) Return(gm_False, errOutOfMemory);
  return gm_True;
}


gm_Bool
RequestReply::HandleEvent(EventSystem *evs, EventType eventType, void *args)
{
  switch (eventType) {
  case evReplyReceived:
    return EvReplyReceived((RequestReplyEventSystem*)evs, args);

  default:
    Return(gm_False, errEvSysInvalidEvent);
  }
}


gm_Bool
RequestReplyTimer::EvTimer(EventSystem *evs)
{
  return requestReply->EvTimer((RequestReplyEventSystem*)evs);
}
@


1.4
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d4 1
a4 1
RequestReplyEventSystem *RequestReply::eventSystem = NULL;
d54 1
a55 1
  eventSystem = evs;
@


1.3
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@a32 1
#include <iostream.h>
d41 1
d45 1
@


1.2
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d40 1
a40 1
  if (requestReplyID==NoRequestReply) gm_BoolErrorReturn(success);
d45 1
a45 1
  if (record==NULL) gm_BoolErrorReturn(success);
d60 1
a60 1
    if (timer==NULL) VoidErrorReturn(errOutOfMemory);
d80 2
a81 2
  if (timer==NULL) gm_BoolErrorReturn(errOutOfMemory);
  gm_BoolErrorReturn(success);
d93 1
a93 1
    gm_BoolErrorReturn(errEvSysInvalidEvent);
@


1.1
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d7 1
a7 1
Bool
d10 1
a10 1
  Bool returnValue;
d34 1
a34 1
Bool
d40 1
a40 1
  if (requestReplyID==NoRequestReply) BoolErrorReturn(success);
d45 1
a45 1
  if (record==NULL) BoolErrorReturn(success);
d63 1
a63 1
  if (evs->AddRequestReply(this)==FALSE) return;
d74 1
a74 1
Bool
d80 2
a81 2
  if (timer==NULL) BoolErrorReturn(errOutOfMemory);
  BoolErrorReturn(success);
d85 1
a85 1
Bool
d93 1
a93 1
    BoolErrorReturn(errEvSysInvalidEvent);
d98 1
a98 1
Bool
@
