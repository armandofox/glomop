head	1.12;
access;
symbols
	Yatin-final:1.11.2.2
	Yatin:1.11.0.2
	pre-yatin-merge:1.11
	transend-beta2:1.10
	fox-dev:1.9
	ptm-ng:1.7
	transend-beta-latest:1.7
	Aggregators:1.7
	NoAggregators:1.7
	iang:1.7.0.4
	transend-beta:1.7.0.2
	SOSP:1.4
	stable_ptm:1.3
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@// @;


1.12
date	98.01.16.22.16.31;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.15.03.09.43;	author yatin;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	97.08.09.00.56.20;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	97.06.28.23.34.41;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.06.14.05.05.53;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	97.04.18.19.26.49;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.04.17.02.42.41;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	97.04.17.02.15.43;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	97.02.17.03.01.33;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	97.01.04.09.55.52;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.12.05.01.27.32;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.24.08.12.32;	author yatin;	state Exp;
branches;
next	;

1.11.2.1
date	97.11.17.22.07.13;	author yatin;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	97.12.01.22.19.37;	author iang;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#include "options.h"
#include "defines.h"
#include <ctype.h>
#include <string.h>
#include <stdlib.h>


gm_Bool
BasicOptionDatabase::Create(const char *filename)
{
  FILE *fp;
  char line[MAXLINE], key[MAXLINE], value[MAXLINE], *ptr, *start;
  DatabaseRecord *record;

  fp = fopen(filename, "r");
  if (fp==NULL) Return(gm_False, errFileOpenError);

  while (fgets(line, MAXLINE, fp)!=NULL) {
    // each line must be of the form "key: value"
    // comments start with ! (same syntax as the .Xdefaults file)
    ptr = line;

    // ignore leading whitespace
    while(isspace(*ptr)) ptr++;
    if (*ptr=='!') {
      // this is a comment; ignore it
      continue;
    }

    // extract the option key
    start = ptr;
    while(!isspace(*ptr) && *ptr!=':' && *ptr!='\0') ptr++;
    if (ptr==start || *ptr=='\0') {
      // invalid line; ignore it
      continue;
    }
    strncpy(key, start, ptr-start);
    key[ptr-start] = '\0';

    // ignore whitespace
    while(isspace(*ptr)) ptr++;
    if (*ptr!=':') {
      // invalid line; ignore it
      continue;
    }

    ptr++;
    // ignore whitespace
    while(isspace(*ptr)) ptr++;

    // extract the option value
    start = ptr;

    ptr = line + strlen(line) - 1;
    while(ptr >= start && isspace(*ptr)) ptr--;
    *(ptr+1) = '\0';
    strcpy(value, start);

    record = CreateRecord(key, value);
    if (record==NULL) return gm_False;
    if (Add(record)==gm_False) return gm_False;
  }

  fclose(fp);

  record = CreateRecord(Opt_OptionsFile, filename);
  if (record==NULL) return gm_False;
  return Add(record);
}




struct OptionKey : public IndexKey {
  OptionKey(const char *s) { strcpy(string, s); };
  gm_Bool Equal(IndexKey *key) {
    OptionKey *optKey = (OptionKey*) key;
    return (strcmp(optKey->string, string)==0) ? gm_True : gm_False; 
  };
  UINT32 Hash() { return HashString(string); }

  char string[MAXLINE];
};


struct Option : public DatabaseRecord {
  Option(const char *key_, const char *value_) 
    : key(key_), value(NULL) { 
      value = new char [strlen(value_)+1];
      if (value!=NULL) strcpy(value, value_); 
  }
  ~Option() {
    delete [] value;
  }

  OptionKey key;
  char *value;
};


class OptionIndex : public Index {
public:
  OptionIndex(gm_Bool dupsAllowed=gm_False,
	      int numberOfBuckets=DefaultNumberOfBuckets)
    : Index(dupsAllowed, numberOfBuckets) { };
protected:
  IndexKey *getIndexKey(DatabaseRecord *record) 
  { return &((Option*)record)->key; }
};


OptionDatabase *OptionDatabase::mainOptionDB = NULL;


OptionDatabase::OptionDatabase()
  : BasicOptionDatabase(), index(NULL)
{
  if ((index = new OptionIndex)==NULL) VoidReturn(errOutOfMemory);
  AddIndex(index); // ignore return value
  mainOptionDB = this;
}


OptionDatabase::~OptionDatabase()
{
  if (mainOptionDB==this) mainOptionDB = NULL;
  if (index!=NULL) {
    RemoveIndex(index);
    delete index;
    index = NULL;
  }

  DeleteAllRecords();
}


DatabaseRecord*
OptionDatabase::CreateRecord(const char *key, const char *value)
{
  if (strlen(key)  >= sizeof(OptionKey::string)) {
    Return(NULL, errBufferOverflow);
  }

  OptionKey okey(key);
  Option *option;
  option = (Option*)index->FindOne(&okey);
  if (option!=NULL) {
    int newLen = strlen(option->value) + strlen(value) + 1;
    char *newValue = new char [newLen];
    if (newValue==NULL) Return(NULL, errOutOfMemory);
    sprintf(newValue, "%s %s", option->value, value);
    delete [] option->value;
    option->value = newValue;
    BasicOptionDatabase::Remove(option);
  }
  else {
    option = new Option(key, value);
    if (option==NULL) Return(NULL, errOutOfMemory);
  }
  return option;
}


struct ForEachHelperStruct {
  OptionDatabase::ForEachFunction func;
  void *args;
  ForEachHelperStruct(OptionDatabase::ForEachFunction f, void *a)
    : func(f), args(a) { }
};


gm_Bool 
OptionDatabase::ForEach(ForEachFunction func, void *args)
{
  ForEachHelperStruct helper(func, args);
  return BasicOptionDatabase::ForEach(ForEachHelper, &helper);
}


gm_Bool
OptionDatabase::ForEachHelper(Database *db, DatabaseRecord *record,
			      void *args)
{
  ForEachHelperStruct *helper = (ForEachHelperStruct*) args;
  Option *option = (Option*) record;
  return (*helper->func)((OptionDatabase*)db, option->key.string, 
			 option->value, helper->args);
}




void
OptionDatabase::Remove(const char *key_)
{
  OptionKey key(key_);
  Option *option = (Option*)index->FindOne(&key);
  if (option!=NULL) {
    BasicOptionDatabase::Remove(option);
    delete option;
  }
}


const char *
OptionDatabase::Find(const char *key_)
{
  OptionKey key(key_);
  Option *option = (Option*)index->FindOne(&key);
  if (option==NULL) return NULL;
  else return option->value;
}


UINT32
OptionDatabase::FindUINT32(const char *key_)
{
  const char *value = Find(key_);
  if (value==NULL) return 0;
  else return strtoul(value, NULL, 10);
}


gm_Bool
OptionDatabase::Add(const char *key, const char *value)
{
  DatabaseRecord *record = CreateRecord(key, value);
  if (record==NULL) return gm_False;
  return BasicOptionDatabase::Add(record);
}


gm_Bool
OptionDatabase::Add(const char *key, UINT32 value)
{
  char valueString[80];

  sprintf(valueString, "%lu", value);
  return Add(key, valueString);
}



#include "optdb.h"
int
Options_New(Options *options, char *filename)
{
  OptionDatabase *db = new OptionDatabase;
  int returnValue;
  if (db==NULL) return errOutOfMemory;

  if (db->Create(filename)==gm_False) {
    delete db;
    returnValue = Error::getStatus();
    Error::SetStatus(success);
    return returnValue;
  }
  *options = (Options) db;
  return success;
}


void
Options_Delete(Options options)
{
  OptionDatabase *db = (OptionDatabase*)options;
  delete db;
}


int
Options_Add(Options options, const char *key, const char *value)
{
  OptionDatabase *db = (OptionDatabase*)options;
  int returnValue;

  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) Return(errGenericError, errGenericError);
  }

  if (db->Add(key, value)==gm_False) {
    returnValue = Error::getStatus();
    Error::SetStatus(success);
    return returnValue;
  }
  return success;
}


int
Options_Add_UINT32(Options options, const char *key, UINT32 value)
{
  OptionDatabase *db = (OptionDatabase*)options;
  int returnValue;

  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) Return(errGenericError, errGenericError);
  }

  if (db->Add(key, value)==gm_False) {
    returnValue = Error::getStatus();
    Error::SetStatus(success);
    return returnValue;
  }
  return success;
}


void
Options_Remove(Options options, const char *key)
{
  OptionDatabase *db = (OptionDatabase*)options;
  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) VoidReturn(errGenericError);
  }

  db->Remove(key);
}


const char *
Options_Find(Options options, const char *key)
{
  OptionDatabase *db = (OptionDatabase*)options;
  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) Return(NULL, errGenericError);
  }

  return db->Find(key);
}


UINT32
Options_Find_UINT32(Options options, const char *key)
{
  OptionDatabase *db = (OptionDatabase*)options;
  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) Return(0, errGenericError);
  }

  return db->FindUINT32(key);
}


Options
Options_DefaultDb()
{
  return (Options)OptionDatabase::mainOptionDB;
}
@


1.11
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d154 1
a154 1
    Remove(option);
d193 12
d308 13
@


1.11.2.1
log
@- Modularized the wingman frontend by splitting wing_go_proc into
  multiple smaller functions

- New aggregator mechanism for wingman proxies. The WingDispatch worker
  receives a request with a special content-type application/x-wingman-agg.
  The body of the request contains the full aggregator url

  The worker should return a valid HTTP response, which might be a
  pilot-ready document (i.e. an x-wingman/* document) or an HTTP
  redirect to a new URL, or whatever it chooses!)

- The WingDispatcher is now expected to weed out unintelligible content-types
  and return a content-type of x-wingman/<integer> to the frontend, where
  <integer> represents the integral content type returned to the pilot client.

- Agglist: this appears at the dispatcher as a special aggregator request
  with a url of agg://agglist/ (this URL is actually defined in the
  gm_options file, so the worker should check against the gm_options
  entry, rather than a hard-coded entry). The worker that handles this
  request *MUST* return a document with content type
  x-wingman/2 and the actual agglist as part of the data.

  For old browsers, the data part of this response is stuffed into an
  appropriate metadata field by the frontend before sending the reply to
  the client (i.e. it is backward compatible). For browsers with the new
  version number, the browser will no longer set any special flags in the
  metadata field of the client request. Instead it will explicitly request
  for the agg://agglist/ url. It'll check the ContentType field in the
  response for content type 2 to match up the correct response.

- Created a new version number for the agglist changes:
  #define CLIENT_VERSION_NEWAGG 0x01050200

- gm_options changes:
  Here are the three new gm_options entries for wingman: (the
  wingman.text.prefetch_href replaces the old prefetch.href entry)

  wingman.about_url: http://www.isaac.cs.berkeley.edu/pilot/wingman/about-
  wingman.agglist_url: agg://agglist/
  wingman.text.prefetch_href: 10

- PTM changes:
  - Background distillers work. Specify the -e flag before the -- in the
    gm_options line for the distiller. The PTM will IMMEDIATELY respawn the
    distiller if it crashes. This mechanism is still very simple and naive
  - Distillers can rename themselves: API function DistillerReregister.
@
text
@d154 1
a154 1
    BasicOptionDatabase::Remove(option);
a192 12
void
OptionDatabase::Remove(const char *key_)
{
  OptionKey key(key_);
  Option *option = (Option*)index->FindOne(&key);
  if (option!=NULL) {
    BasicOptionDatabase::Remove(option);
    delete option;
  }
}


a295 13
}


void
Options_Remove(Options options, const char *key)
{
  OptionDatabase *db = (OptionDatabase*)options;
  if (db==NULL) {
    db = OptionDatabase::mainOptionDB;
    if (db==NULL) VoidReturn(errGenericError);
  }

  return db->Remove(key);
@


1.11.2.2
log
@Added DistillAsync and friends
@
text
@d320 1
a320 1
  db->Remove(key);
@


1.10
log
@changes to the options API so that if the options database is NULL, then
automatically use the default one (which happens to be the last options
database created by that process)
@
text
@d323 7
@


1.9
log
@made a modification to options.cc so that if there are multiple lines in
the options file with the same key, all the values get concatenated
@
text
@d112 3
d120 1
d126 1
d265 5
d285 5
d303 5
d316 5
@


1.8
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d18 1
a18 1
  while (fgets(line, 500, fp)!=NULL) {
d88 8
a95 1
    : key(key_) { strcpy(value, value_); };
d97 1
a97 1
  char value[MAXLINE];
d135 1
a135 2
  if (strlen(key)  >= sizeof(OptionKey::string) || 
      strlen(value)>= sizeof(Option::value)) {
d138 17
a154 2
  Option *option = new Option(key, value);
  if (option==NULL) Return(NULL, errOutOfMemory);
@


1.7
log
@Added rexec.args, so now you can pass arguments to rsh
Cleaned up the ptm to always read options from the options file
@
text
@d138 29
@


1.6
log
@added Options_Delete and included error.h
@
text
@d65 4
a68 1
  return gm_True;
@


1.5
log
@Added the C interface to the options database
@
text
@d193 8
@


1.4
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d171 66
@


1.3
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d97 1
a97 1
  IndexKey *GetIndexKey(DatabaseRecord *record) 
@


1.2
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d16 1
a16 1
  if (fp==NULL) gm_BoolErrorReturn(errFileOpenError);
d65 1
a65 1
  gm_BoolErrorReturn(success);
d105 1
a105 1
  if ((index = new OptionIndex)==NULL) VoidErrorReturn(errOutOfMemory);
d127 1
a127 1
    ErrorReturn(errBufferOverflow, NULL);
d130 2
a131 2
  if (option==NULL) ErrorReturn(errOutOfMemory, NULL);
  ErrorReturn(success, option);
d141 1
a141 1
  else ErrorReturn(success, option->value);
@


1.1
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d8 1
a8 1
Bool
d16 1
a16 1
  if (fp==NULL) BoolErrorReturn(errFileOpenError);
d60 2
a61 2
    if (record==NULL) return FALSE;
    if (Add(record)==FALSE) return FALSE;
d65 1
a65 1
  BoolErrorReturn(success);
d73 1
a73 1
  Bool Equal(IndexKey *key) {
d75 1
a75 1
    return (strcmp(optKey->string, string)==0) ? TRUE : FALSE; 
d93 1
a93 1
  OptionIndex(Bool dupsAllowed=FALSE,
d154 1
a154 1
Bool
d158 1
a158 1
  if (record==NULL) return FALSE;
d163 1
a163 1
Bool
@
