head	1.20;
access;
symbols
	Yatin-final:1.20
	Yatin:1.20.0.2
	pre-yatin-merge:1.20
	transend-beta2:1.20
	fox-dev:1.20
	ptm-ng:1.18
	transend-beta-latest:1.18
	Aggregators:1.18
	NoAggregators:1.18
	iang:1.18.0.4
	transend-beta:1.18.0.2
	SOSP:1.18
	stable_ptm:1.16
	merged_preintegrate:1.12
	heisenbug:1.12
	PRE_INTEGRATION:1.8
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@// @;


1.20
date	97.07.21.21.30.21;	author yatin;	state Exp;
branches;
next	1.19;

1.19
date	97.07.15.18.38.32;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.02.26.04.15.10;	author yatin;	state Exp;
branches;
next	1.17;

1.17
date	97.02.17.03.01.25;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.02.05.05.34.47;	author gribble;	state Exp;
branches;
next	1.15;

1.15
date	97.02.05.03.49.04;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.01.29.22.15.10;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.01.04.09.55.47;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	96.12.13.03.38.49;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	96.12.13.03.07.15;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	96.12.13.02.41.41;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	96.12.13.02.30.18;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.12.05.01.41.10;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.12.05.01.27.27;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.24.08.12.26;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.06.03.26;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.00.51.22;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.22.00.42.32;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.59;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.40.15;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.40.15;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Changes to monitor to do unicast and multicast listening properly
Modified distiller database so that everything after "--" is assumed to
be command line args to the distiller
@
text
@#include <iostream.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/utsname.h>
#include <netdb.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include "defines.h"
#include "communication.h"
#include "log.h"
#include "utils.h"


extern "C" {
struct hostent  *gethostbyname_r
        (const char *,           struct hostent *, char *, int, int *h_errnop);
struct protoent *getprotobyname_r
        (const char *, struct protoent *, char *, int);
}


#if !defined(INADDR_NONE)
#define INADDR_NONE             ((u_long)0xffffffff)    /* -1 return */
#endif


CommunicationObject::CommunicationObject()
{
}


CommunicationObject::~CommunicationObject()
{
}


gm_Bool
CommunicationObject::GetIPAddress(const char* host, char* ipAddr)
{
  struct in_addr addr;
  struct hostent he;
  char buffer[1024];
  int errorStatus;

  if ( (gethostbyname_r(host, &he, buffer, sizeof(buffer), &errorStatus))!=0 )
    memcpy ((char*)&addr, he.h_addr, he.h_length);
  else 
    Return(gm_False, errIPAddressError);

  strcpy (ipAddr, inet_ntoa(addr));
  return gm_True;
}


gm_Bool 
CommunicationObject::GetHostIPAddress(char* ipAddr)
{
  struct utsname hostName;

  if (uname(&hostName) < 0) Return(gm_False, errIPAddressError);
  return GetIPAddress(hostName.nodename, ipAddr);
}


gm_Bool 
CommunicationObject::GetHostName(char* hostNameString)
{
  struct utsname hostName;
  if (uname(&hostName) < 0) Return(gm_False, errIPAddressError);
  strcpy(hostNameString, hostName.nodename);
  return gm_True;
}


Socket::~Socket()
{
  if (destructorClosesSocket==gm_True) Close();
}


void
Socket::Close()
{
  if (socketID!=0) {
    close(socketID);
    socketID = 0;
  }
}


/*int
Socket::getObjectType()
{
  int socketType, len=sizeof(int);

  if (socketID==0) return -1;
  if (getsockopt(socketID, SOL_SOCKET, SO_TYPE, (char*)&socketType, &len) < 0) 
    return -1;
  if (socketType!=SOCK_STREAM && socketType!=SOCK_DGRAM) return -1;
  return socketType;
}*/


Port
Socket::getLocalPort()
{
  if (socketID==0) return 0;

  struct sockaddr_in sin;
  int len=sizeof(sin);
  if (getsockname(socketID, (sockaddr*) &sin, &len) < 0) return 0;
  return htons(sin.sin_port);
}


/*int 
Socket::Read(char* buf, int size)
{
  int noOfBytesRead = 0;
  int nextBytes;
  
  while (noOfBytesRead < size) {
    nextBytes = read(socketID, buf+noOfBytesRead, size-noOfBytesRead);

    if(nextBytes < 0) {
      if(errno==EAGAIN) {
	Return(0, errSocketReadNothingAvailable);
      } else if (errno==ECONNRESET || errno==EPIPE || errno==ETIMEDOUT) {
	Return(-1, errSocketEOF);
      }
      else {
        Return(-1, errSocketReadError);
      }
    } else if(nextBytes==0) {
      Return(-1, errSocketEOF);
    }
    // here if nextBytes > 0
    noOfBytesRead += nextBytes;
  }

  return noOfBytesRead;
}*/


int
Socket::Read(char *buf, int size, timeval *tv)
  /*
   * at the end of this function, *tv is updated to reflect the time left
   */
{
  int noOfBytesRead = 0;
  int nextBytes;
  
  while (noOfBytesRead < size) {
    if (tv!=NULL) {
      fd_set readfds, exceptfds;
      timeval wait, startTime, endTime, diff;
      int returnValue;

      FD_ZERO(&readfds);
      FD_ZERO(&exceptfds);
      FD_SET(socketID, &readfds);
      FD_SET(socketID, &exceptfds);

      gettimeofday(&startTime, NULL);
      wait = *tv;
      returnValue = select(socketID+1, &readfds, (fd_set*)NULL, &exceptfds,
			   &wait);
      gettimeofday(&endTime, NULL);
      diff = tv_timesub(endTime, startTime);
      *tv  = tv_timesub(*tv, diff);
      if (tv->tv_sec < 0 || tv->tv_usec < 0) tv->tv_sec = tv->tv_usec = 0;

      // select error
      if (returnValue < 0) {
	if (errno==EINTR) continue;
	Return(gm_False, errSocketReadError);
      }
      // if select times out, then return
      if (returnValue==0 || (tv->tv_sec==0 && tv->tv_usec==0) ) {
	Return(0, errSocketTimeout);
      }
    }

    nextBytes = read(socketID, buf+noOfBytesRead, size-noOfBytesRead);
    if(nextBytes < 0) {
      if(errno==EAGAIN) {
	Return(0, errSocketReadNothingAvailable);
      } else if (errno==ECONNRESET || errno==EPIPE || errno==ETIMEDOUT) {
	Return(-1, errSocketEOF);
      }
      else {
        Return(-1, errSocketReadError);
      }
    } else if(nextBytes==0) {
      Return(-1, errSocketEOF);
    }
    // here if nextBytes > 0
    noOfBytesRead += nextBytes;
  }

  return noOfBytesRead;
}


gm_Bool
Socket::Write(const char* buf, int size)
{
  int writtenSoFar = 0, wrote;

  while (writtenSoFar < size) {
    if ((wrote = write(socketID, buf+writtenSoFar, size-writtenSoFar)) < 0) {
      if (errno==EPIPE || errno==ETIMEDOUT) {
	Return(gm_False, errSocketEOF);
      }
      Return(gm_False, errSocketWriteError);
    }
    writtenSoFar += wrote;
  }
  return gm_True;
}


gm_Bool
Socket::HandleEvent(EventSystem *evs, EventType eventType, void */*args*/)
{
  switch (eventType) {
  case evSelect:
    return EvSelect(evs);

  default:
    Return(gm_False, errEvSysInvalidEvent);
  }
}


gm_Bool
Socket::EvSelect(EventSystem */*evs*/)
{
  return gm_True;
}


gm_Bool
UdpSocket::Connect(const char* host, Port port, gm_Bool useIPAddrOnly)
{
  struct hostent he;		// name of host to which connection is desired
  struct sockaddr_in sin;	// an internet endpoint address
  int    errorStatus;
  char   buffer[1024];

  memset((char*)&sin, 0, sizeof(sin));
  sin.sin_family = AF_INET;

  sin.sin_port = htons((u_short) port);

  // Map host name to IP address
  if (useIPAddrOnly==gm_True) {
    if ((sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE)
      Return(gm_False, errUdpAddressError);
  }
  else {
    if (gethostbyname_r(host, &he, buffer, sizeof(buffer), &errorStatus)!=0)
      memcpy((char*)&sin.sin_addr, he.h_addr, he.h_length);
    else if ((sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE)
      Return(gm_False, errUdpAddressError);
  }

  // Allocate a socket
  socketID = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP); 
  if (socketID < 0) {
    socketID = 0;
    Return(gm_False, errSocketCreationError);
  }

  if (connect(socketID, (struct sockaddr*)&sin, sizeof(sin)) < 0) {
    Close();
    Return(gm_False, errSocketConnectError);
  }

  return gm_True;
}


gm_Bool
TcpSocket::Connect(const char* host, Port port, gm_Bool useIPAddrOnly)
{
  struct hostent he;		// name of host to which connection is desired
  struct sockaddr_in sin;	// an internet endpoint address
  int    type, errorStatus;
  char   buffer[1024];

  memset((char*)&sin, 0, sizeof(sin));
  sin.sin_family = AF_INET;

  sin.sin_port = htons((u_short) port);

  // Map host name to IP address
  if (useIPAddrOnly==gm_True) {
    if ((sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE)
      Return(gm_False, errTcpAddressError);
  }
  else {
    if (gethostbyname_r(host, &he, buffer, sizeof(buffer), &errorStatus)!=0)
      memcpy((char*)&sin.sin_addr, he.h_addr, he.h_length);
    else if ((sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE)
      Return(gm_False, errTcpAddressError);
  }

  // Map protocol name to protocol number
  /*if (getprotobyname_r("tcp", &pe, buffer, sizeof(buffer))==0)
    Return(gm_False, errTcpAddressError);*/

  type = SOCK_STREAM;		// for TCP PROTOCOL

  // Allocate a socket
  socketID = socket(PF_INET, type, IPPROTO_TCP); //pe.p_proto);
  if (socketID < 0) {
    socketID = 0;
    Return(gm_False, errSocketCreationError);
  }

  if (connect(socketID, (struct sockaddr*)&sin, sizeof(sin)) < 0) {
    Close();
    Return(gm_False, errSocketConnectError);
  }

  return gm_True;
}


TcpServer::TcpServer(Port port, int qLength)
{
  Initialize(port, qLength);
}


int
TcpServer::ConnectToClient()
{
  int newSocketID, alen;
  struct sockaddr_in fsin;

  alen = sizeof(fsin);
  newSocketID = accept(socketID, (struct sockaddr*) &fsin, &alen);
  return newSocketID;
}


gm_Bool
TcpServer::HandleEvent(EventSystem *evs, EventType eventType, void *args)
{
  switch (eventType) {
  case evConnectionReceived:
    return EvConnectionReceived(evs, (int)args);
 
  default:
    return TcpSocket::HandleEvent(evs, eventType, args);
  }
}


gm_Bool
TcpServer::EvSelect(EventSystem *evs)
{
  int newSocketID = ConnectToClient();
  return evs->PostEvent(evConnectionReceived, this, (void*)newSocketID);
}


gm_Bool
TcpServer::EvConnectionReceived(EventSystem */*evs*/, int /*socketID*/)
{
  return gm_True;
}


gm_Bool
TcpServer::Initialize(Port port, int qLength)
{
  //struct protoent *ppe;	// pointer to protocol information entry
  struct sockaddr_in sin;	// an Internet endpoint address
  int    type;

  memset((char*) &sin, 0, sizeof(sin));
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = INADDR_ANY;

  sin.sin_port = htons((u_short) port);

  /*if ((ppe = getprotobyname("tcp")) == NULL)
    Return(gm_False, errTcpProtocolNameError);*/

  type = SOCK_STREAM;		// for TCP PROTOCOL
  socketID = socket(PF_INET, type, IPPROTO_TCP);
  if (socketID < 0)
    Return(gm_False, errSocketCreationError);

  if (bind (socketID, (struct sockaddr*)&sin, sizeof(sin)) < 0) 
    Return(gm_False, errSocketBindError);

  int on=1;
  if (setsockopt(socketID,SOL_SOCKET,SO_REUSEADDR,(char*)&on,sizeof(on))<0) {
    Return(gm_False, errSocketCreationError);
  }

  if (listen(socketID, qLength) < 0)
    Return(gm_False, errSocketListenError);
    
  return gm_True;
}

@


1.19
log
@Modified DistillerType::CanSatisfy to accept wildcards between slashes

Changed the thread-unsafe gethostbyname/getprotobyname to the corresponding
thread safe version
@
text
@d250 41
a293 1
  struct protoent pe;		// pointer to protocol information entry
@


1.18
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d19 8
d46 3
a48 1
  struct hostent *phe;
d50 2
a51 2
  if ( (phe = gethostbyname(host))!=0 )
    memcpy ((char*)&addr, phe->h_addr, phe->h_length);
d252 2
a253 2
  struct hostent *phe;		// name of host to which connection is desired
  struct protoent *ppe;		// pointer to protocol information entry
d255 2
a256 1
  int    type;
d269 2
a270 2
    if ( (phe = gethostbyname(host))!=0 )
      memcpy((char*)&sin.sin_addr, phe->h_addr, phe->h_length);
d276 2
a277 2
  if ((ppe = getprotobyname("tcp"))==0)
    Return(gm_False, errTcpAddressError);
d282 1
a282 1
  socketID = socket(PF_INET, type, ppe->p_proto);
@


1.17
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d16 1
d86 1
a86 1
int
d96 1
a96 1
}
d111 1
a111 1
int 
d137 61
d335 1
a335 1
  struct protoent *ppe;	// pointer to protocol information entry
d345 2
a346 2
  if ((ppe = getprotobyname("tcp")) == NULL)
    Return(gm_False, errTcpProtocolNameError);
d349 1
a349 1
  socketID = socket(PF_INET, type, ppe->p_proto);
@


1.16
log
@Fixed some random bugs, most notably a lack of htons()in getLocalPort.
@
text
@d15 1
d119 1
a119 1
    if(nextBytes == -1) {
d122 2
a123 2
      } else if (errno==ECONNRESET) {
	Return(-1, errSocketReadEOF);
d129 1
a129 1
      Return(-1, errSocketReadEOF);
d135 1
a135 1
  return  noOfBytesRead;
d146 3
@


1.15
log
@Found the PTM bug that was causing new to fail in libdist.a
(hopefully!)
@
text
@d105 1
a105 1
  return sin.sin_port;
d287 3
a294 2
  if (bind (socketID, (struct sockaddr*)&sin, sizeof(sin)) < 0)
    Return(gm_False, errSocketBindError);
@


1.14
log
@Changes to the monitor for killing
@
text
@a108 24
/*gm_Bool
Socket::getLocalIP(char *ipAddress)
{
  Port tmp;
  return getLocalAddress(ipAddress, tmp);
}


gm_Bool
Socket::getLocalAddress(char *ipAddress, Port &port)
{
  if (socketID==0) return gm_False;

  struct sockaddr_in sin;
  int len=sizeof(sin);
  if (getsockname(socketID, (sockaddr*) &sin, &len) < 0) return gm_False;

  printf("heeeeeeeeeeeeeeeeeee %08lx : %d\n",sin.sin_addr.s_addr,sin.sin_port);
  strcpy(ipAddress, inet_ntoa(sin.sin_addr));
  port = sin.sin_port;
  return gm_True;
}*/


d116 1
a116 1
    nextBytes = read(socketID, buf, size);
d133 1
d141 1
a141 1
  int writtenSoFar = 0;
d144 1
a144 1
    if (write(socketID, buf, size) < 0) {
d147 1
a147 1
    writtenSoFar += size;
@


1.13
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d58 10
@


1.12
log
@Backed out use of ErrorReturn macros, they are suspected of a crime
@
text
@d41 1
a41 1
    gm_BoolErrorReturn(errIPAddressError);
d44 1
a44 1
  gm_BoolErrorReturn(success);
d53 1
a53 1
  if (uname(&hostName) < 0) gm_BoolErrorReturn(errIPAddressError);
d134 6
a139 5
        SetError__(errSocketReadNothingAvailable, __FILE__, __LINE__);
        return 0;
      } else {
        SetError__(errSocketReadError, __FILE__, __LINE__);
        return -1;
d142 1
a142 2
      SetError__(errSocketReadEOF, __FILE__, __LINE__);
      return -1;
a146 1
  SetError__(success, __FILE__, __LINE__);
d158 1
a158 2
      SetError__(errSocketWriteError, __FILE__, __LINE__);
      return gm_False;
a161 1
  SetError__(success, __FILE__, __LINE__);
d174 1
a174 1
    gm_BoolErrorReturn(errEvSysInvalidEvent);
d182 1
a182 1
  gm_BoolErrorReturn(success);
d202 1
a202 1
      gm_BoolErrorReturn(errTcpAddressError);
d208 1
a208 1
      gm_BoolErrorReturn(errTcpAddressError);
d213 1
a213 1
    gm_BoolErrorReturn(errTcpAddressError);
d221 1
a221 1
    gm_BoolErrorReturn(errSocketCreationError);
d226 1
a226 1
    gm_BoolErrorReturn(errSocketConnectError);
d229 1
a229 1
  gm_BoolErrorReturn(success);
d275 1
a275 1
  gm_BoolErrorReturn(success);
d293 1
a293 1
    gm_BoolErrorReturn(errTcpProtocolNameError);
d298 1
a298 1
    gm_BoolErrorReturn(errSocketCreationError);
d302 1
a302 1
    gm_BoolErrorReturn(errSocketCreationError);
d306 1
a306 1
    gm_BoolErrorReturn(errSocketBindError);
d308 1
a308 1
    gm_BoolErrorReturn(errSocketListenError);
d310 1
a310 1
  gm_BoolErrorReturn(success);
@


1.11
log
@*** empty log message ***
@
text
@d133 10
a142 4
      if(errno==EAGAIN)
        ErrorReturn(errSocketReadNothingAvailable, 0)
        else
          ErrorReturn(errSocketReadError, -1);
d144 2
a145 5
    else if(nextBytes==0)
      ErrorReturn(errSocketReadEOF, -1)
           else
             noOfBytesRead += nextBytes;

d147 2
a148 1
  ErrorReturn(success, noOfBytesRead);
d158 5
a162 4
    if (write(socketID, buf, size) < 0)
      gm_BoolErrorReturn(errSocketWriteError)
      else
        writtenSoFar += size;
d164 2
a165 1
  gm_BoolErrorReturn(success);
@


1.10
log
@*** empty log message ***
@
text
@d151 9
a159 4
  if (write(socketID, buf, size) < 0)
    gm_BoolErrorReturn(errSocketWriteError)
  else
    gm_BoolErrorReturn(success);
@


1.9
log
@Fixed buggy read() semantics in Socket::read.  Note from editors: a macro with semicolons is evil (ErrorReturn)
@
text
@d136 1
a136 1
          ErrorReturn(errSocketReadError, -1)
d140 2
a141 2

    noOfBytesRead += nextBytes;
@


1.8
log
@*** empty log message ***
@
text
@d126 16
a141 1
  int noOfBytesRead;
a142 6
  noOfBytesRead = read(socketID, buf, size);
  if(noOfBytesRead==-1) {
    if(errno==EAGAIN)
      ErrorReturn(errSocketReadNothingAvailable, 0)
    else
      ErrorReturn(errSocketReadError, -1);
d144 1
a144 6
  else if(noOfBytesRead==0)
    ErrorReturn(errSocketReadEOF, -1)
  else if(noOfBytesRead < size)
    ErrorReturn(errSocketReadNotEnoughData, noOfBytesRead)
  else
    ErrorReturn(success, noOfBytesRead);
@


1.7
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d17 1
a17 1
#if !defined(INADRR_NONE)
@


1.6
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d32 1
a32 1
Bool
d41 1
a41 1
    BoolErrorReturn(errIPAddressError);
d44 1
a44 1
  BoolErrorReturn(success);
d48 1
a48 1
Bool 
d53 1
a53 1
  if (uname(&hostName) < 0) BoolErrorReturn(errIPAddressError);
d60 1
a60 1
  if (destructorClosesSocket==TRUE) Close();
d99 1
a99 1
/*Bool
d107 1
a107 1
Bool
d110 1
a110 1
  if (socketID==0) return FALSE;
d114 1
a114 1
  if (getsockname(socketID, (sockaddr*) &sin, &len) < 0) return FALSE;
d119 1
a119 1
  return TRUE;
d144 1
a144 1
Bool
d148 1
a148 1
    BoolErrorReturn(errSocketWriteError)
d150 1
a150 1
    BoolErrorReturn(success);
d154 1
a154 1
Bool
d162 1
a162 1
    BoolErrorReturn(errEvSysInvalidEvent);
d167 1
a167 1
Bool
d170 1
a170 1
  BoolErrorReturn(success);
d174 2
a175 2
Bool
TcpSocket::Connect(const char* host, Port port, Bool useIPAddrOnly)
d188 1
a188 1
  if (useIPAddrOnly==true) {
d190 1
a190 1
      BoolErrorReturn(errTcpAddressError);
d196 1
a196 1
      BoolErrorReturn(errTcpAddressError);
d201 1
a201 1
    BoolErrorReturn(errTcpAddressError);
d209 1
a209 1
    BoolErrorReturn(errSocketCreationError);
d214 1
a214 1
    BoolErrorReturn(errSocketConnectError);
d217 1
a217 1
  BoolErrorReturn(success);
d239 1
a239 1
Bool
d252 1
a252 1
Bool
d260 1
a260 1
Bool
d263 1
a263 1
  BoolErrorReturn(success);
d267 1
a267 1
Bool
d281 1
a281 1
    BoolErrorReturn(errTcpProtocolNameError);
d286 1
a286 1
    BoolErrorReturn(errSocketCreationError);
d290 1
a290 1
    BoolErrorReturn(errSocketCreationError);
d294 1
a294 1
    BoolErrorReturn(errSocketBindError);
d296 1
a296 1
    BoolErrorReturn(errSocketListenError);
d298 1
a298 1
  BoolErrorReturn(success);
@


1.5
log
@Removed bugs from stub.cc etc.
@
text
@d33 1
a33 1
CommunicationObject::GetIPAddress(char* host, char* ipAddr)
d145 1
a145 1
Socket::Write(char* buf, int size)
d175 1
a175 1
TcpSocket::Connect(char* host, Port port, Bool useIPAddrOnly)
@


1.4
log
@Update after merging config.h.in
@
text
@d17 1
a17 1
#ifndef INADRR_NONE
@


1.3
log
@Just before adding stuff for using the monitoring GUI
@
text
@d13 3
d17 1
a17 1
#ifdef SUNOS
a19 3

#include "defines.h"
#include "communication.h"
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d170 1
a170 1
  return TRUE;
d263 1
a263 1
  return TRUE;
@


1.1
log
@Initial revision
@
text
@d7 1
d51 1
a51 3
  char hostName[128];
  if (gethostname(hostName, sizeof(hostName))!=0)
    BoolErrorReturn(errIPAddressError);
d53 2
a54 1
  return GetIPAddress(hostName, ipAddr);
d87 2
a88 2
int
Socket::getPortNumber()
d94 1
a94 1
  getsockname(socketID, (sockaddr*) &sin, &len);
d99 24
d287 5
@


1.1.1.1
log
@
@
text
@@
