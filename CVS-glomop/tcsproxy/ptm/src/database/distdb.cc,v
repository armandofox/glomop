head	1.14;
access;
symbols
	Yatin-final:1.13.2.1
	Yatin:1.13.0.2
	pre-yatin-merge:1.13
	transend-beta2:1.10
	fox-dev:1.9
	ptm-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.8
	stable_ptm:1.5
	merged_preintegrate:1.4
	heisenbug:1.4
	PRE_INTEGRATION:1.4;
locks; strict;
comment	@// @;


1.14
date	98.01.16.22.16.23;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.10.18.00.58.19;	author fox;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	97.09.15.03.09.38;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.08.23.32.24;	author yatin;	state Exp;
branches;
next	1.10;

1.10
date	97.08.08.22.58.35;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.07.15.18.38.30;	author yatin;	state Exp;
branches;
next	1.8;

1.8
date	97.03.06.02.49.19;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	97.02.26.04.15.05;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.02.17.03.01.20;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	97.01.04.09.55.44;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.12.05.01.27.22;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.24.08.12.22;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.21.27.55;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.23.42.52;	author yatin;	state Exp;
branches;
next	;

1.13.2.1
date	97.11.25.01.25.11;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@#include "distdb.h"
#include "packet.h"
#include "utils.h"


#define SEPARATOR "/"
#define WILDCARD  "*"


BasicDistillerDatabase::BasicDistillerDatabase()
{
  mainIndex = new DistillerIndex;
  if (mainIndex==NULL) VoidReturn(errOutOfMemory);
  AddIndex(mainIndex); // ignore return value
}


BasicDistillerDatabase::~BasicDistillerDatabase()
{
  if (mainIndex!=NULL) {
    RemoveIndex(mainIndex);
    delete mainIndex;
    mainIndex = NULL;
  }
}


#include "log.h"
gm_Bool 
DistillerType::CanSatisfy(DistillerType *request) 
{
  ts_strtok_state *s1, *s2;
  char *t1, *t2;
  gm_Bool retval = gm_False;

  s1 = s2 = NULL;

/*  gm_Log("Checking if " << c_struct.string << " can satisfy " 
	 << request->c_struct.string << "\n"); */
  if ((s1 = ts_strtok_init(c_struct.string))==NULL) {
    gm_Log("ts_strtok_init failed for 1\n");
    goto CANSATISFY_CLEAN;
  }

  if ((s2 = ts_strtok_init(request->c_struct.string))==NULL) {
    gm_Log("ts_strtok_init failed for 2\n");
    goto CANSATISFY_CLEAN;
  }

  for (t1 = ts_strtok(SEPARATOR, s1), t2 = ts_strtok(SEPARATOR, s2);
       t1 != NULL && t2 != NULL;
       ) {
    /*gm_Log("CanSatisfy comparing '" << t1 << "' and '" << t2 << "'\n");*/
    if ( ! (strcmp(t1, WILDCARD)==0 || strcmp(t1, t2)==0) ) {
      /*gm_Log("strcmp failed for " << t1 << " and " << t2 << "\n");*/
      goto CANSATISFY_CLEAN;
    }
    t1 = ts_strtok(SEPARATOR, s1);
    t2 = ts_strtok(SEPARATOR, s2);
  }

/*  gm_Log("CanSatisfy succeeded\n"); */

  // return true only if we've hit the end of both strings
  if (t1==NULL && t2==NULL) retval = gm_True;
CANSATISFY_CLEAN:
  if (s2 != NULL) 
    ts_strtok_finish(s2);
  if (s1 != NULL)
    ts_strtok_finish(s1);
  return retval;
}



OStream&
operator << (OStream& stream, RemoteID& rid)
{
  gm_Bool origMode = stream.IsBinary();
  return stream << Binary(gm_False) << rid.ipAddress << '/' << rid.port 
		<< Binary(origMode);
}


IStream&
operator >> (IStream& stream, RemoteID& rid)
{
  gm_Bool origMode    = stream.IsBinary();
  char    origDelimit = stream.getDelimit();
  UINT32  origGetW    = stream.getW();

  return stream >> Binary(gm_False) >> Delimit('/') >> SetW(MAXIP) 
		>> rid.ipAddress >> Skip >> Delimit(origDelimit) 
		>> rid.port      >> SetW(origGetW) >> Binary(origMode);
}


OStream&
operator << (OStream& stream, Load& load)
{
  gm_Bool origMode = stream.IsBinary();
  return stream << Binary(gm_False) << load.totalLatency_ms << '|'
		<< load.ignoreThreshold_ms << Binary(origMode);
}


IStream&
operator >> (IStream& stream, Load& load)
{
  gm_Bool origMode = stream.IsBinary();
  char    origDelimit = stream.getDelimit();
  return stream >> Binary(gm_False) >> Delimit('|') >> load.totalLatency_ms
		>> Skip >> Delimit(origDelimit) >> load.ignoreThreshold_ms
		>> Binary(origMode);
}


OStream&
operator << (OStream& stream, DistillerType& type)
{
  return stream << type.c_struct.string;
}


IStream&
operator >> (IStream& stream, DistillerType& type)
{
  UINT32 origGetW = stream.getW();
  return stream >> SetW(MAXDISTILLER_TYPE_STRING) >> type.c_struct.string
		>> SetW(origGetW);
}


OStream&
operator << (OStream& stream, BasicDistiller& record)
{
  return (stream << record.rid << '|' << record.type << '|' << record.load);
}


IStream&
operator >> (IStream& stream, BasicDistiller& record)
{
  char origDelimit = stream.getDelimit();

  return stream >> Delimit('|') >> record.rid >> Skip >> record.type >> Skip
		>> Delimit(origDelimit) >> record.load;
}




// puuting this function here simply because it is required by both libptmstub
// and libdist


extern "C" Argument *
getArgumentFromId(Argument *args, int numberOfArgs, UINT32 id)
{
  Argument *ptr;
  if (args==NULL) return NULL;
  for(ptr=args; ptr < args+numberOfArgs; ptr++) {
    if (ARG_ID(*ptr)==id) return ptr;
  }
  return NULL;
}


@


1.13
log
@fixed ts_strtok_init memory leak in distdb.cc
@
text
@d64 2
a65 1
  retval = gm_True;
@


1.13.2.1
log
@- removed -ltcl check in configure.in. It was causing problems with tcl8.0 and
  wasn't being used anyway.
- frontend returns a sane error when transend/myurl/dispatch fails
- added more API functions to tcl_stub
- wingman gm_options aggregators work
- fixed bug in DistillerType::CanSatisfy
- removed debugging printf's from libdist
@
text
@d64 1
a64 2
  // return true only if we've hit the end of both strings
  if (t1==NULL && t2==NULL) retval = gm_True;
@


1.12
log
@PTM Changes:

* libdist.a now includes libptmstub.a. If you wish to invoke other
distillers from a distiller, you must call InitializeDistillerCache in
your DistillerInit method.

Please note that the arguments to InitializeDistillerCache have changed
slightly. Check out ptm/src/dist/distengine.c for an example of invoking
distillers from other distillers. I have updated the frontend to
reflect the change in arguments.

* DistillerMain times out after a certain time interval. The default
timeout is 60 seconds. You can override that on a per-distiller basis
through the gm_options file (See ahead).

* The "dist.blah:" line format has changed slightly. Here's the new
format:

dist.transend/foo/bar: sbin/foobar_munger <auto-launch-limit-ms> \
			<averaging-interval-ms> <distiller args ...> \
			-- <additional args>

Currently the auto-launch-limit-ms param is the max tolerable queue
length. Set it to zero if you want to disable auto-launching.

For both <auto-launch-limit-ms> and <averaging-interval-ms>, you can
specify - or 0 to use the built-in default value.

<distiller-args> can be any of the command line arguments that the
distiller can understand. Specifically you can use the -n argument to se
the notification timeout and -m to set the DistillerMain timeout.

Please update your gm_options file to the new format. Look at
gm_options.yatin for examples.


* The PTM Makefile does dependencies correctly (finally!!!). The
dependency file has been generated currently for Linux. If you are
compiling on a Solaris box, it might complain about not finding some of
the linux .h files. Simply run "make depend" in the ptm subdirectory on
your solaris box. Hopefully it'll work. If it doesn't work, comment out
the "source Makefile.depend" line from your Makefile.
@
text
@d34 3
d42 1
a42 1
    return gm_False; // don't set the error code here
d47 1
a47 1
    return gm_False; // don't set the error code here
d56 1
a56 1
      return gm_False;
d64 7
a70 3
  ts_strtok_finish(s2);
  ts_strtok_finish(s1);
  return gm_True;
@


1.11
log
@bug fix to select the right distiller even in the presence of wildcards
@
text
@d141 20
@


1.10
log
@Took "CanSatisfy succeeded" and "strcmp failed" gm_log's out of the
libptmstub, so the monitor is no longer flooded.
@
text
@a48 1
       t1 = ts_strtok(SEPARATOR, s1), t2 = ts_strtok(SEPARATOR, s2)
d50 1
d55 2
d60 3
@


1.9
log
@Modified DistillerType::CanSatisfy to accept wildcards between slashes

Changed the thread-unsafe gethostbyname/getprotobyname to the corresponding
thread safe version
@
text
@d35 2
a36 2
  gm_Log("Checking if " << c_struct.string << " can satisfy " 
	 << request->c_struct.string << "\n");
d52 1
a52 1
      gm_Log("strcmp failed for " << t1 << " and " << t2 << "\n");
d57 1
a57 1
  gm_Log("CanSatisfy succeeded\n");
@


1.8
log
@Modified the PTM code to make a whole bunch of #defines customizable thru
the gm_options/distillers.db file
@
text
@d3 5
d27 33
@


1.7
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d51 2
a52 1
  return stream << Binary(gm_False) << load.totalLatency_ms <<Binary(origMode);
d60 4
a63 1
  return stream >> Binary(gm_False) >> load.totalLatency_ms >>Binary(origMode);
@


1.6
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@d51 1
a51 1
  return stream << Binary(gm_False) << load.totalLatency << Binary(origMode);
d59 1
a59 1
  return stream >> Binary(gm_False) >> load.totalLatency >> Binary(origMode);
@


1.5
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d37 3
a39 3
  gm_Bool   origMode    = stream.IsBinary();
  char   origDelimit = stream.getDelimit();
  UINT32 origGetW    = stream.getW();
@


1.4
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d8 1
a8 1
  if (mainIndex==NULL) VoidErrorReturn(errOutOfMemory);
@


1.3
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d28 2
a29 2
  Bool origMode = stream.IsBinary();
  return stream << Binary(FALSE) << rid.ipAddress << '/' << rid.port 
d37 1
a37 1
  Bool   origMode    = stream.IsBinary();
d41 1
a41 1
  return stream >> Binary(FALSE) >> Delimit('/') >> SetW(MAXIP) 
d50 2
a51 2
  Bool origMode = stream.IsBinary();
  return stream << Binary(FALSE) << load.totalLatency << Binary(origMode);
d58 2
a59 2
  Bool origMode = stream.IsBinary();
  return stream >> Binary(FALSE) >> load.totalLatency >> Binary(origMode);
@


1.2
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d8 2
a9 1
  if (mainIndex!=NULL) AddIndex(mainIndex); // ignore return value
d51 1
a51 1
  return stream << Binary(FALSE) << load.value << Binary(origMode);
d59 1
a59 1
  return stream >> Binary(FALSE) >> load.value >> Binary(origMode);
@


1.1
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d2 1
d28 2
a29 2
  stream.Binary(FALSE) << rid.ipAddress << '/' << rid.port;
  return stream.Binary(origMode);
d36 7
a42 7
  Bool origMode    = stream.IsBinary();
  char origDelimit = stream.getDelimit();
  char origGetW    = stream.getW();

  stream.Binary(FALSE).SetDelimit('/').SetW(MAXIP) << rid.ipAddress;
  stream.SetDelimit(origDelimit) << rid.port;
  return stream.SetW(origGetW).Binary(origMode);
d50 1
a50 2
  stream.Binary(FALSE) << load.value;
  return stream.Binary(origMode);
d58 1
a58 2
  stream.Binary(FALSE) >> load.value;
  return stream.Binary(origMode);
d72 3
a74 1
  return stream >> type.c_struct.string;
d90 2
a91 2
  stream.SetDelimit('|') >> record.rid >> record.type;
  return stream.SetDelimit(origDelimit) >> record.load;
@
