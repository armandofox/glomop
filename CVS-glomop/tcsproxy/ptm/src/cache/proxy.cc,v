head	1.17;
access;
symbols
	Yatin-final:1.17
	Yatin:1.17.0.6
	pre-yatin-merge:1.17
	transend-beta2:1.17
	fox-dev:1.17
	ptm-ng:1.17
	transend-beta-latest:1.17
	Aggregators:1.17
	NoAggregators:1.17
	iang:1.17.0.4
	transend-beta:1.17.0.2
	SOSP:1.17
	stable_ptm:1.16
	merged_preintegrate:1.11
	heisenbug:1.11
	PRE_INTEGRATION:1.11
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@// @;


1.17
date	97.02.17.03.01.17;	author yatin;	state Exp;
branches;
next	1.16;

1.16
date	97.01.29.22.15.08;	author yatin;	state Exp;
branches;
next	1.15;

1.15
date	97.01.29.06.00.53;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.01.29.00.22.02;	author yatin;	state Exp;
branches;
next	1.13;

1.13
date	97.01.28.21.36.35;	author yatin;	state Exp;
branches;
next	1.12;

1.12
date	97.01.04.09.55.43;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	96.12.12.02.16.27;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	96.12.12.02.03.05;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	96.12.12.01.41.29;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	96.12.05.01.27.20;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	96.11.24.08.12.19;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	96.11.23.06.03.23;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.09.42.48;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.08.21.38;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.22.00.42.29;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.21.27.53;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.39.42;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.39.42;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Major changes to the PTM stuff. The previous version has been tagged
stable_ptm.

The new version uses a new LinkedList library; the distiller-cache at
the frontend was rewritten to remove some concurrency bugs
@
text
@#include "log.h"
#include <errno.h>
#include "defines.h"
#include "proxyinterface.h"
#include <stdio.h>
#include <iostream.h>
#include <string.h>
#include "threads.h"


/*int main()
{
  int idx, numberOfArgs;
  char input[256], *output;
  UINT32 outputLen;
  DistillerStatus status;
  C_DistillerType type;
  Argument *args;
  double d;

  InitializeDistillerCache(DefaultMulticastAddress, DefaultMulticastPort, 
			   "", 0);

  while (1) {
    printf("Enter distiller type (\"\" to exit): ");
    gets(type.string);
    if (*type.string=='\0') break;

    printf("Enter number of arguments: ");
    scanf("%d", &numberOfArgs); fflush(stdin);

    args = new Argument[numberOfArgs];
    for (idx=0; idx<numberOfArgs; idx++) {
      printf("Type (0=int, 1=string, 2=double): ");
      scanf("%d", &args[idx].type); fflush(stdin);
      args[idx].id = idx+1;
      printf("Argument value: ");
      switch(args[idx].type) {
      case typeInt: scanf("%lu", &_ARG_INT(args[idx])); fflush(stdin);break;
      case typeString: gets(_ARG_STRING(args[idx])); fflush(stdin); break;
      case typeDouble: 
	_ARG_DOUBLE(args[idx]) = 0.0; 
	scanf("%lf", &d);
	args[idx].a.arg_double = d; 
	DEBUG("Got " << ARG_DOUBLE(args[idx]) << "\n"); 
	fflush(stdin); 
	break;
      }
    }

    printf("The input string: ");
    gets(input); fflush(stdin);
    status = Distill(type, args, numberOfArgs, input, strlen(input)+1, 
		     (void**)&output, &outputLen);
    printf("--------------------------------------------------------\n");
    printf("Status: %d\n", status);
    printf("Output: %s (%lu)\n", output, outputLen);
    FreeOutputBuffer(output);
    delete [] args;
    printf("--------------------------------------------------------\n");
  }
}*/



#if 0
char input1[256], input2[256], input3[256];
#define INBUFSIZE 1024*768

int Child(char *input, char *mtype, char *outfile)
{
  DistillerInput in;
  DistillerOutput out;
  DistillerStatus status;
  C_DistillerType type;
  Argument arg;
  FILE *infile;

  strcpy(type.string, mtype);
  in.data = (char *) malloc(INBUFSIZE*sizeof(char));
  if (inbuf == NULL) {
    printf("Child ran out of memory. Zot\n");
    return 0;
  }
  infile = fopen(input, "r");
  if (infile == NULL) {
    printf("Child couldn't open input file %s\n", input);
    free(inbuf);
    return 0;
  }
  inbuflen = fread((void *) inbuf, 1, INBUFSIZE, infile);
  fclose(infile);
  if (inbuflen <= 0) {
    printf("read of gif %s failed.\n", input);
    free(inbuf);
    return 0;
  }

  if (strcmp(mtype, "text/html") == 0) {
    printf("Child sent file %s (%d bytes)\n", input, inbuflen);
    arg.id = 1;
    SET_ARG_STRING(arg, "steves_magicdust!");
    status = Distill(&type, &arg, 1, &in, &out, &freeOutputBuffer);
  } else {
    printf("Child sent file %s (%d bytes)\n", input, inbuflen);
    status = Distill(&type, 0, 0, inbuf, inbuflen, 
		   (void**)&output, &outputLen);
  }
  printf("Child received len %ld (status = %d)\n", (status==distOk) ? 
	 outputLen : 0, status);
  infile = fopen(outfile, "w");
  if (infile == NULL) {
    printf("couldn't open output file '%s'\n", outfile);
    free(inbuf);
    FreeOutputBuffer(output);
    return 0;
  }
  if (fwrite(output, 1, outputLen, infile) != outputLen) {
    printf("couldn't write output file output.gif\n");
    fclose(infile);
    free(inbuf);
    FreeOutputBuffer(output);
    return 0;
  }

  fclose(infile);
  FreeOutputBuffer(output);
  free(inbuf);
  return 0;
}


int old_main()
{
  if (InitializeDistillerCache(".gm_options.sample", "", 0)==gm_False) {
    gm_Log("Aborting program: " << "\n\n");
    Error::Print();
    exit(-1);
  }
  gm_Log("Waiting for PTM\n");
  WaitForPTM();

  while(1) {
    printf("Enter input filename: ");
    gets(input1);
    if (strcmp(input1, "") == 0)
      break;
    printf("Enter input mimetype: ");
    gets(input2);
    printf("Enter output filename: ");
    gets(input3);

    Child(input1, input2, input3);
  }
}
#endif




void *Endless1(void *arg)
{
  int cnt = (int)arg, m, retVal;
  DistillerInput in;
  DistillerOutput out;
  gm_Bool freeOutputBuffer;
  char str[100];
  C_DistillerType type;

  strcpy(type.string, "all/passthru");
  in.data = str;
  while(1) {
    m = rand();
    sprintf(str, "%d", m);
    fprintf(stdout, "Thread %d sent %s\n", cnt, str);
    in.length = strlen(str)+1;
    if ((retVal=Distill(&type, NULL, 0, &in, &out, &freeOutputBuffer))==distOk) {
      fprintf(stdout, "Thread %d returned %s\n", cnt, (char*)out.data);
    }
    else {
      fprintf(stdout, "Thread %d returned error (%d) !!!!!!!!!!!!!!!\n", 
	      cnt, retVal);
    }
    if (freeOutputBuffer==gm_True) {
      FreeOutputBuffer(&out);
    }
  }
}


/*void *Endless2(void *arg)
{
  int cnt = (int)arg, m, retVal;
  UINT32 outLen=0;
  char *out, str[100];
  C_DistillerType type;

  strcpy(type.string, "all/passthru");
  while(1) {
    m = rand();
    sprintf(str, "%d", m);
    fprintf(stdout, "******  Thread %d sent %s\n", cnt, str);
    if ((retVal=Distill(&type, NULL, 0, str, strlen(str)+1,(void**)&out, &outLen))==distOk) {
      fprintf(stdout, "******  Thread %d returned %s\n", cnt, out);
      FreeOutputBuffer(out);
    }
    else {
      fprintf(stdout, "******  Thread %d returned error (%d) !!!!!!!!!!!!!!!\n", 
	      cnt, retVal);
    }
  }
}*/


int main()
{
  SetStderrLogging("Proxy: ");
  if (InitializeDistillerCache("gm_options.yatin", "", 0)==gm_False) {
    gm_Log("Aborting program: " << "\n\n");
    Error::Print();
    exit(-1);
  }
  gm_Log("Waiting for PTM\n");
  WaitForPTM();
  gm_Log("Found the PTM\n");

#define MAXT 5
  Thread t[MAXT];
  for (int i=0; i<MAXT; i++) {
    if ( i % 2 ) t[i].Fork(Endless1, (void*)i);
    else t[i].Fork(Endless1, (void*)i);
  }
  while(1) {
    sleep(10);
  }

  //Endless1(10000);
}
@


1.16
log
@Changes to the monitor for killing
@
text
@d217 1
d233 5
a237 1
  while(1) ;
@


1.15
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d66 1
a66 1
#ifdef 0
@


1.14
log
@*** empty log message ***
@
text
@d65 2
d72 2
a73 3
  char *output, *inbuf;
  int  inbuflen;
  UINT32 outputLen;
d80 1
a80 1
  inbuf = (char *) malloc(INBUFSIZE*sizeof(char));
d103 1
a103 2
    status = Distill(&type, &arg, 1, inbuf, inbuflen,
		   (void**)&output, &outputLen);
d156 1
d164 4
a167 2
  UINT32 outLen=0;
  char *out, str[100];
d171 1
d176 3
a178 3
    if ((retVal=Distill(&type, NULL, 0, str, strlen(str)+1,(void**)&out, &outLen))==distOk) {
      fprintf(stdout, "Thread %d returned %s\n", cnt, out);
      FreeOutputBuffer(out);
d184 3
d191 1
a191 1
void *Endless2(void *arg)
d212 1
a212 1
}
d230 1
a230 1
    else t[i].Fork(Endless2, (void*)i);
@


1.13
log
@Changed .gm_options to gm_options
@
text
@d191 1
a191 1
  strcpy(type.string, "none/passthru");
d219 1
a219 1
#define MAXT 600
@


1.12
log
@Modifications made to the PTM to remove bugs found while in India.
@
text
@d210 1
a210 1
  if (InitializeDistillerCache(".gm_options.yatin", "", 0)==gm_False) {
@


1.11
log
@OK, ptm now knows about text/html munger.  Fixed up proxy.cc to do
arbitrary data.
@
text
@d133 1
a133 1
int main()
d136 2
a137 15
    UINT32 code = GlobalErrorCode;
    LOG("Aborting program: " << "\n\n"
	<< "Abort status: Global error code = " << code << "\n"
	<< "              Thread error code = " << ThreadErrorCode << "\n");
    
    if (code!=success) {
      LOG( "              Error file-name   = " << ErrorFilename << "\n"
	   << "              Error line number = " << ErrorLineNo   << "\n");
    }
    
    LOG("              errno = " << errno << "\n");
    if (errno!=0) {
      LOG( "              Errno explanation: " << strerror(errno) << "\n");
    }
    
d140 1
a140 1
  LOG("Waiting for PTM\n");
d158 69
@


1.10
log
@hacked up proxy.cc so can send arbitrary files of arbitrary mimetype
@
text
@d68 1
a68 1
int Child(char *input, char *type, char *outfile)
d70 1
a70 1
  char *output;
d75 1
d78 1
a78 1
  strcpy(type.string, type);
d98 5
a102 2
  printf("Child sent file %s (%d bytes)\n", input, inbuflen);
  status = Distill(&type, 0, 0, inbuf, inbuflen, 
d104 5
@


1.9
log
@Modified proxy.cc to send and receive gifs - testing out gif distiller.
@
text
@d65 1
a65 1
char input1[256], input2[256];
d67 2
a68 2
void *
Child(void *args)
a69 1
  char *input=(char*)args, *inbuf;
d77 1
a77 1
  strcpy(type.string, "image/gif");
d102 1
a102 1
  infile = fopen("output.gif", "w");
d104 1
a104 1
    printf("couldn't open output file output.gif\n");
d148 1
a148 1
    printf("Enter gif filename: ");
a149 1

d152 6
a157 4
    Thread *t=new Thread;
    t->Fork(Child, input1);
    t->Join();
    delete t;
d160 2
@


1.8
log
@Modified Bool, FALSE and TRUE to gm_Bool, gm_False and gm_True respectively
@
text
@d66 1
a66 1

d70 1
a70 1
  char *input=(char*)args;
d72 1
d76 21
d98 2
a99 3
  strcpy(type.string, "test/test");
  printf("Child sent %s\n", input);
  status = Distill(&type, 0, 0, input, strlen(input)+1, 
d101 18
a118 2
  printf("Child received %s (status = %d)\n", (status==distOk) ? 
	 output:"!!Error!!", status);
d120 1
a126 6
  char* output;
  UINT32 outputLen;
  DistillerStatus status;
  C_DistillerType type;

  strcpy(type.string, "test/test");
d148 11
a158 19
  printf("Enter input string1: ");
  gets(input1);
  printf("Enter input string2: ");
  gets(input2);

  Thread *t=new Thread;
  t->Fork(Child, input2);

  printf("Parent sent %s\n", input1);
  Argument arg;
  arg.id = 0;
  SET_ARG_STRING(arg, "This is a string");
  status = Distill(&type, &arg, 1, input1, strlen(input1)+1, 
		   (void**)&output, &outputLen);
  printf("Parent received %s (status = %d)\n", (status==distOk) ? 
	 output:"!!Error!!", status);
  FreeOutputBuffer(output);
  t->Join();
  delete t;
@


1.7
log
@Added load balancing stuff to the distiller and ptm. Still need to add
lottery scheduling to the cache manager
@
text
@d95 1
a95 1
  if (InitializeDistillerCache(".gm_options.sample", "", 0)==FALSE) {
@


1.6
log
@Removed bugs from stub.cc etc.
@
text
@d7 1
d76 1
a76 1
  strcpy(type.string, "gif");
d94 2
a95 5
  strcpy(type.string, "gif");
  if (InitializeDistillerCache("", DefaultMulticastAddress, 
			       DefaultMulticastPort, 
			       DefaultTTL, "", 0,
			       "228.8.8.8", 8888, DefaultTTL)==FALSE) {
d113 2
@


1.5
log
@The proxy front-ends can now spawn new PTM if it detects that there isn't
any PTM running.
@
text
@d98 1
d100 1
a100 1
	<< "Abort status: Global error code = " << GlobalErrorCode << "\n"
d103 1
a103 1
    if (GlobalErrorCode!=success) {
@


1.4
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d94 2
a95 1
  if (InitializeDistillerCache(DefaultMulticastAddress, DefaultMulticastPort, 
d124 4
a127 1
  status = Distill(&type, 0, 0, input1, strlen(input1)+1, 
@


1.3
log
@Just before adding stuff for using the monitoring GUI
@
text
@d1 1
a1 1
typedef int Port;
d95 2
a96 1
			       "", 0)==FALSE) {
@


1.2
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d2 1
d77 1
a77 1
  status = Distill(type, 0, 0, input, strlen(input)+1, 
d94 18
a111 2
  InitializeDistillerCache(DefaultMulticastAddress, DefaultMulticastPort, 
			   "", 0);
d122 1
a122 1
  status = Distill(type, 0, 0, input1, strlen(input1)+1, 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#include "cacheinterface.h"
d3 80
d87 6
d96 16
a111 1
  while(1);
@


1.1.1.1
log
@
@
text
@@
