head	1.12;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.12
date	98.01.16.22.16.08;	author yatin;	state Exp;
branches;
next	1.11;

1.11
date	97.04.30.09.04.17;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.02.05.05.34.44;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.01.26.02.34.35;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.01.23.23.11.18;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	96.11.23.00.51.16;	author yatin;	state dead;
branches;
next	1.6;

1.6
date	96.11.22.09.11.10;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.08.21.30;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	96.11.22.00.42.22;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	96.11.08.21.27.37;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.06.23.42.20;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.42.47;	author yatin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.42.47;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@# Generated automatically from Makefile.in by configure.
#!make

ROOT      = .
SRC       = $(ROOT)/src
OUTPUT    = $(ROOT)/output

DATABASE  = $(SRC)/database
SHARE     = $(SRC)/share
NETWORK   = $(SRC)/network
PTM       = $(SRC)/ptm
CACHE     = $(SRC)/cache
DIST      = $(SRC)/dist


CC  = gcc
CXX = g++
INSTALL = /usr/bin/ginstall -c

ifneq "$(PURIFY)" ""
	PURIFYPATH = purify -cache-dir=/tmp
endif
LD = $(PURIFYPATH) $(CXX)

RM  = rm -f
AR  = ar cq
RANLIB = ranlib


INCLUDEPATH = .. ../frontend/include ../client_lib/include ../ptm/include ../monitor/include ../playback/include ../gui
INCLUDES= $(patsubst %,-I%,$(INCLUDEPATH))
#DEFINES = -DHAVE_CONFIG_H -D__INSTRUMENT__
DEFINES = -DHAVE_CONFIG_H
CFLAGS =  -I/usr/sww/include -I/opt/include -I/usr/sww/include -I/usr/sww/share/include -D_MIT_POSIX_THREADS -Wall -pedantic -g  -D_REENTRANT $(DEFINES) $(INCLUDES) 
LDFLAGS=  -L/usr/sww/lib -L/opt/lib -L/usr/sww/lib
LIBS =  -ldl -lpthreads 

DATABASE_OBJ= database.o distdb.o
SHARE_OBJ   = error.o threads.o eventhan.o reqrep.o monitor.o options.o \
		rexec.o ptmqueue.o buffer.o
SHARE_OBJ_C = utils.o
NETWORK_OBJ = sockets.o multicast.o packet.o
PTM_OBJ     = ptm.o ptmnet.o ptmdb.o distlaunch.o optionst.o
PTMSTUB_OBJ = cacheman.o cachenet.o cache.o
DIST_OBJ    = distiller.o distnet.o 

	## Default compilation rules
DEFAULT_O = $(RM) $@@; $(CXX) -c $(CFLAGS) $< -o $@@

%.o : $(PTM)/%.cc
	$(DEFAULT_O)
%.o : $(CACHE)/%.cc
	$(DEFAULT_O)
%.o : $(CACHE)/%.c
	$(DEFAULT_O)
%.o : $(DIST)/%.cc
	$(DEFAULT_O)
%.o : $(DIST)/%.c
	$(RM) $@@; $(CC) -c $(CFLAGS) $< -o $@@
%.o : $(DATABASE)/%.cc
	$(DEFAULT_O)
%.o : $(SHARE)/%.cc
	$(DEFAULT_O)
%.o : $(NETWORK)/%.cc
	$(DEFAULT_O)

TARGETS = ptm libptmstub.a libdist.a TAGS

all: $(TARGETS)

install: ../sbin/ptm ../lib/libptmstub.a ../lib/libdist.a

../sbin/%: %
	$(INSTALL)  $< $@@

../lib/%: %
	$(INSTALL)  $< $@@

TAGS: $(DATABASE)/*.cc $(SHARE)/*.cc $(NETWORK)/*.cc $(PTM)/*.cc $(CACHE)/*.cc $(DIST)/*.cc include/*.h
	-etags $^

ptm: $(PTM_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(SHARE_OBJ_C) $(NETWORK_OBJ)
	$(LD) -o $@@ $(LDFLAGS) $^ $(LIBS)

libptmstub.a: $(PTMSTUB_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(SHARE_OBJ_C) \
		$(NETWORK_OBJ)
	$(RM) $@@
	$(AR) $@@ $^
	$(RANLIB) $@@

proxy: proxy.o libptmstub.a
	$(RM) $@@
	$(LD) -o $@@ $(LDFLAGS) $^ $(LIBS)

stub: stub.o libptmstub.a
	$(RM) $@@
	$(LD) -o $@@ $(LDFLAGS) $^ $(LIBS)

libdist.a: $(DIST_OBJ) $(PTMSTUB_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) \
		$(SHARE_OBJ_C) $(NETWORK_OBJ)
	$(RM) $@@
	$(AR) $@@ $^
	$(RANLIB) $@@

DISTLIB = -L../lib -ldist -lclib -lmon
distengine: distengine.o libdist.a
	$(LD) -o $@@ $(LDFLAGS) $^ $(DISTLIB) $(LIBS)

test: test.o libptmstub.a
	$(LD) -o $@@ $(LDFLAGS) $^ $(LIBS)

clean:
	$(RM) *.o include/*~ src/*/*~ core ptm proxy dist stub

utils.o: ../client_lib/src/utils.c
	$(CC) -c $(CFLAGS) $<

ALL_OBJ= $(PTM_OBJ) $(DIST_OBJ) $(PTMSTUB_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) \
		$(NETWORK_OBJ)
ALL_SRC= $(patsubst %.o,src/*/%.cc,$(ALL_OBJ)) \
		$(patsubst %.o,../*/src/%.c,$(SHARE_OBJ_C)) 

depend:
	../mkdep -c $(CC) -f Makefile.depend $(CFLAGS) $(ALL_SRC)

include Makefile.depend
@


1.11
log
@finalize queue changes.
@
text
@d18 1
d32 5
a36 4
DEFINES = -DHAVE_CONFIG_H -D__INSTRUMENT__
CFLAGS =  -I/usr/sww/include -I/usr/sww/include -I/usr/sww/share/include/libjpeg-6a -I/usr/sww/include -I/usr/sww/share/include -I/usr/sww/lib/perl5/CORE -Wall -pedantic -g -D_MIT_POSIX_THREADS -D_REENTRANT $(DEFINES) $(INCLUDES) 
LDFLAGS=  -L/usr/sww/lib -L/usr/sww/lib -L/usr/sww/lib -L/usr/sww/lib/perl5/CORE
LIBS = -lpthread  -lsocket -lnsl -lintl -ldl
d40 2
a41 1
		rexec.o utils.o ptmqueue.o
d43 1
a43 1
PTM_OBJ     = ptm.o ptmnet.o ptmdb.o distlaunch.o 
d47 1
a47 1
## Default compilation rules
d67 1
a67 1
default all: ptm libptmstub.a libdist.a tags
d69 1
a69 2
tags:
	-etags $(DATABASE)/*.cc $(SHARE)/*.cc $(NETWORK)/*.cc $(PTM)/*.cc $(CACHE)/*.cc $(DIST)/*.cc include/*.h
d71 12
a82 1
ptm: $(PTM_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)
d85 2
a86 1
libptmstub.a: $(PTMSTUB_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)
d99 2
a100 1
libdist.a: $(DIST_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)
d105 3
a107 2
dist: distengine.o libdist.a
	$(LD) -o $@@ $(LDFLAGS) $^ $(LIBS)
d117 10
@


1.10
log
@Fixed some random bugs, most notably a lack of htons()in getLocalPort.
@
text
@d17 7
a23 3
CXX = c++
PURIFY = 
LD  = $(PURIFY) $(CXX)
d31 4
a34 4
DEFINES = -DHAVE_CONFIG_H
CFLAGS =  -I/usr/sww/include -I/usr/sww/include -I/usr/sww/share/include/libjpeg-6a -Wall -pedantic -g -D_MIT_POSIX_THREADS -D_REENTRANT $(DEFINES) $(INCLUDES) 
LDFLAGS= -L/usr/sww/lib
LIBS = -lpthreads 
d37 2
a38 1
SHARE_OBJ   = error.o threads.o eventhan.o reqrep.o monitor.o options.o
d98 3
@


1.9
log
@Much coolness happening.
@
text
@a13 2
TEST      = $(SRC)/test
STUB      = $(SRC)/stub
a57 4
%.o : $(TEST)/%.cc
	$(DEFAULT_O)
%.o : $(STUB)/%.cc
	$(DEFAULT_O)
d62 1
a62 1
	-etags $(DATABASE)/*.cc $(SHARE)/*.cc $(NETWORK)/*.cc $(PTM)/*.cc $(CACHE)/*.cc $(DIST)/*.cc $(TEST)/*.cc $(STUB)/*.cc include/*.h
@


1.8
log
@Added skeleton for the jpeg munger, in jpg_munger.  Fixed up top-level
Makefile.in to include it, and fixed up configure.in to deal with
the needed libjpeg.a library.
@
text
@d30 1
a30 1
CFLAGS =  -I/usr/sww/include -I/usr/sww/include -Wall -pedantic -g -D_MIT_POSIX_THREADS -D_REENTRANT $(DEFINES) $(INCLUDES) 
d32 1
a32 1
LIBS = -ljpeg -lpthreads 
@


1.7
log
@Update after merging config.h.in
@
text
@d1 1
a3 4
PURIFY	= # purify -cache-dir=/tmp 

LINUX_PTHREAD = -D_MIT_POSIX_THREADS

d17 8
a24 20
UNAME = $(shell /bin/uname)
ifeq ($(UNAME), SunOS)
	ARCHDEFS = -DSUNOS
	ARCHLIBS = -lsocket -lnsl
else
	ARCHDEFS =
	ARCHLIBS =
endif


DEFINES = $(ARCHDEFS) $(LINUX_PTHREAD)
INCLUDES= -I$(ROOT)/include
LIBS    = -lpthread $(ARCHLIBS)

CC= gcc
LD= $(PURIFY) g++
RM= rm
OPTIMIZER= -g
CFLAGS=  -Wall -pedantic $(OPTIMIZER) $(DEFINES) $(INCLUDES)
LDFLAGS= $(LIBS)
d27 7
d35 1
a35 1
SHARE_OBJ   = error.o threads.o eventhan.o reqrep.o monitor.o
d38 1
a38 1
PROXY_OBJ   = cacheman.o cachenet.o cache.o proxy.o
a40 6
PTM_OBJ_FILES= $(PTM_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)
PROXY_OBJ_FILES= $(PROXY_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) \
	$(NETWORK_OBJ)
DIST_OBJ_FILES= $(DIST_OBJ) $(DATABASE_OBJ) $(SHARE_OBJ) \
	$(NETWORK_OBJ)

d42 1
a42 1
DEFAULT_O = $(CC) -c $(CFLAGS) $< -o $@@
a43 3
#xwin.o: $(SHARE)/xwin.cc
#	$(CC) -c $(CFLAGS) -I/usr/sww/tcl/include -I/usr/sww/X11/include \
#	$< -o $@@
d53 1
a53 1
	$(DEFAULT_O)
d65 1
a65 1
default all: ptm proxy dist
d67 2
a68 2
ptm: $(PTM_OBJ_FILES) Makefile
	$(LD) -o $@@ $(PTM_OBJ_FILES) $(LDFLAGS)
d70 2
a71 2
proxy: $(PROXY_OBJ_FILES) Makefile
	$(LD) -o $@@ $(PROXY_OBJ_FILES) $(LDFLAGS)
d73 17
a89 4
libdist.a: $(DIST_OBJ_FILES) Makefile
	rm -f $@@
	ar cq $@@ $(DIST_OBJ_FILES) 
	ranlib $@@
d92 1
a92 1
	$(LD) -o $@@ distengine.o libdist.a $(LDFLAGS)
d94 2
a95 15
client: client.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ) Makefile
	$(LD) -o client client.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ) \
	$(LDFLAGS)

stub: stub.o multicast.o Makefile
	$(LD) -o stub stub.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)\
	$(LDFLAGS)

test1: test1.o multicast.o Makefile
	$(LD) -o test1 test1.o multicast.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)\
	$(LDFLAGS)

test2: test2.o multicast.o Makefile
	$(LD) -o test2 test2.o multicast.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)\
	$(LDFLAGS)
d98 1
a98 1
	$(RM) -f *.o
@


1.6
log
@Added -D_MIT_POSIX_THREAD
@
text
@@


1.5
log
@Modified the logging mechanism to use the monitor entity
Multiple PTM detect each other and die gracefully
Still need to do auto start of PTM by the proxy front end
@
text
@d30 1
a30 1
DEFINES = $(ARCHDEFS)
@


1.4
log
@Just before adding stuff for using the monitoring GUI
@
text
@d43 1
a43 1
SHARE_OBJ   = error.o threads.o eventhan.o reqrep.o
@


1.3
log
@Distiller and proxy communication layers are working.
PTM can auto-spawn distillers
Glurun and load balancing not yet implemented
@
text
@d5 2
d45 1
a45 1
PTM_OBJ     = ptm.o ptmnet.o ptmdb.o distlaunch.o
d58 3
@


1.2
log
@Distiller front end working
Cache manager broken
PTM network stuff not completely done
@
text
@d36 1
a36 1
CFLAGS=  -Wall $(OPTIMIZER) $(DEFINES) $(INCLUDES)
d40 2
a41 2
DATABASE_OBJ= database.o 
SHARE_OBJ   = error.o  threads.o eventhan.o reqrep.o
d43 2
a44 2
PTM_OBJ     = ptm.o ptmnet.o ptmdb.o distlaunch.o distdb.o
PROXY_OBJ   = cacheman.o cachenet.o distdb.o proxy.o
d86 1
@


1.1
log
@Initial revision
@
text
@d3 2
d14 1
d16 1
d32 3
a34 3
CC= g++
LD= g++
RM= rm -i
d40 2
a41 2
DATABASE_OBJ= database.o distiller.o
SHARE_OBJ   = error.o  threads.o eventhan.o
d43 3
d47 4
a50 2
PTM_OBJ_FILES= ptm.o ptmnet.o $(DATABASE_OBJ) $(SHARE_OBJ) $(NETWORK_OBJ)
PROXY_OBJ_FILES= proxy.o cacheman.o cachenet.o $(DATABASE_OBJ) $(SHARE_OBJ) \
d60 6
d74 2
d77 1
a77 1
default all: ptm proxy
d85 7
d96 4
d109 1
a109 1
	$(RM) *.o
@


1.1.1.1
log
@
@
text
@@
