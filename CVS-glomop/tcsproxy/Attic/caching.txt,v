head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.09.27.02.41.09;	author fox;	state dead;
branches;
next	1.1;

1.1
date	96.08.10.01.49.20;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.10.01.49.20;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@Caching of representations:

Can cache be made orthogonal/independent of proxy?
Maybe, if the proxy can map reprsentation characteristics into equiv
classes, and each equiv class goes into a "name bin".  Representations
close enough together will have same names==>same cache entry, and we
can get the desired behavior from the cache (fuzzy matching) without
having it integrated tightly w/distillation decision.

If more cache becomes avail (or more computing power), can change the
fuzziness granularity by going to new namespace.  Old names will
eventually be evicted from disuse, which is just what you want.  

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Discussion (and soon, code) for building the scalable TCS webproxy
@
text
@@
