head	1.3;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.2
	pre-yatin-merge:1.2
	transend-beta2:1.2
	fox-dev:1.2
	transend-beta-reallylatest:1.2
	transend-beta-latest:1.2
	browser-ng:1.2;
locks; strict;
comment	@# @;


1.3
date	98.01.24.22.51.39;	author fox;	state dead;
branches;
next	1.2;

1.2
date	97.05.27.03.53.27;	author achuang;	state Exp;
branches;
next	1.1;

1.1
date	97.05.23.08.36.59;	author achuang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Moved all browser/ files to wwwroot/ subdirs.  Added miniserver.pl to
eliminate need for separate webserver; notes about it are attached.
2 fixes to dispatch.c logic:
- for server-like dispatch, correct headers are now generated when the
server-mode worker attempts to do a redispatch. (previously, for this
case, the returned headers would be the headers of the original
*request*, not theserver response headers.)
- special-casing for the Prefs form URL was eliminated because it
interferes with the miniserver worker. (Ambiguity arises if a request
both matches the Prefs URL *and* matches the server-mode worker, and
it's ugly to have the miniserver worker special case this.)  Instead,
the miniserver.pl worker does  a redispatch to transend/text/html for
HTML documents, which should catch this case.  this is probably not the
Right Thing long term.

there is a new worker, miniserver.pl, which acts as a very simple
httpd.  the root of its filesystem is {proxy.home}/wwwroot.  note that
it doesn't currently handle cgi's or server-side includes or anything --
all it can do is serve simple static files.

i have made the following changes:

- new submodule tcsproxy/wwwroot, to hold the "support files" for TACC
  apps including transend and wingman.

- moved the existing support files for transend and wingman, including
  the java_gui stuff, from
  tcsproxy/browser to tcsproxy/wwwroot/transend, tcsproxy/wwwroot/wingman,
  and tcsproxy/wwwroot/java_gui, respectively.  tcsproxy/browser is now empty,
  and i will eventually prune it from the tree.

- updated the paths in the html munger transend.text.html to match the
  new structure.

- new perl_dir application miniserver.pl, and new toplevel file
  mime.types (used to map file suffixes to MIME types).  the application
  does in-memory caching and uses stat() to deduce when files need to be
  reloaded, so for local-disk files it shouldn't be too heavy of a
  load.  that the expectation is  that traffic to the wwwroot directory
   will be modest - this worker would suck for running a high-traffic
  server, since it doesn't bound the size of the in-memory cache or attempt
  to manage memory to keep "hot" items nearby as Harvest does.


the easiest way to make this mechanism work:

- add an entry to your options file:

        dist.myurl/dispatch: sbin/perl_stub -- perl_dir/miniserver.pl

- set frontend.aggString to the prefix of URL's that should be served
  from the "fake" web server.

- be sure frontend.webServerName matches frontend.aggString.  (this is
  necessary because frontend.webServerName is used by workers that want
  to access the "support files".  keeping these two properties separate
  leaves the option of running a separate web server if desired.)

- *** IMPORTANT *** because miniserver doesn't handle forms submission
   in any way, the frontend.prefsFormSubmitURL property must be
   constructed so that it DOES NOT MATCH anything that might be
   requested of miniserver.  this isn't so bad when you remember that
   the prefsFormSubmitUrl can be a totally imaginary server.
   UNFORTUNATELY, the file wwwroot/transend/prefs.html, which is the
   prefs-submission form, has to have some name wired into it; i picked
   "http://transend-prefs.cs.berkeley.edu", so that's what the config
   files will need to say for now.  i know this is kind of hacky.

-  note that for text/html files, miniserver.pl will redispatch to
   transend/text/html; for other files it will do nothing, ie just
   return the file.  i'm not sure this is the right thing all the time,
   though it's certainly right for transend (causes user prefs form to
   be filled in with existing prefs values).
@
text
@*** gui.java ***

Things to do:

	- Check the CODEBASE in ICON_STRING.  We weren't sure where the
	applet would reside.

	- Make sure the dashboard is not hidden when the proxy is disabled.

	- Make sure the GetPrefs.html page is not cached.

	- Make sure the icons are cached.

Things to change for modifications:

	If this changes:			Change these fields:
	----------------			--------------------

	proxy location 				proxyHost
						HOST (in config_tr.h.in)
						
	number of panels			height
						minwidth
						numPanels
						numButtons
						initialization*

	size of dashboard			height
						minwidth
						initialization*	
	
	panel gif name				initialization of panels
						array elements in init()

	link					initialization of buttons
						array elements in init()


* Changing the initialization of panels and buttons is not as straight-
forward as changing other state variables.  The two arrays "panels" and
"buttons" are initialized in the init() function.  This section was
designed to make it fairly painless to add or change panels.  For 
example, the initialization tasks for each panel are grouped together.
One can change the order of panels by swapping two of these groups;
one can add a panel by adding one of these groups; etc. Note that if
one changes the width of a panel, the change will have to be made here
as well in the initialization of the widths array.
@


1.2
log
@new java files to make the java gui work with transend.cs as the server; these files also have more thorough documentation.
@
text
@@


1.1
log
@README file - minimal
@
text
@d3 11
d20 2
a21 1

@
