head	1.3;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.2
	pre-yatin-merge:1.2
	transend-beta2:1.2
	fox-dev:1.2
	transend-beta-reallylatest:1.2
	browser-ng:1.2
	transend-beta-latest:1.2
	Aggregators:1.1.1.1
	NoAggregators:1.1.1.1
	iang:1.1.1.1.0.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.3
date	98.01.24.22.51.40;	author fox;	state dead;
branches;
next	1.2;

1.2
date	97.05.27.03.53.25;	author achuang;	state Exp;
branches;
next	1.1;

1.1
date	97.04.29.21.37.12;	author achuang;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.04.29.21.37.12;	author achuang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Moved all browser/ files to wwwroot/ subdirs.  Added miniserver.pl to
eliminate need for separate webserver; notes about it are attached.
2 fixes to dispatch.c logic:
- for server-like dispatch, correct headers are now generated when the
server-mode worker attempts to do a redispatch. (previously, for this
case, the returned headers would be the headers of the original
*request*, not theserver response headers.)
- special-casing for the Prefs form URL was eliminated because it
interferes with the miniserver worker. (Ambiguity arises if a request
both matches the Prefs URL *and* matches the server-mode worker, and
it's ugly to have the miniserver worker special case this.)  Instead,
the miniserver.pl worker does  a redispatch to transend/text/html for
HTML documents, which should catch this case.  this is probably not the
Right Thing long term.

there is a new worker, miniserver.pl, which acts as a very simple
httpd.  the root of its filesystem is {proxy.home}/wwwroot.  note that
it doesn't currently handle cgi's or server-side includes or anything --
all it can do is serve simple static files.

i have made the following changes:

- new submodule tcsproxy/wwwroot, to hold the "support files" for TACC
  apps including transend and wingman.

- moved the existing support files for transend and wingman, including
  the java_gui stuff, from
  tcsproxy/browser to tcsproxy/wwwroot/transend, tcsproxy/wwwroot/wingman,
  and tcsproxy/wwwroot/java_gui, respectively.  tcsproxy/browser is now empty,
  and i will eventually prune it from the tree.

- updated the paths in the html munger transend.text.html to match the
  new structure.

- new perl_dir application miniserver.pl, and new toplevel file
  mime.types (used to map file suffixes to MIME types).  the application
  does in-memory caching and uses stat() to deduce when files need to be
  reloaded, so for local-disk files it shouldn't be too heavy of a
  load.  that the expectation is  that traffic to the wwwroot directory
   will be modest - this worker would suck for running a high-traffic
  server, since it doesn't bound the size of the in-memory cache or attempt
  to manage memory to keep "hot" items nearby as Harvest does.


the easiest way to make this mechanism work:

- add an entry to your options file:

        dist.myurl/dispatch: sbin/perl_stub -- perl_dir/miniserver.pl

- set frontend.aggString to the prefix of URL's that should be served
  from the "fake" web server.

- be sure frontend.webServerName matches frontend.aggString.  (this is
  necessary because frontend.webServerName is used by workers that want
  to access the "support files".  keeping these two properties separate
  leaves the option of running a separate web server if desired.)

- *** IMPORTANT *** because miniserver doesn't handle forms submission
   in any way, the frontend.prefsFormSubmitURL property must be
   constructed so that it DOES NOT MATCH anything that might be
   requested of miniserver.  this isn't so bad when you remember that
   the prefsFormSubmitUrl can be a totally imaginary server.
   UNFORTUNATELY, the file wwwroot/transend/prefs.html, which is the
   prefs-submission form, has to have some name wired into it; i picked
   "http://transend-prefs.cs.berkeley.edu", so that's what the config
   files will need to say for now.  i know this is kind of hacky.

-  note that for text/html files, miniserver.pl will redispatch to
   transend/text/html; for other files it will do nothing, ie just
   return the file.  i'm not sure this is the right thing all the time,
   though it's certainly right for transend (causes user prefs form to
   be filled in with existing prefs values).
@
text
@import java.awt.*;
import java.net.*;

// The button2 class implements psuedo-buttons for the java_gui.
public class button2 {

// These variables specify the boundaries of this button2.
// The coordinates are calculated from the origin of this button2's
// panel. 
private int x0; // x-origin
private int y0; // y-origin
private int x1;	// x-bottom corner 
private int y1;	// y-botton corner 

// The panel variable specifies which panel this button2 is in.
// This is used in the mouseDown() function of gui.java.  Since
// the coordinates given to mouseDown() are absolute coordinates,
// the panel number needs to be known to specify the relative
// coordinates. These relative coordinates are then passed into
// the inButton() function below.
public int panel;

// "action" contains the action associated with pressing this
// button2. The mouseDown() function in java.gui uses this field 
// to check what kind of action to take in response to this button2 
// being pressed.
public String action;

// "gif" contains the panel that should be displayed when this
// button2 is pressed.
public Image gif;

// "url" is used if the action requires either following a link 
// or setting a preference. This field contains either the link
// or the HTTP request string for setting preferences.
public URL url;

// "mesg" is used to output a status message in the browser's
// dialog box.
public String mesg;

// Default constructor
public button2() {
  x0 = 0;
  y0 = 0;
  x1 = 0;
  y1 = 0;
  panel = 0;
  url = null;
  action = "";
  gif = null;
  mesg = "";
}

// This is the constructor used if no url is specified.  For example, 
// there is no URL needed for minimizing the toolbar.
public button2(int x, int y, int w, int h, int panel0, Image gif0,
	       String action0, String mesg0) {
  x0 = x;
  y0 = y;
  x1 = x + w;
  y1 = y + h;
  panel = panel0;
  action = action0;
  gif = gif0;
  mesg = mesg0;
  url = null;
}

// This is the constructor used for button2's that lead to links or
// setting preferences.  Thus, a URL is specified.
public button2(int x, int y, int w, int h, int panel0, Image gif0, 
	       String action0, String mesg0, String url0) {
  x0 = x;
  y0 = y;
  x1 = x + w;
  y1 = y + h;

  panel = panel0;
  action = action0;
  gif = gif0;
  mesg = mesg0;

  try {
    url = new URL(url0);
  }
  catch (MalformedURLException me) {	// new URL() failed
    System.err.println("new URL failed");
    return;
  }
}

// The basic function used is inButton(x, y) which returns true
// if the coordinate (x, y) lies within this particular button's
// coordinates.
public boolean inButton(int x, int y)  
{
  if (x >= x0 && y >= y0 && x <= x1 && y <= y1) {
    return true;
  }
  return false;
}
}


@


1.2
log
@new java files to make the java gui work with transend.cs as the server; these files also have more thorough documentation.
@
text
@@


1.1
log
@Initial revision
@
text
@d4 1
d7 76
a82 24
  private int x0;  	/* x-origin */
  private int y0;  	/* y-origin */
  private int x1;	/* x-bottom corner */
  private int y1;	/* y-botton corner */

  public int panel;

  public String action;
  public Image gif;
  public URL url;

  public String mesg;

  public button2() {
    x0 = 0;
    y0 = 0;
    x1 = 0;
    y1 = 0;
    panel = 0;
    url = null;
    action = "";
    gif = null;
    mesg = "";
  }
d84 2
a85 11
  public button2(int x, int y, int w, int h, int panel0, Image gif0,
	         String action0, String mesg0) {
    x0 = x;
    y0 = y;
    x1 = x + w;
    y1 = y + h;
    panel = panel0;
    action = action0;
    gif = gif0;
    mesg = mesg0;
    url = null;
d87 3
a89 19

  public button2(int x, int y, int w, int h, int panel0, Image gif0, 
	         String action0, String mesg0, String url0) {
    x0 = x;
    y0 = y;
    x1 = x + w;
    y1 = y + h;

    panel = panel0;
    action = action0;
    gif = gif0;
    mesg = mesg0;
    try {
      url = new URL(url0);
    }
    catch (MalformedURLException me) {	// new URL() failed
      System.err.println("new URL failed");
      return;
    }
d91 1
d93 7
a99 5
  public boolean inButton(int x, int y) {
    if (x >= x0 && y >= y0 && x <= x1 && y <= y1) {
      return true;
    }
    return false;
d101 2
@


1.1.1.1
log
@
@
text
@@
