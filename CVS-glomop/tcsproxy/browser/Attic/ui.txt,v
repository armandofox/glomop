head	1.2;
access;
symbols
	Yatin-final:1.1.1.1
	Yatin:1.1.1.1.0.6
	pre-yatin-merge:1.1.1.1
	transend-beta2:1.1.1.1
	fox-dev:1.1.1.1
	transend-beta-reallylatest:1.1.1.1
	browser-ng:1.1.1.1
	transend-beta-latest:1.1.1.1
	Aggregators:1.1.1.1
	NoAggregators:1.1.1.1
	iang:1.1.1.1.0.4
	transend-beta:1.1.1.1.0.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.01.24.22.51.32;	author fox;	state dead;
branches;
next	1.1;

1.1
date	97.04.08.20.07.43;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.04.08.20.07.43;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Moved all browser/ files to wwwroot/ subdirs.  Added miniserver.pl to
eliminate need for separate webserver; notes about it are attached.
2 fixes to dispatch.c logic:
- for server-like dispatch, correct headers are now generated when the
server-mode worker attempts to do a redispatch. (previously, for this
case, the returned headers would be the headers of the original
*request*, not theserver response headers.)
- special-casing for the Prefs form URL was eliminated because it
interferes with the miniserver worker. (Ambiguity arises if a request
both matches the Prefs URL *and* matches the server-mode worker, and
it's ugly to have the miniserver worker special case this.)  Instead,
the miniserver.pl worker does  a redispatch to transend/text/html for
HTML documents, which should catch this case.  this is probably not the
Right Thing long term.

there is a new worker, miniserver.pl, which acts as a very simple
httpd.  the root of its filesystem is {proxy.home}/wwwroot.  note that
it doesn't currently handle cgi's or server-side includes or anything --
all it can do is serve simple static files.

i have made the following changes:

- new submodule tcsproxy/wwwroot, to hold the "support files" for TACC
  apps including transend and wingman.

- moved the existing support files for transend and wingman, including
  the java_gui stuff, from
  tcsproxy/browser to tcsproxy/wwwroot/transend, tcsproxy/wwwroot/wingman,
  and tcsproxy/wwwroot/java_gui, respectively.  tcsproxy/browser is now empty,
  and i will eventually prune it from the tree.

- updated the paths in the html munger transend.text.html to match the
  new structure.

- new perl_dir application miniserver.pl, and new toplevel file
  mime.types (used to map file suffixes to MIME types).  the application
  does in-memory caching and uses stat() to deduce when files need to be
  reloaded, so for local-disk files it shouldn't be too heavy of a
  load.  that the expectation is  that traffic to the wwwroot directory
   will be modest - this worker would suck for running a high-traffic
  server, since it doesn't bound the size of the in-memory cache or attempt
  to manage memory to keep "hot" items nearby as Harvest does.


the easiest way to make this mechanism work:

- add an entry to your options file:

        dist.myurl/dispatch: sbin/perl_stub -- perl_dir/miniserver.pl

- set frontend.aggString to the prefix of URL's that should be served
  from the "fake" web server.

- be sure frontend.webServerName matches frontend.aggString.  (this is
  necessary because frontend.webServerName is used by workers that want
  to access the "support files".  keeping these two properties separate
  leaves the option of running a separate web server if desired.)

- *** IMPORTANT *** because miniserver doesn't handle forms submission
   in any way, the frontend.prefsFormSubmitURL property must be
   constructed so that it DOES NOT MATCH anything that might be
   requested of miniserver.  this isn't so bad when you remember that
   the prefsFormSubmitUrl can be a totally imaginary server.
   UNFORTUNATELY, the file wwwroot/transend/prefs.html, which is the
   prefs-submission form, has to have some name wired into it; i picked
   "http://transend-prefs.cs.berkeley.edu", so that's what the config
   files will need to say for now.  i know this is kind of hacky.

-  note that for text/html files, miniserver.pl will redispatch to
   transend/text/html; for other files it will do nothing, ie just
   return the file.  i'm not sure this is the right thing all the time,
   though it's certainly right for transend (causes user prefs form to
   be filled in with existing prefs values).
@
text
@***** TranSend Proxy User Interface Documentation *****
***** Andrew C. Huang - achuang@@cs.berkeley.edu   *****
***** Benjamin C. Ling - bling@@cs.berkeley.edu *****

- tsform.html -

tsform.html contains a basic forms-based user interface. The 
page contains two forms, one for setting preferences and one 
for sending comments.

Here are some details on the first form which is used for 
setting preferences:

	- HIDDEN INPUT TYPES:

	  When a checkbox is selected, the form will send
	  some value (0 or 1) for the given name. However,
	  the desired behavior is to have the form send
	  the opposite value when the checkbox is not clicked.

	  To accomplish this, "hidden" inputs are used.  Let's
	  say the checkbox is to set the value for "i1." The
	  non-checked value is set using a hidden input 
	  before the checkbox input. This way, if nothing is
	  checked, the value set by the hidden input (which is
	  the desired non-checked value) is sent.

	- TRANSENDID and TRANSENDVAL:

	  These two keywords are used by the proxy to make
	  the proxy settings page show up with the user's
	  current settings. Depending on the user's settings
	  the proxy will either do nothing with these keywords
	  or will replace them with the word CHECKED.

	- INPUT NAME="i7"

	  This hidden input is used by the proxy to indicate
	  which form is being sent. In this case, the value
	  is set to 0 to indicate the beginner's settings form.

Here are some details on the first form which is used for 
sending comments:

	- This form posts to a cgi-bin that processes the
	  input and forwards a message to the specified
	  address.

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@browser side software
@
text
@@
