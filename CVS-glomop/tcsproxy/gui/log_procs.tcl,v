head	1.7;
access;
symbols
	Yatin-final:1.7
	Yatin:1.7.0.2
	pre-yatin-merge:1.7
	transend-beta2:1.7
	fox-dev:1.7
	transend-beta-latest:1.6
	Aggregators:1.6
	NoAggregators:1.6
	iang:1.6.0.4
	transend-beta:1.6.0.2
	SOSP:1.6;
locks; strict;
comment	@# @;


1.7
date	97.06.14.05.05.37;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.03.06.06.47.30;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.03.06.01.59.42;	author yatin;	state Exp;
branches;
next	1.4;

1.4
date	97.02.07.21.54.39;	author yatin;	state Exp;
branches;
next	1.3;

1.3
date	97.01.29.06.00.44;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	97.01.08.03.39.17;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.01.06.06.39.03;	author fox;	state Exp;
branches;
next	;


desc
@@


1.7
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@#
#  new_field, update_field, and script procedures for the
#  Log function
#

# new_field procedure for Log messages
proc Log_new_field { frame unit field width height maxLines} {
    label $frame.id -text $field
    set maxLinesVar $frame.text.maxLines
    global $maxLinesVar

#    set arg {}
#    if { $width != "" } { set arg "$arg -width $width" }
#    if { $height!= "" } { set arg "$arg -height $height" }
#    set $maxLinesVar $maxLines
#
#    if { $arg != "" } {
#	text $frame.text $arg
#    } else {
#        text $frame.text
#    }

    if { $width == "" } { set width  80 }
    if { $height== "" } { set height 10 }
    text $frame.text -width $width -height $height
    set $maxLinesVar $maxLines

    $frame.text configure \
            -font fixed \
            -xscrollcommand "$frame.sx set" \
            -yscrollcommand "$frame.sy set" -wrap none -state disabled

    bind $frame.text <Destroy> "catch \{ unset $maxLinesVar \}"
    scrollbar $frame.sx -orient horizontal -width 10 \
            -command "$frame.text xview"
    scrollbar $frame.sy -orient vertical -width 10 \
            -command "$frame.text yview"

    pack $frame.id -side top -anchor w
    pack $frame.sx -side bottom -fill x
    pack $frame.sy -side right  -fill y
    pack $frame.text -side left -fill both -expand true
    pack $frame -expand true -fill both
}

# update_field procedure for Log messages
proc Log_update_field { frame unit field value sender } {
    set maxLinesVar $frame.text.maxLines
    global $maxLinesVar
    set maxLines [set $maxLinesVar]
    $frame.text configure -state normal
    $frame.text insert end \
            "[clock format [clock seconds] -format %H:%M:%S] $value"
    $frame.text see end
    set totalLines [lindex [split [$frame.text index end] .] 0]
    if { $totalLines > $maxLines } {
	$frame.text delete 1.0 [expr $totalLines - $maxLines].0
    }

    $frame.text configure -state disabled
}


# the procedure to be specified as the script for log messages
# i.e. a log message will have the format:
# <unit>\001<field>\001<value\001Log
#    or                          ^^^
# <unit>\001<field>\001<value\001Log <width> <height> <maxLines>
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
proc Log { args } {
    set width    "[lindex $args 0]"
    set height   "[lindex $args 1]"
    set maxLines "[lindex $args 2]"
    if { $maxLines == "" } { set maxLines 100 }

    set new_field_body "Log_new_field \$frame \$unit \$field \{$width\} \
	    \{$height\} \{$maxLines\}"
    proc new_field { frame unit field } $new_field_body

    proc update_field { frame unit field value sender } {
	Log_update_field $frame $unit $field $value $sender
    }
}

@


1.6
log
@*** empty log message ***
@
text
@d74 1
a74 1
    if { $maxLines == "" } { set maxLines 50 }
@


1.5
log
@Changed the rsh mechanism to not stall for so long
@
text
@d52 2
a53 1
    $frame.text insert end $value
@


1.4
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d31 1
a31 1
            -yscrollcommand "$frame.sy set" -wrap word -state disabled
@


1.3
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d53 1
a53 1

@


1.2
log
@Added "dying gasp" functionality to MonitorClient class: whenever a new
monitor is created, globals are set to record its socket id and unit
name, so that the program can respond to signals by jumping to a signal
handler that announces the program's death by sending a death packet.
New functions in monitor.cc: DyingGasp (class method), GaspOnSignals
(instance method), extern "C" void MonitorClientSigHandler (C signal
handler), CurrentMonitorSock and CurrentUnitId (static variables in
monitor.h).  If you can think of a better way to do this, please change
it.

Fixed bug in frontend HTTP request parsing that caused multi-packet
requests not to be read correctly.

Many changes to the monitor, mostly cosmetic, some functional, including
addition of "kill" button (there is now a "death protocol") and more
sane show/hide behavior that is integrated with iconifying.
@
text
@d12 14
a25 3
    set arg {}
    if { $width != "" } { set arg "$arg -width $width" }
    if { $height!= "" } { set arg "$arg -height $height" }
a27 5
    if { $arg != "" } {
	text $frame.text $arg
    } else {
        text $frame.text
    }
@


1.1
log
@Broke up monitor functionality into various files for
maintainability. Made default state of new windows hidden rather than
exposed.  New procedures (for different logging types) can now be added
by simply adding a file whose name matches the glob "*_procs.tcl"; it
will be loaded automatically.
@
text
@d18 1
a18 2
	text $frame.text $arg -xscrollcommand "$frame.sx set" \
		-yscrollcommand "$frame.sy set" -wrap none -state disabled
d20 1
a20 2
	text $frame.text -xscrollcommand "$frame.sx set" \
		-yscrollcommand "$frame.sy set" -wrap none -state disabled
d22 4
d28 4
a31 2
    scrollbar $frame.sx -orient horizontal -command "$frame.text xview"
    scrollbar $frame.sy -orient vertical   -command "$frame.text yview"
@
