head	1.6;
access;
symbols
	Yatin-final:1.6
	Yatin:1.6.0.2
	pre-yatin-merge:1.6
	transend-beta2:1.6
	fox-dev:1.6
	transend-beta-latest:1.5
	Aggregators:1.5
	NoAggregators:1.5
	iang:1.5.0.4
	transend-beta:1.5.0.2
	SOSP:1.5;
locks; strict;
comment	@ * @;


1.6
date	97.07.15.02.43.09;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.02.14.21.24.15;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.02.05.03.57.03;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.02.05.00.33.02;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.01.29.23.55.47;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.01.29.21.59.23;	author fox;	state Exp;
branches;
next	;


desc
@@


1.6
log
@makefile changes to link pthreads only at end, which was causing severe bad behaviors under linux since different people were calling different signal()s.  SIGHUP is now used instead of SIGUSR1 to signal components to reinitialize themselves, and SIGTERM is used to kill them gracefully.  Layout stuff for Pilot works but is still inelegant.
@
text
@#ifndef _MON_H
#define _MON_H

#include <sys/types.h>
#include <sys/utsname.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <signal.h>

#define MON_MAXUNITNAME  100    /* max length of unitname */
#define MON_SEPARATOR "\001"    /* component separator in messages */

#ifndef MON_USE_STDERR
# define MON_USE_STDERR ((Monitor *)0xffffffff)
#endif

typedef struct monitor {
  struct sockaddr_in sin;
  char myhostname[SYS_NMLN]; /* in sys/utsname.h */
  int sock;
  char unitname[MON_MAXUNITNAME];
  int pid;
} Monitor;

/*
 *  Create instance of a monitor client for this unit
 */
Monitor  *MonitorClient_Create(const char *unitname, const char *ipaddr,
                             int port, int ttl);
/*
 *  Set this monitor client as the one that will be called for "dying gasp"
 */
void     MonitorClient_SetAsDefault(Monitor *m);
/*
 *  Call this function to tell the GUI Monitor you're about to die (call
 *  this before destroying the monitor client).  The only reason it
 *  takes an int argument is because it may also be called from inside
 *  this library as a signal handler.  You should call your cleanup
 *  function from inside this function since this function may be used
 *  to indicate (asynchronously) your impending doom.  DO NOT call
 *  MonitorClient_Destroy from inside here, though.
 */
void     MonitorClient_Gasp(int sig);
/*
 *  Destroy client
 */
int      MonitorClient_Destroy(Monitor *m);
/*
 *  Send a message overriding the unit name temporarily
 */
int     MonitorClient_UnitSend(Monitor *m, const char *unit, const char *field,
                               const char *value, const char *script);
/*
 *  Send a message giving field name, new value, optional Tcl script(s)
 */
#define  MonitorClient_Send(m,f,v,s)  \
      MonitorClient_UnitSend((m),((m)? (m)->unitname : "??"),(f),(v),(s))
     
/*
 *  Useful macro to cause Gasp function to be called when external
 *  signals received (eg SIGINT, SIGTERM).  Gasp function will also be
 *  called (asynchronously) when a "kill yourself" message is received
 *  from monitor.
 */
#define MonitorClient_GaspOn(sig) signal((sig), MonitorClient_Gasp)
/*
 *  Useful macros to get and set the unit name for an existing monitor client
 */
#define MonitorClient_GetUnitName(m) ((m)->unitname)
#define MonitorClient_SetUnitName(m,n) \
        (strncpy((m)->unitname, (n), MON_MAXUNITNAME))

/*
 *  Monitor behaviors
 */

#define MON_SIMPLE    ""
#define MON_LOG       "Log"
#define MON_TIMECHART "TimeChart"     
#define MON_ARRAY     "Array"

#endif /* ifndef _MON_H */
@


1.5
log
@fixed killbutton bug in monitor
@
text
@d65 1
a65 1
 *  signals received (eg SIGINT, SIGHUP).  Gasp function will also be
@


1.4
log
@all "run" targets now put their programs in the background.
run_frontend redirects stderr to "frontend.errs", but ideally we
shouldn't have to rely on fprintf(stderr) at all.
html and gif distillers no longer spew debugging output to stderr.
Monitor now prints to stderr if the monitor object has the sentinel
value MON_USE_STDERR.
in doc directory, distillers.txt is now distillers.pod.  Use pod2* to
make it into HTML,LaTEX, etc.
@
text
@d61 1
a61 1
                MonitorClient_UnitSend((m),((m)->unitname),(f),(v),(s))
@


1.3
log
@added thread-monitoring stuff to frontend, fixed thread-monitoring procs in GUI, added proxy autoconfig file target to toplevel Makefile
@
text
@d17 4
@


1.2
log
@fixes to client_lib to compile correctly with new libmon.h
@
text
@d77 2
a78 2
#define MON_SIMPLE  ""
#define MON_LOG     "Log"
d80 1
@


1.1
log
@renamed mon.h to libmon.h - clientlib was not compiling correctly
(though it would have if its includepath had been right) since solaris
has a /usr/include/mon.h file.  minor monitor interface changes in
monitor.c.
@
text
@d5 1
a5 1

@
