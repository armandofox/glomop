head	1.8;
access;
symbols
	transend-beta-latest:1.7
	Aggregators:1.7
	NoAggregators:1.7
	iang:1.7.0.4
	transend-beta:1.7.0.2
	SOSP:1.7;
locks; strict;
comment	@# @;


1.8
date	97.06.06.00.07.57;	author fox;	state dead;
branches;
next	1.7;

1.7
date	97.02.16.05.41.06;	author yatin;	state Exp;
branches;
next	1.6;

1.6
date	97.02.07.21.54.41;	author yatin;	state Exp;
branches;
next	1.5;

1.5
date	97.02.05.00.33.02;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.02.04.05.37.48;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.01.29.23.26.08;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	97.01.29.22.15.04;	author yatin;	state Exp;
branches;
next	1.1;

1.1
date	97.01.08.03.39.18;	author fox;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Many changes to support SDK, including bin and sbin directories,
and modified make targets and names of some binary targets.  Calling
convention changed for perl distillers, so fixed html distiller and
added it as transend.text.html.  monitor.multicast property is now
Monitor.listen; all relevant code was changed.  Monitor can now parse
this from the options file.  Updated all UI changes from branch head.
@
text
@!
!  Monitor resources
!
!  The toplevel frame (containing the "Show" and "Kill" buttons and the
!  label displaying the unit's name) is called Top.
! *Top.show.background:
*Top.label.background: white
*Top.label.width: 25
*Top.host.background: white
*Top.host.width: 25
*Top.kill.foreground: red
*Top.rsh: rsh
! destroyondeath = yes => the toplevel window for the unit will be destroyed 
! when a death packet is received
*Top.destroyondeath: no
! noicons = yes => icons for the various toplevels will not be displayed;
! instead the windows will be withdrawn from the display, until the "Show"
! button is hit
*Top.noicons: no

! make sure there is a newline at the end of the last option
@


1.7
log
@Modified the monitor to allow iconified windows to be totally removed from
the display. Also created individual monitor.options files
@
text
@@


1.6
log
@Modified the PTM stuff to enable remote execution of processes
Currently using rsh and round-robin to select machines
@
text
@d13 2
d16 4
@


1.5
log
@added thread-monitoring stuff to frontend, fixed thread-monitoring procs in GUI, added proxy autoconfig file target to toplevel Makefile
@
text
@d13 1
a13 1
*Top.destroyondeath: yes
@


1.4
log
@array-of-indicators logging added to monitor
@
text
@d13 1
a13 1
*Top.destroyondeath: no
@


1.3
log
@More changes for killing processes via the monitor
@
text
@d15 1
a15 1
! make sure there is a newline at the end of the last option@


1.2
log
@Changes to the monitor for killing
@
text
@d12 4
a15 1
*Top.kill.rsh: krsh@


1.1
log
@Added "dying gasp" functionality to MonitorClient class: whenever a new
monitor is created, globals are set to record its socket id and unit
name, so that the program can respond to signals by jumping to a signal
handler that announces the program's death by sending a death packet.
New functions in monitor.cc: DyingGasp (class method), GaspOnSignals
(instance method), extern "C" void MonitorClientSigHandler (C signal
handler), CurrentMonitorSock and CurrentUnitId (static variables in
monitor.h).  If you can think of a better way to do this, please change
it.

Fixed bug in frontend HTTP request parsing that caused multi-packet
requests not to be read correctly.

Many changes to the monitor, mostly cosmetic, some functional, including
addition of "kill" button (there is now a "death protocol") and more
sane show/hide behavior that is integrated with iconifying.
@
text
@d8 3
d12 1
@
