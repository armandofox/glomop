head	1.4;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.4
date	96.11.22.08.19.33;	author yatin;	state dead;
branches;
next	1.3;

1.3
date	96.11.22.01.29.12;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	96.11.21.23.43.26;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.21.23.25.08;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.21.23.25.08;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The Monitor GUI currently has the Log script predefined.
Need to add other scripts
@
text
@#!/bin/sh
# the exec restarts using tclsh which in turn ignores
# the command because of this backslash: \
exec wish "$0" "$@@"



# Debugging info consists of a unit name, property name, property type,
# and value.  The components are separated by semicolons.  A string must
# not begin with "#" and must not contain semicolons.  Case and
# whitespace are significant!! Don't put any whitespace around
# semicolons unless you want the whitespace to be seen as part of the strings!!
#
#  unit name:  string decribing who sent the info, e.g. PTM, FE, CACHE,
#   etc.  
#  property name: string describing what's being reported, e.g. "Threads
#       idle"
#  property type: a string that describes how to depict this property
#       graphically.  ignored for now, but must be present.
#  value: the actual data.  For now must be an integer 0-255, but this
#       will change.
#
#  Example strings:
#     FE;Threads Idle;scalar;20
#     FE;%thread requests that had to wait;float;3


# global variables

global counter
global fields
global senders

proc init {args} {
    global counter
    set counter 0
    load "./tudp.so"
    eval udp_listen $args -callback callback
}

proc newunit {unit} {
    global units
    global counter

    toplevel .top$counter
    wm title .top$counter $unit
    set units($unit) .top$counter
    incr counter
}

proc newfield {unit field} {
    global units fields senders counter
    set initialvalue {}

    set senders($unit,$field) $initialvalue
    set fields($unit,$field)  $initialvalue

    frame [set f $units($unit).f$counter]
    label ${f}.l$counter -width 24 -text $field
    label ${f}.r$counter -width 16 -textvariable senders($unit,$field)
    label ${f}.v$counter -width 15 -fg red -relief sunken \
            -textvariable fields($unit,$field)
    pack ${f}.r$counter ${f}.l$counter ${f}.v$counter \
            -side left -fill none -expand 1
    pack $f -side top -fill x -expand 1
    incr counter
}

proc field_update {unit field value {sender {}}} {
    global  fields senders
    set fields($unit,$field) $value
    set senders($unit,$field) $sender
}

proc callback {fromaddr fromport data} {
    global fields units
    set unit {}
    set field {}
    set val {}
    set script {}
    regexp {^([^;]+);([^;]+);([^;]+);(.*)} $data dummy unit field val script
    if {$field == {} || $unit == {} || $val == {}} {
        return
    }
    if {! [info exists units($unit)]} {
        newunit $unit
    }
    if {! [info exists fields($unit,$field)]} {
        newfield $unit $field
    }
    if {$script == {}} {
        field_update $unit $field $val $fromaddr
    } else {
        catch {eval $script}
    }
}

#if {$argc < 1} {
#    puts stderr "Usage: $argv0 portnum"
#    exit
#}

wm withdraw .
eval init $argv
@


1.3
log
@The new monitoring GUI with multicast support
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d1 5
a5 1
#! /usr/sww/bin/wish
d34 1
a34 1
proc init {port} {
d38 1
a38 1
    udp_listen $port callback
d98 7
a104 7
if {$argc < 1} {
    puts stderr "Usage: $argv0 portnum"
    exit
}
puts -nonewline "Listening on "
puts [lindex $argv 0]
init [lindex $argv 0]
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
    load "/usr/tmp/fox/tudp/tudp.so"
d94 4
@


1.1.1.1
log
@
@
text
@@
