head	1.33;
access;
symbols
	Yatin-final:1.33
	Yatin:1.33.0.2
	pre-yatin-merge:1.33
	transend-beta2:1.29
	fox-dev:1.29.4.3
	frontend-ng:1.24
	transend-beta-latest:1.24
	Aggregators:1.24
	NoAggregators:1.24
	iang:1.23.0.2
	transend-beta:1.22.0.2
	SOSP:1.16
	merged_preintegrate:1.6
	heisenbug:1.6
	PRE_INTEGRATION:1.6;
locks; strict;
comment	@ * @;


1.33
date	97.10.26.00.29.35;	author fox;	state Exp;
branches;
next	1.32;

1.32
date	97.09.10.06.08.41;	author gribble;	state Exp;
branches;
next	1.31;

1.31
date	97.09.09.23.43.38;	author gribble;	state Exp;
branches;
next	1.30;

1.30
date	97.08.30.21.34.20;	author fox;	state Exp;
branches;
next	1.29;

1.29
date	97.07.29.00.32.01;	author fox;	state Exp;
branches
	1.29.4.1;
next	1.28;

1.28
date	97.07.25.01.06.31;	author fox;	state Exp;
branches;
next	1.27;

1.27
date	97.07.24.18.50.05;	author fox;	state Exp;
branches;
next	1.26;

1.26
date	97.06.12.22.55.58;	author gribble;	state Exp;
branches;
next	1.25;

1.25
date	97.06.12.18.31.39;	author fox;	state Exp;
branches;
next	1.24;

1.24
date	97.05.11.11.23.37;	author fox;	state Exp;
branches;
next	1.23;

1.23
date	97.04.30.07.55.15;	author fox;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	97.04.19.01.10.04;	author fox;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	97.04.09.01.31.25;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	97.04.08.17.31.23;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	97.04.08.03.15.28;	author fox;	state Exp;
branches;
next	1.18;

1.18
date	97.04.08.02.44.40;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	97.04.08.02.07.42;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	97.03.09.09.08.11;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	97.02.26.04.14.36;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.02.15.01.05.19;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.02.15.00.14.53;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	97.02.14.04.06.31;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.02.12.01.45.28;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.02.12.00.40.17;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.02.07.22.47.58;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.02.05.06.37.19;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	97.01.08.03.39.12;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.12.12.02.16.53;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.12.11.05.25.54;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.12.11.01.12.17;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.12.09.04.53.51;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.12.09.02.38.14;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.08.01.50.45;	author fox;	state Exp;
branches;
next	;

1.22.2.1
date	97.04.28.20.31.17;	author fox;	state Exp;
branches;
next	;

1.23.2.1
date	97.05.06.23.49.35;	author iang;	state Exp;
branches;
next	;

1.29.4.1
date	97.08.11.04.12.52;	author fox;	state Exp;
branches;
next	1.29.4.2;

1.29.4.2
date	97.08.14.16.40.21;	author fox;	state Exp;
branches;
next	1.29.4.3;

1.29.4.3
date	97.08.16.07.04.19;	author fox;	state Exp;
branches;
next	;


desc
@@


1.33
log
@changes to headers functions, ptm, and server_dispatch to maintain 2
invariants: (1) DistillerBuffer length field does NOT include
terminating null; (2) terminating null is always present for headers,
and is accoutned for by the maxLength field, so that maxLength >=
length+1.  Changed dispatch logic to allow for "X-static-route"
dispatcher worker.  Somewhat convoluted interaction with existing
X-Route mechanism, which i would remove entirely but for the fact that
it enables dynamic dispatch decisions after each pipestage.  New "guru"
argument i15 allows user to see all pipeline diagnostics that would
normally result in a bypass.
@
text
@/*
 *  httpsupport.c: support functions for HTTP parsing and other
 *  front-end work
 *
 *  INVARIANTS:
 *  DistillerBufferLength() always returns the number of characters
 *    EXCLUDING ANY POSSIBLE TERMINATING NULL.
 *  There is always a terminating NULL at the end of the headers, so it
 *    is safe to call strlen, strstr, etc.
 */

#include "frontend.h"
#include "utils.h"
#include <string.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

/*
 *  Return the (string) value of the given MIME header, or NULL if it
 *  doesn't exist.
 *  ARGS:
 *    i: MIME headers verbatim from client
 *    i: header to look for
 *    o*: pointer to fill in: length of found value string, may be 0
 *       (if null, won't be filled in)
 *    o*: pointer to fill in: beginning of header line (if passed in as NULL,
 *      won't be filled in)
 *    o*: pointer to fill in: length of header line up to but not including
 *      first char of header value  (if NULL, won't be filled in)
 *  ASSUMPTIONS: none
 *  SIDE EFFECTS: none
 *  RETURNS: NULL (and sets length ptr to zero) if given header does not
 *  appear to be present; char pointer to header (and sets length
 *  pointer to length of value string) if found
 *  THREAD-SAFE: yes
 */

const char *
get_header_value(DistillerBuffer *buf, const char *which, int *len,
                 char **hdr, int *totallen)
{
  const char *tmp,*savetmp;
  const char *str;
  int hdrlen = DistillerBufferLength(buf);
  size_t ndx;

  if (hdrlen == 0)
    return NULL;

  str = DistillerBufferData(buf);

  if (len) {  *len = 0; }
  if (totallen) { *totallen = 0; }
  
  tmp = strcasestr(str, which);
  if (tmp == NULL)
    return NULL;

  savetmp=tmp;
  if (hdr) { *hdr = (char *)tmp; }

  tmp += strlen(which);

  /* assume we found the header.  Parse forward past a colon and
     possible whitespace.  If we hit a CRLF, we've gone too far.  */

  if (*tmp++ != ':')
    return NULL;

  ndx = strspn(tmp, " \t");
  if (ndx >= strlen(tmp))
    return NULL;

  /* set length to indicate actual string length */
  tmp += ndx;                   /* beginning of string */
  if (totallen) { *totallen = tmp-savetmp; }
  if (len) { *len = strcspn(tmp,"\r\n"); } /* length of string without trailing
                                              \r\n   */
  return tmp;
}


/*
 *  Delete a header.
 *  ARGS:
 *    i/o: headers
 *    i: header to delete
 *  RETURNS:
 *    nonzero iff delete succeeded
 *  SIDE EFFECTS:
 *    Modifies headers in place
 *  BUGS:
 *    BUG::empty headers (or all-whitespace values) are not deleted properly,
 *  yet this function still reports success on those cases.  
 */
int
delete_header(DistillerBuffer *buf, const char *str)
{
  char *hdrs = DistillerBufferData(buf);
  char *line;
  const char *dummy;
  int x;
  int len;
  int totallen;
  int finallen;
  
  dummy = get_header_value(buf, str, &x, &line, &len);
  if (dummy == NULL) {          /* not found */
    return 0;
  } else {
    /* close up space from other headers */
    /* BUG::this assumes lines end with \r\n (hence "+2" below).  i believe it
     *  may be legal for lines to end with just one or the other.
     */
    totallen = len+x+2;
    memmove(line, line+totallen, (hdrs + DistillerBufferLength(buf))
            - (line+totallen));
    finallen = DistillerBufferLength(buf) - totallen; /* finallen doesn't
							 include NULL */
    /*
     *  Always safe to add a null, since the headers have shrunk.
     */
    hdrs[finallen] = '\0';
    DistillerBufferSetLength(buf, finallen);
    return 1;
  }
}

/*
 *  Insert a new header.  If replace_p is nonzero, and this header already
 *  exists, delete the old one.
 *  ARGS:
 *    i/o: complete set of headers, verbatim
 *    i: header name to replace (string, case-insensitive)
 *    i: new value (string)
 *    i: if nonzero, delete existing header with same name first (to avoid
 *              duplicate headers)  
 *  RETURNS:
 *    Nonzero iff success.
 *  SIDE EFFECTS:
 *    Modifies the header structure passed in.
 *    If the headers had to be realloc'd to grow a header, the new buffer size
 *  is written over the 2nd argument.
 *  ASSUMPTIONS:
 *    If header is to be replaced, the header is unique (i.e. it can only
 *  appear once in the header list).
 */

int
insert_header(DistillerBuffer *buf, const char *str, const char *value,
              int replace_p)
{
  char *hdrs = NULL;
  int tmpstrlen;
  size_t hdrlen;
  size_t newhdrlen = strlen(str);
  size_t valuelen = strlen(value);
  int finallen;
  int grow;
  int size_needed;
  
  if (replace_p) {
    delete_header(buf, str);
  }

  /*
   *  BUG::assumes headers always end in "\r\n".   it may be legal for
   *  them to end in only one or the other; if so, the "+2"s below are wrong.
   */
  grow = newhdrlen + valuelen + 2 + 2; /* "Header: Value\r\n" */
  /* that's +2 for colon and space, +2 for \r\n */

  hdrlen = DistillerBufferLength(buf); /* point to char beyond end */
  /*
   *  Compute length of new headers.  SInce we like to always have a NULL on
   *  the end, add 2 to account for the NULL that isn't included in
   *   DistillerBufferLength and the NULL we want to include in the result.
   */

  size_needed = hdrlen+grow+2;

  if (hdrlen == 0) {
    /* create legal "dummy headers" first! */
    const char dummy_hdr[] = "HTTP/1.0 200 OK\r\n\r\n";
    hdrlen = strlen(dummy_hdr);
    size_needed += hdrlen + 1;
    assert(DistillerBufferRealloc(buf, size_needed) == gm_True);
    strcpy(DistillerBufferData(buf), dummy_hdr);
  } else if (size_needed >= buf->maxLength) { 
    /* grow enough for about 8 operations of this type (8 headers seems to
       be typical for server return).  */
    assert(DistillerBufferRealloc(buf, size_needed) == gm_True);
  }

  /*
   *  At this point, the headers end in "\r\n\0", and the buffer is guaranteed
   *  large enough to insert the new header + "\r\n".
   */
  hdrs = DistillerBufferData(buf);
    
  tmpstrlen = snprintf((hdrs + hdrlen) - 2, /* -2 for \r\n */
                       buf->maxLength - (DistillerBufferLength(buf)-3) - 1,
                       "%s: %s\r\n\r\n", str, value);
  finallen = hdrlen - 2 + tmpstrlen;  /* hdrlen doesn't include NULL term */
  hdrs[finallen] = '\0';      /* -1 because finallen includes NULL */
  DistillerBufferSetLength(buf, finallen);
  return 1;
}

/*
 *  Initialize and free an Request structure, respectively.
 */

void
init_Request(Request *h) {
  memset(h, 0, sizeof(Request));
  h->version = HTTP_VERSION_UNKNOWN;
}

void
free_Request(Request *h) {
  SAFEFREE(h->url);
  SAFEFREE(h->method);
  DistillerBufferFree(&h->cli_hdrs);
  DistillerBufferFree(&h->cli_data);
  DistillerBufferFree(&h->svr_hdrs);
  DistillerBufferFree(&h->svr_data);
  DistillerBufferFree(&h->pxy_hdrs);
  DistillerBufferFree(&h->pxy_data);
}

@


1.32
log
@fixed much badness reported by purify
@
text
@d4 6
d42 1
a42 1
get_header_value(const char *str, const char *which, int *len,
d46 2
d50 5
d110 1
a110 1
  dummy = get_header_value(hdrs, str, &x, &line, &len);
d119 8
a126 4
    memmove(line, line+totallen, (hdrs + strlen(hdrs)) - (line+totallen));
    finallen = DistillerBufferLength(buf) - totallen; /* finallen
							 includes NULL */
    *(hdrs+finallen - 1) = '\0';
d163 1
d177 16
a192 1
  if (hdrlen + grow + 1 >= buf->maxLength) { /* +1 for NULL EOS */
d195 1
a195 1
    assert(DistillerBufferRealloc(buf, hdrlen + (grow << 3)) == gm_True);
d198 4
d203 3
a205 2
  tmpstrlen = snprintf((hdrs + hdrlen) - 3, /* -3 for \r\n<NULL> */
                       buf->maxLength - DistillerBufferLength(buf),
d207 2
a208 2
  finallen = hdrlen - 2 + tmpstrlen;  /* hdrlen includes NULL term */
  *(hdrs + finallen - 1) = '\0';      /* -1 because finallen includes NULL */
@


1.31
log
@Much minor hackery....fixed a number of little things.
@
text
@d107 3
a109 2
    finallen = DistillerBufferLength(buf) - totallen;
    *(hdrs+finallen) = '\0';
d166 1
a166 1
  tmpstrlen = snprintf((hdrs + hdrlen) - 2,
d169 2
a170 3
  
  finallen = hdrlen - 2 + tmpstrlen;
  *(hdrs + finallen) = '\0';
a186 1
  fprintf(stderr, "freeing url\n");
a187 1
  fprintf(stderr, "freeing method\n");
a188 1
  fprintf(stderr, "freeing cli_hdrs\n");
a189 1
  fprintf(stderr, "freeing cli_data\n");
a190 1
  fprintf(stderr, "freeing svr_hdrs\n");
a191 1
  fprintf(stderr, "freeing svr_data\n");
a192 1
  fprintf(stderr, "freeing pxy_hdrs\n");
a193 1
  fprintf(stderr, "freeing pxy_data\n");
@


1.30
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d187 1
d189 1
d191 1
d193 1
d195 1
d197 1
d199 1
d201 1
@


1.29
log
@fixed TACCutils bug that sometimes caused next_entity to enter infinite
loop.  beginning frontend cleanup to separate service-specific stuff
from core stuff.  ifdef'd out the instrumentation code in
httpsupport.c:parse_status_and_headers, which was likely causing
segfaults.  removed sbrk() monitoring from thr_mon.c because it was
bogus.  tested the Bypass feature for big pages (it works) and set
bypass threshold to about 1.5MB in clib.h.  monitor window is now
resizable though not all the fields resize intelligently.
@
text
@d6 2
a7 5
#include "proxy.h"
#include "thr_cntl.h"
#include "userpref.h"
#include "debug.h"
#include "httpreq.h"
a15 195
 *  readline_or_timeout: read client request (ie all HTTP header lines)
 *  from socket (file descriptor), or timeout.
 *
 *  ARGS:
 *  input: socket filehandle   
 *  input/output: ptr to string buffer
 *  value-result: length of string buffer
 *  input: number of bytes to read;  if negative, just read until blank line
 *  seen 
 *
 *  REENTRANT: yes, if output and value-result args are per-thread
 *  RETURNS: if line was collected, returns its length, with
 *  null-terminated string (including \n) in buffer.  If timeout,
 *  returns -1.  If end-of-file on socket, returns 0.
 *  ASSUMPTIONS: O_NONBLOCK is set for socket.
 */


int
readline_or_timeout(int sock, char *sbuf, size_t *buflen, int nbytes)
{
  int time_so_far = 0;
  size_t len = 0;
  int count;
  int result = 0;
  fd_set readfds,exceptfds;
  struct timeval to;

  /*
   *  repeatedly check for bytes on nonblocking socket.  If a
   *  terminating "\n" is seen, return success; otherwise select on
   *  socket.  Continue until total timeout is exhausted.
   */

  to.tv_sec = PERF_HTTP_REQ_TIMEOUT;
  to.tv_usec = 0;
  while (time_so_far <= to.tv_sec) {
    /*
     *  BUG::time_so_far is never incremented so timeout timer is really
     *  just an inactivity timer for select().
     */
    FD_ZERO(&readfds);
    FD_ZERO(&exceptfds);
    FD_SET(sock,&readfds);
    FD_SET(sock,&exceptfds);
    to.tv_sec = PERF_HTTP_REQ_TIMEOUT;
    to.tv_usec = 0;
    count = select(sock+1, &readfds, (fd_set *)NULL, &exceptfds, &to);
    if (count == -1) {
      if (errno != EINTR) {
        MON_SEND_2(MON_ERR,"Unexpected select() failure: %s",strerror(errno));
	result = -1;
	goto RETURN;
      } else {
	continue;
      }
    }
    if (count == 0) {
      /* timeout occurred */
      MON_SEND(MON_ERR,"Client socket timeout\n");
      result = -1;
      goto RETURN;
    }
    count = read(sock, sbuf+len, (*buflen)-len);
    if (count == 0) {         /* end of file! */
      MON_SEND(MON_ERR,"Premature EOF on client socket\n");
      result = 0;
      goto RETURN;
    } else if (count == -1 && (errno != EAGAIN && errno != EWOULDBLOCK &&
                               errno != EINTR)) {
      /* I/O error on socket */
      result = -1;
      MON_SEND_2(MON_ERR,"Unexpected read() failure: %s",strerror(errno));
      goto RETURN;
    } else if (count > 0) {
      /* valid header data 
       *  If we're just reading till end-of-headers, and this is detected
       *  (blank line), return.
       *  NOTE: if this is a POST request, the \r\n\r\n will NOT be the lats
       *  thing we see (since POST data follows).  This leads to ugliness in the
       *  POST logic, since some of the POST data has already been read and some
       *  hasn't. 
       */
      len += count;
      if (nbytes < 0
          && len >= 4
          && dumb_strnstr(sbuf, "\r\n\r\n", len)) {
        result = len;
        goto RETURN;
      }
      /*
       *  If we're reading fixed number of bytes, and we're done, return.
       */
      if (nbytes >= 0
          && len >= nbytes) {
        result = len;
        goto RETURN;
      }
    }
    /* here if errno==EAGAIN, or count>0 but still more bytes to read:
     just continue loop.  */
  }
RETURN:
  *buflen = len;
  sbuf[len] = '\0';
  return(result);
}

/*
 *  bypass: act as a "dumb conduit" for data for a particular request.
 *
 *  ARGS:
 *   i: http headers struct containing the client request, with
 *      properly filled in version
 *   i: socket filehandle to the client
 *
 *  REENTRANT: yes
 *  BUGS: The return data from Harvest should be pipelined.
 */

void
bypass(char *headers, int len, int sock)
{
  clib_response cl;
  char *outptr = NULL;
  unsigned outlen;
  size_t blocklen;
  int wrote;
  int fd;

  if (len == -1)
    len = strlen(headers);

  cl = Clib_Lowlevel_Op(headers, len, &outptr, &outlen, &fd);

  switch(cl) {

  case CLIB_OK:
    if ((wrote = correct_write(sock, outptr, (int)outlen)) != (int)outlen) {
      MON_SEND_4(MON_ERR,"Wrote %d instead of %u for '%s'",
                 wrote, outlen, headers);
    }
    break;

  case CLIB_CUTTHROUGH:
    blocklen = outlen;
    while (blocklen > 0) {
      if ((wrote = correct_write(sock, outptr, blocklen)) != blocklen) {
        if (wrote != -1) {
          MON_SEND_4(MON_ERR,"Wrote %d instead of %u for '%s'",
                     wrote, blocklen, headers);
        }
        blocklen = 0;
      } else {
        blocklen = read(fd, outptr, outlen);
      }
    }
    break;

  default:
    /* error in harvest fetch */
    MON_SEND_3(MON_ERR,"Harvest error %d on '%s'",(int)cl,headers);
  }

  /* in any case, free the allocated data structure */
  if (outptr != NULL)
    FREE((void *)outptr);
}

/*
 *  userkey_from_sock_ipaddr: make incoming IP address into a user prefs
 *  key, so we can look up user in prefs database
 *
 *  ARGS: socket (filehandle)
 *  REENTRANT: as safe as getpeername()
 *  RETURNS: userkey; the "null key" if conversion fails
 *
 */

userkey
userkey_from_sock_ipaddr(int s)
{
  struct sockaddr a;
  struct sockaddr_in *ap = (struct sockaddr_in *)&a;
  int alen = sizeof(a);

  memset(&a, 0, alen);
  if (getpeername(s, (struct sockaddr *)&a, &alen) != 0) {
    proxy_errlog_2("userkey_from_sock_ipaddr: %s", strerror(errno));
    return USERKEY_NULL;
  }
  return ((userkey)(ap->sin_addr.s_addr));
}

/*
d83 1
a83 1
 *    BUG::empty headers (with all-whitespace values) are not deleted properly,
d87 1
a87 1
delete_header(char *hdrs, const char *str)
d89 1
d95 1
d107 4
a110 1
    *(hdrs+strlen(hdrs)-totallen) = '\0';
a111 1
  return 1;
d135 2
a136 1
insert_header(char *hdrs, const char *str, const char *value, int replace_p)
d138 1
a138 1
  char *tmpstr = NULL;
d143 1
d147 1
a147 1
    delete_header(hdrs, str);
d151 2
a152 2
   *  BUG::assumes headers always end in "\r\n".  i believe it may be legal for
   *  them to end in one or the other; if so, the "+2"s below are wrong.
d157 5
a161 5
  hdrlen = strlen(hdrs);
  if (hdrlen + grow + 1 >= PERF_HTTP_TOTAL_HEADERLEN) {
    /* grow enough for about 10 operations of this type (10 headers seems to
       be typical for server return).  +1 for NULL.  >= just to be safe. */
    return 0;
d163 9
a171 12
    
  tmpstr = (char *) malloc(sizeof(char) * 
			   (10 + strlen(str) + strlen(value)));
  if (tmpstr == NULL) {
    fprintf(stderr, "Out of memory in insert_header!\n");
    exit(1);
  }
  tmpstrlen = sprintf(tmpstr, "%s: %s\r\n\r\n", str, value);
  /*  tmpstrlen = strlen(tmpstr); */
  strncpy((hdrs + hdrlen) - 2, tmpstr, tmpstrlen);
  free(tmpstr);
  *(hdrs + hdrlen - 2 + tmpstrlen) = '\0';
d176 1
a176 17
 *  do_post: handle a POST request from client.
 *
 *  ARGS:
 *    i: HTTP headers of request
 *    i: user prefs list
 *    i: socket
 *    i: task descriptor
 *    i/o: 
 *  RETURNS:
 *    HTTP_Status code of POST operation.  If success, caller should read and
 *  forward the server response; otherwise,caller should report the error
 *  (probably via http_error_return).  POST can fail if content-length cannot
 *  be parsed, or if number of data bytes successfully read does not match
 *  content-length.  (BUG::should the latter case just be a warning?)
 *  
 *  SIDE EFFECTS:
 *    Causes POST request to go (through cache) to server.
a177 21
HTTP_Status
do_post(struct http_headers *hp, ArgumentList *args, int sock, task_t *t,
        clib_data *dat_p)
{
  INT32 len, buffersize;
  int len_read, to_read;
  const char *val;
  int val_len;
  char *buffer;
  clib_response cl;
  HTTP_Status result;
  char *already_read;
  size_t chars_already_read;
  
  if ((val = get_header_value(hp->header_data, "content-length", &val_len,
                              NULL, NULL))
      == NULL) {
    /* no content-length header: barfulation */
    result = HTTP_ERR_POST_NO_CONTENTLENGTH;
    goto POST_NOMALLOC_RETURN;
  }
d179 5
a183 5
  len = strtoul(val, NULL, 0);
  if (len < 0) {
    result = HTTP_ERR_POST_NO_CONTENTLENGTH;
    goto POST_NOMALLOC_RETURN;
  }
d185 10
a194 47
  /*
   *  Now determine how many bytes to read.  Since the initial read of the
   *  headers may have gotten some of the data bytes too, we have to subtract
   *  out those bytes that have already been read.  Do this by taking the
   *  length of the headers and subtracting the number of character *following*
   *  "\r\n\r\n" (end of headers).
   */

  already_read = strstr(hp->header_data, "\r\n\r\n"); /* look for EOH */
  if (already_read == NULL) {   /* can't find EOH -- badness 10000 */
    result = HTTP_ERR_MALFORMED_REQUEST;
    goto POST_NOMALLOC_RETURN;
  }
  already_read += 4;            /* skip \r\n\r\n at end of hdrs */
  chars_already_read = (hp->header_data + (strlen(hp->header_data)))
                        - already_read;
  to_read = len - chars_already_read; /* how much data still to be read */
  buffersize = len + 100;       /* a few bytes of insurance */
  buffer = (char *)MALLOC(buffersize); 
  strncpy(buffer, already_read, chars_already_read);
  *already_read = '\0';     /* NOTE! this modifies hp->header_data so it
                               contains NULL-terminated headers only */
  if (to_read > 0) {
    len_read = readline_or_timeout(sock, buffer, (size_t *)(&buffersize),
                                   to_read);
#if 0  /* for now, data count mismatch will be ignored.  */
    if (len_read != to_read) {
      /* data length != content-length */
      result = HTTP_ERR_POST_READ_FAILED;
      goto POST_RETURN;
    }
#endif
  } 
  /* forward POST to server */
  
  cl = Clib_Post((char *)(hp->url), (char *)(hp->header), buffer, len,
                 dat_p);
  if (cl != CLIB_OK) {
    result = HTTP_ERR_POST_FAILED;
    goto POST_RETURN;
  }

  result = HTTP_NO_ERR;
POST_RETURN:
  FREE(buffer);
POST_NOMALLOC_RETURN:
  return result;
@


1.29.4.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d6 1
a6 1
#include "config_tr.h"
d9 2
a10 3
#include "clib.h"
#include "frontend.h"
#include "utils.h"
d19 195
d285 1
a285 1
delete_header(clib_data *dat, const char *str)
a286 1
  char *hdrs = dat->mime_headers;
d329 1
a329 1
insert_header(clib_data *dat, const char *str, const char *value, int replace_p)
a330 1
  char *hdrs = dat->mime_headers;
d339 1
a339 1
    delete_header(dat, str);
d371 17
a387 1
 *  Initialize and free an Request structure, respectively.
d389 35
d425 33
a457 5
void
init_Request(Request *h) {
  memset(h, 0, sizeof(Request));
  h->version = HTTP_VERSION_UNKNOWN;
}
d459 5
a463 10
void
free_Request(Request *h) {
  SAFEFREE(h->url);
  SAFEFREE(h->method);
  DistillerBufferFree(&h->cli_hdrs);
  DistillerBufferFree(&h->cli_data);
  DistillerBufferFree(&h->svr_hdrs);
  DistillerBufferFree(&h->svr_data);
  DistillerBufferFree(&h->pxy_hdrs);
  DistillerBufferFree(&h->pxy_data);
@


1.29.4.2
log
@*** empty log message ***
@
text
@d6 4
d87 1
a87 1
 *    BUG::empty headers (or all-whitespace values) are not deleted properly,
d91 1
a91 1
delete_header(DistillerBuffer *buf, const char *str)
d93 1
a93 1
  char *hdrs = DistillerBufferData(buf);
d136 1
a136 2
insert_header(DistillerBuffer *buf, const char *str, const char *value,
              int replace_p)
d138 2
a139 1
  char *hdrs = DistillerBufferData(buf);
d147 1
a147 1
    delete_header(buf, str);
d151 2
a152 2
   *  BUG::assumes headers always end in "\r\n".   it may be legal for
   *  them to end in only one or the other; if so, the "+2"s below are wrong.
d158 2
a159 2
  if (hdrlen + grow + 1 >= buf->maxLength) {
    /* grow enough for about 8 operations of this type (8 headers seems to
d161 1
a161 1
    assert(DistillerBufferRealloc(buf, (hdrlen+grow+1) << 3) == gm_True);
d164 10
a173 3
  tmpstrlen = snprintf((hdrs + hdrlen) - 2, hdrlen+grow+1,
                       "%s: %s\r\n\r\n", str, value);

@


1.29.4.3
log
@a huge amount of frontend reengineering, plus added a Clone() method to
the DistillerBuffer.  basic operation of frontend seems stable.
things that haven't been tested yet:
- POST
- cache cut through behavior
- client timeout doesn't seem to work (never times out??)
- redispatch and similar support for aggregators
and some things still to be implemented:
- support for listening/dispatching on multiple ports
- documentation of what all the files do (and rename the http-specific
sourcefiles)
- eliminate redundant .h inclusions from various sourcefiles
- 'makedepend' for the Makefile.in
@
text
@a94 1
  int finallen;
d106 1
a106 4
    finallen = DistillerBufferLength(buf) - totallen;
    *(hdrs+finallen) = '\0';
    DistillerBufferSetLength(buf, finallen);
    return 1;
d108 1
d135 1
a135 1
  char *hdrs = NULL;
a139 1
  int finallen;
d153 2
a154 2
  hdrlen = DistillerBufferLength(buf); /* point to char beyond end */
  if (hdrlen + grow + 1 >= buf->maxLength) { /* +1 for NULL EOS */
d156 2
a157 2
       be typical for server return).  */
    assert(DistillerBufferRealloc(buf, hdrlen + (grow << 3)) == gm_True);
d159 3
d163 1
a163 8
  hdrs = DistillerBufferData(buf);
  tmpstrlen = snprintf((hdrs + hdrlen) - 2,
                       buf->maxLength - DistillerBufferLength(buf),
                       "%s: %s\r\n\r\n", str, value);
  
  finallen = hdrlen - 2 + tmpstrlen;
  *(hdrs + finallen) = '\0';
  DistillerBufferSetLength(buf, finallen);
@


1.28
log
@temporary commit so anthony can make; still tracking memory bug interaction frontend/clientlib
@
text
@d167 4
a170 2
        MON_SEND_4(MON_ERR,"Wrote %d instead of %u for '%s'",
                   wrote, blocklen, headers);
a183 3
  /*
   *  BUG::should not use malloc and free, but wrappers
   */
@


1.27
log
@debugging/monitoring function interface in frontend cleaned up.  change to xs/Makefile.PL.in to avoid spurious double initialization of stuff in libdist.a when clib.so was dynamically loaded.
@
text
@d145 1
d147 1
d152 25
a176 2
  if ((cl = Clib_Lowlevel_Op(headers, len, &outptr, &outlen))
      != CLIB_OK) {
a178 3
  } else if ((wrote = correct_write(sock, outptr, (int)outlen)) != (int)outlen) {
    MON_SEND_4(MON_ERR,"Wrote %d instead of %u for '%s'",
               wrote, outlen, headers);
@


1.26
log
@Fixed a couple of string-related bugs in insert_header.
@
text
@d69 1
a69 1
        proxy_errlog_1(strerror(errno));
d78 1
a78 1
      MON_LOG_ERR("Client socket timeout\n");
d84 1
a84 1
      MON_LOG_ERR("Premature EOF on client socket\n");
d91 1
a91 1
      MON_LOG_ERR(strerror(errno));
d153 4
a156 7

    proxy_errlog_3("Harvest error %d on '%s'", (int)cl, headers);
  } else {
    /* forward to client on socket */
    if ((wrote = correct_write(sock, outptr, (int)outlen)) != (int)outlen)
      proxy_errlog_4("Wrote %d instead of %u for '%s'", wrote, outlen,
                     headers);
@


1.25
log
@various changes to makefiles to support auto-installation into sbin and bin directories.  perl HTML distiller no longer inserts UI in pages with frames.  PREFS_URL and similar strings are now static char* instead of #defines, but still need them to be initialized in PTM stub so distillers can get at them.  "run" targets are better now, they run stuff from the sbin and bin directories.
@
text
@a294 19
 *    i/o: current maximum buffer size of headers
 *    i: header to replace (string, case-insensitive)
 *    i: new value (string)
 *  RETURNS:
 *    Nonzero iff success.
 *  SIDE EFFECTS:
 *    Modifies the header structure passed in.
 *    If the headers had to be realloc'd to grow a header, the new buffer size
 *  is written over the 2nd argument.
 *  ASSUMPTIONS:
 *    If header is to be replaced, the header is unique (i.e. it can only
 *  appear once in the header list).
 */

/*
 *  Insert a new header.  If replace_p is nonzero, and this header already
 *  exists, delete the old one.
 *  ARGS:
 *    i/o: complete set of headers, verbatim
d313 1
a313 1
  char tmpstr[200];
d332 1
a332 1
  if (hdrlen + grow > PERF_HTTP_TOTAL_HEADERLEN) {
d334 1
a334 1
       be typical for server return) */
d338 6
d347 1
@


1.24
log
@changes for dataflow stuff, chaining stuff, aggregators
@
text
@d436 1
d442 1
@


1.23
log
@frontend and ptm changes for new distiller api
@
text
@d183 3
a185 2
  struct sockaddr_in a;
  int alen = sizeof(struct sockaddr_in);
d192 1
a192 36
  return ((userkey)(a.sin_addr.s_addr));
}

/*
 *  send_content: send some content back to client.
 *
 *  ARGS:
 *    i: content to send back (string buffer pointer)
 *    i: length of content (if negative, strlen() will be used to compute it)
 *    i: MIME content type (if NULL, "text/html" is assumed)
 *    i: client socket
 *  DESCRIPTION: Sends minimal HTTP headers along with the content
 *  THREAD-SAFE: yes
 */

void
send_content(const char *content, int len, const char *mime, int sock)
{
  static const char *minimal_hdr =
    "HTTP/1.0 200 OK\r\nContent-type: %s\r\nContent-length: %d\r\n\r\n";
  char *thestr;
  int hdrlen;
  
  if (len == -1)
    len = strlen(content);

  if (mime == NULL)
    mime = "text/html";
  
  thestr = ALLOCA(strlen(minimal_hdr)
                      + strlen(mime)
                      + 10);    /* for content-length */

  hdrlen = sprintf(thestr, minimal_hdr, mime, len);
  correct_write(sock, thestr, hdrlen);
  correct_write(sock, (char *)content, len);
d314 1
a314 2
 *    i/o: current maximum buffer size of headers
 *    i: header to replace (string, case-insensitive)
d316 2
@


1.23.2.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@a179 1
#if 0
a192 14
#else
userkey
userkey_from_sock_ipaddr_and_headers(int s, struct http_headers *hp)
{
  userkey uk;

  if (!hp) return USERKEY_NONE;

  uk.keydata = hp->tazhost;
  uk.keylen = hp->tazhostlen;

  return uk;
}
#endif
@


1.22
log
@added sbrk monitoring to frontend
@
text
@d439 1
a439 1
  if (len < 1) {
@


1.22.2.1
log
@fixed post bug?
@
text
@d439 1
a439 1
  if (len < 0) {
@


1.21
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@d167 1
a167 1
    free((void *)outptr);
@


1.20
log
@moved POST logic into proxy_dispatch - just as steve said, much simpler this way
@
text
@d7 3
a10 1
#include "userpref.h"
@


1.19
log
@stupid bug
@
text
@d450 2
a451 2
  already_read = strstr(hp->header_data, "\r\n\r\n");
  if (already_read == NULL) {
d455 1
a455 1
  already_read += 4;            /* point to first char beyond end of hdrs */
d458 1
a458 1
  to_read = len - chars_already_read;
d460 1
a460 1
  buffer = (char *)MALLOC(buffersize);  /* a few bytes of insurance */
d462 2
a463 1
  *already_read = '\0';     /* NOTE! this modifies hp->header_data */
d468 1
d473 1
a473 1
  /* forward these bytes to server */
@


1.18
log
@POST works, though logic is ugly and should be moved mostly into proxy_dispatch
@
text
@d459 1
a459 1
  buffersize = to_read + 100;         /* a few bytes of insurance */
@


1.17
log
@*** empty log message ***
@
text
@d95 4
d103 1
a103 2
          &&  memcmp((const void *)&(sbuf[len-4]), (const void *)"\r\n\r\n",
          (size_t)4) == 0) {
d418 2
a419 2
  UINT32 len, buffersize;
  int len_read;
d425 2
d442 18
a459 2
  /* ok, read that many bytes. */
  buffersize = len+100;         /* a few bytes of insurance */
d461 10
a470 5
  len_read = readline_or_timeout(sock, buffer, (size_t *)(&buffersize), len);
  if (len_read != len) {
    result = HTTP_ERR_POST_READ_FAILED;
    goto POST_RETURN;
  }
d472 2
a473 2

  cl = Clib_Post((char *)(hp->url), (char *)(hp->header), buffer, len_read,
@


1.16
log
@fixed memory leak due to strtok_finish not being called, and signal handling so frontend now dies gracefully
@
text
@a6 1
#include "clib.h"
d24 2
d36 1
a36 1
readline_or_timeout(int sock, char *sbuf, size_t *buflen)
d44 1
d92 4
a95 1
      /* valid header data */
d97 2
a98 1
      if (len >= 4
d104 8
d223 238
@


1.15
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d201 1
a201 1
  thestr = MALLOC(strlen(minimal_hdr)
a207 1
  FREE(thestr);
@


1.14
log
@fixed UMR in userkey_from_sock_ipaddr
@
text
@d80 1
a80 1
      MON_LOG_ERR("Premature EOF on client socket");
@


1.13
log
@prefs.html has been moved from frontend/src/ to frontend/.  User prefs
form can now be obtained by visiting the URL "http://ChangePrefs".
doesn't matter if "No Proxy For" is set or not.  Mechanism works by
reading prefs.html file, so you can just change the file and reload and
you'll get the new form.  Added "changepref.h" and "changepref.c" to
contain the code that deals with receiving prefs change submissions and
serving the prefs change form.  Modified Makefile to include the new
files in the frontend make target.  Added function "send_content" (send
generic content using HTTP) to support this stuff, in httpsupport.c.
@
text
@d167 1
@


1.12
log
@fixed purify bugs in readline_or_timeout and userkey_from_sock_ipaddr
@
text
@d174 35
@


1.11
log
@Fixed INTR to EINTR
@
text
@d49 2
d164 2
a165 3
  struct sockaddr a;
  struct sockaddr_in *ap;
  int alen = sizeof(struct sockaddr);
d167 1
a167 1
  if (getpeername(s, &a, &alen) != 0) {
d171 1
a171 2
  ap = (struct sockaddr_in *)(&a);
  return ((userkey)(ap->sin_addr.s_addr));
@


1.10
log
@Put in testing for EINTR in httpsupport.c.
@
text
@d62 1
a62 1
      if (errno != INTR) {
@


1.9
log
@User prefs skeleton working
@
text
@d62 7
a68 3
      proxy_errlog_1(strerror(errno));
      result = -1;
      goto RETURN;
d76 1
a76 1
    count = read(sock, sbuf+len, *buflen-len);
d81 2
a82 1
    } else if (count == -1 && (errno != EAGAIN && errno != EWOULDBLOCK)) {
d122 1
a122 1
  char *outptr;
d145 2
a146 1
  free((void *)outptr);
@


1.8
log
@Works!!!!!!
@
text
@d18 2
a19 2
 *  readline_or_timeout: read next line from socket (file descriptor),
 *  or timeout.
a71 8
#if 0
    if (! FD_ISSET(sock, &readfds)) {
      /* timeout occurred */
      MON_LOG_ERR("Client socket timeout\n");
      result = -1;
      goto RETURN;
    }
#endif
d78 1
d83 1
@


1.7
log
@Added "dying gasp" functionality to MonitorClient class: whenever a new
monitor is created, globals are set to record its socket id and unit
name, so that the program can respond to signals by jumping to a signal
handler that announces the program's death by sending a death packet.
New functions in monitor.cc: DyingGasp (class method), GaspOnSignals
(instance method), extern "C" void MonitorClientSigHandler (C signal
handler), CurrentMonitorSock and CurrentUnitId (static variables in
monitor.h).  If you can think of a better way to do this, please change
it.

Fixed bug in frontend HTTP request parsing that caused multi-packet
requests not to be read correctly.

Many changes to the monitor, mostly cosmetic, some functional, including
addition of "kill" button (there is now a "death protocol") and more
sane show/hide behavior that is integrated with iconifying.
@
text
@d66 7
d75 1
a75 1
      proxy_errlog_1("Client socket timeout");
d79 1
d82 1
a82 1
      proxy_errlog_1("Premature EOF on client socket");
d87 1
a87 1
      proxy_errlog_1(strerror(errno));
@


1.6
log
@End to end path works via dispatch.c, some error reporting still broken and some things still hardcoded that shouldn't be
@
text
@d72 1
a72 1
    count = read(sock, sbuf, *buflen-len);
@


1.5
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d112 1
a112 1
bypass(struct http_headers *hp, int sock)
d118 5
a122 2
  
  if ((cl = Clib_Lowlevel_Op(hp->header_data, hp->len, &outptr, &outlen))
d126 1
a126 1
    proxy_errlog_3("Harvest error %d on '%s'", (int)cl, hp->header_data);
d131 1
a131 1
                     hp->header_data);
d135 3
a137 1

@


1.4
log
@*** empty log message ***
@
text
@a42 1
  int flags;
d145 1
a145 1
#if 0
d158 1
a158 1
  return ((userkey)(ap->in_addr.s_addr));
d160 1
a160 1
#endif
@


1.3
log
@http header parsing distinguishes http version and method. minor fixes to config files.
@
text
@d7 1
a12 1
#include <sys/fcntl.h>
d14 1
a49 4
  flags = fcntl(sock, F_GETFL);
  if (flags != -1)
    fcntl(sock, F_SETFL, flags | O_NONBLOCK);
  
d51 22
d91 2
a92 20
    /* here if errno==EAGAIN, or count>0 but still more bytes to read */
    
    FD_ZERO(&readfds);
    FD_ZERO(&exceptfds);
    FD_SET(sock,&readfds);
    FD_SET(sock,&exceptfds);
    to.tv_sec = PERF_HTTP_REQ_TIMEOUT;
    to.tv_usec = 0;
    count = select(sock+1, &readfds, (fd_set *)NULL, &exceptfds, &to);
    if (count == -1) {
      proxy_errlog_1(strerror(errno));
      result = -1;
      goto RETURN;
    }
    if (! FD_ISSET(sock, &readfds)) {
      /* timeout occurred */
      proxy_errlog_1("Client socket timeout");
      result = -1;
      goto RETURN;
    }
d98 37
@


1.2
log
@http parsing is breathing
@
text
@d12 1
d42 1
a42 1
  
d49 4
d56 1
d59 1
a59 1
    } else if (count == -1 && errno != EAGAIN) {
d88 1
@


1.1
log
@configure script now generates include path automatically
@
text
@d6 85
a90 2
#include <httpreq.h>
#include <userpref.h>
d101 1
d103 1
a103 1
userkey_from_sock_ipaddr(int sock)
d113 2
a114 2
  ap = (struct sockaddr_in *)a;
  return (userkey)(ap->in_addr.s_addr);
d116 1
a116 5


  
  
  
@
