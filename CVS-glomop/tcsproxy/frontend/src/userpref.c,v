head	1.15;
access;
symbols
	Yatin-final:1.15
	Yatin:1.15.0.2
	pre-yatin-merge:1.15
	transend-beta2:1.13
	fox-dev:1.13.4.2
	frontend-ng:1.12
	transend-beta-latest:1.12
	Aggregators:1.12
	NoAggregators:1.11
	iang:1.11.0.4
	transend-beta:1.11.0.2
	SOSP:1.8
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@ * @;


1.15
date	97.10.26.00.29.37;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	97.08.30.21.34.30;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.07.24.18.50.09;	author fox;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	97.05.21.19.41.12;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.04.09.01.31.38;	author fox;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	97.04.08.20.52.58;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.04.06.21.22.54;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.03.06.01.59.06;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	97.02.27.03.10.55;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.02.13.03.41.53;	author aspolito;	state Exp;
branches;
next	1.5;

1.5
date	97.02.11.00.50.55;	author aspolito;	state Exp;
branches;
next	1.4;

1.4
date	97.02.10.21.57.23;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.01.06.05.43.30;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.12.11.05.25.55;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.08.01.50.46;	author fox;	state Exp;
branches;
next	;

1.11.4.1
date	97.05.06.23.49.38;	author iang;	state Exp;
branches;
next	;

1.13.4.1
date	97.08.11.04.13.00;	author fox;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	97.08.15.03.43.07;	author fox;	state Exp;
branches;
next	;


desc
@@


1.15
log
@changes to headers functions, ptm, and server_dispatch to maintain 2
invariants: (1) DistillerBuffer length field does NOT include
terminating null; (2) terminating null is always present for headers,
and is accoutned for by the maxLength field, so that maxLength >=
length+1.  Changed dispatch logic to allow for "X-static-route"
dispatcher worker.  Somewhat convoluted interaction with existing
X-Route mechanism, which i would remove entirely but for the fact that
it enables dynamic dispatch decisions after each pipestage.  New "guru"
argument i15 allows user to see all pipeline diagnostics that would
normally result in a bypass.
@
text
@/*
 *  userpref.c: support for maintaining user preferences in-memory hash
 *  backed up by gdbm.
 */

#include "config_tr.h"
#include "libmon.h"
#include <string.h>
#include <gdbm.h>
#include <stdio.h>
#include "utils.h"
#include "userpref.h"
#include "debug.h"
#include "ARGS.h"

int getFromUcache(userkey key, ArgumentList *al);
int inUcache(userkey ukey, ArgumentList *al);
void putInUcache(userkey ukey, ArgumentList * al);
void getFromDBM(userkey ukey, ArgumentList *al);
void writeToDBM(userkey ukey, ArgumentList *al);
UINT32 hash (userkey key);

UserPrefsCache userCache[USERCACHE_SIZE];
GDBM_FILE prefs;
pthread_mutex_t pref_mutex;

/*
 *  NOTE: Because of the ANSI C rules for initializing static unions, the
 *  initializer value must be type-compatible with the *first component* of the
 *  union.  Looking at distinterface.h, you'll see that this means we can only
 *  staitically-initialize typeInt arguments.  Others can be set in the
 *  init_prefs function, i guess.
 */
static Argument default_args[] = {
  { typeInt, FRONT_EXPERT, {0} },
  { typeInt, FRONT_QUALITY, {3} },
  { typeInt, FRONT_SHOW_ICON, {1} },
  { typeInt, FRONT_NO_DISTILL, {0} }
};

static ArgumentList default_prefs;

gm_Bool
init_prefs(const char *filename)
{
  int i;

  /* Set up default arguments for a new user */
  default_prefs.nargs = sizeof(default_args)/sizeof(Argument);

  for (i=0; i<default_prefs.nargs; i++) {
    default_prefs.arg[i] = default_args[i];
  }

  for (i = 0; i<USERCACHE_SIZE; i++) {
    userCache[i].key = 0;    
  }
  pthread_mutex_init(&pref_mutex, NULL);
  if ((prefs = gdbm_open((char *) filename, 0, GDBM_WRCREAT, 
			USERCACHE_MODE, NULL)) != NULL) {	
    MON_SEND_2(MON_LOGGING,"Initialized user-prefs database: %s\n", filename);
    return gm_True;
  } else {
    char extFilename[1024];
    int  idx=1;
    while (idx < 256) { /* 256 is some random upper bound */
      sprintf(extFilename, "%s.%d", filename, idx++);
      if ((prefs = gdbm_open((char *) extFilename, 0, GDBM_WRCREAT, 
			     USERCACHE_MODE, NULL)) != NULL) {
	MON_SEND_2(MON_LOGGING,"Initialized user-prefs database: %s\n", extFilename);
	return gm_True;
      }
    }
    return gm_False;
  }
}

/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "send me a prefs change form" URL.
 */

gm_Bool
is_changepref_url(const char *url)
{
  if (strncasecmp(fe_prefs_change_url_string, url, strlen(fe_prefs_change_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "set prefs" URL.
 */

gm_Bool
is_setpref_url(const char *url)
{
  if (strncasecmp(fe_prefs_set_url_string, url, strlen(fe_prefs_set_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

void
end_prefs()
{
  gdbm_close(prefs);
  pthread_mutex_destroy(&pref_mutex);
}

/*
 * takes a userkey and and a ArgumentList pointer
 * checks the local cache to see if the data exists there
 * and if it doesn't it find it get it from the server 
 * set by setPrefServer.
 * returns the length of ArgumentList and sets ArguementList
 * to a copy of the info.
 */
int
get_userprefs(userkey ukey, ArgumentList *p) {
  ArgumentList al;

  getFromUcache(ukey, &al);
  memcpy(p, &al, sizeof (ArgumentList));
  return p->nargs;
}

/*
 * takes a userkey and and a ArgumentList pointer
 * and gets the data off of the database file.
 * this data will always be correct, but it takes
 * a lock operation and so is slower.
 * returns the length of ArgumentList and sets ArguementList
 * to a copy of the info.
 */
int
get_userprefs_with_write_intent(userkey ukey, ArgumentList *p) {
  getFromDBM(ukey, p);
  return p->nargs;
}

/*
 * takes a user key and an argumentlist.
 * sets the cache for that key to that argumentlist.
 * writes to the gdbm file the the argument list for the key
 * multithread safety is good
 */
void
set_userprefs(userkey ukey, ArgumentList *p) {
  putInUcache(ukey, p);
  writeToDBM(ukey, p);
}

/*
 * returns a 1if it can set it
 * 0 if the new argumentslist would be too long
 */
int
set_oneuserpref(userkey ukey, Argument *a) {
  int i;

  ArgumentList al;
  get_userprefs_with_write_intent(ukey, &al);
  for (i = 0; i < al.nargs; i++) {
    if (al.arg[i].id == a->id) {
      memcpy(&al.arg[i], a, sizeof(Argument));
      set_userprefs(ukey, &al); 
      return 1;
    }
  }
  if (i == al.nargs) {
    if (i < MAX_ARGS) {
      al.nargs++;
      memcpy(&al.arg[i], a, sizeof(Argument));
      set_userprefs(ukey, &al); 
      return 1;
    } else {
      return 0;
    }
  }
  return 0;
}

int
getFromUcache(userkey key, ArgumentList *al) {
  if (inUcache(key, al)) {
    return 1;
  } else {
    getFromDBM(key, al);
    putInUcache(key, al);
    return 0;
  }
}

/*
 * make this thread safe!
 * if the key ukey is in the cache set al to a copy of the 
 * information in the cache and return 1, else return 0.
 * if al is set to NULL don't try the copy.
 */
int
inUcache(userkey ukey, ArgumentList *al) {
  int hashBucket;

  hashBucket = (int) (hash(ukey));

  if (userCache[hashBucket].key == ukey) {
    if (al != NULL) { 
      memcpy(al, &userCache[hashBucket].al, sizeof(ArgumentList));
    }
    return 1;
  } else 
    return 0;
}

/*
 * make this thread safe!
 */
void 
putInUcache(userkey ukey, ArgumentList * al) {
  int hashBucket;
  
  hashBucket = (int) (hash(ukey));
  userCache[hashBucket].key = ukey;
  memcpy(&userCache[hashBucket].al, al, sizeof(ArgumentList));
}

void
getFromDBM(userkey ukey, ArgumentList *al) {
  datum dkey;
  datum data;

  dkey.dptr = (char *) (&ukey);
  dkey.dsize = sizeof(ukey);
  
  pthread_mutex_lock(&pref_mutex);
  data = gdbm_fetch(prefs, dkey);
  pthread_mutex_unlock(&pref_mutex);
  if (data.dptr) {
    memcpy(al, data.dptr, data.dsize);
    free(data.dptr);
  } else {
    memcpy(al, &(default_prefs), sizeof(default_prefs));
  }
}

void
writeToDBM(userkey ukey, ArgumentList *al) {
  datum dkey;
  datum data;

  dkey.dptr = (char *) (&ukey);
  dkey.dsize = sizeof(ukey);

  data.dsize = sizeof(ArgumentList);
  data.dptr = (char *) (al);

  pthread_mutex_lock(&pref_mutex);
  gdbm_store(prefs, dkey, data, GDBM_REPLACE);
  pthread_mutex_unlock(&pref_mutex);
}

UINT32
hash (userkey key) {

  return((UINT32) key % USERCACHE_SIZE);
}

gm_Bool
is_getpref_url(const char *url) {
    if (strncmp(fe_get_prefs_url, url, strlen(fe_get_prefs_url)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

void
send_prefs(ArgumentList *prefs, int sock) {
  int disabled = 0;
  int quality = 3;
  char str[256];
  int i;

  correct_write(sock, "HTTP/1.0 200 OK\n", -1);
  correct_write(sock, "Content-Type: text/plain\n\n", -1);

  for (i = 0; i < prefs->nargs; i++) {
    if (ARG_ID(prefs->arg[i]) == FRONT_NO_DISTILL) {
      disabled = ARG_INT(prefs->arg[i]);
    } else if (ARG_ID(prefs->arg[i]) == FRONT_QUALITY) {
      quality = ARG_INT(prefs->arg[i]);
    }
  }
  
  sprintf (str, "%s\n%d\n", disabled ? "false" : "true", quality);
  correct_write(sock, str, -1);
}
@


1.14
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d245 1
@


1.13
log
@debugging/monitoring function interface in frontend cleaned up.  change to xs/Makefile.PL.in to avoid spurious double initialization of stuff in libdist.a when clib.so was dynamically loaded.
@
text
@d3 1
a3 1
 *  backed up by Harvest.
d6 2
a7 1
#include "proxy.h"
d11 1
d14 1
a14 1
#include "ALLARGS.h"
d78 30
d270 31
@


1.13.4.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d3 1
a3 1
 *  backed up by gdbm.
d6 1
a6 2
#include "config_tr.h"
#include "libmon.h"
a75 30
/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "send me a prefs change form" URL.
 */

gm_Bool
is_changepref_url(const char *url)
{
  if (strncasecmp(fe_prefs_change_url_string, url, strlen(fe_prefs_change_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "set prefs" URL.
 */

gm_Bool
is_setpref_url(const char *url)
{
  if (strncasecmp(fe_prefs_set_url_string, url, strlen(fe_prefs_set_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

a237 31
}

gm_Bool
is_getpref_url(const char *url) {
    if (strncmp(fe_get_prefs_url, url, strlen(fe_get_prefs_url)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

void
send_prefs(ArgumentList *prefs, int sock) {
  int disabled = 0;
  int quality = 3;
  char str[256];
  int i;

  correct_write(sock, "HTTP/1.0 200 OK\n", -1);
  correct_write(sock, "Content-Type: text/plain\n\n", -1);

  for (i = 0; i < prefs->nargs; i++) {
    if (ARG_ID(prefs->arg[i]) == FRONT_NO_DISTILL) {
      disabled = ARG_INT(prefs->arg[i]);
    } else if (ARG_ID(prefs->arg[i]) == FRONT_QUALITY) {
      quality = ARG_INT(prefs->arg[i]);
    }
  }
  
  sprintf (str, "%s\n%d\n", disabled ? "false" : "true", quality);
  correct_write(sock, str, -1);
@


1.13.4.2
log
@*** empty log message ***
@
text
@a10 1
#include "utils.h"
@


1.12
log
@Changes, including some HACKS in dispatch.c, to support aggregator behavior.  New doc file explaining how to write them, but its out of date.  sample aggregators and new stuff in TACCutils.pm.  different syntax for specifying distillers/aggregators.
@
text
@d59 1
a59 1
    MON_LOG_MSG_2("Initialized user-prefs database: %s\n", filename);
d68 1
a68 1
	MON_LOG_MSG_2("Initialized user-prefs database: %s\n", extFilename);
d77 2
a78 1
end_prefs() {
@


1.11
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@a81 21

#ifdef NOTDEF
int
get_userprefs(userkey key, ArgumentList *p)
{
  if (key == USERKEY_NULL) {
    p->nargs = 0;
    return 0;
  } else {
    p->nargs = 2;
    SET_ARG_ID(p->arg[0], GIFMUNGE_MODE);
    SET_ARG_INT(p->arg[0], -2); /* scale axes to 1/2 orig size */
    SET_ARG_ID(p->arg[1], GIFMUNGE_BPP);
    SET_ARG_INT(p->arg[1], 4);  /* quant to 16 colors, don't grayify */
    return 1;
  }
  /*NOTREACHED*/
}
#endif


@


1.11.4.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@a24 3
const userkey USERKEY_NONE = { NULL, 0 };

#if 0
a37 1
#endif
d47 1
a47 1
  default_prefs.nargs = 0;
a48 1
#if 0
a51 1
#endif
d54 1
a54 1
    userCache[i].key = USERKEY_NONE;    
d199 1
a199 1
  if (!userkey_cmp(userCache[hashBucket].key,ukey)) {
d225 2
a226 2
  dkey.dptr = ukey.keydata;
  dkey.dsize = ukey.keylen;
d243 2
a244 2
  dkey.dptr = ukey.keydata;
  dkey.dsize = ukey.keylen;
a255 14
    int i;
    UINT32 hashres = 0;

    for(i=0;i<key.keylen;++i) {
	hashres *= 137;
	hashres += key.keydata[i];
	hashres %= 16777214;
    }
  return hashres % USERCACHE_SIZE;
}

int
userkey_cmp(userkey a, userkey b) {
    if (a.keylen != b.keylen) return 1;
d257 1
a257 1
    return memcmp(a.keydata, b.keydata, a.keylen);
@


1.10
log
@Fixed pref page bugs on html form; changed ICON_STRING in html munger to
position top-right and force clear at both margins.  ie prefs retrieval
and setting now works correctly.  still to do: ICON_STRING needs to
reflect correct url to prefs (transend.cs...etc), along with arg that
means "don't show the logo on that page" and "don't distill anything on
that page".
@
text
@d6 1
a7 1
#include <pthread.h>
d9 1
a9 1

d11 1
@


1.9
log
@Default prefs.
@
text
@d24 15
a38 1
ArgumentList default_prefs;
d46 5
a50 7
  default_prefs.nargs = 2;
  (default_prefs.arg[0]).type = typeInt;
  (default_prefs.arg[0]).id = FRONT_EXPERT;
  (default_prefs.arg[0]).a.arg_int = (INT32) 0;
  (default_prefs.arg[1]).type = typeInt;
  (default_prefs.arg[1]).id = FRONT_QUALITY;
  (default_prefs.arg[1]).a.arg_int = (INT32) 3;
@


1.8
log
@Modified userprefs.c to use different gdbm files for different frontends
Modified test_http.c since the prototype for InitializeDistillerCache()
changed slightly
@
text
@d24 1
a24 1

d30 10
d221 1
a221 1
    al->nargs = 0;
@


1.7
log
@added frontend reqs/sec meter, retries for distConnectionBroken
@
text
@d36 12
a47 3
      return 1;
    } else {
      return 0;
d49 2
@


1.6
log
@killed some warnings
@
text
@d34 2
a35 2
  if (prefs = gdbm_open((char *) filename, 0, GDBM_WRCREAT, 
			USERCACHE_MODE, NULL)) {	
@


1.5
log
@took out some debugging printfs I left in by accident
@
text
@d34 1
a34 1
  if (prefs = gdbm_open(filename, 0, GDBM_WRCREAT, 
d191 1
a191 1
  dkey.dptr = &ukey;
d209 1
a209 1
  dkey.dptr = &ukey;
d213 1
a213 1
  data.dptr = al;
@


1.4
log
@Real implementation of user prefs
@
text
@a144 1
    printf ("CACHE HIT!\n");
a146 1
    printf("CACHE MISS!\n");
@


1.3
log
@Added doc/distillers.txt, which explains how to write your own
distiller.  Gifmunger should now do the right thing even on extremely
large images.  Default args for gifmunger are more sane (16 colors,
scale 0.5 per axis), but output still looks sucky - not sure why the
quantize phase picks such crappy colors.  "test_http" program has been
officially renamed "frontend".  Fixed the "run" targets in toplevel
Makefile.  Added line to configure.in to create a Makefile from
Makefile.in for gui.
@
text
@d6 4
d12 13
a24 1
#include <string.h>
d29 17
a45 1
  return gm_True;
d48 2
d66 45
d112 115
@


1.2
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d7 1
d23 5
a27 3
    p->nargs = 1;
    SET_ARG_ID(p->arg[0], 0L);
    SET_ARG_INT(p->arg[0], 1);
@


1.1
log
@configure script now generates include path automatically
@
text
@d6 1
a6 1
#include <userpref.h>
d9 5
a13 1
static struct userpref default_prefs = { 8, 0, 640, 480 };
d15 2
a16 2
userpref
get_userprefs(userkey key)
d18 8
a25 7
  if (key == USERKEY_NULL) 
    return (&default_prefs);
  else {
    struct userpref u;
    copy_prefs(&u, &default_prefs);
    u.bpp = (unsigned char)((unsigned long)key & 0xff);
    return &u;
a28 11

userpref
copy_prefs(userpref dest, const userpref src)
{
  assert(dest);
  (void)memcpy((void *)dest, (const void *)src, sizeof(struct userpref));
  return (dest);
}
  


@
