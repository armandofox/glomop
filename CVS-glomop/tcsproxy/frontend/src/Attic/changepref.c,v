head	1.11;
access;
symbols
	transend-beta2:1.10
	frontend-ng:1.9
	transend-beta-latest:1.9
	Aggregators:1.9
	NoAggregators:1.9
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.4;
locks; strict;
comment	@ * @;


1.11
date	97.08.30.21.34.11;	author fox;	state dead;
branches;
next	1.10;

1.10
date	97.06.12.18.31.34;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.05.15.06.09.42;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.04.15.21.00.54;	author gribble;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	97.04.15.00.28.59;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.04.09.01.31.18;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.04.08.02.44.37;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.03.09.09.08.08;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.02.19.01.29.24;	author aspolito;	state Exp;
branches;
next	1.2;

1.2
date	97.02.15.01.11.59;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.02.15.00.14.51;	author fox;	state Exp;
branches;
next	;

1.8.2.1
date	97.04.30.07.15.05;	author achuang;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	97.05.07.22.21.21;	author aspolito;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	97.05.09.01.01.52;	author fox;	state Exp;
branches;
next	;

1.8.4.1
date	97.05.06.23.49.31;	author iang;	state Exp;
branches;
next	;


desc
@@


1.11
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@/*
 *  changepref.c: functions to support changing user prefs
 *  Prototypes are in changepref.h
 */

#include "proxy.h"
#include "thr_cntl.h"
#include "userpref.h"
#include "debug.h"
#include "httpreq.h"
#include "changepref.h"

/*
 *  One-time initialization.  Set up the "magic URL" to recognize as a prefs
 *  change.
 *
 *  ARGS: none for now, but in the future, could pass port number or other
 *      runtime-specific data on which to base recognition of the "magic URL"
 *      for prefs changes.
 *  THREAD-SAFE: no
 *  RETURNS: gm_True if success, gm_False if error
 */

gm_Bool
init_change_prefs(void)
{
  return gm_True;
}

/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "send me a prefs change form" URL.
 */

gm_Bool
is_changepref_url(const char *url)
{
  if (strncasecmp(fe_prefs_change_url_string, url, strlen(fe_prefs_change_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}

/*
 *  Return gm_True iff the given URL is unambiguously known to be
 *  the "set prefs" URL.
 */

gm_Bool
is_setpref_url(const char *url)
{
  if (strncasecmp(fe_prefs_set_url_string, url, strlen(fe_prefs_set_url_string)) == 0) {
    return gm_True;
  } else {
    return gm_False;
  }
}


@


1.10
log
@various changes to makefiles to support auto-installation into sbin and bin directories.  perl HTML distiller no longer inserts UI in pages with frames.  PREFS_URL and similar strings are now static char* instead of #defines, but still need them to be initialized in PTM stub so distillers can get at them.  "run" targets are better now, they run stuff from the sbin and bin directories.
@
text
@@


1.9
log
@support for returning correct headers when aggregators called
@
text
@d38 1
a38 1
  if (strncasecmp(PREFS_CHANGE_URL_STRING, url, strlen(PREFS_CHANGE_URL_STRING)) == 0) {
d53 1
a53 1
  if (strncasecmp(PREFS_SET_URL_STRING, url, strlen(PREFS_SET_URL_STRING)) == 0) {
@


1.8
log
@MOre changes..
@
text
@a23 4
static char *prefsChangeUrl = "http://ChangePrefs";
static char *prefsSetUrl = "http://SetPrefs";
static char *msiePrefsSetUrl = "http://setprefs";

d38 1
a38 1
  if (strncmp(prefsChangeUrl, url, strlen(prefsChangeUrl)) == 0) {
d53 1
a53 2
  if ((strncmp(prefsSetUrl, url, strlen(prefsSetUrl)) == 0) ||
      (strncmp(msiePrefsSetUrl, url, strlen(msiePrefsSetUrl)) == 0)) {
d59 1
@


1.8.4.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@d25 1
a25 1
static char *prefsSetUrl = "/set?";
d55 1
a55 1
is_setpref_request(struct http_headers *hp)
d57 2
a58 2
  if (hp->tazhost && hp->taztrail &&
    !strncmp(prefsSetUrl, hp->taztrail, strlen(prefsSetUrl))) {
d64 1
@


1.8.2.1
log
@a new changepref.c to match the new config_tr.h.in definitions of the magic
URLs.
@
text
@d24 3
a26 3
static char* prefsChangeUrl = prefsChangeUrlString;
static char* prefsSetUrl = prefsSetUrlString;
static char* msiePrefsSetUrl = msiePrefsSetUrlString;
@


1.8.2.2
log
@added support for getprefs url
@
text
@d24 3
a26 4
static char *prefsChangeUrl = "http://ChangePrefs";
static char *prefsGetUrl = "http://GetPrefs";
static char *prefsSetUrl = "http://SetPrefs";
static char *msiePrefsSetUrl = "http://setprefs";
a63 1

@


1.8.2.3
log
@fixed minor buglets in interaction of htmlmunger and java gui
@
text
@d24 5
d43 1
a43 1
  if (strncasecmp(PREFS_CHANGE_URL_STRING, url, strlen(PREFS_CHANGE_URL_STRING)) == 0) {
d58 2
a59 1
  if (strncasecmp(PREFS_SET_URL_STRING, url, strlen(PREFS_SET_URL_STRING)) == 0) {
@


1.7
log
@more changes..
@
text
@d26 1
a26 1
static char *msiePrefsSetUrl = "http://setprefs/";
@


1.6
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@d26 1
d57 2
a58 1
  if (strncmp(prefsSetUrl, url, strlen(prefsSetUrl)) == 0) {
@


1.5
log
@POST works, though logic is ugly and should be moved mostly into proxy_dispatch
@
text
@d6 5
@


1.4
log
@fixed memory leak due to strtok_finish not being called, and signal handling so frontend now dies gracefully
@
text
@a57 43

/*
 *  Send the user a prefs page.  For now, this works by reading a local
 *  file.  The file is read each time (rather than just once at
 *  startup) to make debugging easier: to change the user prefs form,
 *  just change the file, no need to restart the proxy.  Eventually this
 *  should change.
 *
 *  ARGS:
 *   i: user's identifying key
 *   i: user's current preferences list
 *   o: pointer to buffer containing the data to be sent (will be
 *     treated as read-only)
 *   o: pointer to string containing the MIME type
 */

static char *prefsFormFile = "../prefs.html"; /* filename containing template */

void
send_change_prefs_page(userkey k, ArgumentList *prefs, int sock)
{
  FILE *fd;
  struct stat st;
    
  if ((fd = fopen(prefsFormFile, "r")) == NULL
      || (fstat(fileno(fd), &st) != 0)) {
    char message[200];
    sprintf(message, "Error opening file `%s': %s", prefsFormFile,
            strerror(errno));
    send_content((const char *)message, -1, "text/html", sock);
  } else {
    /* success: read entire file and send it */
    char *buf = (char *)ALLOCA(st.st_size);
    if (fread(buf, sizeof(char), st.st_size, fd) != st.st_size) {
      char message[200];
      sprintf(message, "Error reading file `%s': %s", prefsFormFile,
              strerror(errno));
      send_content((const char *)message, -1, "text/html", sock);
    } else {
      send_content(buf, -1, "text/html", sock);
    }
  }
}
@


1.3
log
@changes so that preferences are changed with an http://ChangePrefs
not by connecting to a seperate port
@
text
@d90 1
a90 1
    char *buf = (char *)MALLOC(st.st_size);
a98 1
    FREE(buf);
@


1.2
log
@Fixed up pointer to prefs file.
@
text
@d20 1
d42 16
@


1.1
log
@prefs.html has been moved from frontend/src/ to frontend/.  User prefs
form can now be obtained by visiting the URL "http://ChangePrefs".
doesn't matter if "No Proxy For" is set or not.  Mechanism works by
reading prefs.html file, so you can just change the file and reload and
you'll get the new form.  Added "changepref.h" and "changepref.c" to
contain the code that deals with receiving prefs change submissions and
serving the prefs change form.  Modified Makefile to include the new
files in the frontend make target.  Added function "send_content" (send
generic content using HTTP) to support this stuff, in httpsupport.c.
@
text
@d57 1
a57 1
static char *prefsFormFile = "prefs.html"; /* filename containing template */
@
