head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.10.28.02.06.01;	author fox;	state dead;
branches;
next	1.1;

1.1
date	96.10.25.00.25.19;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.25.19;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@HTTPd thread can accept socket connections, queue them to be handled,
and have them successfully picked up, done and deallocated.
@
text
@/*
 *  redirect.c
 *  $Id: redirect.c,v 1.1 1996/10/25 00:25:19 fox Exp fox $
 *
 *  Accept a connection on main port, receive HTTP request, redirect it
 *  to munged-HTML URL by extracting client prefs and embedding into
 *  URL.
 *  A new thread is spawned for each request.
 */

#include <proxy.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

typedef void *thr_start_proc(void *);
struct proxy_from {
  int from_sock;
  struct sockaddr from_ipaddr;
};

/*
 *  forward declarations
 */

thr_start_proc redirect_go;

int
receive_and_redirect(sock)
     int sock;
{
  int ns;
  struct sockaddr in_from;
  int fromlen = sizeof(in_from);
  
  struct proxy_from args[MAX_THREADS];

  while (1) {

    ns = accept(sock, &in_from, &fromlen);

    if (ns < 0) {
      proxy_errlog(strerror(errno));
    } else {
      /*
       *  new thread (really should have a thread spinning and ready to go)
       */
      pthread_t thrid;
      int res;
      res = pthread_create(&thrid,
                           (pthread_attr_t *)NULL,
                           (thr_start_proc *)redirect_go,
                           (void *)(&in_from));
      if (res != 0) {
        proxy_errlog(strerror(res));
        /* cleanup resources used to spawn thread.... */
      }
    }
  }
}

void *
redirect_go(from_who)
     void *from_who;
{
  struct sockaddr *from = (struct sockaddr *)from_who;
}
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 *  $Id: redirect.c,v 1.2 1996/10/09 02:44:08 fox Exp $
@


1.1.1.1
log
@
@
text
@@
