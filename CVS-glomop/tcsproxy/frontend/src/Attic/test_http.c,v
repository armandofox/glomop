head	1.34;
access;
symbols
	transend-beta2:1.33
	frontend-ng:1.28
	transend-beta-latest:1.28
	Aggregators:1.28
	NoAggregators:1.28
	iang:1.28.0.4
	transend-beta:1.28.0.2
	SOSP:1.22
	merged_preintegrate:1.7
	heisenbug:1.7
	PRE_INTEGRATION:1.7;
locks; strict;
comment	@ * @;


1.34
date	97.08.30.21.34.25;	author fox;	state dead;
branches;
next	1.33;

1.33
date	97.07.24.18.50.06;	author fox;	state Exp;
branches;
next	1.32;

1.32
date	97.07.22.02.15.44;	author fox;	state Exp;
branches;
next	1.31;

1.31
date	97.06.14.05.05.36;	author yatin;	state Exp;
branches;
next	1.30;

1.30
date	97.06.12.18.31.40;	author fox;	state Exp;
branches;
next	1.29;

1.29
date	97.06.06.00.07.52;	author fox;	state Exp;
branches;
next	1.28;

1.28
date	97.04.19.00.17.05;	author gribble;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	97.04.18.21.58.51;	author yatin;	state Exp;
branches;
next	1.26;

1.26
date	97.04.18.21.35.00;	author fox;	state Exp;
branches;
next	1.25;

1.25
date	97.04.18.20.53.32;	author yatin;	state Exp;
branches;
next	1.24;

1.24
date	97.04.18.19.37.52;	author fox;	state Exp;
branches;
next	1.23;

1.23
date	97.04.09.01.31.30;	author fox;	state Exp;
branches;
next	1.22;

1.22
date	97.03.09.09.08.12;	author fox;	state Exp;
branches;
next	1.21;

1.21
date	97.03.06.09.44.53;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	97.03.06.01.59.06;	author yatin;	state Exp;
branches;
next	1.19;

1.19
date	97.02.27.03.10.54;	author fox;	state Exp;
branches;
next	1.18;

1.18
date	97.02.19.01.29.25;	author aspolito;	state Exp;
branches;
next	1.17;

1.17
date	97.02.15.00.26.16;	author gribble;	state Exp;
branches;
next	1.16;

1.16
date	97.02.15.00.14.55;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	97.02.14.06.35.03;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	97.02.07.22.48.01;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.02.05.01.39.22;	author gribble;	state Exp;
branches;
next	1.12;

1.12
date	97.01.29.05.53.27;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.04.13.22;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	97.01.28.23.49.29;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.01.28.03.57.44;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.12.16.07.34.54;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.12.12.02.16.55;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.12.11.05.25.54;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.12.11.01.12.17;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.12.09.02.38.15;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.11.15.00.47.49;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.01.50.45;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.06.07.49.09;	author fox;	state Exp;
branches;
next	;

1.28.4.1
date	97.05.06.23.49.37;	author iang;	state Exp;
branches;
next	;


desc
@@


1.34
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@#include "proxy.h"
#include "thr_cntl.h"
#include "debug.h"
#include "optdb.h"
#include "proxyinterface.h"
#include <stdio.h>
#include <string.h>
#include "httpreq.h"
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include "clib.h"
#include "changepref.h"

static void init(int ac, char *av[]);
static Options runtime_options;

const char *fe_server_name,
  *fe_set_prefs_url,
  *fe_get_prefs_url,
  *fe_prefs_change_url_string,
  *fe_prefs_set_url_string,
  *fe_agg_string;

static void
usage(void)
{
    fprintf(stderr,
            "Usage: frontend configfilename\n");
    exit(1);
}

static void
missing_field_error(const char *fld)
{
  fprintf(stderr,
          "Reading config file: property '%s' missing or illegal value\n",
	  fld);
  exit(1);
}

int
main(int ac, char *av[])
{
#ifdef SIGWAITING
  /* deliver a signal if all threads get blocked (Solaris only) */
  (void)signal(SIGWAITING, proxy_blocked);
#endif
  init(ac,av);

  while (1) 
    sleep(10000);
}

/*
 *  Command line arguments understood by this function:
 *    1.  options file name
 *
 *    1.  port number
 *    2.  number of threads
 *    3.  monitor client ipaddr/port/ttl
 *    4.  PTM options file
 *    5.  [optional] priority boost for accept()'ing thread
 */
static void
init(int ac, char *av[])
{
  clib_response cl;
  gm_Bool response;
  char *portptr;
  const char *monaddr;
  char monaddr_copy[256];
  const char *uprefs_db_file;
  UINT16 port;
  int boost_prio = 0;
  int result;
  char *logfilename;
  
  if (ac < 2)
    usage();
  
  if ((result = Options_New(&runtime_options, av[1])) != 0) {
    fprintf(stderr, "Error %d opening configuration file '%s', bye bye!\n",
            result, av[1]);
    exit(1);
  }

  if ((port = (UINT16)Options_Find_UINT32(runtime_options,
                                          "frontend.listen_port"))
      == 0) {
    missing_field_error("frontend.listen_port");
    /* NOTREACHED */
  }
  /*
   *  Initialize monitor client if possible
   */

  if ((monaddr = Options_Find(runtime_options, "Monitor.listen"))
      == NULL) {
    missing_field_error("Monitor.listen");
    /* NOTREACHED */
  }
  strncpy(monaddr_copy, monaddr, sizeof(monaddr_copy)-1);
  if ((portptr = strchr(monaddr_copy, '/')) == NULL) {
    usage();
    /* NOTREACHED */
  }
  *portptr = 0;

  /*
   *  Get "magic URL" namespace params
   */
  if ((fe_server_name = Options_Find(runtime_options, "frontend.webServerName"))
      == NULL)
    missing_field_error("frontend.webServerName");
  if ((fe_set_prefs_url = Options_Find(runtime_options, "frontend.prefsFormDisplayUrl"))
      == NULL)
    missing_field_error("frontend.prefsFormDisplayUrl");
  if ((fe_get_prefs_url = Options_Find(runtime_options, "frontend.getPrefsUrl"))
      == NULL)
    missing_field_error("frontend.getPrefsUrl");
  if ((fe_prefs_change_url_string =
       Options_Find(runtime_options, "frontend.prefsChangeUrlString"))
      == NULL)
    missing_field_error("frontend.prefsChangeUrlString");
  if ((fe_prefs_set_url_string =
       Options_Find(runtime_options, "frontend.prefsFormSubmitUrl"))
      == NULL)
    missing_field_error("frontend.prefsFormSubmitUrl");
  if ((fe_agg_string = Options_Find(runtime_options, "frontend.aggString"))
      == NULL)
    missing_field_error("frontend.aggString");

  /*
   *  Initialize PTM stub
   */
  proxy_debug_2(DBG_PTM, "Initializing PTM stub");
  if ((response = InitializeDistillerCache(runtime_options)) != gm_True) {
    fprintf(stderr,"PTM initialization failed: %d\n", response);
    proxy_shutdown(0);
    /* NOTREACHED */
  }

  /* BUG:: should parse out TTL, not assume it's 16! */
  if ((gMon = MonitorClient_Create(FE_GetMonitorClientUnitID(),
                                   monaddr_copy, /* monitor IP addr */
                                   strtoul(portptr+1, NULL, 0), /*  port */
                                   16)) /* ttl */
      == NULL) {
    fprintf(stderr, "Warning: couldn't create monitor client\n");
  } 
  /*
   *  Initialize partitioned Harvest
   */

  proxy_debug_2(DBG_CACHE, "Initializing partitioned Harvest");
  MON_SEND(MON_LOGGING,"Initializing partitioned Harvest\n");

  if ((cl = Clib_Initialize(runtime_options, gMon)) != CLIB_OK) {
    fprintf(stderr, "Error %d initializing harvest FE\n", (int)cl);
    proxy_shutdown(0);
    /* NOTREACHED */
  }
  /*
   *  Initialize user prefs database
   */
  proxy_debug_2(DBG_ADMIN, "Initializing user prefs database");
  if ((uprefs_db_file = Options_Find(runtime_options, "frontend.userprefs"))
      == NULL)
    uprefs_db_file = "./uprefs.gdbm";
  
  if ((response = init_prefs(uprefs_db_file)) != gm_True) {
    fprintf(stderr,"User prefs database initialization ('%s') failed\n",
            uprefs_db_file);
    proxy_shutdown(0);
    /* NOTREACHED */
  }
  /*
   *  Initialize prefs-changing mechanism
   */
  if ((response = init_change_prefs()) != gm_True) {
    MON_SEND(MON_ERR,"Couldn't initialize prefs-changing mechanism, exiting\n");
    proxy_shutdown(0);
    /* NOTREACHED */
  }
  /*
   *  Start logging incoming requests
   */
  if ((logfilename = init_logging()) == NULL) {
    MON_SEND_2(MON_ERR,"Couldn't initialize logging: %s\n", strerror(errno));
  }    
  /*
   *  Wait for PTM to start up before proceeding.
   */
  proxy_debug_2(DBG_PTM, "Waiting for PTM to start up");
  WaitForPTM();
  /*
   *  Initialize all the threads
   */
  {
    int nth;
    if ((nth = (int)Options_Find_UINT32(runtime_options, "frontend.nthreads"))
        == 0)
      nth = 25;
    MON_SEND_2(MON_LOGGING,"Spawning %d worker threads\n", nth);
    (void)make_threads(nth, -2);
  }
  /*
   *  Finally, initialize all the worker threads.
   */
  boost_prio = (int)Options_Find_UINT32(runtime_options, "frontend.acceptPrio");
  /* if not found, boost_prio will be zero, which is fine. */

  if ((response = httpreq_init(port,boost_prio)) != gm_True) {
    MON_SEND_3(MON_ERR,"httpreq_init %d: %s\n", port, strerror(errno));
    proxy_shutdown(0);
    /* NOTREACHED */
  }
}

  
@


1.33
log
@debugging/monitoring function interface in frontend cleaned up.  change to xs/Makefile.PL.in to avoid spurious double initialization of stuff in libdist.a when clib.so was dynamically loaded.
@
text
@@


1.32
log
@fixed makefile bugs to compile under both linux and solaris
@
text
@a77 1
  char msg[400];
d157 1
a157 1
  MON_LOG_MSG("Initializing partitioned Harvest\n");
d182 1
a182 1
    MON_LOG_ERR("Couldn't initialize prefs-changing mechanism, exiting\n");
d190 1
a190 2
    sprintf(msg, "Couldn't initialize logging: %s\n", strerror(errno));
    MON_LOG_ERR(msg);
d205 1
a205 3
    sprintf(msg, "Spawning %d worker threads\n", nth);
    proxy_debug_2(DBG_THREAD, msg);
    MON_LOG_MSG(msg);
d215 1
a215 2
    sprintf(msg, "httpreq_init %d: %s\n", port, strerror(errno));
    MON_LOG_ERR(msg);
@


1.31
log
@combined distillers.db into gm_options
added re-reading of the options file to the PTM, thru a SIGUSR1
added arbitrary arguments capability to distillers. Extra args are passed
on to DistillerInit()
added functionality to flush the negative cache when the PTM re-reads the
options file or when it restarts
@
text
@d114 1
a114 1
  if ((fe_server_name = Options_Find(runtime_options, "frontend.serverName"))
d116 2
a117 2
    missing_field_error("frontend.serverName");
  if ((fe_set_prefs_url = Options_Find(runtime_options, "frontend.setPrefsUrl"))
d119 1
a119 1
    missing_field_error("frontend.setPrefsUrl");
d128 1
a128 1
       Options_Find(runtime_options, "frontend.prefsSetUrlString"))
d130 1
a130 1
    missing_field_error("frontend.prefsSetUrlString");
@


1.30
log
@various changes to makefiles to support auto-installation into sbin and bin directories.  perl HTML distiller no longer inserts UI in pages with frames.  PREFS_URL and similar strings are now static char* instead of #defines, but still need them to be initialized in PTM stub so distillers can get at them.  "run" targets are better now, they run stuff from the sbin and bin directories.
@
text
@d139 1
a139 2
  if ((response = InitializeDistillerCache(runtime_options, "", 0, port))
      != gm_True) {
@


1.29
log
@Many changes to support SDK, including bin and sbin directories,
and modified make targets and names of some binary targets.  Calling
convention changed for perl distillers, so fixed html distiller and
added it as transend.text.html.  monitor.multicast property is now
Monitor.listen; all relevant code was changed.  Monitor can now parse
this from the options file.  Updated all UI changes from branch head.
@
text
@d18 7
d101 1
a101 1
    missing_field_error("monitor.{uni,multi}cast");
d110 24
@


1.28
log
@Clib_Initialize modified to pass in Options struct.
@
text
@d92 1
a92 1
  if ((monaddr = Options_Find(runtime_options, "monitor.multicast"))
d94 1
a94 1
    missing_field_error("monitor.multicast");
@


1.28.4.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@a8 1
#include "crypt.h"
a70 1
  char *keyfile;
a153 9
    proxy_shutdown(0);
    /* NOTREACHED */
  }
  /*
   *  Initialize decryption mechanism
   */
  keyfile = Options_Find(runtime_options, "frontend.keyfile");
  if ((response = init_crypt(keyfile)) != gm_True) {
    MON_LOG_ERR("Couldn't initialize decryption mechanism, exiting\n");
@


1.27
log
@gm_options files changes
@
text
@d130 1
a130 1
  if ((cl = Clib_Initialize("part.config", gMon)) != CLIB_OK) {
@


1.26
log
@no longer munge readonly copy of options database entries
@
text
@d130 1
a130 1
  if ((cl = Clib_Initialize(runtime_options, gMon)) != CLIB_OK) {
@


1.25
log
@bug fix
@
text
@d65 1
d97 2
a98 1
  if ((portptr = strchr(monaddr, '/')) == NULL) {
d117 1
a117 1
                                   monaddr, /* monitor IP addr */
@


1.24
log
@changed frontend config stuff to use a single config file
@
text
@d30 2
a31 1
          "Reading config file: property '%s' missing or illegal value\n");
@


1.23
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@d4 1
d16 1
d22 1
a22 3
            "Usage: frontend port nthreads monitor_addr ptm_optfile\n");
    fprintf(stderr,
            "   monitor_addr is  nn.nn.nn.nn/pppp/ttl\n");
d26 8
d49 2
d63 2
d67 1
d71 1
a71 1
  if (ac < 5)
d74 5
a78 1
  port = (UINT16)atoi(av[1]);
d80 6
d90 6
a95 1
  if ((portptr = strchr((const char *)av[3], '/')) == NULL) {
d97 1
d105 2
a106 1
  if ((response = InitializeDistillerCache(av[4], "", 0, port)) != gm_True) {
d112 1
d114 2
a115 2
                                   av[3], /* monitor IP addr */
                                   atoi(portptr+1), /* monitor port */
d127 1
a127 1
  if ((cl = Clib_Initialize("part.config", gMon)) != CLIB_OK) {
d136 7
a142 2
  if ((response = init_prefs("./uprefs.gdbm")) != gm_True) {
    fprintf(stderr,"User prefs database initialization failed\n");
d170 4
a173 1
    int nth = atoi(av[2]);
d182 2
a183 3
  if (ac > 4) {
    boost_prio = atoi(av[5]);
  } 
@


1.22
log
@fixed memory leak due to strtok_finish not being called, and signal handling so frontend now dies gracefully
@
text
@d2 2
d55 2
d119 7
a133 1
    char msg[80];
a147 1
    char msg[80];
@


1.21
log
@added accept() priority boost stuff
@
text
@a26 3
  init(ac,av);
  (void)signal(SIGINT, proxy_shutdown);
  (void)signal(SIGHUP, proxy_shutdown);
d31 2
d34 1
a34 1
    sleep(10);
@


1.20
log
@Modified userprefs.c to use different gdbm files for different frontends
Modified test_http.c since the prototype for InitializeDistillerCache()
changed slightly
@
text
@d38 8
d53 3
a55 2

  if (ac != 5)
d58 1
a58 5
  if (ac > 1)
    port = (UINT16)atoi(av[1]);
  else
    port = 9998;
  
d134 5
a138 1
  if ((response = httpreq_init(port)) != gm_True) {
@


1.19
log
@added frontend reqs/sec meter, retries for distConnectionBroken
@
text
@d68 1
a68 1
  if ((response = InitializeDistillerCache(av[4], "", 0)) != gm_True) {
d98 1
a98 1
    fprintf(stderr,"User prefs database initialization failed");
@


1.18
log
@changes so that preferences are changed with an http://ChangePrefs
not by connecting to a seperate port
@
text
@d124 1
a124 1
    (void)make_threads(nth, 2);
@


1.17
log
@Included right header.
@
text
@a110 10
   *  Initialize thread that will listen for user pref requests on a
   *  separate port (main port number + 1, by default)
   */
  if ((response = init_parse_uprefs(1+port)) != gm_True) {
    MON_LOG_ERR("Couldn't initialize user prefs, exiting\n");
    proxy_shutdown(0);
    /* NOTREACHED */
  }

  /*
@


1.16
log
@prefs.html has been moved from frontend/src/ to frontend/.  User prefs
form can now be obtained by visiting the URL "http://ChangePrefs".
doesn't matter if "No Proxy For" is set or not.  Mechanism works by
reading prefs.html file, so you can just change the file and reload and
you'll get the new form.  Added "changepref.h" and "changepref.c" to
contain the code that deals with receiving prefs change submissions and
serving the prefs change form.  Modified Makefile to include the new
files in the frontend make target.  Added function "send_content" (send
generic content using HTTP) to support this stuff, in httpsupport.c.
@
text
@d10 1
@


1.15
log
@fixed bugs found by purify run
@
text
@d102 8
@


1.14
log
@User prefs skeleton working
@
text
@a25 2
  pthread_t res;

@


1.13
log
@Changed client library interface to accept a preinitialized monitor
object.
@
text
@d27 2
a28 10
  int port;
  
  if (ac != 5)
    usage();
  
  if (ac > 1)
    port = atoi(av[1]);
  else
    port = 9998;
  
a34 5
  init(ac,av);
  if ((res = httpreq_init(port)) == 0) {
    fprintf(stderr, "httpreq_init %d: %s\n", port, strerror(res));
    exit(1);
  }
d45 9
d55 1
d71 2
a72 1
    exit(1);
d91 2
a92 1
    exit(1);
a93 2
  proxy_debug_2(DBG_PTM, "Waiting for PTM to start up");
  WaitForPTM();
d95 1
a95 1
   *  Initialize user prefs stuff
d100 2
a101 1
    exit(1);
d104 15
d128 10
@


1.12
log
@fixed dispatch to allow output of different mime type, fixed bug in test_http.c where monitor was being used before initialized
@
text
@d91 1
a91 1
  if ((cl = Clib_Initialize("part.config")) != CLIB_OK) {
@


1.11
log
@changed distiller interface to use struct DistillerInput/DistillerOutput in frontend,gif_munge,html_munge
@
text
@d68 9
a92 8
    exit(1);
  }
  /*
   *  Initialize PTM stub
   */
  proxy_debug_2(DBG_PTM, "Initializing PTM stub");
  if ((response = InitializeDistillerCache(av[4], "", 0)) != gm_True) {
    fprintf(stderr,"PTM initialization failed: %d\n", response);
@


1.10
log
@*** empty log message ***
@
text
@d13 2
a14 1
static void usage(void)
d68 1
a68 1
  if ((gMon = MonitorClient_Create("Front End",
@


1.9
log
@frontend now uses monitor for logging
@
text
@a10 2
Monitor *gMon;

d37 5
d112 1
a112 1
    (void)make_threads(nth, 10);
@


1.8
log
@frontend/part.config: points to single u49 harvest partition
Makefile.in: contains the per-person targets for run_*.
ptm/distillers.db.sample: distiller binaries are at ../ rather than
absolute pathname
also added distillers.db.fox, gm_options.fox for PTM
@
text
@d11 2
d15 9
d30 3
d53 1
d56 16
d76 2
d86 2
a87 4
  if ((response = InitializeDistillerCache((ac > 3 ? av[3]
                                           : "../ptm/.gm_options.sample"),
                                           "", 0)) != gm_True) {
    fprintf(stderr,"PTM initialization failed");
d103 8
a110 2
  proxy_debug_2(DBG_THREAD, "Spawning worker threads");
  (void)make_threads((ac > 2? atoi(av[2]) : 20), 10);
@


1.7
log
@End to end path works via dispatch.c, some error reporting still broken and some things still hardcoded that shouldn't be
@
text
@d53 2
a54 1
  if ((response = InitializeDistillerCache("../ptm/.gm_options.sample",
@


1.6
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d8 1
d24 1
a48 1
#if 0
a59 1
#endif
d74 2
@


1.5
log
@*** empty log message ***
@
text
@d2 1
d10 2
a16 1
  clib_response cl;
d23 1
d28 13
d42 1
d47 25
a71 1

a72 2
  while (1) 
    sleep(10);
@


1.4
log
@http parsing is breathing
@
text
@d7 1
d14 2
a15 1

d25 6
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
#include <proxy.h>
d4 1
a4 1
#include <httpreq.h>
@


1.2
log
@configure script now generates include path automatically
@
text
@d5 2
d12 6
d19 2
a20 2
  if ((res = httpreq_init(9998, NULL)) == 0) {
    fprintf(stderr, "httpreq_init 9998: %s\n", strerror(res));
d23 1
a23 1
  (void)make_threads((ac > 1? atoi(av[1]) : 20), 10);
@


1.1
log
@httpreq.c is the main event loop for receiving HTTP requests
@
text
@d4 1
a9 1
  void *status;
d11 1
a11 1
  if ((res = httpreq_init(9998)) == 0) {
d15 3
a17 5

  (void)make_threads(20);

  sleep(1e3)
    ;
@
