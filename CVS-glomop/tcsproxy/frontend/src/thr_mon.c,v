head	1.15;
access;
symbols
	Yatin-final:1.15
	Yatin:1.15.0.2
	pre-yatin-merge:1.15
	transend-beta2:1.13
	fox-dev:1.13.4.2
	frontend-ng:1.11
	transend-beta-latest:1.11
	Aggregators:1.11
	NoAggregators:1.11
	iang:1.11.0.4
	transend-beta:1.11.0.2
	SOSP:1.8;
locks; strict;
comment	@ * @;


1.15
date	97.09.06.02.29.49;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	97.08.30.21.34.27;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.07.29.00.32.01;	author fox;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	97.07.24.18.50.07;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.04.19.01.11.42;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	97.04.19.01.10.05;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.04.09.01.31.32;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.03.06.02.07.05;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.03.05.22.48.37;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.03.05.05.54.18;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.03.05.00.30.59;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.03.04.04.31.25;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.03.04.03.05.54;	author yatin;	state Exp;
branches;
next	1.2;

1.2
date	97.03.03.23.36.46;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.22.38.50;	author fox;	state Exp;
branches;
next	;

1.13.4.1
date	97.08.11.04.12.58;	author fox;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	97.08.15.03.43.05;	author fox;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Incorporated wingman protocol directly into the frontend.
@
text
@/*
 *  thr_mon.c: Functions for instrumentation and thread monitoring.
 */

/*
 *  Thread queue monitoring function.  Periodically wakes up and reports
 *  some thread queue statistics via the reporting interface.
 *
 *  ARGS:  number specifying how many seconds between reports.  If
 *  negative, specifies (negative) reciprocal of this value, i.e. -4
 *  means 4 reports per second, but +2 means a report every 2 seconds.
 *  RETURNS: never
 *  REENTRANT: no (monitors global variables related to thread queue)
 */

#include <unistd.h>
#include "config_tr.h"
#include "thr_cntl.h"
#include "userpref.h"
#include "debug.h"

static void compute_ewma_reqs_sec(int report_interval, int asymptote);
static void compute_thread_state_deltas(int asymptote);

extern int nthreads;
extern Monitor *gMon;
extern Inst *thread_inst;

#define NUM_ASYMPTOTE 5
#define LOADAVG_WINDOWSIZE 8
#define TIME_DIF_TO_USEC(t2,t1) \
    (((t1).tv_sec-(t2).tv_sec)*1000000.0+((t1).tv_usec-(t2).tv_usec))


void *
thread_mon_proc(void *arg)
{
  int report_interval = (int) arg;

  int asymptote=0; 
  unsigned char report_this_time = 0;

  while (1) {

    report_this_time ^= 1;      /* toggle this flag */

    if (report_interval >= 1)
      sleep(report_interval);
    else
      usleep(-1000000/report_interval);

    /*    compute_loadavg(); */
    compute_thread_state_deltas(asymptote);

    if (report_this_time) {
      compute_ewma_reqs_sec(report_interval, asymptote);
    }

    /* next time, we'll do the next set. */
    asymptote = (asymptote+NUM_ASYMPTOTE) % nthreads;

  } /* end while(1) */
}

/*
 *  Set the run state of a thread.  Could optionally insert
 *  instrumentation here to record each state change, but for now we
 *  simply allow the thread_mon_proc function to periodically read and
 *  dump out the entire state array.
 *  Not MT-safe, but any given thread will be reading/writing only its
 *  own array entry.
 */

void
INST_set_thread_state(int thrindex, thread_state_t state)
{
  assert(thrindex >= 0 && thrindex < nthreads);
  thread_inst[thrindex].state = state;
}

/*
 *  Get ready to start collecting timestamp info.  If one of the buffers
 *  is marked "not readable", use it to collect info; otherwise pick one
 *  to use and mark it unreadable.
 *  Not MT-safe, but any given thread will be reading/writing only its
 *  own array entry.
 */

void
INST_begin_timestamp(int thrindex)
{
  int buf = thread_inst[thrindex].which_buffer & 1;

  if (thread_inst[thrindex].readable[buf]) {
    /* pick the other buffer */
    buf ^= 1;
    thread_inst[thrindex].readable[buf] = 0;
  }
  thread_inst[thrindex].which_buffer = buf;
  thread_inst[thrindex].last_report++;
  memset(&thread_inst[thrindex].ms[buf], 0, sizeof(struct inst_milestones));
}

/*
 *  Indicate a set of timestamps has been recorded: set its readable
 *  field to 1.  
 *  Not MT-safe, but any given thread will be reading/writing only its
 *  own array entry.
 */
void
INST_end_timestamp(int thrindex)
{
  int buf = thread_inst[thrindex].which_buffer & 1;

  Inst *i = &thread_inst[thrindex];
  
  i->readable[buf] = 1;
  i->which_buffer = buf ^ 1;

}

/*
 *  Initialize instrumentation
 */

void
inst_init(void)
{
  memset(thread_inst, 0, nthreads*sizeof(Inst));
}

#if 0
static void
compute_loadavg(void)
{
  int bogus;
  int i,j,thridx;
  Inst *in;
  struct inst_milestones avg_ms;
  struct inst_milestones local_ms[LOADAVG_WINDOWSIZE];
  double inputsize;
  double e2eavg = 0.0;
  UINT32 moving_e2eavg = 0;

  static UINT32 old_e2eavg = 0;
  static double w = 0.85;
  static int changed = 0;
  static int wptr = 0;

  /*
   *  send the "performance" information.  For each thread, see whether the
   * thread has something to report  (the "buffer readable" flag is set for 
   * one of the thread's two reporting buffers).  If so, aggregate the
   * information, and turn off the readable flag (so we won't report stale
   * information again next time).
   */

  bogus = 0;

  if (changed == 0) {           /* first time through a new aggregation */
    memset(&avg_ms, 0, sizeof(avg_ms));
  }
  for (i=0; i<nthreads; i++) {
    /*    int thridx = (asymptote+i) % nthreads; */
    thridx = i;
    in = &thread_inst[thridx];

    /*
     *  Check the readable flag; if set, make a copy of the data, and test
     *  the readable flag again in case it changed under us.
     */
    j = in->which_buffer;
    if ((in->readable[j])
        || (in->readable[j^=1])) {
      local_ms = in->ms[j];
      if (! in->readable[j]) {
        /* BUG::really want test-and-set(in->readable[j]) */
        MON_SEND(MON_LOGGING,
                 "Measurement suppressed: potential race condition\n");
      } else if (local_ms.inputsize == 0) {
        bogus++;
        in->last_report = 0;
      } else {
        /* hasn't changed since we started reading, and appears to be valid
         *  measurement. 
         * note we set readable to 0, which might (race condition)
         *  invalidate a 
         * good measurement currently being taken, but certainly prevents us
         * from reporting the same measurement twice.
         */
        in->readable[j] = 0;
        inputsize = (double)local_ms.inputsize;
        changed++;
        if (in->last_report > 1) {
          MON_SEND_2(MON_LOGGING,
                     "WARNING! thread %d updated more than once\n", i);
          /*                  i, in->last_report); */
        }
        in->last_report = 0;

#if 0
        avg_ms.m_headersdone.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_arrival, local_ms.m_headersdone)
           / inputsize);
        avg_ms.m_cachestart.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_headersdone, local_ms.m_cachestart)
           / inputsize);
        avg_ms.m_cachedone.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_cachestart, local_ms.m_cachedone)
           / inputsize);
        avg_ms.m_distillstart.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_cachedone, local_ms.m_distillstart)
           / inputsize);
        avg_ms.m_wbstart.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_distillstart, local_ms.m_wbstart)
           / inputsize);
        avg_ms.m_wbdone.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_wbstart, local_ms.m_wbdone)
           / inputsize);
#else
        avg_msg.m_headersdone.tv_usec +=
          (TIME_DIF_TO_USEC(local_ms.m_arrival, local_ms.m_wbdone)
           / inputsize);
#endif
      }
    }
  }

  if (changed > 10) {
    /* compute the averages for this time period. */
#if 0
    e2eavg = 0.0;
    e2eavg += (avg_ms.m_headersdone.tv_usec / changed);
    e2eavg += (avg_ms.m_cachestart.tv_usec / changed);
    e2eavg += (avg_ms.m_cachedone.tv_usec / changed);
    e2eavg += (avg_ms.m_distillstart.tv_usec / changed);
    e2eavg += (avg_ms.m_wbstart.tv_usec / changed);
    e2eavg += (avg_ms.m_wbdone.tv_usec / changed);
#else
    e2eavg = (avg_ms.m_headersdone.tv_usec / changed);
#endif
    /* use EWMA formula */

    moving_e2eavg = (w * e2eavg) + ((1-w) * old_e2eavg) + 0.5;

    /* 0.5 added to get rounding rather than truncation */

    if (moving_e2eavg != old_e2eavg) {
      MON_STATS("End-to-end latency EWMA msec", moving_e2eavg/1000.0);
      MON_STATS("Threads successfully polled", changed);
      MON_STATS("Threads reporting bogusly", bogus);
    }
    changed = 0;
    old_e2eavg = moving_e2eavg;
  }
}
#endif

static void
compute_ewma_reqs_sec(int report_interval, int asymptote)
{
  /* for computing EWMA of requests/sec */
  static UINT32 old_n_httpreqs = 0;
  static int old_reqs_sec = 0;
  static double w = 0.85;
  extern UINT32 n_httpreqs;
  int reqs_sec;
  int reqs_sec_this_period;

  /*
   *  compute Exponentially Weighted Moving Average (EWMA) of requests
   *  per second using:
   *  Average(t) = w * Measurement(t) + (1-w) * Average(t-1)
   *
   *  We use delta_t = every other report.
   */

  if (report_interval >= 1)
    reqs_sec_this_period = (n_httpreqs - old_n_httpreqs) /
      (report_interval<<1);
  else
    reqs_sec_this_period = ((n_httpreqs - old_n_httpreqs) * 
			    -(report_interval>>1));

  reqs_sec = (w * reqs_sec_this_period) + ((1-w) * old_reqs_sec) + 0.5;
  /* note, add 0.5 to round rather than truncate.  */
  old_n_httpreqs = n_httpreqs;
  
  if (reqs_sec != old_reqs_sec) {
    MON_STATS("Requests/sec EWMA", reqs_sec);
  }
  old_reqs_sec = reqs_sec;
}

/*
 *  Compute the deltas in thread state since last time, and send them to the
 *  monitor.  Also send along thread state info for the next NUM_ASYMPTOTE
 *  threads in round-robin fashion ("asymptotically reliable updates").
 */
static void
compute_thread_state_deltas(int asymptote)
{
  static thread_state_t *old_thread_state = NULL;
  static char *msg = NULL;
  static char args[400];
  extern Inst *thread_inst;
  int i, j, len, changed;
  
  if (old_thread_state == NULL) {
    /* one-time initialization */
    old_thread_state = SAFEMALLOC(nthreads, thread_state_t);
    for (i=0; i<nthreads; i++)
      old_thread_state[i] = thread_inst[i].state;
    msg = SAFEMALLOC((nthreads + NUM_ASYMPTOTE)*8+1, char);
    sprintf(args, "Array %d %d", nthreads, THREAD_STATE_MAX);
  }

  /*
   *  Generate thread state "deltas" vector
   */

  len = changed = 0;
  for (i=0; i<nthreads; i++) {
    if (thread_inst[i].state != old_thread_state[i]) {
      len += sprintf(msg+len, "%d=%d,", i, thread_inst[i].state);
      old_thread_state[i] = thread_inst[i].state;
      changed = 1;
    }
  }

  /* 
   * send at least the asymptote information, even if no threads have 
   * changed state
   */
  for (i=0; i<NUM_ASYMPTOTE; i++) {
    j = (asymptote + i) % nthreads;
    len += sprintf(msg+len, "%d=%d,", j, thread_inst[j].state);
  }
    
  msg[len-1] = 0;
  MonitorClient_Send(gMon, "Relaxen und watchen das Blinkenlights", msg, args);
}


  
  /*
 * Stub functions: Yatin will add the real thing in a 
 * separate file
 */
void INST_start_info_munging()
{
}

void
INST_munge_info(int thrindex, struct inst_milestones *milestone)
{
}

void
INST_end_info_munging()
{
}
@


1.14
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d263 1
a263 1
  static UINT32 old_nreqs = 0;
d266 1
a266 1
  extern UINT32 nreqs;
d279 2
a280 1
    reqs_sec_this_period = (nreqs - old_nreqs) / (report_interval<<1);
d282 2
a283 1
    reqs_sec_this_period = ((nreqs - old_nreqs) * -(report_interval>>1));
d287 1
a287 1
  old_nreqs = nreqs;
@


1.13
log
@fixed TACCutils bug that sometimes caused next_entity to enter infinite
loop.  beginning frontend cleanup to separate service-specific stuff
from core stuff.  ifdef'd out the instrumentation code in
httpsupport.c:parse_status_and_headers, which was likely causing
segfaults.  removed sbrk() monitoring from thr_mon.c because it was
bogus.  tested the Bypass feature for big pages (it works) and set
bypass threshold to about 1.5MB in clib.h.  monitor window is now
resizable though not all the fields resize intelligently.
@
text
@d17 1
a17 1
#include "proxy.h"
a23 1
static void compute_loadavg(void);
d75 1
a75 1
inst_set_thread_state(int thrindex, thread_state_t state)
d90 1
a90 1
inst_begin_timestamp(int thrindex)
d111 1
a111 1
inst_end_timestamp(int thrindex)
d348 1
a348 1
void inst_start_info_munging()
d353 1
a353 1
inst_munge_info(int thrindex, struct inst_milestones *milestone)
d358 1
a358 1
inst_end_info_munging()
@


1.13.4.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d17 1
a17 1
#include "config_tr.h"
d76 1
a76 1
INST_set_thread_state(int thrindex, thread_state_t state)
d91 1
a91 1
INST_begin_timestamp(int thrindex)
d112 1
a112 1
INST_end_timestamp(int thrindex)
d349 1
a349 1
void INST_start_info_munging()
d354 1
a354 1
INST_munge_info(int thrindex, struct inst_milestones *milestone)
d359 1
a359 1
INST_end_info_munging()
@


1.13.4.2
log
@*** empty log message ***
@
text
@d24 1
@


1.12
log
@debugging/monitoring function interface in frontend cleaned up.  change to xs/Makefile.PL.in to avoid spurious double initialization of stuff in libdist.a when clib.so was dynamically loaded.
@
text
@a39 1
  UINT32 sbrk_value  = 0, old_sbrk_value = 0;
a61 7

    /* report how much core the OS thinks we're using */
    sbrk_value = (UINT32)sbrk(0);
    if (sbrk_value != old_sbrk_value) {
      MON_STATS("Sbrk memory usage", sbrk_value);
      old_sbrk_value = sbrk_value;
    }
@


1.11
log
@added sbrk monitoring to frontend
@
text
@d187 2
a188 1
        MON_LOG_MSG("Measurement suppressed: potential race condition\n");
d204 2
a205 1
          MON_LOG_MSG_2("WARNING! thread %d updated more than once\n", i);
@


1.10
log
@added sbrk monitoring to frontend
@
text
@d40 1
d65 5
a69 1
    MON_STATS("Sbrk memory usage", (UINT32)sbrk(0));
@


1.9
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@d16 1
d62 4
@


1.8
log
@*** empty log message ***
@
text
@d17 3
@


1.7
log
@commented out compute_loadavg calls, since the metric turns out to be obsolete
@
text
@d128 1
d251 1
a251 1

@


1.6
log
@*** empty log message ***
@
text
@d27 1
d31 1
d49 1
a49 1
    compute_loadavg();
d134 2
a135 1
  struct inst_milestones local_ms, avg_ms;
d139 1
d143 1
d167 3
a169 2
    if ((in->readable[j=0])
        || (in->readable[j=1])) {
d176 1
d194 1
d213 5
d224 1
d226 9
a234 7
    e2eavg += (avg_ms.m_headersdone.tv_usec /= changed);
    e2eavg += (avg_ms.m_cachestart.tv_usec /= changed);
    e2eavg += (avg_ms.m_cachedone.tv_usec /= changed);
    e2eavg += (avg_ms.m_distillstart.tv_usec /= changed);
    e2eavg += (avg_ms.m_wbstart.tv_usec /= changed);
    e2eavg += (avg_ms.m_wbdone.tv_usec /= changed);

d242 1
a242 1
      MON_STATS("End-to-end latency EWMA", moving_e2eavg);
d332 1
a332 1
  MonitorClient_Send(gMon, "Thread State", msg, args);
@


1.5
log
@Added "loadavg" instrumentation in thr_mon.c, though it doesn't really
work yet.  Broke out instrumentation into separate funcs for
readability.  minor bug fix (malloc -> alloca) in httpgo.c.  moved
monitor debugging macros from proxy.h into debug.h.  frontend now
bypasses original if size is below default threshold, or if distiller
cannot be launched.
@
text
@d28 1
a28 1
(((t1).tv_sec-(t2).tv_sec)*1000000.0+((t1).tv_usec-(t2).tv_usec))
d30 1
a30 1
     void *
a34 1
  char args[400];
d47 3
a51 2
      compute_thread_state_deltas(asymptote);
      compute_loadavg();
d100 1
a100 2
 *  field to 1.  to preserve the invariant that at most one buffer has 
 *  readable=1, set the other buffer's readable field to zero first.
d111 1
a111 1
  i->readable[buf ^ 1] = 0;
a112 1
  i->readable[buf] = 1;
d129 1
a129 1
  int changed;
d133 1
d135 1
a136 1
  static UINT32 moving_e2eavg = 0;
d138 2
a139 1
  
d148 5
a152 1
  changed = 0;
a164 3
      /* set averages to zero */
      memset(&avg_ms, 0, sizeof(avg_ms));
      /* BUG::really want test-and-set(in->readable[j]) */
d166 2
a167 1
        MON_LOG_MSG("Measurement suppressed due to potential race\n");
d169 1
a169 1
        continue;
d179 1
d182 2
a183 2
          MON_LOG_MSG("WARNING! thread %d updated more than once\n",
                  i, in->last_report);
d189 2
a190 2
           / local_ms.inputsize);
        avg_ms.m_headersdone.tv_usec +=
d192 2
a193 2
           / local_ms.inputsize);
        avg_ms.m_headersdone.tv_usec +=
d195 2
a196 2
           / local_ms.inputsize);
        avg_ms.m_headersdone.tv_usec +=
d198 2
a199 2
           / local_ms.inputsize);
        avg_ms.m_headersdone.tv_usec +=
d201 2
a202 2
           / local_ms.inputsize);
        avg_ms.m_headersdone.tv_usec +=
d204 1
a204 1
           / local_ms.inputsize);
a206 1
    inst_end_info_munging();
d209 1
a209 1
  if (changed) {
d222 1
d225 7
a231 1
    MON_STATS("End-to-end latency EWMA", moving_e2eavg);
d263 4
a267 2
  
  MON_STATS("Requests/sec EWMA", reqs_sec);
@


1.4
log
@got Makefile dependencies in order
@
text
@d18 4
d23 2
d27 2
d30 1
a30 1
void *
a34 5
  extern Monitor *gMon;
  extern Inst *thread_inst;

  /* for thread status reporting */
  char *msg=NULL;
d36 1
a36 4
  struct inst_milestones local_ms; /* local var for holding milestone info */
  register int i, len;
  int asymptote=0, j, max_msg_len=0;
  int changed;
a37 16
  thread_state_t *old_thread_state;

  /* for computing EWMA of requests/sec */
  int reqs_sec, old_reqs_sec;
  extern UINT32 nreqs;
  UINT32 old_nreqs;
  double w = 0.9;

  reqs_sec = old_reqs_sec = 0;
  old_nreqs = 0;

  old_thread_state = SAFEMALLOC(nthreads, thread_state_t);
  for (i=0; i<nthreads; i++)
    old_thread_state[i] = thread_inst[i].state;
  max_msg_len = (nthreads + NUM_ASYMPTOTE)*8;
  msg = SAFEMALLOC(max_msg_len + 1, char);
a40 1
    sprintf(args, "Array %d %d", nthreads, THREAD_STATE_MAX);
a47 55
    /*
     *  compute Exponentially Weighted Moving Average (EWMA) of requests
     *  per second using:
     *  Average(t) = w * Measurement(t) + (1-w) * Average(t-1)
     *
     *  We use delta_t = every other report, w = 0.9.
     */

    if (report_this_time) {
      int reqs_sec_this_period;

      if (report_interval >= 1)
        reqs_sec_this_period = (nreqs - old_nreqs) / (report_interval<<1);
      else
        reqs_sec_this_period = ((nreqs - old_nreqs) * -(report_interval>>1));

      reqs_sec = (w * reqs_sec_this_period) + ((1-w) * old_reqs_sec) + 0.5;
      /* note, add 0.5 to round rather than truncate.  */
      old_nreqs = nreqs;
      old_reqs_sec = reqs_sec;

      MON_STATS("Requests/sec EWMA", reqs_sec);
    }
    /*
     *  Generate thread state "deltas" vector
     */
    len =  0;
    changed = 0;
    for (i=0; i<nthreads; i++) {
      if (thread_inst[i].state != old_thread_state[i]) {
        len += sprintf(msg+len, "%d=%d,", i, thread_inst[i].state);
        old_thread_state[i] = thread_inst[i].state;
        changed = 1;
      }
    }

    /* 
     * send at least the asymptote information, even if no threads have 
     * changed state
     */
    for (i=0; i<NUM_ASYMPTOTE; i++) {
      j = (asymptote + i) % nthreads;
      len += sprintf(msg+len, "%d=%d,", j, thread_inst[j].state);
    }
    
    msg[len-1] = 0;
    MonitorClient_Send(gMon, "Thread State", msg, args);

    /*
     *  send the "performance" information.  For each thread, see whether the
     * thread has something to report  (the "buffer readable" flag is set for 
     * one of the thread's two reporting buffers).  If so, aggregate the
     * information, and turn off the readable flag (so we won't report stale
     * information again next time).
     */
d49 3
a51 45
      changed = 0;
      inst_start_info_munging();
      for (i=0; i<NUM_ASYMPTOTE; i++) {
	int thridx = (asymptote+i) % nthreads;
        Inst *in = &thread_inst[thridx];
        if ((in->readable[j=0])
            || (in->readable[j=1])) {
          changed++;
	  local_ms = in->ms[j];
          if (in->readable[j]) {
            in->readable[j] = 0;
            if (in->last_report > 1) {
              fprintf(stderr, "** WARNING! thread %d updated %lu times\n",
                      i, in->last_report);
            }
            in->last_report = 0;
            /* hasn't changed since we started reading; so report the measurement.
             * note we set this to 0, which might (race condition) invalidate a
             * good measurement currently being taken, but certainly prevents us
             * from reporting the same measurement twice.
             *
             * Note that if the comparison and assignment above were an atomic
             *  test-and-set, this code would be truly race-free.
             */
	    sprintf(args, "%7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu "
		    "%7lu.%lu %7lu.%lu\n",
		    local_ms.m_arrival.tv_sec, local_ms.m_arrival.tv_usec,
		    local_ms.m_headersdone.tv_sec, 
		    local_ms.m_headersdone.tv_usec,
		    local_ms.m_cachestart.tv_sec,local_ms.m_cachestart.tv_usec,
		    local_ms.m_cachedone.tv_sec, local_ms.m_cachedone.tv_usec,
		    local_ms.m_distillstart.tv_sec, 
		    local_ms.m_distillstart.tv_usec,
		    local_ms.m_wbstart.tv_sec, local_ms.m_wbstart.tv_usec,
		    local_ms.m_wbdone.tv_sec, local_ms.m_wbdone.tv_usec);
	    
            fprintf(stderr, args);
	    inst_munge_info(thridx, &local_ms);
          } else {                /* !(in->readable[j]) */
            fprintf(stderr, "***Measurement suppressed due to potential race\n");
          }
        }
      }
      inst_end_info_munging();
      fprintf(stderr, " ------- Reported on %d threads\n", changed);
d121 1
a124 2
  int i;

d128 11
d140 115
d256 3
d260 51
@


1.3
log
@Modified thr_mon.c to allow me to hook in my instrumentation code
@
text
@a16 1
#include "thr_cntl.h"
@


1.2
log
@*** empty log message ***
@
text
@d34 1
d123 1
d125 2
a126 1
        Inst *in = &thread_inst[(asymptote+i) % nthreads];
d130 1
a130 9
          sprintf(args,
                  "%7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu %7lu.%lu\n",
                  in->ms[j].m_arrival.tv_sec, in->ms[j].m_arrival.tv_usec,
                  in->ms[j].m_headersdone.tv_sec, in->ms[j].m_headersdone.tv_usec,
                  in->ms[j].m_cachestart.tv_sec, in->ms[j].m_cachestart.tv_usec,
                  in->ms[j].m_cachedone.tv_sec, in->ms[j].m_cachedone.tv_usec,
                  in->ms[j].m_distillstart.tv_sec, in->ms[j].m_distillstart.tv_usec,
                  in->ms[j].m_wbstart.tv_sec, in->ms[j].m_wbstart.tv_usec,
                  in->ms[j].m_wbdone.tv_sec, in->ms[j].m_wbdone.tv_usec);
d134 1
a134 1
              fprintf(stderr, "** WARNING! thread %d updated %d times\n",
d146 12
d159 1
d165 1
d246 17
@


1.1
log
@added stuff to do timestamp monitoring at various interesting points in
a worker thread's lifetime.  also split out monitoring stuff into its
own file thr_mon.c.
@
text
@d138 5
d200 1
d224 10
@
