head	1.2;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.2
	pre-yatin-merge:1.2
	fox-dev:1.1.2.1;
locks; strict;
comment	@ * @;


1.2
date	97.08.30.21.33.58;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.08.15.03.43.34;	author fox;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.08.15.03.43.34;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@/*
 *  comm_http.h: headers for HTTP-specific communication functions.
 */

#ifndef _COMM_HTTP_H
#define _COMM_HTTP_H

/*
 *  Functions in comm_http.c for reading from client
 */

#define READ_ALL_HEADERS  ((int)(-1))

#define PERF_HTTP_HEADER_BLOCKSIZE  1024 /* block size for reading headers */

int readline_or_timeout(Request *hp, int nbytes, char *optional_buffer);
HTTP_Status parse_status_and_headers(Request *hp);

/*
 *  Functions in httpsupport.c for sending to client connection
 */

void send_content(const char *content, int len, const char *mimetype, int sock);
void http_error_return(Request *h, HTTP_Status status);
void tunnel(Request *r);
void complete_bypass(Request *r);

#endif /* ifndef _COMM_HTTP_H */
@


1.1
log
@file comm_http.h was initially added on branch fox-dev.
@
text
@d1 28
@


1.1.2.1
log
@*** empty log message ***
@
text
@a0 28
/*
 *  comm_http.h: headers for HTTP-specific communication functions.
 */

#ifndef _COMM_HTTP_H
#define _COMM_HTTP_H

/*
 *  Functions in comm_http.c for reading from client
 */

#define READ_ALL_HEADERS  ((int)(-1))

#define PERF_HTTP_HEADER_BLOCKSIZE  1024 /* block size for reading headers */

int readline_or_timeout(Request *hp, int nbytes, char *optional_buffer);
HTTP_Status parse_status_and_headers(Request *hp);

/*
 *  Functions in httpsupport.c for sending to client connection
 */

void send_content(const char *content, int len, const char *mimetype, int sock);
void http_error_return(Request *h, HTTP_Status status);
void tunnel(Request *r);
void complete_bypass(Request *r);

#endif /* ifndef _COMM_HTTP_H */
@
