head	1.7;
access;
symbols
	Yatin-final:1.7
	Yatin:1.7.0.2
	pre-yatin-merge:1.7
	transend-beta2:1.6
	fox-dev:1.6.8.2
	frontend-ng:1.6
	transend-beta-latest:1.6
	Aggregators:1.6
	NoAggregators:1.6
	iang:1.6.0.4
	transend-beta:1.6.0.2
	SOSP:1.6
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@ * @;


1.7
date	97.08.30.21.34.05;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.02.19.01.27.43;	author aspolito;	state Exp;
branches
	1.6.4.1
	1.6.8.1;
next	1.5;

1.5
date	97.02.12.02.59.15;	author aspolito;	state Exp;
branches;
next	1.4;

1.4
date	97.02.10.22.01.22;	author aspolito;	state Exp;
branches;
next	1.3;

1.3
date	97.02.07.22.47.51;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.12.11.05.25.46;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.08.01.50.42;	author fox;	state Exp;
branches;
next	;

1.6.4.1
date	97.05.06.23.49.29;	author iang;	state Exp;
branches;
next	;

1.6.8.1
date	97.08.11.04.12.02;	author fox;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	97.08.15.03.42.57;	author fox;	state Exp;
branches;
next	;


desc
@@


1.7
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@#ifndef _USERPREF_H
#define _USERPREF_H

#include "proxyinterface.h"

typedef unsigned long userkey;
#define USERKEY_NULL ((userkey)NULL)
#define USERCACHE_SIZE 401
#define USERCACHE_MODE 0644

/*
 *  BUG::most of what's below does NOT need to be exported
 */
typedef struct userprefscache {
  userkey key;
  ArgumentList al;
} UserPrefsCache;

gm_Bool   init_prefs(const char *dbfile);
void  end_prefs();

int   get_userprefs(userkey ukey, ArgumentList *p);
int   get_userprefs_with_write_intent(userkey ukey, ArgumentList *p);
void  set_userprefs(userkey ukey, ArgumentList *p);
int   set_oneuserpref(userkey ukey, Argument *a);

gm_Bool  parse_and_change_prefs(const char *url, userkey ukey, char *errstr);
gm_Bool   parse_prefs_request(int sock);
gm_Bool is_changepref_url(const char *url);
gm_Bool is_getpref_url(const char *url);
gm_Bool is_setpref_url(const char *url);

void send_prefs(ArgumentList *prefs, int sock);
void send_change_prefs_page(userkey k, ArgumentList *current_prefs, int sock);

#endif /* ifndef _USERPREF_H */
@


1.6
log
@changes so that preferences are changed with an http://ChangePrefs
not by connecting to a seperate port
@
text
@d4 1
a4 2
#include "proxy.h"
#include "distinterface.h"
d11 3
a13 5
typedef struct userprefs {
  int nargs;
  Argument arg[MAX_ARGS];
} ArgumentList;

d21 1
d26 2
d29 6
a34 1
gm_Bool remove_from_arglist(UINT32 id, ArgumentList *al);
@


1.6.8.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d4 2
a5 1
#include "proxyinterface.h"
d12 5
a16 3
/*
 *  BUG::most of what's below does NOT need to be exported
 */
a23 1

a27 2

gm_Bool  parse_and_change_prefs(Request *r);
d29 1
a29 6
gm_Bool is_changepref_url(const char *url);
gm_Bool is_getpref_url(const char *url);
gm_Bool is_setpref_url(const char *url);

void send_prefs(ArgumentList *prefs, int sock);
void send_change_prefs_page(userkey k, ArgumentList *current_prefs, int sock);
@


1.6.8.2
log
@*** empty log message ***
@
text
@d27 1
a27 1
gm_Bool  parse_and_change_prefs(const char *url, userkey ukey, char *errstr);
@


1.6.4.1
log
@L0 works; sending and registering encrypted URLs works
@
text
@d7 2
a8 5
typedef struct userkey_s {
    char *keydata;
    unsigned int keylen;
} userkey;
extern const userkey USERKEY_NONE;
a29 1
int   userkey_cmp(userkey a, userkey b);
@


1.5
log
@proxy now uses user prefs from database
@
text
@a27 1
gm_Bool   init_parse_uprefs(UINT16 port);
@


1.4
log
@real user prefs implementation
@
text
@d30 1
@


1.3
log
@User prefs skeleton working
@
text
@d7 1
a7 1
typedef void * userkey;
d9 2
d17 5
d23 5
a29 2
int   get_userprefs(userkey key, ArgumentList *prefs);
int   set_userprefs(userkey key, ArgumentList *new_prefs);
@


1.2
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d16 2
@


1.1
log
@configure script now generates include path automatically
@
text
@d4 2
a5 8
#include <config.h>
#include <proxy.h>

typedef struct userpref {
  unsigned char bpp;
  unsigned char monochrome;
  UINT16 screenx, screeny;
} *userpref;
d10 8
a17 3
userpref       get_userprefs(userkey key);
int            set_userprefs(userkey key, userpref new_prefs);
userpref       copy_prefs(userpref dest, const userpref src);
@
