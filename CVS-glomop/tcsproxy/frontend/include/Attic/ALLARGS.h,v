head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	97.03.05.00.30.53;	author fox;	state dead;
branches;
next	1.5;

1.5
date	97.03.04.04.31.22;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.02.27.03.10.47;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.02.24.20.25.02;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.02.21.07.35.05;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.02.18.23.26.23;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Added "loadavg" instrumentation in thr_mon.c, though it doesn't really
work yet.  Broke out instrumentation into separate funcs for
readability.  minor bug fix (malloc -> alloca) in httpgo.c.  moved
monitor debugging macros from proxy.h into debug.h.  frontend now
bypasses original if size is below default threshold, or if distiller
cannot be launched.
@
text
@/*
 * Arguments that all distillers (as well as the frontend) can possibly 
 * understand.
 *
 * FRONT_NO_DISTILL - integer argument
 *      If this argument is <> 0 then the distiller should not distill this
 *      request.
 *
 * FRONT_RESIZE - integer argument
 *      If this argument <> 0 then the distiller should resize any
 *      item that might be shruken, such as an image.
 *
 * FRONT_MTU - the payload MTU for the user's network (e.g. 1500 or so
 *      for PPP).  In general, if content is less than this big, it
 *      doesn't pay to distill.
 *
 * FRONT_RETRY_DISTILL - the number of times to retry a distillation if the
 *      return code is distConnectionBroken (indicating distiller coredumped or
 *      died). This should be bounded, in order to avoid systematic killing of
 *      a distiller by the same request repeatedly.
 */
#define FRONT_SIG 0

#define FRONT_NO_DISTILL  FRONT_SIG+1
#define FRONT_RESIZE      FRONT_SIG+2
#define FRONT_MTU         FRONT_SIG+3
#define FRONT_RETRY_DISTILL   FRONT_SIG+4

/*
 *  ARGS.h for gif_munge distiller
 *
 *  The Args structure can contain the following:
 *  arg id GIFMUNGE_MODE (int): distillation mode
 *     =0  output should target particular image dimensions (to follow)
 *     >0  output should target this output byte size
 *     <0  this is the (negative) reciprocal of the scale factor
 *  arg id GIFMUNGE_NEWX (int): new pixel dimension for x (negative: for
 *     y)
 *  arg id GIFMUNGE_BPP (int):
 *      Max bits per pixel for output; negative means grayscale
 *  arg id GIFMUNGE_RESCALE (int):
 *      If present, rescale image (using pnmscale) back to original
 *     pixel size before returning it.  (result is "fuzzy" image)
 *  arg id GIFMUNGE_ABSMAX (int):
 *      No matter what, make sure resulting image is no larger than this
 *      X dimension (negative: this Y dimension)
 */

/* the "signature" of the gif_munge distiller: */
/* #define GIFMUNGE_SIG  (('G' << 24) | ('I' << 16) | ('F' << 8) | 'M') */
#define GIFMUNGE_SIG     1000

#define GIFMUNGE_MODE    GIFMUNGE_SIG+1
#define GIFMUNGE_NEWX    GIFMUNGE_SIG+2
#define GIFMUNGE_BPP     GIFMUNGE_SIG+3
#define GIFMUNGE_RESCALE GIFMUNGE_SIG+4
#define GIFMUNGE_ABSMAX  GIFMUNGE_SIG+5
@


1.5
log
@got Makefile dependencies in order
@
text
@@


1.4
log
@added frontend reqs/sec meter, retries for distConnectionBroken
@
text
@d16 5
@


1.3
log
@restructured httpgo.c, added a new arg for MTU to frontend ARGS.h
@
text
@d22 1
a22 1

@


1.2
log
@Fixed the lexer interface for digesting HTML tag constructs; some
changes to Makefile to support this, added a source file munge_magic.c.
Also modified test_main.c in gif_munger to make it a more portable test
harness for distillers - still some work to be done on this.  HTML
munger still works normally but uses better interface.  Next: magic URL's.
@
text
@d2 23
@


1.1
log
@This needs to be around...(why wasn't it?)
@
text
@d1 19
a19 1
/* Include the argument definition lists for all of the distillers */
d21 9
a29 3
#include "../../gif_munger/src/ARGS.h"
#include "../../giftojpg_munger/include/GIFJPG_ARGS.h"
#include "../../jpg_munger/include/JPG_ARGS.h"
@
