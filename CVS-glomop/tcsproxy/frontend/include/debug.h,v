head	1.13;
access;
symbols
	Yatin-final:1.13
	Yatin:1.13.0.2
	pre-yatin-merge:1.13
	transend-beta2:1.9
	fox-dev:1.9.4.1
	frontend-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.7.0.4
	transend-beta:1.7.0.2
	SOSP:1.6
	merged_preintegrate:1.5
	heisenbug:1.5
	PRE_INTEGRATION:1.5
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	97.10.28.00.27.54;	author iang;	state Exp;
branches;
next	1.12;

1.12
date	97.10.25.00.38.31;	author gribble;	state Exp;
branches;
next	1.11;

1.11
date	97.09.06.02.29.45;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.08.30.21.33.59;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.07.24.18.50.00;	author fox;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	97.05.11.11.23.27;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.04.09.01.31.09;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.03.05.00.30.53;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.12.12.02.16.47;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.12.11.05.25.45;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.11.28.14.27.44;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.11.08.01.50.40;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.10.25.00.28.42;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.25.00.28.42;	author fox;	state Exp;
branches;
next	;

1.9.4.1
date	97.08.11.04.12.00;	author fox;	state Exp;
branches;
next	;


desc
@@


1.13
log
@some log fixen
@
text
@/*
 *  Debugging flags and definitions, and logging flags and definitions
 */

#ifndef _DEBUG_HEADER_H
#define _DEBUG_HEADER_H

#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <time.h>
#include "libmon.h"
#include "userpref.h"

/**** Logging definitions and structures ****/

#ifdef LOGGING

#define MAX_LOGMSG_LEN 512
struct loginfo {
  char url[MAX_LOGMSG_LEN];
  time_t date;
  INT32 size_before;
  INT32 size_after;            /* 0 = no distillation, <0 = dist failed */
  userkey ipaddr;
  INT32 http_response;
};

  /* This one is used to initialize a loginfo structure */
#define LOGGING_init_loginfo(lp)  \
         memset((void *)lp, 0, sizeof(struct loginfo)), \
         (lp)->date = time(NULL);

  /* And these are used to do the actual logging */
char *init_logging(void);
void gm_log(char *msg);
void log_close(void);

#else  /* !LOGGING */

#define init_logging() "true"
#define gm_log()
#define log_close()
#define LOGGING_init_loginfo(lp)

#endif /* LOGGING */



/**** Debugging primitives and structures ****/

#define DBG_THREAD      0x0001
#define DBG_HTTP        0x0002
#define DBG_PTM         0x0004
#define DBG_ADMIN       0x0008
#define DBG_CACHE       0x0010
#define DBG_MIME        0x0020
#define DBG_WING        0x0040
#define DBG_ALL         0xffff

#define FE_ERRMSGLEN    256

void _proxy_debug(const char *, const int, int, char *, ...);
void _proxy_errlog(const char *, const int, char *, ...);
void set_debug_mask(int);

#ifdef DEBUGGING
#define proxy_debug_1(x) _proxy_debug(__FILE__,__LINE__,(x))
#define proxy_debug_2(x,y) _proxy_debug(__FILE__,__LINE__,(x),(y))
#define proxy_debug_3(x,y,z) _proxy_debug(__FILE__,__LINE__,(x),(y),(z))
#define proxy_debug_4(x,y,z,w) _proxy_debug(__FILE__,__LINE__,(x),(y),(z),(w))
#define proxy_errlog_1(x) _proxy_errlog(__FILE__,__LINE__,(x))
#define proxy_errlog_2(x,y) _proxy_errlog(__FILE__,__LINE__,(x),(y))
#define proxy_errlog_3(x,y,z) _proxy_errlog(__FILE__,__LINE__,(x),(y),(z))
#define proxy_errlog_4(x,y,z,w) _proxy_errlog(__FILE__,__LINE__,(x),(y),(z),(w))
#else
#define proxy_debug_1(x)
#define proxy_debug_2(x,y)
#define proxy_debug_3(x,y,z)
#define proxy_debug_4(x,y,z,w)
#define proxy_errlog_1(x)
#define proxy_errlog_2(x,y)
#define proxy_errlog_3(x,y,z)
#define proxy_errlog_4(x,y,z,w)
#endif

extern Monitor *gMon;

#define MON_ERR        "Errors"
#define MON_LOGGING    "Messages"

#ifdef _TESTING_
#define MON_SEND(what,x) fprintf(stderr, (x))
#define MON_SEND_2(what,x,y) fprintf(stderr,(x),(y))
#define MON_SEND_3(what,x,y,z) fprintf(stderr,(x),(y),(z))
#define MON_SEND_4(what,x,y,z,w) fprintf(stderr,(x),(y),(z),(w))
#else  /* not _TESTING_ */
#define MON_SEND(what,x) \
    MonitorClient_Send(gMon,what,(x),MON_LOG)
#define MON_SEND_2(what,x,y) \
    { char __msg[FE_ERRMSGLEN]; \
      snprintf(__msg,FE_ERRMSGLEN-1,(x),(y)); \
      MonitorClient_Send(gMon,what,__msg,MON_LOG); \
    }
#define MON_SEND_3(what,x,y,z) \
    { char __msg[FE_ERRMSGLEN]; \
      snprintf(__msg,FE_ERRMSGLEN-1,(x),(y),(z)); \
      MonitorClient_Send(gMon,what,__msg,MON_LOG); \
    }
#define MON_SEND_4(what,x,y,z,w) \
    { char __msg[FE_ERRMSGLEN]; \
      snprintf(__msg,FE_ERRMSGLEN-1,(x),(y),(z),(w)); \
      MonitorClient_Send(gMon,what,__msg,MON_LOG); \
    }
#endif /* not _TESTING_ */

#define MON_STATS(f,v) \
    { char __msg[FE_ERRMSGLEN]; \
      snprintf(__msg,FE_ERRMSGLEN-1, "%d", (int)(v)); \
      MonitorClient_Send(gMon, (f), __msg, MON_SIMPLE); \
    }    
#define MON_LOAD(msg,f,v) \
    { sprintf((msg),"diff=%d,red",(int)(v)); \
      MonitorClient_Send(gMon, (f), (msg), MON_TIMECHART); \
    }                                                           
#define MON_INDICATORS(msg,f,n,v) \
    { int i,ndx=0; \
      for (i=0; i<(n); i++) { \
        ndx+=sprintf((msg)+ndx,"%d,",*(((int*)v)+i)); \
      } \
      msg[strlen(msg)-1] = 0; \
      MonitorClient_Send(gMon, (f), (msg), MON_ARRAY); \
    }

#endif /* _DEBUG_HEADER_H */
@


1.12
log
@Logging now works!  yaaay.
@
text
@d21 1
a21 1
  char url[255];
@


1.11
log
@Incorporated wingman protocol directly into the frontend.
@
text
@d2 1
a2 1
 *  Debugging flags and definitions
d5 3
d13 1
d15 1
a15 10
#ifdef INST
#define MAX_LOGMSG_LEN 512
char *init_logging(void);
void gm_log(char *msg);
void log_close(void);
#else  /* ! INST */
#define init_logging() "true"
#define gm_log()
#define log_close()
#endif /* INST */
d18 2
a27 1
#endif
d29 22
a50 7
#ifdef INST
#define INST_init_loginfo(lp)  memset((void *)lp, 0, sizeof(struct loginfo)), \
                                (lp)->date = time(NULL);
#else
#define INST_init_loginfo(lp)
#endif
  
d135 1
@


1.10
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@d47 1
@


1.9
log
@debugging/monitoring function interface in frontend cleaned up.  change to xs/Makefile.PL.in to avoid spurious double initialization of stuff in libdist.a when clib.so was dynamically loaded.
@
text
@a6 1
#include "libmon.h"
d9 1
a9 1
#include "userpref.h"
d22 1
d31 2
a32 1
  
d34 1
a34 1
#define init_loginfo(lp)  memset((void *)lp, 0, sizeof(struct loginfo)), \
d37 1
a37 1
#define init_loginfo(lp)
d80 6
d103 1
@


1.9.4.1
log
@armandos development version for rebuilding the frontend - do not use
@
text
@d7 1
d10 1
a10 1
#include "libmon.h"
a22 1
#ifdef LOGGING
d31 1
a31 2
#endif

d33 1
a33 1
#define INST_init_loginfo(lp)  memset((void *)lp, 0, sizeof(struct loginfo)), \
d36 1
a36 1
#define INST_init_loginfo(lp)
a78 6
#ifdef _TESTING_
#define MON_SEND(what,x) fprintf(stderr, (x))
#define MON_SEND_2(what,x,y) fprintf(stderr,(x),(y))
#define MON_SEND_3(what,x,y,z) fprintf(stderr,(x),(y),(z))
#define MON_SEND_4(what,x,y,z,w) fprintf(stderr,(x),(y),(z),(w))
#else  /* not _TESTING_ */
a95 1
#endif /* not _TESTING_ */
@


1.8
log
@changes for dataflow stuff, chaining stuff, aggregators
@
text
@d12 2
d15 1
a15 1
void gm_log(const char *fmt, ...);
d17 5
d32 1
d35 3
a37 1

d48 2
d76 14
a89 6
#define MON_LOG_MSG(x) \
    MonitorClient_Send(gMon,"Messages",(x),MON_LOG)
#define MON_LOG_MSG_2(x,y) \
    { char __msg[80]; \
      sprintf(__msg,(x),(y)); \
      MonitorClient_Send(gMon,"Messages",__msg,MON_LOG); \
d91 4
a94 6
#define MON_LOG_ERR(x) \
    MonitorClient_Send(gMon,"Errors",(x),MON_LOG)
#define MON_LOG_ERR_2(x,y) \
    { char __msg[80]; \
      sprintf(__msg,(x),(y)); \
      MonitorClient_Send(gMon,"Errors",__msg,MON_LOG); \
d96 1
d98 2
a99 2
    { char __msg[80]; \
      sprintf(__msg, "%d", (int)(v)); \
@


1.7
log
@added logging, which also resulted in shuffling around a lot of .h files and what goes into each
@
text
@d14 1
@


1.6
log
@Added "loadavg" instrumentation in thr_mon.c, though it doesn't really
work yet.  Broke out instrumentation into separate funcs for
readability.  minor bug fix (malloc -> alloca) in httpgo.c.  moved
monitor debugging macros from proxy.h into debug.h.  frontend now
bypasses original if size is below default threshold, or if distiller
cannot be launched.
@
text
@d8 20
@


1.5
log
@End to end path works via dispatch.c, some error reporting still broken and some things still hardcoded that shouldn't be
@
text
@d7 1
d40 34
@


1.4
log
@all the stubs work; now adding the dispatching functionality in newly
added dispatch.c
@
text
@d13 1
@


1.3
log
@Hack hack hack...fixed lots of small buglets..
@
text
@d11 2
@


1.2
log
@configure script now generates include path automatically
@
text
@d30 1
@


1.1
log
@Initial revision
@
text
@d5 3
@


1.1.1.1
log
@
@
text
@@
