head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	96.10.25.00.24.56;	author fox;	state dead;
branches;
next	1.4;

1.4
date	96.10.22.20.02.19;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.10.12.02.57.20;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.10.11.02.29.16;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.10.11.00.43.33;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@#include <proxy.h>
#include <stdio.h>
#include <unistd.h>

#define NTASKS 4*MAX_THREADS

int
main(ac,av)
     int ac;
     char *av[];
{
  int res;
  int j;
  task_t done[NTASKS];

  if ((res = make_threads()))
    exit(1);

  for (j=0; j<NTASKS; j++) {
    done[j].task_id = j;
    done[j].task_result_ptr = (void *)j;
    fprintf(stderr, "Dispatching task %d...\n",j);
    dispatch(&done[j]);
  }
  while (1) {
    sleep(1);
    for (j=0; j < NTASKS; j++) {
      if ((int)(done[j].task_result_ptr) > 0) {
        fprintf(stderr,"task %d = %d\n", j, (int)(done[j].task_result_ptr));
        done[j].task_result_ptr = (void *)(-1);
      }
    }
  }
}
@


1.4
log
@thread task queue works better now - a queue of tasks rather than a
queue of threads, duh
@
text
@@


1.3
log
@Threads have signs of life
@
text
@d14 1
a14 1
  result_t done[NTASKS];
a18 1

d20 2
a21 2
    THR_OP("", pthread_cond_init(&(done[j].cond)));
    done[j].result = 0;
d28 4
a31 2
      if (done[j].result != 0)
        break;
@


1.2
log
@*** empty log message ***
@
text
@d3 3
a12 1
  int thr;
d14 2
a15 1
  
d19 13
a31 3
  for (j=0; j<4 *MAX_THREADS; j++) {
    fprintf(stderr, "%d: Waking up a thread...\n",j);
    thr_dispatch();
a32 2
  while (1)
    ;
@


1.1
log
@*** empty log message ***
@
text
@d11 1
d13 1
a13 1
  if (res = make_threads())
d16 2
a17 4
  while(1) {
    fprintf(stderr,"thread:");
    scanf("%d", &thr);
    fprintf(stderr, "Waking up a thread...\n");
d20 2
@
