head	1.8;
access;
symbols
	Yatin-final:1.8
	Yatin:1.8.0.6
	pre-yatin-merge:1.8
	transend-beta2:1.8
	fox-dev:1.8
	gif_munger-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.5
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2;
locks; strict;
comment	@ * @;


1.8
date	97.04.27.06.22.46;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.04.26.01.31.58;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.04.16.01.18.38;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.02.21.07.35.09;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.02.04.05.39.58;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.01.29.04.13.26;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.12.06.04.30.26;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.23.03.33.07;	author fox;	state Exp;
branches;
next	;


desc
@@


1.8
log
@changed jpg munger to observe transparency/animation bailout for threshold size based on quality.  fixed gifmunger, but doesnt seem likely we will use it at this point.
@
text
@#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <ctype.h>
#include "distinterface.h"

unsigned char buf[65535];
void *out;

void usage(void) {
  fprintf(stderr, "Usage: test inputfilelist argId1 arg1 ... argIdN argN outDir > output\n");
  fprintf(stderr, "  argId is unsigned long; argtype is taken to be an int if\n");
  fprintf(stderr, "   arg begins with decimal digit, string otherwise\n");
  fprintf(stderr, "Inputfilelist is a file containing test input filenames,");
  fprintf(stderr, " one per line\n");
  fprintf(stderr, "outDir is directory for output files\n");
}
          

int
main(int argc, char *argv[])
{
  DistillerStatus st;
  UINT32 len;
  Argument args[12];
  int nargs = 0;
  gm_Bool bool;
  int i;
  char *k;
  FILE *f;
  char nextfile[255];
  DistillerInput in;
  DistillerOutput out;
  C_DistillerType distType;

  sprintf(distType.string, "test image/gif");
  
  if ((argc < 2) || (argc >= 2  &&  strncmp(argv[1], "-h", 2) == 0)) {
    usage();
    exit(1);
  }

  if ((f = fopen(argv[1], "r")) == NULL) {
    fprintf(stderr, "Can't open input file %s\n", argv[1]);
    exit(1);
  }


  for (i=2; i<argc-1; i += 2, nargs++) {
    SET_ARG_ID(args[nargs], strtoul(argv[i], (char**)NULL, 0));
    if (isdigit(*argv[i+1])) {
      SET_ARG_INT(args[nargs], strtol(argv[i+1], (char**)NULL, 0));
      fprintf(stderr, "Arg id %lu is %ld\n", ARG_ID(args[nargs]),
              ARG_INT(args[nargs]));
    } else {
      SET_ARG_STRING(args[nargs], argv[i+1]);
      fprintf(stderr, "Arg id %lu is \"%s\"\n", ARG_ID(args[nargs]),
              ARG_STRING(args[nargs]));
    }
  }

  if ((st = DistillerInit(distType)) != distOk) {
    fprintf(stderr, "DistillerInit failed: error %d\n", (int)st);
    exit(1);
  }

  strcpy(in.mimeType, "image/gif");
  while (fgets(nextfile, 254, f) != NULL) {
    char nextfile2[255];
    int fd;
    int count;

    nextfile[strlen(nextfile)-1] = 0;
    fd = open(nextfile, O_RDONLY);
    if (fd == -1) {
      fprintf(stderr, "Can't read %s, skipping\n", nextfile);
      continue;
    }
    for (len = 0;
         (count = read(fd, (void*)(buf+len), (sizeof(buf)-len))) > 0;
         len += count)
      ;
          
    fprintf(stderr, "Read %lu bytes from %s\n", len, nextfile);
    in.data = (void *)buf;
    in.length = len;
    fprintf(stderr,"Calling distiller main\n");
    st = DistillerMain(args,nargs,&in,&out,&bool);
    if (st != distOk) {
      fprintf(stderr, "DistillerMain failed: error %d\n", (int)st);
    }
    close(fd);
    strcpy(nextfile2, argv[argc-1]);
    if (nextfile2[strlen(nextfile2)-1] != '/')
      strcat(nextfile2,"/");
    k = strrchr(nextfile, '/');
    if (k)
      strcat(nextfile2, k+1);
    else
      strcat(nextfile2, nextfile);
    strcat(nextfile2, ".OUT");
    fd = open(nextfile2, O_CREAT | O_WRONLY | O_TRUNC, 0666);
    if (fd == -1) {
      fprintf(stderr, "Can't write %s, using stdout\n", nextfile2);
      fd = fileno(stdout);
    }
    len = write(fd, (const void *)out.data, (size_t)out.length);
    if (fd != fileno(stdout))
      close(fd);
    fprintf(stderr, "Wrote %lu of %lu bytes to %s\n", len, out.length, nextfile2);
    if (bool)
      DistillerFree(out.data);
  }
}

void *DistillerMalloc(size_t size) { return (void*)malloc(size); }
void DistillerFree(void *ptr) { free(ptr); }

MonitorClientID DistillerGetMonitorClientID(void) { return(NULL); }
gm_Bool MonitorClientSend(MonitorClientID client, const char *fieldID, 
                          const char *value, const char *script)
{ return gm_True; }
Argument *
getArgumentFromId(Argument *args, int numberOfArgs, UINT32 id)
{
  Argument *ptr;
  if (args==NULL) return NULL;
  for(ptr=args; ptr < args+numberOfArgs; ptr++) {
    if (ARG_ID(*ptr)==id) return ptr;
  }
  return NULL;
}

  
@


1.7
log
@GIF munger now works and handles transparent gifs correctly
@
text
@d14 1
a14 1
  fprintf(stderr, "Usage: test inputfilelist argId1 arg1 ... argIdN argN  > output\n");
d19 1
a45 1

d52 1
a52 1
  for (i=2; i<argc; i += 2, nargs++) {
a93 1
      exit(1);
d96 3
a98 1
    strcpy(nextfile2, "/tmp/");
@


1.6
log
@More changes....fixed up distillers so that the DistillerInit() function
accepts type information.
@
text
@d31 1
d40 1
a40 1
  if (argc >= 2  &&  strncmp(argv[1], "-h", 2) == 0) {
d45 1
d98 5
a102 1
    strcat(nextfile2, nextfile);
d112 1
a112 1
    fprintf(stderr, "Wrote %lu of %lu bytes to %s\n", len, out.length, nextfile);
@


1.5
log
@Fixed the lexer interface for digesting HTML tag constructs; some
changes to Makefile to support this, added a source file munge_magic.c.
Also modified test_main.c in gif_munger to make it a more portable test
harness for distillers - still some work to be done on this.  HTML
munger still works normally but uses better interface.  Next: magic URL's.
@
text
@d35 3
d63 1
a63 1
  if ((st = DistillerInit()) != distOk) {
@


1.4
log
@fixed logic bug that caused ignored images not to be processed correctly
@
text
@a8 2
#include "pnm.h"
#include "gif_munge.h"
d78 1
a78 1
         (count = read(fd, (void*)(buf+len), (size_t)65535)) > 0;
d85 1
a85 1
    DEBUG("Calling distiller main\n");
d97 2
a98 2
      fprintf(stderr, "Can't write %s, skipping\n", nextfile2);
      continue;
d101 2
a102 1
    close(fd);
d111 17
@


1.3
log
@changed distiller interface to use struct DistillerInput/DistillerOutput in frontend,gif_munge,html_munge
@
text
@d2 2
d16 1
a16 1
  fprintf(stderr, "Usage: test argId1 arg1 ... argIdN argN  < input > output\n");
d19 2
a30 1
  UINT32 outlen;
d33 4
d43 7
a49 1
  for (i=1; i<argc; i += 2, nargs++) {
a61 2
  len = read(fileno(stdin), (char*)buf, (size_t)65535);
  fprintf(stderr, "Read %lu bytes\n", len);
d66 41
a106 5
  DEBUG("Calling distiller main\n");
  st = DistillerMain(args,nargs,buf,len,&out,&outlen,&bool);
  if (st != distOk) {
    fprintf(stderr, "DistillerMain failed: error %d\n", (int)st);
    exit(1);
a107 2
  fwrite((const void *)out, (size_t)outlen, 1, stdout);
  exit(0);
@


1.2
log
@*** empty log message ***
@
text
@d4 2
d13 7
d24 2
a25 2
  UINT32 len = read(fileno(stdin), (char*)buf, (size_t)65535);
  Argument *args = NULL;
d29 6
a34 1
  FILE *f;
d36 14
d51 2
a52 2
  if (DistillerInit() != distOk) {
    fprintf(stderr, "Foo!\n");
d58 1
a58 1
    fprintf(stderr, "Foo!\n");
d61 2
a62 3
  f = fopen("out", "w");
  fwrite((const void *)out, (size_t)outlen, 1, f);
  fclose(f);
d64 3
@


1.1
log
@*** empty log message ***
@
text
@d19 3
a21 2
  Bool bool;
  
d33 3
@
