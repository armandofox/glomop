head	1.21;
access;
symbols
	Yatin-final:1.21
	Yatin:1.21.0.2
	pre-yatin-merge:1.21
	transend-beta2:1.20
	fox-dev:1.20
	gif_munger-ng:1.18
	transend-beta-latest:1.18
	Aggregators:1.18
	NoAggregators:1.18
	iang:1.18.0.4
	transend-beta:1.18.0.2
	SOSP:1.15
	merged_preintegrate:1.6
	heisenbug:1.6
	PRE_INTEGRATION:1.5
	initia:1.1.1.2
	initial:1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	97.08.30.21.34.35;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	97.07.15.03.03.21;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	97.06.14.15.30.40;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.04.27.01.58.51;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	97.04.26.01.31.53;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	97.04.16.01.18.38;	author gribble;	state Exp;
branches;
next	1.15;

1.15
date	97.02.26.04.14.37;	author yatin;	state Exp;
branches;
next	1.14;

1.14
date	97.02.05.04.14.58;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.02.05.03.57.01;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	97.02.04.05.39.56;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.01.29.21.59.21;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	97.01.29.06.00.43;	author yatin;	state Exp;
branches;
next	1.9;

1.9
date	97.01.29.04.13.26;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.01.08.03.39.15;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.01.06.05.43.32;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.12.13.01.56.08;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.12.13.00.18.35;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.12.06.05.45.32;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.12.06.04.30.23;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.32.34;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.22.03.10.26;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.22.03.10.26;	author fox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.11.22.04.34.49;	author fox;	state Exp;
branches;
next	;


desc
@@


1.21
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@/*
 *  gif_munge.c
 *
 *  $Id: gif_munge.c,v 1.20 1997/07/15 03:03:21 fox Exp $
 *  Code stolen from various p{ng}m*.c programs by J. Poskanzer et al.
 *
 *  This code acts as a GIF distillation server for tcsproxy.
 *  Since multiple passes over the image may be required, but only one
 *  distillation will be in progress at any given time, double-buffering
 *  is used.  A "typical maximum" buffer is allocated and
 *  used for most distillation requests; the occasional request that
 *  would overflow this buffer allocates and then frees its own buffer,
 *  but in the common case we don't do any memory allocation.
 *
 *  See ARGS.h for the arguments to this distiller.
 */

#include "ppm.h"
#include "pnm.h"
#include "ppmcmap.h"
#include "gif_munge.h"
#include "../include/ARGS.h"
#include "../../frontend/include/ARGS.h"            /* to get frontend "quality" args */
#include <limits.h>
#include <string.h>
#include <math.h>
#include <stdio.h>
#include "distinterface.h"
#include <stdio.h>

/*
 *  for setjmp
 */

jmp_buf jumpbuffer;

MonitorClientID mon;

/*
 *  Lookup table to map beginner interface "quality" arg
 *  Each tuple is GIFMUNGE_MODE, GIFMUNGE_NEWX, GIFMUNGE_BPP,
 *  for quality values 0...4.  Note that GIFMUNGE_RESCALE is
 *  passed with each request: since it's only needed if original HTML didn't
 *  have size hints, HTML munger inserts it when needed.  Also note that
 *  GIFMUNGE_ABSMAX doesn't make sense for "quality" -- it's a client-specific
 *  thing. 
 */

static struct {
  INT32 q_mode;
  INT32 q_newsize;
  INT32 q_bpp;
} quality_table[] = {
  { -2, 0, 1 },                 /* lowest quality - does some scaling */
  { 0, 0, 1 },                  /* no scaling, 1 bit/pxl */
  { 0, 0, 2 },                  /* no scaling, 2 bit/pxl */
  { 0, 0, 4 },                  /* no scaling, 4 bit/pxl */
  { 0, 0, 8 },                  /* no scaling, 8 bit/pxl */
};


/* Lookup tables for fast RGB -> luminance calculation. */

static int times77[256] = {
	    0,    77,   154,   231,   308,   385,   462,   539,
	  616,   693,   770,   847,   924,  1001,  1078,  1155,
	 1232,  1309,  1386,  1463,  1540,  1617,  1694,  1771,
	 1848,  1925,  2002,  2079,  2156,  2233,  2310,  2387,
	 2464,  2541,  2618,  2695,  2772,  2849,  2926,  3003,
	 3080,  3157,  3234,  3311,  3388,  3465,  3542,  3619,
	 3696,  3773,  3850,  3927,  4004,  4081,  4158,  4235,
	 4312,  4389,  4466,  4543,  4620,  4697,  4774,  4851,
	 4928,  5005,  5082,  5159,  5236,  5313,  5390,  5467,
	 5544,  5621,  5698,  5775,  5852,  5929,  6006,  6083,
	 6160,  6237,  6314,  6391,  6468,  6545,  6622,  6699,
	 6776,  6853,  6930,  7007,  7084,  7161,  7238,  7315,
	 7392,  7469,  7546,  7623,  7700,  7777,  7854,  7931,
	 8008,  8085,  8162,  8239,  8316,  8393,  8470,  8547,
	 8624,  8701,  8778,  8855,  8932,  9009,  9086,  9163,
	 9240,  9317,  9394,  9471,  9548,  9625,  9702,  9779,
	 9856,  9933, 10010, 10087, 10164, 10241, 10318, 10395,
	10472, 10549, 10626, 10703, 10780, 10857, 10934, 11011,
	11088, 11165, 11242, 11319, 11396, 11473, 11550, 11627,
	11704, 11781, 11858, 11935, 12012, 12089, 12166, 12243,
	12320, 12397, 12474, 12551, 12628, 12705, 12782, 12859,
	12936, 13013, 13090, 13167, 13244, 13321, 13398, 13475,
	13552, 13629, 13706, 13783, 13860, 13937, 14014, 14091,
	14168, 14245, 14322, 14399, 14476, 14553, 14630, 14707,
	14784, 14861, 14938, 15015, 15092, 15169, 15246, 15323,
	15400, 15477, 15554, 15631, 15708, 15785, 15862, 15939,
	16016, 16093, 16170, 16247, 16324, 16401, 16478, 16555,
	16632, 16709, 16786, 16863, 16940, 17017, 17094, 17171,
	17248, 17325, 17402, 17479, 17556, 17633, 17710, 17787,
	17864, 17941, 18018, 18095, 18172, 18249, 18326, 18403,
	18480, 18557, 18634, 18711, 18788, 18865, 18942, 19019,
	19096, 19173, 19250, 19327, 19404, 19481, 19558, 19635 };
static int times150[256] = {
	    0,   150,   300,   450,   600,   750,   900,  1050,
	 1200,  1350,  1500,  1650,  1800,  1950,  2100,  2250,
	 2400,  2550,  2700,  2850,  3000,  3150,  3300,  3450,
	 3600,  3750,  3900,  4050,  4200,  4350,  4500,  4650,
	 4800,  4950,  5100,  5250,  5400,  5550,  5700,  5850,
	 6000,  6150,  6300,  6450,  6600,  6750,  6900,  7050,
	 7200,  7350,  7500,  7650,  7800,  7950,  8100,  8250,
	 8400,  8550,  8700,  8850,  9000,  9150,  9300,  9450,
	 9600,  9750,  9900, 10050, 10200, 10350, 10500, 10650,
	10800, 10950, 11100, 11250, 11400, 11550, 11700, 11850,
	12000, 12150, 12300, 12450, 12600, 12750, 12900, 13050,
	13200, 13350, 13500, 13650, 13800, 13950, 14100, 14250,
	14400, 14550, 14700, 14850, 15000, 15150, 15300, 15450,
	15600, 15750, 15900, 16050, 16200, 16350, 16500, 16650,
	16800, 16950, 17100, 17250, 17400, 17550, 17700, 17850,
	18000, 18150, 18300, 18450, 18600, 18750, 18900, 19050,
	19200, 19350, 19500, 19650, 19800, 19950, 20100, 20250,
	20400, 20550, 20700, 20850, 21000, 21150, 21300, 21450,
	21600, 21750, 21900, 22050, 22200, 22350, 22500, 22650,
	22800, 22950, 23100, 23250, 23400, 23550, 23700, 23850,
	24000, 24150, 24300, 24450, 24600, 24750, 24900, 25050,
	25200, 25350, 25500, 25650, 25800, 25950, 26100, 26250,
	26400, 26550, 26700, 26850, 27000, 27150, 27300, 27450,
	27600, 27750, 27900, 28050, 28200, 28350, 28500, 28650,
	28800, 28950, 29100, 29250, 29400, 29550, 29700, 29850,
	30000, 30150, 30300, 30450, 30600, 30750, 30900, 31050,
	31200, 31350, 31500, 31650, 31800, 31950, 32100, 32250,
	32400, 32550, 32700, 32850, 33000, 33150, 33300, 33450,
	33600, 33750, 33900, 34050, 34200, 34350, 34500, 34650,
	34800, 34950, 35100, 35250, 35400, 35550, 35700, 35850,
	36000, 36150, 36300, 36450, 36600, 36750, 36900, 37050,
	37200, 37350, 37500, 37650, 37800, 37950, 38100, 38250 };
static int times29[256] = {
	    0,    29,    58,    87,   116,   145,   174,   203,
	  232,   261,   290,   319,   348,   377,   406,   435,
	  464,   493,   522,   551,   580,   609,   638,   667,
	  696,   725,   754,   783,   812,   841,   870,   899,
	  928,   957,   986,  1015,  1044,  1073,  1102,  1131,
	 1160,  1189,  1218,  1247,  1276,  1305,  1334,  1363,
	 1392,  1421,  1450,  1479,  1508,  1537,  1566,  1595,
	 1624,  1653,  1682,  1711,  1740,  1769,  1798,  1827,
	 1856,  1885,  1914,  1943,  1972,  2001,  2030,  2059,
	 2088,  2117,  2146,  2175,  2204,  2233,  2262,  2291,
	 2320,  2349,  2378,  2407,  2436,  2465,  2494,  2523,
	 2552,  2581,  2610,  2639,  2668,  2697,  2726,  2755,
	 2784,  2813,  2842,  2871,  2900,  2929,  2958,  2987,
	 3016,  3045,  3074,  3103,  3132,  3161,  3190,  3219,
	 3248,  3277,  3306,  3335,  3364,  3393,  3422,  3451,
	 3480,  3509,  3538,  3567,  3596,  3625,  3654,  3683,
	 3712,  3741,  3770,  3799,  3828,  3857,  3886,  3915,
	 3944,  3973,  4002,  4031,  4060,  4089,  4118,  4147,
	 4176,  4205,  4234,  4263,  4292,  4321,  4350,  4379,
	 4408,  4437,  4466,  4495,  4524,  4553,  4582,  4611,
	 4640,  4669,  4698,  4727,  4756,  4785,  4814,  4843,
	 4872,  4901,  4930,  4959,  4988,  5017,  5046,  5075,
	 5104,  5133,  5162,  5191,  5220,  5249,  5278,  5307,
	 5336,  5365,  5394,  5423,  5452,  5481,  5510,  5539,
	 5568,  5597,  5626,  5655,  5684,  5713,  5742,  5771,
	 5800,  5829,  5858,  5887,  5916,  5945,  5974,  6003,
	 6032,  6061,  6090,  6119,  6148,  6177,  6206,  6235,
	 6264,  6293,  6322,  6351,  6380,  6409,  6438,  6467,
	 6496,  6525,  6554,  6583,  6612,  6641,  6670,  6699,
	 6728,  6757,  6786,  6815,  6844,  6873,  6902,  6931,
	 6960,  6989,  7018,  7047,  7076,  7105,  7134,  7163,
	 7192,  7221,  7250,  7279,  7308,  7337,  7366,  7395 };

unsigned char hex[256];

static ppmbuf B1,B2;
static int current_max_x = GIFMUNGE_TYP_MAX_X;
static int current_max_y = GIFMUNGE_TYP_MAX_Y;

int
alloc_pnmbuf(ppmbuf *b, int cols, int rows)
{
  b->buf = (pixel *)DistillerMalloc(cols * rows * sizeof(pixel));
  b->rowarray = (pixel **)DistillerMalloc(rows * sizeof(pixel *));
  return ((b->buf == NULL || b->rowarray == NULL)
          ? 0
          : 1);
}

void
free_pnmbuf(ppmbuf *b) {
  DistillerFree(b->rowarray);
  DistillerFree(b->buf);
}

void
munge_init_ppmarray(ppmbuf *b, int cols, int rows)
{
  int i;

  for (i = 0; i < rows; i++) {
    b->rowarray[i] = &(b->buf[i*cols]);
  }
  b->rows = rows;
  b->cols = cols;
}

DistillerStatus
ComputeDistillationCost(Argument *args, int numArgs,
                        DistillerInput *din,
                        DistillationCost *cost)
{
  cost->estimatedTime_ms = DataLength(din);
  return distOk;
}

DistillerStatus
DistillerInit(C_DistillerType distType, int argc, const char * const *argv)
{
  /*
   *  we have to set up some memory.  a pm_array is actually an array of
   *  pointers (rows) which point into a single large block.  so for each
   *  buffer, we setup the array of pointers and the single large block,
   *  and for each distillation request, we "initialize" the space by
   *  rewriting the array of pointers so the indices are right.  this is
   *  an ugly hack required by pbm's representation of arrays.
   */
  int x;

  mon = DistillerGetMonitorClientID();

  if (alloc_pnmbuf(&B1, GIFMUNGE_TYP_MAX_X, GIFMUNGE_TYP_MAX_Y) == 0
      ||  alloc_pnmbuf(&B2, GIFMUNGE_TYP_MAX_X, GIFMUNGE_TYP_MAX_Y) == 0) {
    char p[80];
    (void)sprintf(p, "Cannot allocate %dx%d array\n",
                  GIFMUNGE_TYP_MAX_X, GIFMUNGE_TYP_MAX_Y);
    MonitorClientSend(mon, "Errors", p, "");
    return (distFatalError);
  }
  
  for (x=0; x<256; x++)
    hex[x] = 0;
  for (x='0'; x<='9'; x++)
    hex[x] = x-'0';
  for (x='a'; x<='f'; x++)
    hex[x] = x-'a'+10;
  for (x='A'; x<='F'; x++)
    hex[x] = x-'A'+10;

  /* m = MonitorClient_Create(*/

  DEBUG("distiller initialized ok\n");
  return distOk;
}

void
DistillerExit(void)
{
  free_pnmbuf(&B1);
  free_pnmbuf(&B2);
}
  

extern pixel **ppmpad_main(int, int, int, int, pixel, pixel**);
extern pixel parsecolor(char *);

DistillerStatus
DistillerMain(Argument *args, int nargs,
              DistillerInput *din,
              DistillerOutput *dout)
{
    int colors;
    int x,y;
    int origcolors;
    double newarea,area,scale;
    int newsize;
    int make_gray;
    int mode;
    int rescale;
    int bpp;
    INT32 absmax;
    int is_transparent = 0;
    pixel transcolorpixel;
    
    DataNeedsFree(dout, gm_False);
    PPM_ASSIGN(transcolorpixel, 0,0,0);
    if (setjmp(jumpbuffer) != 0) {
      /*
       *  fatal error occurred, so return immediately.
       */
      MonitorClientSend(mon, "Errors",
                        "Fatal error: exiting through longjmp()", "");
      return distFatalError;
    }

    /*
     *  Set a length of zero for the output, in case an error is encountered.
     */
    SetDataLength(dout, 0);
    SetData(dout, NULL);

    /*
     *  parse distillation arguments.  set default values for some
     *  things, then override them if args are specified.  Default will
     *  be to quantize only.
     */

    mode = 0;
    newsize = 0;
    bpp = 2;
    rescale = 0;
    absmax = LONG_MAX;

    for (x = 0; x < nargs; x++) {
      INT32 argval = ARG_INT(args[x]);
      switch(ARG_ID(args[x])) {
      case FRONT_QUALITY:
        /* set from table, but allow individual args to be overridden too. */
        if (argval >= 1 && argval <= 5) {
          argval--;             /* index into array */
          mode = quality_table[argval].q_mode;
          newsize = quality_table[argval].q_newsize;
          bpp = quality_table[argval].q_bpp;
        }
        break;
      case GIFMUNGE_MODE:
        mode = argval;
        break;
      case GIFMUNGE_BPP:
        bpp = argval;
        break;
      case GIFMUNGE_RESCALE:
        rescale = 1;
        break;
      case GIFMUNGE_NEWX:
        newsize = argval;
        break;
      case GIFMUNGE_ABSMAX:
        absmax = argval;
        break;
      default:
        break;
      }
    }

    if (bpp < 0) {
      make_gray = 1;
      bpp = -bpp;
    } else {
      make_gray = 0;
    }
    colors = 1 << bpp;
    /*
     *  Actual image processing happens here.  First read the source GIF
     *  and compute new x and y sizes based on bpp (compression ratio).
     *  If the new target size is zero, then just scale the image to the
     *  given pixel dimensions, rather than treating the dimensions as
     *  minimums.
     */

    /*
     *  If this image is larger than the current buffers, reallocate
     *  them to be large enough.
     */

    {
      int tmpx, tmpy;
      unsigned char *p = (unsigned char *)(DataPtr(din));
      tmpx = *(p+6) + (*(p+7) << 8);
      tmpy = *(p+8) + (*(p+9) << 8);

      if (tmpx > current_max_x || tmpy > current_max_y) {
        current_max_x = tmpx;
        current_max_y = tmpy;
        free_pnmbuf(&B1);
        free_pnmbuf(&B2);
        if (alloc_pnmbuf(&B1, current_max_x, current_max_y) == 0
            || alloc_pnmbuf(&B2, current_max_x, current_max_y) == 0) {
          SetData(dout,p); /* make output buffer same as input buffer */
          sprintf((char *)p,
                  "Could not realloc memory for %dx%d array", tmpx, tmpy);
          (void)MonitorClientSend(mon, "Errors", (char *)p, "");
          return (distFatalError);
        }
      }
    }

    /*
     *  Read the GIF from the input into buffer 1.
     */
    ReadGIF(DataPtr(din), 1, &is_transparent,
            &transcolorpixel, &B1);
    DEBUG("Finished reading gif\n");

    if (mode > 0) {
      /* target a particular output size in bytes */
      area = B1.rows * B1.cols;
      newarea = (double)mode * (area/(DataLength(din)));
      scale = sqrt(newarea/area);
      x = B1.cols*scale;
      y = B1.rows*scale;
      if (x < 10) x = 10;
      if (y < 10) y = 10;         /* pin to harmless values */
    } else if (mode < 0) {
      /* scale each axis by reciprocal of this amount */
      scale = -1.0/mode;
      x = B1.cols * scale;
      y = B1.rows * scale;
      if (x < 10) x = 10;
      if (y < 10) y = 10;         /* pin to harmless values */
    } else {  /* mode == 0 */
      /* scale to this x size (negative: to this y size) */
      if (newsize < 0) {
        y = -newsize;
        x = B1.cols * ((double)y / B1.rows);
      } else {
        x = newsize;
        y = B1.rows * ((double)x / B1.cols);
      }
    }

    /*
     *  Pin to absolute maximum X or Y, if given.
     */

    /* if necessary, convert to grayscale, in place. */

    if (make_gray) {
      unsigned long pxl;
      int i;
      pixel *pp;
      gray grayval;

      for (i=0; i<B1.rows; i++) {
        for (pxl = 0, pp = B1.rowarray[i];
             pxl < B1.cols;
             pxl++, pp++) {
          grayval = ( ( times77[PPM_GETR( *pp )] + times150[PPM_GETG( *pp )] +
                        times29[PPM_GETB( *pp )] ) >> 8 );
          PPM_ASSIGN(*pp, grayval, grayval, grayval);
        }
      }
      DEBUG("Finished gray\n");
    }
    /*
     *  Count colors in original image by constructing histogram.  If
     *  there are "too many", assume it's 255, since that's the GIF
     *  allowed max.
     */
    origcolors = 0;
    {
      colorhist_vector temp_chv;
      if ((temp_chv = ppm_computecolorhist(B1.rowarray, B1.cols, B1.rows, 32767, 
                                           &origcolors)) == (colorhist_vector)0)
        origcolors = 255;
      ppm_freecolorhist(temp_chv);
    }
    DEBUG("finished colorhist\n");
    
    /*
     *  Scale image to new dimensions. Store scaled image in buffer 2.
     */

    if (x==0) {
      /* no scaling desired */ 
      x = B1.cols;
      y = B1.rows;              /* dumb...the pnmscale call becomes a memcpy */
    }

    pnmscale_main(y, x, 0, &B1, &B2);

    DEBUG("finished scale\n");

    /*
     *  Quantize to new colors, optionally using Floyd-Sternberg
     *  correction.  Quantized image in place in buffer 2.
     */
    if (colors > 0) {
      if (colors > 255)
        colors = 255;
      ppmquant_main(colors, "", 1, &transcolorpixel, &B2);
    } else {
      ppmquant_main(origcolors, "", 1, &transcolorpixel, &B2);
    }
    DEBUG("finished quant\n");
    
    /*
     *  Output will be stored into the pixel buffer that was used to decompress
     *  the GIF originally.  (This assumes that an encoded GIF will be smaller
     *  than its raw-pixel equivalent at 3 bytes/pixel, probably a safe
     *  assumption.  This is safer than assuming it will be smaller than the
     *  original GIF, a condition that turns out not to be true for GIFs that
     *  are already well optimized.)
     *
     *  Args for ppmtogif_main:
     *    int interlace (nonzero=yes)
     *    int sorted_colormap (nonzero=yes)
     *    int transparent (nonzero=yes)
     *    pixel *transcolorpixel (color to use for trans)
     *    ppmbuf *pbuf - source buffer containing ppm
     *    void *outbuf - dest buffer for writing GIF data
     */

    SetData(dout,(B1.buf));

    if (is_transparent > 0) {
      SetDataLength(dout,
                    ppmtogif_main(1,0,1,&transcolorpixel,&B2, DataPtr(dout)));
    } else {
      SetDataLength(dout,
                    ppmtogif_main(1, 0, 0, NULL, &B2, DataPtr(dout))); 
    }
    strncpy(dout->mimeType, "image/gif", MAX_MIMETYPE);

    /*
     *  Return the new version only if it's smaller.
     *  BUG::for things like Pilot browser, will probably want to return the
     *  distilled version even if it's bigger, because it's been grayified,
     *  etc. or has other properties that client wants.
     */
    if (DataLength(dout) < DataLength(din)) {
      return distOk;
    } else {
      /* original was smaller, whaddaya know */
      return distBadInput;      /* let frontend bypass original. */
    }
}

pixel parsecolor (char *color)
{
    pixel p;

    PPM_ASSIGN(p, ((HEX(color[1])<<4) + HEX(color[2])),
               ((HEX(color[3])<<4) + HEX(color[4])),
               ((HEX(color[5])<<4) + HEX(color[6])));
    return(p);
}
    
@


1.20
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.19 1997/06/14 15:30:40 yatin Exp $
d22 2
a23 1
#include "ALLARGS.h"            /* to get frontend "quality" args */
@


1.19
log
@changes to the DistillerInit() API
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.18 1997/04/27 01:58:51 fox Exp $
d202 1
a202 1
  cost->estimatedTime_ms = din->length;
d259 1
a259 2
              DistillerOutput *dout,
              gm_Bool *free_output)
d274 1
a274 1
    *free_output = gm_False;
d288 2
a289 2
    dout->length = 0;
    dout->data = NULL;
d357 1
a357 1
      unsigned char *p = (unsigned char *)(din->data);
d368 1
a368 1
          dout->data = (void *)p; /* make output buffer same as input buffer */
d380 1
a380 1
    ReadGIF((unsigned char *)(din->data), 1, &is_transparent,
d387 1
a387 1
      newarea = (double)mode * (area/(din->length));
d493 1
a493 1
    dout->data = (void *)(B1.buf);
d496 2
a497 1
      dout->length = ppmtogif_main(1,0,1,&transcolorpixel,&B2,dout->data);
d499 2
a500 1
      dout->length = ppmtogif_main(1, 0, 0, NULL, &B2, dout->data); 
d510 1
a510 1
    if (dout->length < din->length) {
@


1.18
log
@understands Quality args and has reasonable mapping for them
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.17 1997/04/26 01:31:53 fox Exp $
d207 1
a207 1
DistillerInit(C_DistillerType distType)
@


1.17
log
@GIF munger now works and handles transparent gifs correctly
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.16 1997/04/16 01:18:38 gribble Exp $
d22 1
d38 23
d96 1
a96 1
    static int times150[256] = {
d129 1
a129 1
    static int times29[256] = {
a165 1
static char palette[800];
d270 2
a273 1
    long absmax = LONG_MAX;
d275 1
a275 1
    *free_output = 0;
d287 6
d300 1
a300 1
    colors = 4;
d302 1
a302 1
    make_gray = 0;
d307 9
d320 1
a320 5
        if (argval < 0) {
          make_gray = 1;
          argval = -argval;
        }
        colors = 1 << argval;
d336 7
d478 6
a483 3
     *  Output will be stored into the original input buffer (what the
     *  hell, it's smaller).  ppmtogif_main will convert the contents
     *  to GIF format.
d494 1
a494 2
    *free_output = gm_False;
    dout->data = din->data;
d496 1
a496 1
    if (is_transparent > -1) {
d503 12
a514 1
    return (dout->length < din->length ? distOk : distBadInput);
@


1.16
log
@More changes....fixed up distillers so that the DistillerInit() function
accepts type information.
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.15 1997/02/26 04:14:37 yatin Exp $
d247 2
d252 1
d265 1
a265 1
     *  be to scale each axis by 0.5, quant to 16 colors.
d268 3
a270 2
    mode = -2;
    colors = 16;
a311 2
     *  PERF::should we reallocate them to smaller size later, or does
     *  it not matter because the memory won't be reclaimed anyway?
d339 2
a340 1
    ReadGIF((unsigned char *)(din->data), 1, &B1);
d412 6
d429 1
a429 1
      ppmquant_main(colors, "", 1, &B2);
d431 1
a431 1
      ppmquant_main(origcolors, "", 1, &B2);
d444 1
a444 1
     *    char *transcolorstring (color to use for trans)
d452 6
a457 6
#if 0
    if (padcolor[0] == '#')
      dout->length = ppmtogif_main(1, 0, 0, padcolor, &B2, dout->data);
    else
#endif
      dout->length = ppmtogif_main(1, 0, 0, "", &B2, dout->data); 
d459 1
a459 2
    strncpy(dout->mimeType, "image/gif", MAX_MIMETYPE);
    return distOk;
@


1.15
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.14 1997/02/05 04:14:58 fox Exp $
d184 1
a184 1
DistillerInit(void)
@


1.14
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.13 1997/02/05 03:57:01 fox Exp $
d179 1
a179 1
  cost->estimatedTime = din->length;
@


1.13
log
@all "run" targets now put their programs in the background.
run_frontend redirects stderr to "frontend.errs", but ideally we
shouldn't have to rely on fprintf(stderr) at all.
html and gif distillers no longer spew debugging output to stderr.
Monitor now prints to stderr if the monitor object has the sentinel
value MON_USE_STDERR.
in doc directory, distillers.txt is now distillers.pod.  Use pod2* to
make it into HTML,LaTEX, etc.
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.12 1997/02/04 05:39:56 fox Exp $
d328 1
a328 1
          (void)MonitorClientSend(mon, "Errors", p, "");
@


1.12
log
@fixed logic bug that caused ignored images not to be processed correctly
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.11 1997/01/29 21:59:21 fox Exp $
d34 2
a35 1
/*Monitor *mon; */
a166 1
  fprintf(stderr,"munging array ptrs for size %dx%d\n",cols,rows);
d196 2
d199 5
a203 1
      ||  alloc_pnmbuf(&B2, GIFMUNGE_TYP_MAX_X, GIFMUNGE_TYP_MAX_Y) == 0)
d205 2
a206 1

d254 2
d328 1
@


1.11
log
@renamed mon.h to libmon.h - clientlib was not compiling correctly
(though it would have if its includepath had been right) since solaris
has a /usr/include/mon.h file.  minor monitor interface changes in
monitor.c.
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.10 1997/01/29 06:00:43 yatin Exp $
d145 16
d168 1
a168 1
    b->rowarray[i] = (pixel *)&(b->buf[i*cols*sizeof(xel)]);
d196 2
a197 7
  B1.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_Y * sizeof(xel *)
                                    + (GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
                                       * sizeof(xel)));
  B2.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_Y * sizeof(xel *)
                                    + (GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
                                       * sizeof(xel)));
  if (B1.buf == NULL || B2.buf == NULL)
d218 2
a219 2
  DistillerFree((char *)B1.buf);
  DistillerFree((char *)B2.buf);
d259 1
d312 4
a315 7
        DistillerFree((void *)B1.buf);
        DistillerFree((void *)B2.buf);
        B1.buf = (char **)DistillerMalloc(current_max_x * current_max_y
                                           * sizeof(xel));
        B2.buf = (char **)DistillerMalloc(current_max_x * current_max_y
                                           * sizeof(xel));
        if (B1.buf == NULL || B2.buf == NULL) {
d363 1
a363 1
    if (0 && make_gray) {
a385 1
#if 0
a392 3
#else
    origcolors = 255;
#endif
d400 1
d415 1
a415 1

d432 1
d438 1
a438 1
      dout->length = ppmtogif_main(1, 0, 0, "", &B2, dout->data);
@


1.10
log
@Modified the ptm stub and distiller stub to use the new distiller API
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.9 1997/01/29 04:13:26 fox Exp $
a26 1
#include "monitor.h"
d34 1
a34 1
/* Monitor *mon; */
d198 1
a198 1
  /* m = MonitorClient_Create(  */
d354 1
a354 1
    if (make_gray) {
d377 1
d385 3
a395 7
    {
      FILE *f = fopen("out1","w");
      ppm_writeppm(f, B2.rowarray, B2.cols, B2.rows, (pixval)255, 0);
      fclose(f);
    }


@


1.9
log
@changed distiller interface to use struct DistillerInput/DistillerOutput in frontend,gif_munge,html_munge
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.7 1997/01/06 05:43:32 fox Exp $
d183 1
a183 1
                                       * sizeof(xel)_);
@


1.8
log
@Added "dying gasp" functionality to MonitorClient class: whenever a new
monitor is created, globals are set to record its socket id and unit
name, so that the program can respond to signals by jumping to a signal
handler that announces the program's death by sending a death packet.
New functions in monitor.cc: DyingGasp (class method), GaspOnSignals
(instance method), extern "C" void MonitorClientSigHandler (C signal
handler), CurrentMonitorSock and CurrentUnitId (static variables in
monitor.h).  If you can think of a better way to do this, please change
it.

Fixed bug in frontend HTTP request parsing that caused multi-packet
requests not to be read correctly.

Many changes to the monitor, mostly cosmetic, some functional, including
addition of "kill" button (there is now a "death protocol") and more
sane show/hide behavior that is integrated with iconifying.
@
text
@d27 1
a27 1

d35 1
d161 1
a161 1
                        void *input, UINT32 inputLen,
d164 1
a164 1
  cost->estimatedTime = inputLen;
d181 6
a186 4
  B1.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
                                     * sizeof(xel));
  B2.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
                                     * sizeof(xel));
d199 2
d218 2
a219 2
              void *input, UINT32 inputLen,
              void **output, UINT32 *outputLen,
d294 1
a294 1
      unsigned char *p = (unsigned char *)input;
d308 1
a308 1
          *output = p;          /* make output buffer same as input buffer */
d319 1
a319 1
    ReadGIF((unsigned char *)input, 1, &B1);
d325 1
a325 1
      newarea = (double)mode * (area/inputLen);
d429 1
a429 1
    *output = input;
d432 1
a432 1
      *outputLen = ppmtogif_main(1, 0, 0, padcolor, &B2, *output);
d435 1
a435 1
      *outputLen = ppmtogif_main(1, 0, 0, "", &B2, *output);
d437 1
@


1.7
log
@Added doc/distillers.txt, which explains how to write your own
distiller.  Gifmunger should now do the right thing even on extremely
large images.  Default args for gifmunger are more sane (16 colors,
scale 0.5 per axis), but output still looks sucky - not sure why the
quantize phase picks such crappy colors.  "test_http" program has been
officially renamed "frontend".  Fixed the "run" targets in toplevel
Makefile.  Added line to configure.in to create a Makefile from
Makefile.in for gui.
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.6 1996/12/13 01:56:08 fox Exp $
d401 3
a403 3
        if (colors > 255)
          colors = 255;
        ppmquant_main(colors, "", 1, &B2);
d405 1
a405 1
        ppmquant_main(origcolors, "", 1, &B2);
@


1.6
log
@maybe fixed some global-state initialization related bugs
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.5 1996/12/13 00:18:35 fox Exp $
d25 1
d142 2
d279 32
d312 1
a312 1
     *  BUG::what if it's bigger than GIFMUNGE_TYP_MAX_X,GIFMUNGE_TYP_MAX_Y?
d318 1
a318 1
      /* target an output size */
d403 1
a403 1
        ppmquant_main(colors, palette, 0, &B2);
d405 1
a405 1
        ppmquant_main(origcolors, palette, 0, &B2);
d411 2
a412 2
     *  hell, it's smaller).  ppmtogif_main will convert the contents of
     *  buffer 1.
d427 1
a427 1
      *outputLen = ppmtogif_main(1, 0, 1, padcolor, &B2, *output);
d430 1
a430 1
      *outputLen = ppmtogif_main(1, 0, -1, "", &B2, *output);
@


1.5
log
@Changed "int" argument type to be signed rather than unsigned.  Required
addition of INT32 type to config.h.in, and addition of overload
operators '<<', '>>' for type "long int" to IStream and OStream classes
in ptm (mods to packet.{cc,h}).  Added various "make run" targets at top
level.  Minor fixes to monitor's GUI.  Added simple argument parsing to
gif_munge in ARGS.h, which will be the standard filename where distiller
args are defined.  Added tags target to ptm makefile.
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.4 1996/12/06 05:45:32 fox Exp $
d22 1
d221 1
d240 2
a241 1
    
a263 1
      case GIFMUNGE_ABSMAX_Y:
@


1.4
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.3 1996/12/06 04:30:23 fox Exp $
d15 1
a15 7
 *  The Args structure can contain the following:
 *  arg id 0 (int): distillation mode
 *      0 = output should target a particular byte size
 *      1 = output should target particular image dimensions
 *  arg id 1 (int):
 *      if arg 0 = 0: the output byte size to target (int)
 *                 1, the scale factor (float)
d218 3
a220 4
    int make_gray = 0;

    colors = 4;
    newsize = 4096;
d231 37
d279 31
a309 7
    area = B1.rows * B1.cols;
    newarea = (double)newsize * (area/inputLen);
    scale = sqrt(newarea/area);
    x = B1.cols*scale;
    y = B1.rows*scale;
    if (x < 10) x = 10;
    if (y < 10) y = 10;         /* pin to harmless values */
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.2 1996/11/23 03:32:34 fox Exp $
d256 1
a256 1
    
d297 6
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Id: gif_munge.c,v 1.1.1.2 1996/11/22 04:34:49 fox Exp $
d32 1
d34 5
a38 1
char *gMimeTypeSubtype = "image/gif";
d158 9
a166 1
  DEBUG("done munge\n");
a204 1
  DistillerFree((char *)B1.rowarray);
a205 1
  DistillerFree((char *)B2.rowarray);
d217 1
a217 1
              Bool *free_output)
d229 8
d244 4
a247 1
    ReadGIF((char *)input, 1, &B1);
d274 1
a275 1
    DEBUG("Finished gray\n");
d297 2
a298 1
          
a311 2
#if 0
    
d316 8
d326 1
a326 1
    *free_output = FALSE;
d328 1
d330 1
a330 1
      *outputLen = ppmtogif_main(1, 0, 1, padcolor, &B1);
a331 7
      *outputLen = ppmtogif_main(1, 0, -1, "", &B1);
#else
    {
      FILE *f;
      f = fopen("foo", "w");
      ppm_writeppm(f, B1.rowarray, B1.cols, B1.rows, (pixval)255, 1);
    }
d333 1
d335 1
a335 1
    return(1);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *  $Id: gifmunch.c,v 1.9 1996/09/10 01:14:15 fox Exp $
d137 1
a137 2
extern void ReadGIF (FILE *fd, int imageNum);

a139 2
static unsigned char hex[256];
static char padcolor[12];
a140 1
static long numimages = 0;
d143 1
a143 1
munge_init_ppmarray(ppmbuf *b, int rows, int cols)
d147 1
d149 1
a149 1
    b->rows[i] = &(b->buf[i*cols*sizeof(xel)]);
d153 1
d169 1
a169 1
  B1.buf = (pixel **)DistillerMalloc(GIFMUNGE_TYP_MAX * GIFMUNGE_TYP_MAX
d171 1
a171 1
  B2.buf = (pixel **)DistillerMalloc(GIFMUNGE_TYP_MAX * GIFMUNGE_TYP_MAX
d173 1
a173 4
  B1.rows = (pixel **)DistillerMalloc(GIFMUNGE_TYP_MAX * sizeof(char **));
  B2.rows = (pixel **)DistillerMalloc(GIFMUNGE_TYP_MAX * sizeof(char **));

  if (B1.rows == NULL || B2.rows == NULL || B1.buf == NULL || B2.buf == NULL)
d185 1
d192 1
a192 1
  DistillerFree((char *)B1.rows);
d194 1
a194 1
  DistillerFree((char *)B2.rows);
d205 2
a206 1
              void **output, UINT32 *outputLen)
d208 1
a208 1
    int minx,miny,colors,out;
d215 3
d225 9
a233 19
    OrigSize = 0;
    ReadGIF(fd, 1);             /* will set OrigSize */
    if (newsize > 0) {
      area = GifLenIn * GifHeightIn;
      newarea = (double)newsize * (area/OrigSize);
      scale = sqrt(newarea/area);
      x = GifLenIn*scale;
      y = GifHeightIn*scale;
      if (x < minx) x = minx;
      if (x < 10) x = 10;
      if (y < miny) y = miny;
      if (y < 10) y = 10;         /* pin to harmless values */
    } else if (newsize == 0) {
      x = minx;
      y = miny;
    } else {                    /* newsize < 0: keep orig size */
      x = GifLenIn;
      y = GifHeightIn;
    }
d235 1
a235 1
    /* if necessary, convert to grayscale. */
d239 1
d242 9
a250 6
      for (pxl = 0, pp = *GifImageIn;
           pxl < GifHeightIn * GifLenIn;
           pxl++, pp++) {
        grayval = ( ( times77[PPM_GETR( *pp )] + times150[PPM_GETG( *pp )] +
                     times29[PPM_GETB( *pp )] ) >> 8 );
        PPM_ASSIGN(*pp, grayval, grayval, grayval);
d253 1
a253 1

d262 2
a263 3
      if ((temp_chv = ppm_computecolorhist(GifImageIn, GifLenIn,
                                          GifHeightIn, 32767, 
                             &origcolors)) == (colorhist_vector)0)
d267 1
d269 3
a271 2
    DEBUG((stderr, "osize=%lu  ocolors=%d scale=%.2f  newx,newy=%d,%d\n",
           OrigSize, origcolors, scale, x, y));
d273 3
d277 2
a278 1
     *  Scale image to new dimensions
a279 4

    pnmscale_main(y, x, 0);
        
    /* num new colors, use floyd-sternberg correction y/n   */
d283 1
a283 1
        ppmquant_main(colors, palette, 0);
d285 1
a285 1
        ppmquant_main(origcolors, palette, 0);
d287 1
d289 1
a289 2
    /* size to pad to x/y, bg color as pixel.  Do padding only if the
       padcolor looks like an rgb colorspec (i.e. string beginning w. "#")  */
d291 8
a298 19
    if (padcolor[0] == '#'
        && GifLenIn > ScaledPnmCols) {
        pixel **old_pnm_image = ScaledPnmImage;
        ScaledPnmImage =
          ppmpad_main(ScaledPnmCols, ScaledPnmRows,
                      GifLenIn, GifHeightIn,
                      parsecolor(padcolor),
                      (pixel**)ScaledPnmImage);
        ScaledPnmRows = GifHeightIn;
        ScaledPnmCols = GifLenIn;
#ifdef CLEAN
        ppm_freearray(old_pnm_image, ScaledPnmRows);
#endif
    }
    
    /* ready to write output */
    DEBUG((stderr, "Ready to write\n"));
    READY_TO_WRITE(fd, "image/gif");
    DEBUG((stderr, "Calling ppmtogif\n"));
d300 1
a300 1
      ppmtogif_main(1, 0, 1, padcolor, fd);
d302 7
a308 5
      ppmtogif_main(1, 0, -1, "", fd);
    
#ifdef CLEAN
    pnm_freearray(ScaledPnmImage, ScaledPnmRows);
    pnm_freearray(GifImageIn, GifHeightIn);
d311 1
a311 1
    DEBUG((stderr, "Done"));
d318 3
a320 3
    PPM_ASSIGN(p, (hex[color[1]]<<4 + hex[color[2]]),
               (hex[color[3]]<<4 + hex[color[4]]),
               (hex[color[5]]<<4 + hex[color[6]]));
@


1.1.1.1
log
@high performance gif munger
@
text
@@


1.1.1.2
log
@source code for new hi perfmnc gifmunger
@
text
@d137 1
a137 2
extern void ReadGIF (char *fd, int imageNum, ppmbuf *buf);
extern int pnmscale_main(int r, int c, int newpixels, ppmbuf *g, ppmbuf *p);
d147 1
a147 1
munge_init_ppmarray(ppmbuf *b, int cols, int rows)
d152 1
a152 1
    b->rowarray[i] = (pixel *)&(b->buf[i*cols*sizeof(xel)]);
d171 1
a171 1
  B1.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
d173 1
a173 1
  B2.buf = (char **)DistillerMalloc(GIFMUNGE_TYP_MAX_X * GIFMUNGE_TYP_MAX_Y
d175 4
a178 1
  if (B1.buf == NULL || B2.buf == NULL)
d196 1
a196 1
  DistillerFree((char *)B1.rowarray);
d198 1
a198 1
  DistillerFree((char *)B2.rowarray);
d211 1
a211 2
    int out;
    int colors;
a217 3
    colors = 4;
    newsize = 4096;
    
d225 19
a243 8
    ReadGIF((char *)input, 1, &B1);
    area = B1.rows * B1.cols;
    newarea = (double)newsize * (area/inputLen);
    scale = sqrt(newarea/area);
    x = B1.cols*scale;
    y = B1.rows*scale;
    if (x < 10) x = 10;
    if (y < 10) y = 10;         /* pin to harmless values */
d245 1
a245 1
    /* if necessary, convert to grayscale, in place. */
a248 1
      int i;
d251 6
a256 9

      for (i=0; i<B1.rows; i++) {
        for (pxl = 0, pp = B1.rowarray[i];
             pxl < B1.cols;
             pxl++, pp++) {
          grayval = ( ( times77[PPM_GETR( *pp )] + times150[PPM_GETG( *pp )] +
                        times29[PPM_GETB( *pp )] ) >> 8 );
          PPM_ASSIGN(*pp, grayval, grayval, grayval);
        }
d268 3
a270 2
      if ((temp_chv = ppm_computecolorhist(B1.rowarray, B1.cols, B1.rows, 32767, 
                                           &origcolors)) == (colorhist_vector)0)
d275 3
d282 1
a282 1
    pnmscale_main(y, x, 0, &B1, &B2);
a295 1
#if 0
d297 3
a299 3
        && B1.cols > B2.cols) {
      pixel **old_pnm_image = B2.rowarray;
      ScaledPnmImage =
a309 1
#endif
d312 3
a314 2

    *output = input;
d316 1
a316 1
      *outputLen = ppmtogif_main(1, 0, 1, padcolor, );
d318 8
a325 1
      *outputLen = ppmtogif_main(1, 0, -1, "", fd);
@
