head	1.8;
access;
symbols
	Yatin-final:1.8
	Yatin:1.8.0.6
	pre-yatin-merge:1.8
	transend-beta2:1.8
	fox-dev:1.8
	gif_munger-ng:1.8
	transend-beta-latest:1.8
	Aggregators:1.8
	NoAggregators:1.8
	iang:1.8.0.4
	transend-beta:1.8.0.2
	SOSP:1.7
	merged_preintegrate:1.4
	heisenbug:1.4
	PRE_INTEGRATION:1.4
	initia:1.1.1.2
	initial:1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	97.04.26.01.31.54;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.02.05.04.19.13;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.02.05.03.57.02;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.02.04.05.39.57;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.12.13.00.18.36;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.12.06.04.30.24;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.32.35;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.22.03.10.27;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.22.03.10.27;	author fox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.11.22.04.34.53;	author fox;	state Exp;
branches;
next	;


desc
@@


1.8
log
@GIF munger now works and handles transparent gifs correctly
@
text
@#define GIFMUNGE_TYP_MAX_X  640
#define GIFMUNGE_TYP_MAX_Y  480

#define GIFMUNGE_FATAL_ERROR 1

#include "ARGS.h"
#include <stdio.h>
#include <setjmp.h>
#include "distinterface.h"
extern jmp_buf jumpbuffer;

typedef struct _ppmbuf {
  pixel **rowarray;
  pixel *buf;
  int rows, cols;
  int format;
  unsigned long size;
} ppmbuf;

extern void munge_init_ppmarray(ppmbuf *b, int cols, int rows);
extern unsigned long ppmtogif_main(int interlace, int sort, int transparent,
                         pixel *transcolorpixel, ppmbuf *inbuf, void *outbuf);
extern void ReadGIF (unsigned char *fd, int imageNum, int *transparent_p, 
                     pixel *transcolorpixel, ppmbuf *buf);
extern int pnmscale_main(int r, int c, int newpixels, ppmbuf *g, ppmbuf *buf);
extern int ppmquant_main(int colrs, char *palet, int floyd,
                         pixel *transcolorpixel, ppmbuf *buf);

extern MonitorClientID mon;

extern unsigned char hex[];
#define HEX(i)  hex[((int)i)]

#ifdef DEBUGGING
#define DEBUG(x) fprintf(stderr,x)
#define DEBUG2(x,y) fprintf(stderr,x,y)
#define pmerror(x) fprintf(stderr,x)
#else /* DEBUGGING */
#define DEBUG(x)
#define DEBUG2(x,y)
#endif

@


1.7
log
@distinterface.h should be included instead of monitor.h
@
text
@d22 3
a24 2
                         char *transcolorstring, ppmbuf *inbuf, void *outbuf);
extern void ReadGIF (unsigned char *fd, int imageNum, ppmbuf *buf);
d26 2
a27 1
extern int ppmquant_main(int colrs, char *palet, int floyd, ppmbuf *buf);
@


1.6
log
@all "run" targets now put their programs in the background.
run_frontend redirects stderr to "frontend.errs", but ideally we
shouldn't have to rely on fprintf(stderr) at all.
html and gif distillers no longer spew debugging output to stderr.
Monitor now prints to stderr if the monitor object has the sentinel
value MON_USE_STDERR.
in doc directory, distillers.txt is now distillers.pod.  Use pod2* to
make it into HTML,LaTEX, etc.
@
text
@d9 1
a9 1
#include "monitor.h"
@


1.5
log
@fixed logic bug that caused ignored images not to be processed correctly
@
text
@d9 1
d26 2
@


1.4
log
@Changed "int" argument type to be signed rather than unsigned.  Required
addition of INT32 type to config.h.in, and addition of overload
operators '<<', '>>' for type "long int" to IStream and OStream classes
in ptm (mods to packet.{cc,h}).  Added various "make run" targets at top
level.  Minor fixes to monitor's GUI.  Added simple argument parsing to
gif_munge in ARGS.h, which will be the standard filename where distiller
args are defined.  Added tags target to ptm makefile.
@
text
@d12 2
a13 2
  pixel *rowarray[GIFMUNGE_TYP_MAX_Y];
  char **buf;
a29 2
#define DistillerMalloc malloc
#define DistillerFree free
@


1.3
log
@*** empty log message ***
@
text
@d6 1
@


1.2
log
@*** empty log message ***
@
text
@d4 6
d11 1
a11 1
  pixel *rowarray[GIFMUNGE_TYP_MAX_X];
d18 3
a20 4
extern void munge_init_ppmarray(ppmbuf *b, int rows, int cols);
extern int ppmtogif_main(int interlace, int sort, int transparent,
                         char *transcolorstring, void *buf,
                         unsigned long *buflen);
d32 1
d36 1
@


1.1
log
@Initial revision
@
text
@d1 3
d5 1
a5 1
  pixel **rows;
d13 19
@


1.1.1.1
log
@high performance gif munger
@
text
@@


1.1.1.2
log
@source code for new hi perfmnc gifmunger
@
text
@a0 3
#define GIFMUNGE_TYP_MAX_X  640
#define GIFMUNGE_TYP_MAX_Y  480

d2 1
a2 1
  pixel *rowarray[GIFMUNGE_TYP_MAX_X];
a9 7
extern int ppmtogif_main(int interlace, int sort, int transparent,
                         char *transcolorstring, void *buf,
                         unsigned long *buflen);
extern void ReadGIF (char *fd, int imageNum, ppmbuf *buf);
extern int pnmscale_main(int r, int c, int newpixels, ppmbuf *g, ppmbuf *p);


@
