head	1.2;
access;
symbols
	Yatin-final:1.2
	Yatin:1.2.0.6
	pre-yatin-merge:1.2
	transend-beta2:1.2
	fox-dev:1.2
	playback-ng:1.2
	transend-beta-latest:1.2
	Aggregators:1.2
	NoAggregators:1.2
	iang:1.2.0.4
	transend-beta:1.2.0.2
	SOSP:1.2;
locks; strict;
comment	@# @;


1.2
date	97.03.09.03.01.24;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.03.07.07.24.30;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Now with cool, whizzbang new shiny telnet port for controlling speed.
@
text
@#!/usr/sww/bin/perl5

##
## count_events.pl - this script accepts as arguments a bucket size (in
## seconds) and a minimum time (in seconds), and sucks from standard input
## a series of trace events.  It subtracts the minimum time from the
## client request time in order to produce the relative time of the event,
## and then adds an event to the appropriate bucket.  It will
## output a histogram of events at the end.
##

$bucketsize = shift @@ARGV or die "usage: count_events.pl bucketsize mintime";
$mintime = shift @@ARGV or die "usage: count_events.pl bucketsize mintime";

$maxbucket = 0;

while ($nextline = <STDIN>) {
    ($reqsec, $requsec) = ($nextline =~  /^(\d+)\:(\d+) .*$"/);
    $timeval = $reqsec - $mintime;
    $bucketval = int($timeval / $bucketsize);
    $bucket[$bucketval]++;
    if ($bucketval > $maxbucket) {
	$maxbucket = $bucketval;
    }
}

$valid = 0;

for ($i=0; $i<$maxbucket; $i++) {
    if (defined($bucket[$i])) {
	$valid = 1;
	print "$i $bucket[$i]\n";
    } else {
	if ($valid) {
	    print "$i 0\n";
	}
    }
}

exit(0);


@


1.1
log
@trace tools!
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
@
