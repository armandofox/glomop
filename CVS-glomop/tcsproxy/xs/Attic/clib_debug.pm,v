head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	97.07.15.02.43.21;	author fox;	state dead;
branches;
next	1.3;

1.3
date	97.07.11.22.15.12;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.07.08.03.14.41;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.06.28.03.37.00;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@makefile changes to link pthreads only at end, which was causing severe bad behaviors under linux since different people were calling different signal()s.  SIGHUP is now used instead of SIGUSR1 to signal components to reinitialize themselves, and SIGTERM is used to kill them gracefully.  Layout stuff for Pilot works but is still inelegant.
@
text
@#  -*- perl -*-

package clib_debug;
use MD5;
require Exporter;
require DynaLoader;

@@ISA = qw(Exporter DynaLoader);

@@EXPORT = qw(SERVER_NAME
             SET_PREFS_URL
             GET_PREFS_URL
             PREFS_CHANGE_URL_STRING
             PREF_SET_URL_STRING
             AGG_STRING
             Clib_Fetch
             Clib_Push
             Clib_Query
             Clib_Post
             );

#  make a user agent...

use LWP;
$UA = new LWP::UserAgent or die "Couldn't create LWP::UserAgent";

#  create a working directory...

$tmpdir = "/tmp/clib_debug.$$";
mkdir $tmpdir,0777 or die "Failed to make directory $tmpdir: $!";

END {
    system "/bin/rm -rf $tmpdir";
}

sub get_key {
    my $url = shift;
    return substr(MD5->hexhash($url),16);
}

sub Clib_Fetch {
    my ($url,$hdrs) = @@_;
    my $key = &get_key($url);

    if (-r "$tmpdir/$key" && -r "$tmpdir/${key}.h") {
        my ($hdrs,$data);
        open (F, "$tmpdir/${key}.h");
        $hdrs .= $_ while <F>;
        close F;
        open(F, "$tmpdir/$key");
        $data .= $_ while <F>;
        close F;
        return (0, $hdrs,$data);
    }
    my $hdrs;
    if ($hdrs) {
        my %hdrs = split(/((?=^\S+):\s+)|([\r\n]+)/, $hdrs) ;
        $hdrs = new HTTP::Headers(%hdrs);
    } else {
        $hdrs = new HTTP::Headers;
    }
    my $req = new HTTP::Request ("GET",$url,$hdrs);

    my $result = $UA->request($req);
    my $ret_hdrs = join("\r\n", (join(' ', $result->code, $result->message)),
                        $result->headers_as_string)
        . "\r\n";
    my $data = $result->content;
    if ($result->is_success) {
        &Clib_Push($url, $ret_hdrs, $data);
    }
    return (0, $ret_hdrs, $data);
}

sub Clib_Query {
    my ($url);
    my $key = &get_key($url);

    return ( -r "$tmpdir/$key" && -r "$tmpdir/${key}.h"
            ? 1                             # CACHE_HIT
            : 2                             # CACHE_MISS
            );
}

sub Clib_Push {
    my ($url,$hdrs,$data) = @@_;
    my $key = &get_key($url);

    open(F, ">$tmpdir/$key");
    print F $data;
    close F;

    open(F, ">$tmpdir/${key}.h");
    print F $hdrs;
    close F;
}

    

        


                             

                               
    
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d24 1
@


1.1
log
@layout works!
@
text
@d4 1
a4 1

a6 1
use LWP;
d31 1
a31 1
sub DESTROY {
d37 1
a37 3
    my $key = crypt(lc $url, substr($url,length($url)>>1,2));
    $key =~ s!/!^!g;
    return $key;
@
