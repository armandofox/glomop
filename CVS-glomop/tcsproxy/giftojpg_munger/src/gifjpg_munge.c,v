head	1.21;
access;
symbols
	Yatin-final:1.21
	Yatin:1.21.0.2
	pre-yatin-merge:1.21
	transend-beta2:1.20
	fox-dev:1.20
	giftojpg_munger-ng:1.18
	transend-beta-latest:1.18
	Aggregators:1.18
	NoAggregators:1.18
	iang:1.18.0.2
	transend-beta:1.17.0.2
	SOSP:1.8;
locks; strict;
comment	@ * @;


1.21
date	97.08.30.21.34.37;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	97.06.19.00.27.04;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	97.06.14.15.30.44;	author yatin;	state Exp;
branches;
next	1.18;

1.18
date	97.04.30.07.55.20;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	97.04.27.06.22.48;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	97.04.16.01.18.40;	author gribble;	state Exp;
branches;
next	1.15;

1.15
date	97.04.11.05.06.36;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	97.04.11.03.27.19;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	97.04.08.02.47.12;	author gribble;	state Exp;
branches;
next	1.12;

1.12
date	97.04.06.23.27.40;	author gribble;	state Exp;
branches;
next	1.11;

1.11
date	97.04.06.23.21.01;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.04.06.23.03.34;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	97.03.17.20.22.22;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.02.26.04.14.38;	author yatin;	state Exp;
branches;
next	1.7;

1.7
date	97.02.15.22.14.30;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.02.14.22.29.13;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.02.14.21.31.40;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.02.14.20.58.20;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.02.07.22.34.38;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.02.02.04.13.51;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.01.31.23.53.17;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.21
log
@reintegrated from branch fox-dev; bug remaining in dispatch.c which should always return a DistillerStatus and not an HTTP_Status
@
text
@/*
 *  gifjpg_munge.c
 *
 *  $Id: gifjpg_munge.c,v 1.20 1997/06/19 00:27:04 fox Exp $
 *
 *  This code acts as a GIF->JPG distillation server for tcsproxy.
 */

#include <limits.h>
#include <string.h>
#include <math.h>
#include <stdio.h>
#include <setjmp.h>
#include "jpeglib.h"
#include "gifjpg_munge.h"
#include "distinterface.h"
#include "gj_mem_src_dst_mgr.h"
#include "cdjpeg.h"

#include "../include/ARGS.h"
#include "../../frontend/include/ARGS.h"

typedef struct gifjpg_error_mgr_st {
  struct  jpeg_error_mgr pub;
} gifjpg_error_mgr, *gifjpg_error_ptr;

/* Some long-lived globals;  will be reused for each distillation
   for the lifetime of this distiller. */

jmp_buf jumpbuffer;                                 /* for setjmp */
struct jpeg_compress_struct   dstinfo;              /* gif->jpg, bytes->jpg */
struct jpeg_decompress_struct srcinfo;              /* jpg->bytes */
gifjpg_error_mgr              jsrc_err, jdst_err;   /* error handlers */
int                           bailout_now;          /* early bail for spec cases */
MonitorClientID               monID;

/* Quality tables for the beginner's interface */
int ismap_denom[5] = {1,1,1,1,1};    /* Don't want to lose text detail */
int ismap_qual[5] = {10, 15, 25, 50, 75};  /* Want high quality ismaps */
int noscale_denom[5] = {1,1,1,1,1};    /* Don't scale down this image */
int noscale_qual[5] = {8, 11, 15, 40, 75};  /* Just a guess */
int norm_denom[5] = {2, 2, 1, 1, 1}; /* Scale away! */
int norm_qual[5] =  {15, 35, 15, 40, 75};  /* Again, just a guess! */
int bailout_thresh[] = {1<<10, 2<<10, 4<<10, 8<<10, 16<<10};

C_DistillerType dType;

void gifjpg_error_exit(j_common_ptr cinfo);
void gifjpg_output_message(j_common_ptr cinfo);
int compute_scale_denom(int max_x, int max_y, int min_x, int min_y, 
			int in_x, int int_y, double scale);
DistillerStatus gjpg_passthrough(DistillerInput *din, DistillerOutput *dout);

DistillerStatus
ComputeDistillationCost(Argument *args, int numArgs,
			DistillerInput *din,
                        DistillationCost *cost)
{
  cost->estimatedTime_ms = DataLength(din);
  return distOk;
}

DistillerStatus
DistillerInit(C_DistillerType distType, int argc, const char * const *argv)
{
  if (0)
    return (distFatalError);

  dType = distType;
  /* Tell the JPEG library to report errors on STDERR, and call the
     gifjpg_error_exit() routine if a fatal error occurs.  This handler
     will do a longjmp back to the beginning... */

  srcinfo.err =  jpeg_std_error(&jsrc_err.pub);
  jsrc_err.pub.error_exit = gifjpg_error_exit;
  jsrc_err.pub.output_message = gifjpg_output_message;
  dstinfo.err =  jpeg_std_error(&jdst_err.pub);
  jdst_err.pub.error_exit = gifjpg_error_exit;
  jdst_err.pub.output_message = gifjpg_output_message;

  /* Create the compression/decompression objects.  This will allocate
     a whole bunch of stuff buried inside these structures. */

  jpeg_create_compress(&dstinfo);
  jpeg_create_decompress(&srcinfo);

  monID = DistillerGetMonitorClientID();

  DEBUG("distiller initialized ok\n");
  return distOk;
}

void
DistillerExit(void)
{
  jpeg_destroy_decompress(&srcinfo);
  jpeg_destroy_compress(&dstinfo);
}
  
DistillerStatus
DistillerMain(Argument *args, int nargs,
	      DistillerInput *din,
	      DistillerOutput *dout)
{
  JSAMPROW handoff = NULL;
  JDIMENSION handoff_height, handoff_width, num_scanlines;
  int        max_x=-1, max_y=-1, min_x=-1, min_y=-1, qual=55, i;
  int        expert=0, resize=0, quality=3, nodistill=0, ismap=0;
  double     scale = 0.5;
  cjpeg_source_ptr src_mgr;
  void       *phase1_data;
  INT32       phase1_length;
  int        fin_denom, fin_qual;
  DistillerStatus result = distBadInput;

  SetData(dout, NULL);
  bailout_now = 0;

  if ( (setjmp(jumpbuffer) != 0) ) {
    /*
     *  fatal error occurred, so return immediately.
     */
    MonitorClientSend(monID, "Distiller Errors", 
		      "Resetting distiller...\n", "Log");
    DistillerExit();
    DistillerInit(dType, 0, NULL);

    if (DataPtr(dout) != NULL)
      DataNeedsFree(dout,gm_True);
    else
      DataNeedsFree(dout,gm_False);
    return distFatalError;
  }

  /*
   *  parse distillation arguments.  set default values for some
   *  things, then override them if args are specified.  Default will
   *  be to scale each axis by 0.5, turn quality down to 55%.
   */

  for (i=0; i<nargs; i++) {
    INT32 argval = ARG_INT(args[i]);

    switch(ARG_ID(args[i])) {
    case GJPG_MAX_X:
      max_x = (int) argval;
      break;
    case GJPG_MAX_Y:
      max_y = (int) argval;
      break;
    case GJPG_MIN_X:
      min_x = (int) argval;
      break;
    case GJPG_MIN_Y:
      min_y = (int) argval;
      break;
    case GJPG_SCALE:
      scale = (double) ARG_DOUBLE(args[i]);
      break;
    case GJPG_QUAL:
      qual = (int) argval;
      break;
    case FRONT_RESIZE:
      resize = (int) argval;
      break;
    case FRONT_NO_DISTILL:
      nodistill = (int) argval;
      break;
    case FRONT_QUALITY:
      if (argval >= 1 && argval <= 5)
        quality = (int) argval;
      break;
    case FRONT_EXPERT:
      expert = (int) argval;
      break;
    case FRONT_ISMAP:
      ismap = (int) argval;
      break;
    default:
      break;
    }
  }

  if (nodistill) {
    return gjpg_passthrough(din, dout);
  }

  /* First pass through, we're just going to convert the GIF to JPEG */
  phase1_data = NULL;
  phase1_length = 0;
  dstinfo.in_color_space = JCS_RGB;
  jpeg_set_defaults(&dstinfo);
  src_mgr = jinit_read_gif(&dstinfo, (JOCTET *) DataPtr(din),
			   (INT32) DataLength(din));
  (*src_mgr->start_input)(&dstinfo, src_mgr);
  jpeg_default_colorspace(&dstinfo);
  jpeg_mem_dest(&dstinfo, (void **) &phase1_data, (UINT32 *) &phase1_length);
  jpeg_start_compress(&dstinfo, TRUE);

  while (dstinfo.next_scanline < dstinfo.image_height) {
    num_scanlines = (*src_mgr->get_pixel_rows)(&dstinfo, src_mgr);
    jpeg_write_scanlines(&dstinfo, src_mgr->buffer, num_scanlines);
  }

  (*src_mgr->finish_input)(&dstinfo, src_mgr);
  jpeg_finish_compress(&dstinfo);

  /* early bailout because of animated or transparent gif? */
  if (bailout_now
      &&  DataLength(din) <= bailout_thresh[quality]) {
    result = distBadInput;
    goto JPGMUNGE_RETURN;
  }
    

  /* Now we're into the second pass.  Let's do our JPEG->JPEG
   * distillation. We need to compute the denominator and the quality
   * knob setting. */

  if (expert) {
    /* Do expert-like things here.  Need to work out still. */
    fin_qual = qual;
    fin_denom = compute_scale_denom(max_x, max_y, min_x, min_y,
				    srcinfo.image_width,
				    srcinfo.image_height, scale);
  } else {
    /* We're in beginner mode.  Life is easier. */
    if (ismap) {
      fin_qual = ismap_qual[quality-1];
      fin_denom = ismap_denom[quality-1];
    } else if (resize) {
      fin_qual = noscale_qual[quality-1];
      fin_denom = noscale_denom[quality-1];
    } else {
      fin_qual = norm_qual[quality-1];
      fin_denom = norm_denom[quality-1];
    }
  }

  /* Prep the input decompressor */
  jpeg_mem_src(&srcinfo, phase1_data, phase1_length);
  jpeg_read_header(&srcinfo, TRUE);

  srcinfo.scale_num = 1;
  srcinfo.scale_denom = fin_denom;
  srcinfo.dither_mode = JDITHER_ORDERED;  
  srcinfo.dct_method = JDCT_FASTEST;      
  jpeg_start_decompress(&srcinfo);

  /* Prep the output compressor */
  SetDataLength(dout,0);
  SetData(dout, NULL);
  sprintf(dout->mimeType, "image/jpeg");
  jpeg_mem_dest(&dstinfo, (void **) &(DataPtr(dout)),
                (UINT32 *) &(DataLength(dout)));
  dstinfo.image_width = srcinfo.output_width;
  dstinfo.image_height = srcinfo.output_height;
  dstinfo.input_components = srcinfo.output_components;
  dstinfo.in_color_space = srcinfo.out_color_space;
  jpeg_set_defaults(&dstinfo);
  jpeg_set_quality(&dstinfo, fin_qual, TRUE);
  jpeg_start_compress(&dstinfo, TRUE);

  handoff_height = (JDIMENSION) 1;
  handoff_width = 
    srcinfo.output_width*sizeof(JSAMPLE)*srcinfo.output_components;
  handoff = (JSAMPROW) malloc(handoff_width);

  /* We're going to need some buffer space to hand off data
     from the decompressor to the compressor. */
  while (srcinfo.output_scanline < srcinfo.output_height) {
    num_scanlines = jpeg_read_scanlines(&srcinfo, &handoff, handoff_height);
    jpeg_write_scanlines(&dstinfo, &handoff, num_scanlines);
  }

  jpeg_finish_decompress(&srcinfo);
  jpeg_finish_compress(&dstinfo);

  result = distOk;

JPGMUNGE_RETURN:
  if (handoff)
    free(handoff);
  DataNeedsFree(dout,gm_True);
  if (phase1_data)
    free(phase1_data);
  if (DataLength(dout) > DataLength(din)) {
    SetDataLength(dout, DataLength(din));
    memcpy(DataPtr(dout), DataPtr(din), DataLength(din));
    sprintf(dout->mimeType, "image/gif");
  }
  DEBUG("finished processing\n");
  return result;
}

int compute_scale_denom(int max_x, int max_y, int min_x, int min_y,
			int in_x, int in_y, double scale)
{
  int int_scale=1, outx, outy;

  if (scale == 1.0)
    int_scale = 1;
  else if (scale == 0.5)
    int_scale = 2;
  else if (scale == 0.25)
    int_scale = 4;
  else if (scale == 0.125)
    int_scale = 8;
  else
    int_scale = 2;

  /* test null arg case */
  if ((max_x == -1) && (max_y == -1) && (min_x == -1) && (min_y == -1))
    return int_scale;

  /* if image smaller than min, we're done already */
  if ((in_x <= min_x) || (in_x <= min_y))
    return 1;

  /* compute theoretically what the requested scale factor would give us */
  outx = in_x / int_scale;
  outy = in_y / int_scale;

  if ((min_x != -1) && (outx < min_x)) {  /* must try to satisfy min_x */
    while ((outx < min_x) && (int_scale > 1)) {
      int_scale >>= 1;
      outx = in_x / int_scale;
      outy = in_y / int_scale;
    }
    return int_scale;
  }

  if ((min_y != -1) && (outy < min_y)) {  /* must try to satisfy min_y */
    while ((outy < min_y) && (int_scale > 1)) {
      int_scale >>= 1;
      outx = in_x / int_scale;
      outy = in_y / int_scale;
    }
    return int_scale;
  }

  if ((max_x != -1) && (outx > max_x)) {  /* must try to satisfy max_x */
    while ((outx > max_x) && (int_scale < 8)) {
      int_scale <<= 1;
      outx = in_x / int_scale;
      outy = in_y / int_scale;
    }
    return int_scale;
  }

  if ((max_y != -1) && (outy > max_y)) {  /* must try to satisfy max_y */
    while ((outy > max_y) && (int_scale < 8)) {
      int_scale <<= 1;
      outx = in_x / int_scale;
      outy = in_y / int_scale;
    }
    return int_scale;
  }

  return int_scale;
}

void gifjpg_error_exit(j_common_ptr cinfo)
{
  (*cinfo->err->output_message)(cinfo);
  longjmp(jumpbuffer, 1);
}

void gifjpg_output_message(j_common_ptr cinfo)
{
  char buffer[JMSG_LENGTH_MAX+1];

  (*cinfo->err->format_message)(cinfo, buffer);
  strcat(buffer, "\n");
  MonitorClientSend(monID, "Distiller Errors", buffer, "Log");
}

DistillerStatus gjpg_passthrough(DistillerInput *din, DistillerOutput *dout)
{
  strcpy(dout->mimeType, din->mimeType);
  SetDataLength(dout,DataLength(din));
  SetData(dout, DataPtr(din));
  DataNeedsFree(dout,gm_False);
  return distOk;
}
@


1.20
log
@changes and additions to transend.text.piml (pilot markup language html
distiller).  commented the ARGS.h file for distillers.  distillers now
only observe Quality arg if it has a reasonable value.  Changes to main
prefs to make values of FRONT_SHOW_ICON arg agree with perl html distiller.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.19 1997/06/14 15:30:44 yatin Exp $
d20 2
a21 1
#include "../../frontend/include/ALLARGS.h"
@


1.19
log
@changes to the DistillerInit() API
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.18 1997/04/30 07:55:20 fox Exp $
d169 2
a170 5
      quality = (int) argval;
      if (quality > 5)
	quality = 5;
      else if (quality < 1)
	quality = 1;
@


1.18
log
@frontend and ptm changes for new distiller api
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.17 1997/04/27 06:22:48 fox Exp $
d63 1
a63 1
DistillerInit(C_DistillerType distType)
d125 1
a125 1
    DistillerInit(dType);
@


1.17
log
@changed jpg munger to observe transparency/animation bailout for threshold size based on quality.  fixed gifmunger, but doesnt seem likely we will use it at this point.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.16 1997/04/16 01:18:40 gribble Exp $
d51 1
a51 3
DistillerStatus gjpg_passthrough(DistillerInput *din, DistillerOutput *dout,
				 gm_Bool *free_output);

d58 1
a58 1
  cost->estimatedTime_ms = din->length;
d102 1
a102 2
	      DistillerOutput *dout,
              gm_Bool *free_output)
d115 1
a115 1
  dout->data = NULL;
d127 2
a128 2
    if (dout->data != NULL)
      *free_output = gm_True;
d130 1
a130 1
      *free_output = gm_False;
d187 1
a187 1
    return gjpg_passthrough(din, dout, free_output);
d195 2
a196 2
  src_mgr = jinit_read_gif(&dstinfo, (JOCTET *) din->data,
			   (INT32) din->length);
d212 1
a212 1
      &&  din->length <= bailout_thresh[quality]) {
d253 2
a254 2
  dout->length = 0;
  dout->data = NULL;
d256 2
a257 2
  jpeg_mem_dest(&dstinfo, (void **) &(dout->data), 
                (UINT32 *) &(dout->length));
d286 1
a286 1
  *free_output = gm_True;
d289 3
a291 3
  if (dout->length > din->length) {
    dout->length = din->length;
    memcpy(dout->data, din->data, din->length);
d380 1
a380 2
DistillerStatus gjpg_passthrough(DistillerInput *din, DistillerOutput *dout,
				 gm_Bool *free_output)
d383 3
a385 3
  dout->length = din->length;
  dout->data = din->data;
  *free_output = gm_False;
@


1.16
log
@More changes....fixed up distillers so that the DistillerInit() function
accepts type information.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.15 1997/04/11 05:06:36 gribble Exp $
d33 1
d43 1
d107 1
a107 1
  JSAMPROW handoff;
d116 1
d119 1
d213 8
a280 1
  free(handoff);
d283 6
d298 1
a298 1
  return distOk;
@


1.15
log
@more changes...obvious ones...if distilled version is bigger than
original (for gifjpg and jpg mungers) then send original.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.14 1997/04/11 03:27:19 gribble Exp $
d43 2
d63 1
a63 1
DistillerInit(void)
d68 1
d124 1
a124 1
    DistillerInit();
@


1.14
log
@More tweaks.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.13 1997/04/08 02:47:12 gribble Exp $
d37 1
a37 1
int ismap_qual[5] = {15, 25, 35, 50, 75};  /* Want high quality ismaps */
d39 1
a39 1
int noscale_qual[5] = {10, 15, 20, 40, 75};  /* Just a guess */
d41 1
a41 1
int norm_qual[5] =  {15, 35, 20, 40, 75};  /* Again, just a guess! */
d272 5
@


1.13
log
@More aggressive.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.12 1997/04/06 23:27:40 gribble Exp $
d39 3
a41 3
int noscale_qual[5] = {10, 15, 20, 30, 75};  /* Just a guess */
int norm_denom[5] = {2, 2, 2, 1, 1}; /* Scale away! */
int norm_qual[5] =  {15, 35, 55, 35, 75};  /* Again, just a guess! */
@


1.12
log
@fixed range bug
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.11 1997/04/06 23:21:01 gribble Exp $
d37 1
a37 1
int ismap_qual[5] = {20, 35, 45, 65, 90};  /* Want high quality ismaps */
d39 3
a41 3
int noscale_qual[5] = {10, 25, 35, 55, 90};  /* Just a guess */
int norm_denom[5] = {4, 2, 2, 1, 1}; /* Scale away! */
int norm_qual[5] =  {30, 50, 65, 55, 90};  /* Again, just a guess! */
@


1.11
log
@Fixed up ismap aggressiveness prefs.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.10 1997/04/06 23:03:34 gribble Exp $
d166 4
@


1.10
log
@Fixed up so that obeys FRONT_EXPERT, FRONT_RESIZE, FRONT_QUALITY, and
FRONT_ISMAP.:
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.9 1997/03/17 20:22:22 gribble Exp $
d37 1
a37 1
int ismap_qual[5] = {20, 45, 60, 75, 90};  /* Want high quality ismaps */
@


1.9
log
@Fixed up so uses ARGS.h
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.8 1997/02/26 04:14:38 yatin Exp $
d20 1
a20 1
#include "../include/ARGS.h"
d35 8
a44 1

d47 2
d66 3
a68 3
  /* Tell the JPEG library to report errors on STDERR, and do an
     exit() if a fatal error occurs.  I could write my own error handler,
     but let's get the basics working first. */
d105 1
d110 1
d118 2
a119 1
    MonitorClientSend(monID, "Distiller Errors", "Resetting distiller...\n", "Log");
d158 15
d178 4
d202 23
a224 1
  /* Now we're into the second pass.  Let's do our JPEG->JPEG distillation */
d231 1
a231 4
  srcinfo.scale_denom = compute_scale_denom(max_x, max_y, min_x, min_y, 
					    srcinfo.image_width,
					    srcinfo.image_height, 
					    scale);
d247 1
a247 1
  jpeg_set_quality(&dstinfo, qual, TRUE);
d354 9
@


1.8
log
@Major changes to the PTM. The PTM can now auto-launch new distillers when
the load on the system gets too high. The frontend stub has a separate
thread per connection to the distillers and PTM to handle network events
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.7 1997/02/15 22:14:30 gribble Exp $
d20 1
a20 1
#include "GIFJPG_ARGS.h"
@


1.7
log
@Fixed up so that distiller sets free_output correctly after a long_jmp
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.6 1997/02/14 22:29:13 gribble Exp $
d47 1
a47 1
  cost->estimatedTime = din->length;
@


1.6
log
@Fixed floating point divide trouble.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.5 1997/02/14 21:31:40 gribble Exp $
d101 2
d110 5
a114 1
    
@


1.5
log
@Fixed.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.4 1997/02/14 20:58:20 gribble Exp $
d219 1
a219 1
  int int_scale, outx, outy;
d246 1
a246 1
      int_scale >>= 2;
d255 1
a255 1
      int_scale >>= 2;
d264 1
a264 1
      int_scale <<= 2;
d273 1
a273 1
      int_scale <<= 2;
@


1.4
log
@Fixed up so that it computes scale factor correctly.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.3 1997/02/07 22:34:38 gribble Exp $
d231 1
a231 1
  
@


1.3
log
@Now gifjpg_munge will handle errors gracefully, reporting errors to the
monitor and doing a longjmp to reinitialize the distiller state.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.2 1997/02/02 04:13:51 gribble Exp $
d245 1
a245 1
    while ((outx < min_x) && (int_scale > 1))
d247 3
d254 1
a254 1
    while ((outy < min_y) && (int_scale > 1))
d256 3
d263 1
a263 1
    while ((outx > max_x) && (int_scale < 8))
d265 3
d272 1
a272 1
    while ((outy > max_y) && (int_scale < 8))
d274 3
@


1.2
log
@Holy moley!  GIF->JPG distillation works, and it is BLISTERINGLY fast.
@
text
@d4 1
a4 1
 *  $Id: gifjpg_munge.c,v 1.1 1997/01/31 23:53:17 gribble Exp $
d13 1
d22 4
d31 6
a36 2
struct jpeg_decompress_struct srcinfo;             /* jpg->bytes */
struct jpeg_error_mgr         jsrc_err, jdst_err;   /* error handlers */
d41 1
d61 6
a66 2
  srcinfo.err =  jpeg_std_error(&jsrc_err);
  dstinfo.err =  jpeg_std_error(&jdst_err);
d74 2
d101 1
a101 1
  if (setjmp(jumpbuffer) != 0) {
d105 4
d111 1
a111 1
  
d270 16
@


1.1
log
@Skeleton for giftojpg converter.
@
text
@d4 1
a4 1
 *  $Id$
d17 1
d25 2
a26 2
struct jpeg_decompress_struct srcinfo;              /* jpg->bytes */
struct jpeg_compress_struct   dstinfo;              /* bytes->jpg */
d51 2
a52 2
  srcinfo.err = jpeg_std_error(&jsrc_err);
  dstinfo.err = jpeg_std_error(&jdst_err);
d78 6
a83 3
  JDIMENSION handoff_height, num_scanlines;
  int      max_x=-1, max_y=-1, min_x=-1, min_y=-1, qual=55, i;
  double   scale = 0.5;
d102 1
a102 1
    case JPG_MAX_X:
d105 1
a105 1
    case JPG_MAX_Y:
d108 1
a108 1
    case JPG_MIN_X:
d111 1
a111 1
    case JPG_MIN_Y:
d114 1
a114 1
    case JPG_SCALE:
d117 1
a117 1
    case JPG_QUAL:
d125 22
d148 1
a148 1
  jpeg_mem_src(&srcinfo, din->data, din->length);
d156 2
a157 2
  srcinfo.dither_mode = JDITHER_ORDERED;  /* moderate speed/quality */
  srcinfo.dct_method = JDCT_FASTEST;      /* rippin' fast DCT */
d165 1
a165 2
		(UINT32 *) &(dout->length));

d174 5
a180 4
  handoff_height = (JDIMENSION) 1;
  handoff = (JSAMPROW)
    malloc(srcinfo.output_width*sizeof(JSAMPLE)*srcinfo.output_components);
  
d190 2
a193 1

@
