head	1.3;
access;
symbols
	transend-beta2:1.2
	fox-dev:1.2
	transend-beta-latest:1.2
	Aggregators:1.2
	NoAggregators:1.2
	iang:1.2.0.4
	transend-beta:1.2.0.2
	SOSP:1.2
	merged_preintegrate:1.2
	heisenbug:1.2
	PRE_INTEGRATION:1.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.3
date	97.10.02.01.18.03;	author fox;	state dead;
branches;
next	1.2;

1.2
date	96.10.23.06.03.34;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.09.27.02.40.32;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.27.02.40.32;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@updated documentation both in doc subdir and in pod stuff inside .pm files in xs
@
text
@FLOW OF CONTROL

Key: 

foo' indicates a munged version of foo.  if foo is a URL, the URL
is munged to encapsulate distillation info.  If foo is a WWW object, the
object is distilled and the distilled representation is named by the
appropriate munged URL.

dinfo is distillation info: the user prefs encoded into a foo'.

Flow for HTML:

Client                  Front-end            PHarvest         Distillers

GET url     --->      
            <--     [0]  Redirect to url'
GET url'    -->     spawn thread
                    [1] Query all for url   --> 
                                          <-- return HTML
                       Send HTML and dinfo    ------------->  munge HTML
           <----         return to client    <------
                         detach thread

Flow for any inline data from HTML page: (note that all inline URL's
have been munged)

GET url'    -->     [1] Query all for url'   -->
            <---   HIT: return object'     <----   HIT
                                           <----  MISS
                   MISS: query all for url'  --->
                  Locate distiller for type <-- return obj
                     Send obj and dinfo     --------------->  distill
                                                 store   <--   Store object
             <-------  Deliver object       <--------------- deliver object

[0] Redirect

The key thing here is the generation of url' from url.  The client must
be identified (by IP address?) and the address mapped to a client
profile, which supplies the magic dust for constructing url'.  It is
probably feasible to keep the database in memory: 50K users * 4 bytes
(IP addr) * 16 bytes of prefs (roughly) =~ 4MB.

Some prefs are:

bits   meaning
 1     use redirection to avoid client cache pollution
 4     log2(bits/pixel), ie 1,2,4,8
 1     strip javascript
 1     strip backgrounds
 1     use LOWSRC hack vs. provide refinement button
 1     prefetch image dimensions
 

[1] Harvest query

For a given number of Harvest nodes n, there is a hash function H_n(URL) that
maps a URL to exactly one node; call this the URL's home node.  A new
epoch begins when a group of k 
Harvest nodes is added to (or removed from) the system.  When checking for
the presence of a URL, if the epoch is younger than t, check both
H_n(URL) and H_{n+k}(URL), to alleviate the miss rate during the epoch
transition.  If the home node hits, we're done.  If some other node hits
because it was the home node during the previous epoch, we're also done;
but eventually the URL will be evicted from that node.  If nobody hits,
we direct the home node to perform the fetch and return the object.

Steve points out: the easy way to achieve this is to simply determine
the home node and query it, and set up each node to have all the other
nodes as siblings.  Thus if the home node misses, it will automatically
try to get the object from its siblings, and failing that, will go out
and fetch it -- just the behavior we want.

Steve also points out that in general, what we're doing is mapping one
namespace into another, and we should start thinking about it from that
perspective.  I.e. formally define what the mapping operations are,
etc.  Armando suspects that doing this will reveal new uses/features
that we haven't thought of.  
                        
@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@Initial revision
@
text
@d69 11
a79 1
                                        
@


1.1.1.1
log
@doc subdir for design documents, etc
@
text
@@
