head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.10.01.23.03.37;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added 100197.html.
@
text
@<html>
<title>
CS294-8 project discussion
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
CS294-8 project discussion
</h1>

<ol>
     <li> Using cheap stuff for reliable systems - Randi, Aaron.
	  <ul>
	       <li> Cheap, commodity components are intrinsically more
		    unreliable.  How do we deal with this in Millenium?
	       <li> &quot;Intelligent components&quot; - greater tolerance
		    to hardware faults.  Use implicit info to detect
		    imminent component failure.  Processor directly on
		    component.  E.g. on disk, see more CRC errors.
	       <li> model failure modes of
		    <ul>
			 <li> commodity system
			 <li> commodity system with intelligent components
			 <li> system with redundant CPUs and intelligent
			      components
		    </ul>
		    and predict MTBF for nodes/entire system.
	       <li> <i>David: could we explore these issues one level
		    higher up in the design space?</i>
	  </ul>
	  
	  <p>
	  
     <li> Randy
	  <ul>
	       <li> LSI logic background: SMP on a chip?
	       <li> DRAM + logic (IRAM) helps
	       <li> Memory hierarchy - crossbar? single bus?
	       <li> at which level of the hierarchy do you do your sharing?
	       <li> <i>David: what is specifically new or different about
		    multiple CPUs on one chip as opposed to multiple
		    chips.</i>
	  </ul>

	  <p>
	  
     <li> Bhaskar, Shankar
	  <ul>
	       <li> microeconomic model - based on IOUs for a group of
		    clusters
	       <li> study dynamics of the model
		    <ul>
			 <li> groups of clusters - granularity of trust is
			      a cluster
			 <li> leader in cluster is negotiator, both inter-
			      and intra- cluster
			 <li> money within cluster, IOUs across clusters
		    </ul>
	       <li> giving money for service is not atomic, must deal with
		    cheating and forging
	       <li> management issues, negotiations, arbitrations
	       <li> convergent honesty? 
	  </ul>
	  
	  <p>
	  
     <li> Jimmy - build better computing environment for UCB
	  <ul>
	       <li> more security, more reliability, more tech support,
		    dialup-support
	       <li> MIT Athena, CMU Andrew, are both better, even though
		    they are 80's technology for 80's applications
	       <li> roadmap:
		    <ol>
			 <li> study existing systems
			 <li> figure out what apps people want to use
			 <li> define requirements for UCB environment
			 <li> design architecture
			 <li> demonstrate pieces
			 <li> concoct roadmap for campus deployment
		    </ol>
	       <li> plan for a plan...
	  </ul>

	  <p> 

     <li> Matt - tiered resource mgmt.
	  <ul>
	       <li> Millenium: lots o' apps
	       <li> application-level solutions/designs are the way to go
		    for issues like security, fault tolerance, etc.
	       <li> what programming model do you give people?  how do you
		    get them to &quot;code&quot; at higher and higher
		    levels of abstractions?  runtime/debugging environment?
	       <li> don't want full transparency..
	       <li> sounds like PVM
	  </ul>

	  <p>

     <li> Remzi
	  <ul>
	       <li> One sentence summary: build, measure, or simulate
		    something within a month.  NOW is good prototype for
		    millenium.
	       <li> Jim: do stuff like build clusters within NOW with
		    different communications capabilities, etc.
	       <li> 
	  </ul>

	  <P>

     <li> Steve
	  <ul>
	       <li> front end SPF problem:
		    <ul>
			 <li> magic router
			 <li> client intelligence
			 <li> distributed decision at app level
		    </ul>
	       <li> streams programming model - across nodes?
	  </ul>

	  <p>
	  
     <li> David
	  <ul>
	       <li> infrastructure for doing simulations on clusters
	       <li> paper, graphs - have simulator, want to evaluate
		    simulator across large parameter space
	       <li> give system (simulator, parameter space) pair, and have
		    system handle this for you.
	       <li> decentralize fault tolerance into agent.  give each
		    agent &quot;possession&quot; of some of the centralized
		    resources.  Agent can use own resources for own jobs,
		    or broker them out to other agents.  Analogy: each
		    agent has own apartment, can live their, or rent out.
	       <li> want machinery for tracking simulation results, which
		    piece of parameter space you've searched, which
		    simulations you've used, etc.
	       <li> might want to try out your simulation on new resources
		    (e.g. chem building computer) to see if it could work.
		    Obviously sandboxing needed.  Agent provides requested
		    envelope of simulation, sandbox enforces.
	       <li> simulators with checkpoints - can then pick up and move
		    state to another machine if node going to fail.
	  </ul>
</ol>

<hr>
<a href="index.html"><i>Back to index</i></a>
</body></html>
@
