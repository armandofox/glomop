head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	97.09.18.01.51.43;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.09.17.19.30.20;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.09.17.18.45.11;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.3
log
@:
@
text
@<html> <head>
<title>CS294-8 Notes - 09/10/97</title>
</head>

<body>
<h1>Implicit Stuff</h1>

<ul>
     <li> What are the design principles?
	  <ul>
	       <li> centralized vs. distributed
	       <li> explicit vs. implicit
	       <li> application semantics - guaranteed performance
		    vs. probabilistic performance - notion vs. correctness?
	       <li> 
	  </ul>
     <li> Implicit methods
	  <ul>
	       <li> approximations of explicit method, used when explicit
		    method would be too complex
	       <li> penalties of mistaken implication - can affect
		    performance of system of a whole?
	       <li> using dataflow natural to system to infer control flow.
	       <li> layering?  layer is implicit if using info from layer
		    above it in order to deduce information
	       <li> &quot;Peek&quot; - this is the essence...?
	       <li> selection abstraction breaking?
	  </ul>
     <li> Explicit
	  <ul>
	       <li> if no system components communicate with each other in
		    order to infer/convey information, but merely local
		    information gleaned from applications
	       <li> e.g. implicit: TCP.  If app never opens socket, you
		    never get into situation where TCP daemons are
		    exchanging state info.  Only application derived events
		    can cause system state information to be inferred.
	  </ul>
     <li> requirements
	  <ul>
	       <li> local agent reacts to observations
	       <li> is any local process thinking about global state?
	       <li> 
	  </ul>
     <li> what causes explicit systems to break?
	  <ul>
	       <li> scale
	       <li> false assumptions
	  </ul>
</ul>

<hr>

<h1>Design issues: Implicit vs. explicit control methods, data
semantics, etc.</h1> 

<ul>
  <li> Ex: mem mgt in Inktomi.  Central manager that knows the
       directory?  Distribute responsibility to local VM system on each
       node?
  <li> Ex: TranSend load balancing and remote execution.
  <li> Ex: Cache coherence: the other extreme; apps don't &quot;expect&quot; failure
       modes there, and everything is centralized.
  <li> Hypothesis: When you can get by with implicit methods/hints, you
       should.  Ex:
       TCP congestion control.  Explicit methods may be more efficient
       but more restrictive, and are sometimes infeasible due to system
       complexity or distributed authority.  (Joe H.: &quot;In fascist
       countries, the trains
       run on time.&quot; David C.: &quot;But they never go where you want to
       go.&quot;)
  <li> Implicit methods can exhibit weirdness in corner cases.
       Sometimes the decision is based on what the penalty is for making
       a mistake using the implicit method.
</ul>

<h1>Attempts to define terms</h1>

<ul>
  <li> System: collection of processes performing a function
  <li> Application: things that runs on the system
       (Joe H.: it's only a real system if it can support a variety of
       heterogeneous applications, as opposed to a dedicated system such
       as a DB or a robot)
  <li> Explicit: entities in system actively exchange any information
       beyond that conveyed by &quot;normal&quot; application data flow.
  <li> &quot;Peek&quot;: sometimes the lower layers use the upper layer semantics
       as hints (SRM, ALF, ...)  (Dave W: &quot;selective abstraction
       breaking&quot;, like looking at other people's traffic to do
       congestion control.  Also: OS following DB research in letting
       apps manage their own resources; TCP congestion control based on
       peeking since there was no abstraction in original TCP; etc)
</ul>

<h1>Food for thought</h1>

<ul>
  <li> Are explicit systems more robust?  DO they submit more readily to
       analysis?
  <li> Do implicit systems necessarily scale better?
  <li> How about adaptive systems?  Is that axis orthogonal to implicit
       vs. explicit, or to the scalability axis?
  <li> Joe H.: Implicit system == some player can decide not to play,
       but system still works.
  <li> Where could we &quot;cheat&quot; (peek) to solve something that's not
       working now?  How far will it get us to redesign some
       abstractions &quot;properly&quot;?
</ul>



<hr>
<address>fox@@cs.berkeley.edu</address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>


<hr>
<address><a href="http://www.cs.berkeley.edu/~gribble/">Steve
Gribble</a> / <i><a   
HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</a></i></address>
<address><a href="http://www.cs.berkeley.edu/~fox/">Armando
Fox</a> / <i><a   
HREF="mailto:fox@@cs.berkeley.edu">fox@@cs.berkeley.edu</a></i></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.2
log
@Virtual network protocols for myrinet summary added.
@
text
@d123 3
a126 1
Last modified: Wed Sep 17 11:59:58 1997
@


1.1
log
@Added - 091097.html class notes.
@
text
@d53 67
d124 1
a124 1
Last modified: Wed Sep 10 15:17:05 1997
@
