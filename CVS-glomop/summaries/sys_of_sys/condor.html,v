head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.10.31.01.53.19;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@condor
@
text
@<html>
<title>
Condor
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Condor High Thruput Computing  System
</h1>
<strong>
Myron Livny et al., Univ. of Wisconsin, Madison
</strong>

<p><b>One-line summary:</b>
Harvest idle cycles on other people's workstations to run batch jobs.
Goals: portability; ease of programming; you control your own workstation.
Provide file-based checkpointing (ergo migration), but current Unix
trends are making their implementation more and more difficult.

</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Philosophy: transparent checkpointing, location-independent behavior.
  <li> Facilities the OS should provide: checkpointing; detecting "when
       a user has left or returned to" their workstation (normalized
       loadavg, kbd/mouse idle, etc); OS supported checkpointing.
  <li> Scheduling and load balancing: controlled by centralized agent;
       priority with aging is the basic algorithm.
  <li> Portability: trap mmap() calls; can optionally redirect file I/O
       to RPC stubs.  Files are reopened and lseek()'d to the right
       place on restart after chkpt.
  <li> Checkpointing is based on reconstructing info from core files
       generated on signal, so to the user process it looks like a
       signal handler.
  <li> Unix trends are making transparent checkpointing difficult and
       increasingly in conflict with portability.  E.g. dynamic
       libraries have to be checkpointed; corefile formats not 100%
       standard; some OS's like Solaris don't <i>really</i> save all the
       CPU state in the corefile; etc.
</ul>

<h2>Relevance</h2>

A different philosophy: mostly-support transparent checkpointing and
location independence.  A research question is: "What would you do
differently if you were building Condor today"?  Some design
alternatives might be:

<ul>
  <li> End-to-end argument for "application level" checkpointing - let
       the app checkpoint its 
       own state.
  <li> Rather than complete location independence, affinities by constraint
       specification ("must see filesystem X", "OS must support
       select()", etc.), which can include "I have no location dependence".
  <li> Would something like Java give you checkpointing <i>and</i>
       portability, if you could build a checkpointing version of the
       JVM?  (seems easier than arbitrary checkpointing in the OS).
</ul>

<h2>Flaws</h2>

<ul>
  <li> The manager seems to have hard state about what jobs run where,
       etc.  What if it fails?
  <li> For things like "flock of condors", why not distributed/soft
       state/broadcast (ie BASE) management, like boundary routers,
       multicast routers, etc.,instead of  a centralized manager?
  <li> Hard to do IPC cleanly or without breaking Condor mechanisms, so
       this is really for batch processing not distributed processing.
  <li> What about syscalls that return EINTR?
  <li> Multithreaded code (where threads are in the kernel)?  Is the
       thread subsystem state kept in the corefile?
  <li> Any other languages supported besides C?
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
