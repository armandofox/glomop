head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.03.23.51.36;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added class notes for 090397
@
text
@<html> <head>
<title>CS294-8 Notes - 09/03/97</title>
</head>

<body>
<h1>Javelin</h1>

<ul>
     <li> On trust:  who do you trust?
	  <ul>
	       <li> Brokers? Yes...need to.  This could be a big flaw.
	       <li> Anything else?  Probabilistically, no.  (You'd better
		    not have to, because you can't.)
	       <li> Fault tolerance, byzantine computation, etc. This is
		    really hard.  Fault tolerant CILK?  If individual
		    operators are functions, reapply function elsewhere if
		    timeout/crash.
	       <li> Timeout is a hard problem: how do you know how long
		    your program should run?
	  </ul>
	  
     <li> Bounds on resource consumption...
	  <ul>
	       <li> Economic model is good way to decide bounds, but you
		    still have the problem of enforcing the model.
	  </ul>
	  
     <li> Brokerage architecture is the contribution of this paper, IMHO.
     <li> They got quite a bit out of the design - 3 tier architecture.
     <li> Can we change the architecture and deal with some of these issues?
	  <ul>
	       <li> add 4th tier? - client-side policeman
	       <li> add hierarchy - abstract away trust, increase bandwidth
		    of brokers.
		    <ul>
			 <li> As go up hierarchy, abstract away lower details -
			      i.e. if operate at top level, can know about load
			      distribution, etc.  If at low-level, can't have a
			      high-level broker guarantee entire
			      computation.
		    </ul>
	  </ul>
     <li> Why coarse-grained, independent jobs?
	  <ul>
	       <li> minimize job spawning:job execution overhead
	       <li> communication meltdown for large number of jobs.
	  </ul>
     <li> What class of applications can Javelin <b>not</b> handle?
	  <ul>
	       <li> interactive applications
	       <li> data-centric as opposed to compute-centric computing - 
	            distributed databases: move the computing to the data.
		    Can't do that here in Javelin.
	  </ul>
     <li> Economic data modeling, buying replicated data, etc.
	  <ul>
	       <li> Sounds an awful lot like Mariposa's macroeconomic
		    model for affinity scheduling of workers.
	  </ul>
     <li> Kuszmaul - optimizing work stealing to match bandwidths of
	  branches in a tree of worker nodes (similar: programming on
	  Clumps).  Is this applicable?
     <li> Encrypted computing.
	  <ul>
	       <li> Dave Wagner:  if have a particular problem to solve in
		    encrypted form, there is a restricted subset of
		    problems that can easily be handled by encrypted
		    computing.  For most problems, practically impossible.
		    Consider, for instance, composition of functions.
	       <li> Maybe (<i>maybe</i>) stuff like blinded database
		    lookup, but even that's fishy.
	       <li> conclusion... <font color=red>RED HERRING</font>
	  </ul>
     <li> Joe Hellerstein:
	  <ul>
	       <li> We have many idle toasters, but we're not trying to
		    make toast all the time...
	       <li> I.e., do we really need this infrastructure?
	       <li> David Culler: don't buy the hype.  Really about
		    harnessing a (large) set of computing to solve one
		    particular task.  Is there a better strategy for
		    putting together a system that harnesses a set of
		    (arbitrary) machines?
	  </ul>
     <li> What about rsh + perl + glustat?  I.e., what are minimum
	  requirements for a distributed processing environment?
	  <ul>
	       <li> distributed file space
	       <li> unpriviledged account, sandboxed execution
	       <li> interpreted execution to deal with heterogeneity
	       <li> communication (between spawners, spawnees, ...)
	  </ul>
     <li> What are the design principles?
	  <ul>
	       <li> Compare to Glunix, Condor, LSF, ...
	  </ul>
</ul>

<hr>
<address><a href="http://www.cs.berkeley.edu/~gribble/">Steve
Gribble</a> / <i><a   
HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</a></i></address>
<!-- hhmts start -->
Last modified: Wed Sep  3 16:51:48 1997
<!-- hhmts end -->
</body> </html>
@
