head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.03.17.17.03;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>
<title>
Javelin
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Javelin
</h1>
<strong>

</strong>

<p><b>One-line summary:</b>
Coarse-grained Linda/CILK-like programming over a wide-area network of
Java compute servers, with the corresponding mechanisms
implemented as Java  class library and the applet being the unit of work.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Clients submit compute requests to brokers, who in turn locate
       servers to run them.
  <li> Security/privacy problems:
       <ul>
         <li> Use an intranet as target env., blah blah.  (so much for
              global computing.)
         <li> Signed applets, blah blah.
         <li> Denial of service (or: how many server resources a
              particular user's task(s) should be alloewd to consume):
              an interesting open question, blah blah.
       </ul>
  <li> Load balancing:
       <ul>
         <li> servers have asynchronous I_WANT_WORK/HERE_IS_WORK
              mechanism for work stealing.  No policy or details are
              described.
         <li> Java class implements distributed double-ended queue: when
              new work arrives, push it onto your work queue; when you
              have cycles, dequeue from your work queue; others can
              steal from your work qeue.
       </ul>
  <li> Fault tolerance is left to the client "in this version".
  <li> Inter-node communication: JDatagramSocket class multiplexes
       inter-applet data onto a single underlying channel (UDP port, TCP
       conn, etc.).  Does this imply that applets that explicitly communicate
       with other applets have to know how JDatagramSocket is
       implemented (so they know whether they have to do their own flow
       control, end-to-end acks, etc.)?
  <li> Programming model is Linda-like.
</ul>

<h2>Relevance</h2>


<h2>Flaws</h2>

<ul>
  <li> What percentage of the "useful computers" are behind firewalls?
  <li> Cite that would have helped: on fault tolerance, the Calypso
       auto-resubmit stuff
  <li> similarly, on scheduling that accounts for both
       server/client workload split and comm latency, the Sweb++ papers
       from UCSB on dynamic task chain splitting.  Comm latency is
       likely to be a major issue in scheduling, no?
  <li> 
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@
