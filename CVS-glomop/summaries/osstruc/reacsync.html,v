head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.01.06.02.31.17;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added some OS structure papers
@
text
@<html>
<title>
Reactive Synchronization
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Reactive Synchronization Algorithms for Multiprocessors
</h1>
<strong>
Beng-Hong Lim and Anant Agarwal, MIT LCS
</strong>

<p><b>One-line summary:</b>
Allow dynamic selection of which "flavor" of synchronization to use
(test-and-set, queue lock, etc.), by tracking the level of contention
experienced by running program.  A
<i>consensus object</i> synchronizes (!) the change among algorithms.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Key: allow multiple processes to execute different
       synchronization protocols, but ensure that only processes
       executing the currently selected protocol succeed (others must
       retry).
  <li> A <i>mode variable</i> is used as a hint for which protocol is
       the current one.
  <li> To change from protocol A to protocol B: acquire L(A) (lock for A's
       synchronization object); change mode variable to B; signal L(B); leave
       L(A) locked.  <B>Invariant:</B> L(A) and L(B) are never both free
       simultaneously.
  <li> A process that had begun executing protocol A will find L(A)
       locked, and will either  recheck the mode
       variable, which has been changed to B, or will be signaled for
       retry later, so they check the mode variable at that time.
  <li> The formal requirements for using this cool hack:
       <ul>
         <li> <b>My paraphrase:</b> Critical sections are mutually
              exclusive, and completion of the critical sections is a
              necessary and sufficient condition for successful protocol
              completion.<br>
              <b>The gory details:</B>
         <LI> To each protocol corresponds a <i>consensus
              object</i> which must be accessed atomically in order to complete
              the protocol (test-and-test-and-set lock, queue lock,
              etc.)
         <li> Once the C.O. has been successfully accessed, the protocol
              must be able to run to successful completion regardless of
              whether other processes subsequently access the C.O.
         <li> Internal protocol state (of a synchronization operation)
              can only be modified by the process that currently has
              access to the C.O.
       </ul>
  <li> Policy (when to change protocols): e.g. change from T&amp;T&amp;S
       to queue lock when the number of TTS trials seen by a process
       before succeeding exceeds some threshold; change from queue lock
       to TTS when queue is found to empty upon acquisition some
       threshold number of consecutive times.  No formalisms offered for
       policy.
  <li> Microbenchmark Performance: Reactive algorithm follows the
       "optimum curve" for 
       both fetch-and-op and spin locks (i.e. it performs as well as TS
       or TTS with backoff for low contention, and as well as queue
       locks for high contention).
  <li> Macrobenchmarks: highly concurrent programs run with varying
       numbers of processors (hence varying contention levels).  For
       each run, they tried queue locks and  software combining trees.
       Reactive algorithm matched performance of the better of the two
       in every case.  (The graphs in this paper are great; check them
       out.)
  <li> Overhead of switching protocols: Plot of wall clock time
       vs. increasing relative frequency of contention-level changes.
       When contention is slowly changing, protocol switching overhead
       plays a larger role; when contention level is rapidly changing,
       protocl switching overhead goes away (and lock performance
       dominates).  Again, best to see graphs in paper.
  <li> Reduces motivation to provide hardware support for queue locks
       (as some archs. do, such as Wisconsin Multicube and Stanford
       DASH), since reactive alg. can be used to select T&amp;S at low
       contention anyway, which makes software queue lock overhead go away.
</ul>

<h2>Relevance</h2>

A good use of specialization: expose synchronization protocol selection
and allow it to track contention level.  Allows better performance on
hardware  not optimized for a particular kind of synchronization
protocol, and decreases motivation for providing such optimizations in
hardware. 

<h2>Flaws</h2>

<ul>
  <li> Behavior needs to be encapsulated to make it easy to use;
       applications don't want to have to deal with protocol switching
       directly.
  <li> Work still needed on policy decisions; how to encapsulate that?
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@
