head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
    <TITLE>Scout</TITLE>
</HEAD>
<BODY>
<I><A HREF="index.html">Back to index</A></I> 
<H1>Scout: A Communications-Oriented OS </H1>
<STRONG>Alan B. Montz, David Mosberger, Sean O'Malley, Larry Peterson, Todd
Proebsting, John Hartman <BR>
<BR>
</STRONG><B>One-line summary:</B> Communication-centric information appliances
need an OS based on a communication path (bytes from application to network)
as a first-class abstraction; scheduling of CPU, cache, TLB, etc. should
be based on this abstraction, resulting in scalable <I>and predictable</I>
communication behavior.  Also, language &amp; compiler optimizations should
target OS code, which although different from application code exhibits
optimizable patterns of its own.<BR>
<H2>Overview/Main Points</H2>
<UL>
<LI>OS for &quot;small&quot; devices should be configurable; no need for
full generality on all platforms.
<LI>The communication &quot;path&quot;, including all hardware and software
involved in communication right up to the application, is a first-class
abstraction around which resource allocation, cache management, and path-based
optimizations are done.  (Compare in X-kernel: a <I>shepherd</I> allows
a single comm task to cross address spaces/protection boundaries.)
<LI>The result should be communication performance that is both <I>scalable</I>
and <I>predictable</I>, so Scout has some application as a real-time OS.
<LI>Compiler technology should target OS-specific patterns; e.g. automated
generation of tedious low-level code.
<LI>Universal Protocol Compressor: exploit semantic knowledge of data being
communicated to achieve protocol-specific compression, by requiring programmer
to annotate protocol data structures.
<LI>Integrated layer processing: collapse protocol layers to remove redundant
copies, allowing a single pass over each packet for FEC, checksumming, decompression,
etc.  Previous work: <I>Increasing Network Throughput by Integrating Protocol
Layers</I>. 
<LI>Dynamic code generation to produce highly-optimized path-related code
sequences.  Compare to the Synthesis Kernel.
</UL>
<H2>Relevance</H2>
Like all good ideas, obvious in retrospect: by making the communication
path the central point of the OS, we can make its performance predictable,
if possibly at the expense of predictability in other areas.  (Compare:
relationship between macro and micro benchmarks for caches and CPU's is
much better understood than it is for networks, since the scheduling and
other facilities provided by the OS are usually orthogonal to the communications
facilities and thereby have complex interactions with them.  Cf. Ousterhout,
<I>Why Aren't  Operating Systems Getting Faster as Fast as Hardware?</I>)
<H2>Flaws</H2>
<UL>
<LI>Comm-centric paths abstraction and compiler optimizations seem to be
orthogonal, except for runtime code generation for optimizing comm paths.
 This has been shown to be hard; Synthesis Kernel did it only for a &quot;fake&quot;
OS (e.g. no VM).
</UL>
<HR><I><A HREF="index.html">Back to index</A></I> 
</BODY>
</HTML>
@


1.1.1.1
log
@OS structure summaries
@
text
@@
