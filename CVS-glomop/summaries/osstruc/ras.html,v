head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Restartable Atomic Sequences
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Fast Mutual Exclusion for Uniprocessors
</h1>
<strong>
Brian Bershad, David D. Redell, John R. Ellis
</strong>

<p><b>One-line summary:</b>
A Restartable Atomic Sequence, when preempted/interrupted, is restarted
from the beginning when resumed, so that when it finally completes it
will have executed atomically.  Provides lightweight optimistic
concurrency control for uniprocessors lacking support for atomic operations.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Optimistic mechanism, since in the common case of success (RAS is
       not preempted), it has very low overhead.  Attractive for
       uniprocessors that don't support atomic operations.  (In 1992,
       most uniprocs that did support them did so very inefficiently.)
  <li> Other methods for supporting mutual exclusion on uniprocessors:
       Lamport's fast mutual exclusion algorithm (provably fastest using
       2 loads and 5 stores, but
       requires storage O(numthreads&nbsp;*&nbsp;nummutexes)); Lamport
       bundled with test-and-set (O(1) storage, but adds 1 load and 2
       stores to critical path); and meta-test-and-set (which
       synchronizes access to <i>all</i> synchronization objects through
       a single mutex, not very efficient).
  <li> When preemption occurs, need to detect whether it occurred inside
       a RAS.<br>
       Method 1 (Taos): Designated Sequences containing "landmark"
       NOP's at specific points in sequence.  (Compiler ensures that
       this "fingerprint" doesn't occur in other code.) 
       Reasonable for Taos since the kernel and apps use the same
       threading library, the same single compiler, etc.
       <br>
       Method 2: (Mach): start address (within app's address space) and length
       of each RAS is registered at app start time.
  <li> Using in the kernel: potential for deadlock if the PC check is
       not properly ordered with respect to other events.  Example: user
       page fault traps to kernel; preemption occurs while in kernel;
       when resume occurs, PC check may cause another page fault, etc.
  <li> Performance: thread suspensions occur less frequently than atomic
       operations in threaded programs, so the extra work during thread
       switch (PC check) is justified.
  <li> RAS's perform several times better than kernel emulation (turning
       off interrupts to execute atomic user code) or software
       reservation using Lamport's algorithm.  Even better performance
       if sequences can be inlined.
  <li> Most overhead for RAS occurs <i>outside</i> critical section, so
       short critical sections remain short.
</ul>

<h2>Relevance</h2>

A way to have mutual exclusion without hardware support, or where
hardware support is inefficient, by exploiting the common case.  Another
little gem of OS structure.

<h2>Flaws</h2>

How to apply to other OS's, since in each case described an
OS-specific technique was used?  To what extent can compiler support be
enlisted even for a "generic" OS?  (e.g. use something like designated
sequences but place a long "magic constant" landmark within the sequence
that is overwhelmingly unlikely to appear elsewhere.)

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@OS structure summaries
@
text
@@
