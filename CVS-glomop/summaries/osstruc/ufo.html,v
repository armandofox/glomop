head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.01.06.02.31.18;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added some OS structure papers
@
text
@<html>
<title>
UFO
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Extending the Operating System at the User
       Level: the Ufo Global File System
</h1>
<strong>
Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and
Chris J. Scheiman, UCSB
</strong>

<p><b>One-line summary:</b>
Generalization of JANUS to allow arbitrary user-level OS extensions, in
this case for filesystem that supports /http/... and /ftp/... paths directly.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Trap syscalls like Janus does  (using /proc) to implement global
       file system.  Whole file is read on open(), and subsequent calls
       are redirected to the online copy .  The thing that catches the
       syscalls is called the Catcher.
  <li> Raises issue: how to transparently remap file names when
       args are passed 
       to "real" syscall.  Currently,  allocate space on user app's
       stack and using that as arg to syscall.  Correspondence between
       original filename and file descriptor is maintained internally
       for close, etc.
       <ul>
         <li> Relies on ability for an attached (using /proc)
              process to write into the attachee's address space.
       </ul>
  <li> For <i>stat</i> and similar calls: create a sparse file "stub"
       that has appropriate properties (most systems support small
       sparse files with large logical extents) and redirect the syscall
       to the stub.  (Goal was to avoid reimplementing filesystem
       calls.)  <i>But see Flaws below.</i>
  <li> File consistency: timeout writeback consistency, with user
       selectable timeout (like NFS), plus validate-on-open.
  <li> Performance: UFO about 20x/8x worse (Andres
       benchmark/microbenchmark) for local files; of this 
       amount, about 7x is due to overhead of trapping syscalls.
</ul>

<h2>Relevance</h2>

Another technique for extending/customizing the OS, but probably more
limited since you can only modify behavior that is accessed by a
particular syscall (i.e. can't easily use it to implement policy) and
overhead is pretty high.

<h2>Flaws</h2>

<ul>
  <li> <i>stat()</i> and <i>getdents()</i> hack
       relies on efficient support for sparse files.  On authors'
       system, /tmp doesn't do this, but NFS does; but stub
       creation via NFS is an order of magnitude worse, so they
       are re-evaluating their decision not to rewrite stat() and
       friends.
  <li> Validate-on-open policy makes it hard to support disconnected
       operation, which would be a nice extension/use of this work.
  <li> Not clear if it's generally useful given the huge overhead for
       local filesystems.
       <ul>
         <li> Maybe easier to only trap unsuccessful returns from
              syscalls and examine filename to see if Ufo could have
              fetched it from Internet?
       </ul>
  <li> How to do syscall arg substitution cleanly if you can't write
       into attached program's address space?  (Overwrite in place would
       be a bad hack and would fail if new filename was longer)
  <li> Prompting for passwords for FTP really wants some underlying
       authentication if stdin is not a tty.  Krcp? Scp? Kftp?
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@
