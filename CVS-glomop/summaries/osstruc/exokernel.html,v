head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.01.04.23.29.33;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Three Exokernel Papers
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Exterminate All OS Abstractions<br>
Exokernel: An OS Architecture for Application-Level Resource
Management<br>
Server Operating Systems<br>
</h1>
<strong>
Various combinations of Dawson R. Engler, M. Frans Kaashoek, James
O'Toole, Greg Ganger, MIT LCS.
</strong>

<p><b>One-line summary:</b>
Exokernel avoids all resource management and deals only with
protection.  Insight: up to a point, mechanism <i>is</i> policy (eg
multilevel page tables).
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Kernel exports hardware interfaces directly.  All other
       functionality is handled in user-level "library OS" (eg ExOS).
  <li> Secure bindings: permissions for binding to a resource are
       checked at bind time and the requester is given a capability,
       which is used in the future.
       <ul>
         <li> For VM management, TLB miss causes an exception to which
              application responds with TLB reload request, which is
              permission-checked. 
       </ul>
  <li> Visible revocation: kernel notifies apps when it is about to
       revoke a resource so app can react intelligently. Each app is
       guaranteed a small set of non-revocable (except in emergency)
       resources where it can keep common "library OS" state, etc.
       ExOS's should try to keep resource lists in efficient data
       structures, so they can respond quickly to revocation notices.
  <li> Abort protocol: defines how kernel can break secure bindings from
       uncooperative apps.
  <li> ExOS (external library OS) can also <i>download</i> code into
       kernel for accessing HW that is not securely mappable to each app
       space (e.g. network card buffers).  This code is untrusted and is
       executed using interpretation, sandboxing, or SFI.
  <li> Application-specific safe handler (ASH): a particular type of
       downloaded code used for things like per-app packet filters.
       Advantage: bounded running time, so can be run even when the app
       itself cannot be scheduled.  Big win for early demultiplexing.
  <li> Interesting side effect: for apps with major I-cache conflicts,
       just changing the link order of the ExOS can help!
  <li> Protected control transfer: jump into another app's address space
       and donate your timeslice to it.  Since this is atomic and
       doesn't modify user registers, can be used to implement efficient
       IPC.
  <li> Currently a parameterizable "server OS" is being built on top of
       Aegis exokernel with various standard optimizations: zero-copy
       TCP by using app callback for retransmit; 
</ul>

<h2>Relevance</h2>

Different philosophy from microkernel: kernel should get small by not
doing any work!  Allows efficient implementation of application-specific
operating systems.

<h2>Flaws</h2>

<ul>
  <li> What happens if ExOS's are implemented stupidly?  They are
       upcalled from kernel for revocations, etc.
  <li> A fair amount of studliness required to write ExOS's, so we need
       to assume "common case" libs are available.  When does that
       degenerate to the microkernel case?
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@OS structure summaries
@
text
@@
