head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.03.08.02.10;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>
<title>
Additive Increase, Multiplicative Decrease
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
An Analysis of the Increase and Decrease Algorithms for
   Congestion Avoidance in Computer Networks
</h1>
<strong>
Dah-Ming Chiu and Raj Jain, DEC
</strong>

<p><b>One-line summary:</b>
Additive increase and multiplicative decrease for congestion control
are necessary and
sufficient conditions for convergence to an efficient and fair state
regardless of the initial network state.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Assumptions: all users sharing same bottleneck link see same
       congestion feedback; control loop for all users is a synchronous
       discrete-time operation
       (all users see feedback and react to it, <i>then</i> more
       feedback comes)
  <li> Discrete-time functions:
       <ul>
         <li> x<sub>i</sub>(t): bandwidth demand of i'th user.
         <li> y(t): binary-valued congestion indication, sent to all
              users
         <li> u<sub>i</sub>(t): user-effected change in demand based on
              y(t) feedback.  u<sub>i</sub>(t)=f(x<sub>i</sub>(t),
              y(t)).  Paper considers case where f is linear:
              f=A+Bx<sub>i</sub>(t) for increase, f=a+bx<sub>i</sub>(t)
              for decrease.
       </ul>
  <li> Properties to optimize for:
       <ul>
         <li> Efficiency: how close is sum(x<sub>i</sub>) to X<sub>goal</sub>
              (the desired bandwidth of the link)?
         <li> Fairness: defined as sum(x<sub>i</sub>)<sup>2</sup>/(n
              sum(x<sub>i</sub><sup>2</sup>)), so that:
              <ul>
                <li> fairness is in [0.0,1.0]
                <li> dimensionless
                <li> continuous function of allocations
                <li> if only k of n users share resource, fairness is k/n.
              </ul>
         <li> Distributedness: no user can know value of n.
         <li> Convergence: <i>responsiveness</i> measures latency of system to
              approach goal state, <i>smoothness</i> measures size of
              oscillations about the goal state.
       </ul>
  <li> Graphical representation: in an n-dimensional space where each
       axis is one user's allocation.  Example in 2D is explored.
       <ul>
         <li> y=x is the <i>fairness line</i>.  (All points on any line passing
              through the origin have the same fairness, since multiplying both
              allocations by the same factor gives them the same share
              (fairness formula is invariant to multiplication)).  In order to
              achieve fairness, system should converge to a point on this line.
         <li> <i>Efficiency line</i> is y+x=X<sub>goal</sub> (maximum
              utilization).  To get to efficiency, system must move
              toward this line.
         <li> Efficinecy and fairness lines intersect at a single point,
              the optimum operating point.
       </ul>
  <li> Graphical representation of policy operations:
       <ul>
         <li> Additive increase corresponds to moving "outward" along a line of
              slope 1.
         <li> Multiplicative decrease corresponds to moving "inward"
              along a line connecting the point to the origin.
         <li> Etc.
       </ul>
  <li> Development of constraints on A, B, a, b yields the following
       conclusions:
       <ul>
         <li> A,B,a,b cannot be of opposite signs and cannot be
              negative, therefore must all be &gt;0
         <li> Specifically, must have A&gt;=0, B&gt;=0, a&gt;=0,
              0&lt;=b&lt;1, to insure that fairness goes up during
              utilization decrease and either goes down or stays the
              same during utilization increase
         <li> To guarantee convergence to efficiency in the face of
              distributedness (no user can know n), actually need the
              stronger conditions: A&gt;0, B&gt;=1, a=0, 0&lt;=b&lt;1.
       </ul>
  <li> Proposition: in order to satisfy distributed convergence to
       efficiency and fairness without truncation (extreme backoff), we
       need mlutplicative decrease and additive increase, with the
       coefficients constrained as described above.
  <li> Practical considerations:
       <ul>
         <li> allocations must be an integral number of packets.  How
              are convergence conditions affected by rounding?
         <li> Reasonable to implement (amount of hardware, complexity of
              code, etc.)?
         <li> How does delayed feedback affect control?
         <li> What is marginal utility of multiple bits of feedback
              info?
       </ul>
</ul>

<h2>Relevance</h2>

Mathematical (and nice graphical) treatment of fairness and efficiency
that yields a nice and intuitively satisfying result.

<h2>Flaws</h2>

As pointed out by the authors.  Also, the graphical "proofs" are nice
but not clear how some of them extend to multiple dimensions.

<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
