head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.01.19.11.16;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added summaries for RTT and TCP comparisons
@
text
@<html>
<title>
Improving Round-Trip Time Estimates in Reliable Transport Protocol
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Improving Round-Trip Time Estimates in Reliable Transport Protocol
</h1>
<strong>
Phil Karn and Craig Partridge
</strong>

<h2>Summary</h2>

<ul>
  <li> Basic round trip time estimation is not effective in the face of 
  dropped packets and retransmissions. Accurate sampling of round trip
  times is problematic when a packet is retransmitted a number of times.

  <li> Basic TCP algorithm for RTT estimation:
  <ul>
    <li> Use exponentially weighted average to estimate the "smoothed"
    RTT from past RTT samples:<br>
      <i> SRTT<sub>i+1</sub> = (alpha x SRTT<sub>i</sub>) + (1 - alpha)
      x sample<sub>i</sub> .... (<i>0 < alpha < 1</i>)
      </i>
    <li> Retransmittion time-out (RTO) is <i> Beta x SRTT </i>. (<i>Beta
    > 1</i>) 
    <li> Smaller <i>alpha</i> allows faster adaptation to changes in
    SRTT: one suggestion was to use a non-linear filter where
    <i>alpha</i> is smaller when <i>SRTT < sample<sub>i</sub></i>, so that
    the SRTT may adapt more swiftly to sudden increases in network
    delay.

    <li> For optimal throughput, <i>beta</i> should be just greater than
    1; but this may lead to inefficient network utilization due to
    spurious retransmissions.
  </ul>
  
  <li> Back-off: Increase the RTO by some factor whenever a timeout
  occurs. Various algorithms have been suggested: binary exponential
  back-off (double the RTO every time a timeout occurs), stepping
  through a table of arbitrary back-off factors, etc.

  <li> Sampling RTT: 
  <ul>
    <li> <b>Measuring from first transmission:</b> Whenever an ack is received,
    the RTT is computed from the first time the datagram was sent,
    regardless of how many times the acked datagram has been
    retransmitted. This can cause the SRTT to grow without bound when
    there is a loss in the network.
    
    <li> <b>Measuring from the most recent transmission:</b> Compute RTT
    from the most recent retransmission of the acked datagram. Implicit
    assumption here is that the RTO is accurate; if a packet has to be
    retransmitted, the previous packet has most certainly been
    lost. This is not always true; causes problems since the RTT samples
    obtained may end up being very close to zero (instead of the actual,
    pssibly larger, value). This will cause SRTT (and, hence, RTO) to
    reduce, increasing the likelihood that another datagram will be
    acked just after the RTO has expired.

    <li> <b> Ignoring RTTs for datagrams that have been
    retransmitted:</b> This fails to work if there is a sudden increase
    in network RTT; if the new RTT is larger than the RTO, then all
    samples will be discarded!

    <li> <b>The paper's algorithm:</b> When an ack for a datagram that
    has been retransmitted arrives, ignore any RTT measurement based on
    this datagram. In addition, the backed-off RTO for this datagram is
    kept for the next datagram. Only when it (or some later datagram) is
    acked without an intervening retransmission will the RTO be
    recalculated from SRTT.

  </ul>
</ul>

<hr>
<i><a href="index.html">Back to index</a> (Created by Yatin Chawathe)</i>

</body></html>
@
