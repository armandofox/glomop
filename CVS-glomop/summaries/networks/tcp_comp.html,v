head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.01.19.11.16;	author yatin;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added summaries for RTT and TCP comparisons
@
text
@<html>
<title>
Comparisions of TCPs
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Simulation-based Comparisons of Tahoe, Reno and SACK TCP
</h1>
<strong>
Kevin Fall and Sally Floyd
</strong>

<h2>Summary</h2>

<ul>
  <li> <b>Main point:</b> Nothing compares to SACK TCP!

  <li> <b>Tahoe TCP:</b> Follows a basic go-back-n model using
  slow-start, congestion avoidance and fast retransmit algorithms. With
  Fast Retransmit, after receiving a small number of duplicate acks for
  the same TCP segment, the data sender infers that the packet has been
  lost and retransmits the packet without waiting for the retransmission
  timer to expire.

  <li> <b>Reno TCP:</b> 
  <ul> 
    <li>Modification to the Tahoe TCP Fast Retransmit
    algorithm to include Fast Recovery; this prevents the pipe from going
    empty after Fast Retransmit, thereby avoiding the need to slow start
    after a single packet loss.

    <li>A TCP sender enters Fast Recovery after receiving athreshold number of
    dup acks. The sender retransmits one packet and reduces its congestion
    window by half. Instead of slow-starting, the Reno sender uses
    additional incoming dup acks to clock subsequent outgoing packets.
    
    <li> Reno TCP greatly improves performance in the face of single
    packet loss, but can suffer when multiple packets are lost.

  </ul>
  
  <li> <b>New Reno TCP:</b> In Reno, a partial ack (ack for some but not
  all of the packets that were outstanding at the start of the fast
  recovery period) takes TCP out of Fast Recovery. In New Reno, partial
  acks fo not take TCP out of fast recovery; partial acks receivbed
  during fast recovery are treated as an indication that the packet
  immediately following the acked packet has been lost and should be
  retransmitted. Thus, when multiple packets are lost, New Reno can
  recover without a retransmission timeout.

  <li> <b> SACK TCP:</b> The TCP sender maintain a scoreboard which
  keeps track of acks from previous SACK packets. When the sender is
  allowed to send a packet, it retransmits the next packet from the list
  of packets inferred to be missing at the receiver. If there are no
  such packets and the receiver's advertized window is sufficiently
  large, the sender sends a new packet.

  <li> Simulations:
  <ul>
    <li> One packet loss: Tahoe TCP does badly due to slow-start after
    the packet loss. All others do relatively the same.
    <li> Two packet losses: Reno TCP fails to do as well as New Reno or
    SACK TCP, since its algorithm is tuned for single packet losses.
    <li>Multiple packet losses: Reno TCP performs miserably in the face
    of a large number of packet losses. SACK TCP continues to
    out-perform the rest of the algorithms.
</ul>

<hr>
<i><a href="index.html">Back to index</a> (Created by Yatin Chawathe)</i>

</body></html>
@
