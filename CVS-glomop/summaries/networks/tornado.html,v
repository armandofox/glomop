head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.04.19.23.55.07;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Dogbert">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; U) [Netscape]">
   <TITLE>Tornado Codes and Digital Fountain</TITLE>
</HEAD>
<BODY>

<H3>
John Byers, Michael Luby, Michael Mitzenmacher, Ashutosh Rege (DEC SRC)<BR>
<B><I>A Digital Fountain Approach to Reliable Distribution of Bulk Data</I></B></H3>
<B><I>(folder #2)</I></B>

<P><B>One-line summary: </B>Combine Tornado codes (computationally inexpensive
and relatively space-efficient FEC code) with layered multicast, to enable
"digital fountain" from which you can start drinking at any time (adapting
your drinking rate to your bandwidth, as with other layered mcast apps)
and stop after receiving <I>any</I> distinct <I>k</I> out of (<I>k</I>+<I>l</I>)
packets to reconstruct the original data.&nbsp; Packets are scheduled across
layers to minimize # of dup pkts you receive before getting <I>k</I> distinct
ones.
<H2>
Summary/main points</H2>
<B>Tornado code</B>
<UL>
<LI>
a FEC code (<I>erasure code</I>) that works by constructing successive
sets of bipartite graphs, where the RHS of each graph consists of the selective
XOR of certain elements on the LHS of that graph.&nbsp; (The LHS of the
leftmost bipartite graph is the source data.)</LI>

<LI>
Stretch factor <I>c</I>=<I>n/k</I> measures number of total packets <I>n</I>
needed to redundantly encode <I>k</I> source packets.&nbsp; This paper
chooses <I>l=k</I> redundancy pkts, hence <I>n=k</I>+<I>l</I>=2<I>k.</I></LI>

<LI>
Encoding/decoding time is O((l+k)P) for a P-sized packet.&nbsp; Compare
to traditional erasure codes (such as Reed-Solomon) which are typically
O(lkP) and rely on more complex operations than XOR; in those codes, only
practical for small k and l, whereas Tornado codes are fine with k,l on
the order of 10<SUP>4</SUP>.</LI>

<LI>
One approach is interleaving combined with traditional codes, with interleaving
factor <I>K</I>.&nbsp; Problem: want small <I>K</I> to keep decoding fast,
but smaller <I>K</I> means receiver may have to receive a lot more packets
to reconstruct data, since contribution of each arriving packet to an interleaving
"bin" has a nonuniform distrbution.&nbsp; Also, in general, #packets required
to reconstruct interleaved data grows superlinearly with orig data size;
for Tornado codes, grows only linearly.</LI>

<LI>
Reception overhead is <I>e</I> if (1+<I>e</I>)<I>k</I> packets must be
received to reconstruct orig data.&nbsp; For <I>n</I>=2<I>k</I>, <I>e</I>=1.</LI>
</UL>
<B>Exploiting layered multicast</B>
<UL>
<LI>
Goal: using mcast, arrange for it to be the case that a receiver can receive
<I>any</I> distinct <I>k</I> out of <I>n</I> packets and reconstruct the
source data.&nbsp; Then can just "carousel" the encoded packets forever;
receivers can tune in whenever they want, and drop out after they receive
<I>k</I> (distinct) packets.</LI>

<LI>
Idea: use mcast layers to distribute encoded packets.&nbsp; Each layer
has twice the bandwidth of lower layer; subscription is cumulative.&nbsp;
(Exception: layers 0 and 1 assume same bandwidth.)&nbsp; Problem: how to
schedule packets across layers?</LI>

<LI>
"One-level property": If receiver stays at same layer throughout, and packet
loss rate &lt; (<I>c</I>-1-<I>e</I>)/<I>c</I>, then receiver can reconstruct
source data before receiving any duplicate packets.&nbsp; Authors show
a simple scheme based on binary numbering that satisfies the OLP.&nbsp;
Satisfying the OLP is good because it lets you keep your stretch factor
<I>c</I> pretty small.</LI>

<LI>
Binary-numbering scheme also explains how to schedule packets across layers
to preserve OLP.</LI>

<LI>
Receivers can only subscribe to higher layer after seeing a<I>synchronization
point</I> (SP) in their own layer.&nbsp; SP freq is inversely proportional
to layer BW, so lower-layer receivers get more frequent opportunities to
move up.</LI>

<LI>
Instead of explicit joins, sender "induces" congestion by periodically
sending a burst at double the normal rate on each layer (this simulates
what clients would experience following an explicit join).&nbsp; If a receiver
does not experience congestion during the burst, it can safely subscribe
to the next higher layer at the next SP.</LI>
</UL>

<H2>
Flaws</H2>

<UL>
<LI>
When should server insert bursts and SP's?&nbsp; Didn't seem to be addressed
much in their simulations (which mostly kept the receiver at constant level
throughout), nor do they propose heuristics for it (unless I missed something).</LI>

<LI>
What's the effect on "good Internet citizenship" of inserting such bursts?&nbsp;
Is it at least no worse than explicit joins in practice?</LI>
</UL>

<HR WIDTH="100%">
<BR><I><A HREF="index.html">Back to index</A></I>
</BODY>
</HTML>
@
