head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.03.03.09.23.53;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.03.03.06.37.10;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.2
log
@added editorial comment to cong_avoid, and fixed a typo
@
text
@<html>
<title>
Congestion Avoidance and Control
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Congestion Avoidance and Control
</h1>
<strong>
Van Jacobsen and Michael J. Karels
</strong>

<p><b>One-line summary:</b>
Seven new algorithms were put into TCP to make sure that it adhered to the
&quot;packet conservation&quot; principle;  these congestion avoidance and
control algorithms are motivated and described.
</p>

<h2>Overview/Main Points</h2>

<ul>
     <li><B>Motivation</B>: factor of 1000 throughput degradation observed
	  on link between LBL and UCB in 86;  poor TCP congestion control
	  techniques were identified as the cause.
     <li><B>Packet conservation principle</B>: for stability in a network
	  (especially in the face of congestion), a host in equilibrium
	  should only inject
	  one packet into the network for every packet removed from the
	  network, leading to &quot;self-pacing&quot;.  Failures to obey
	  this principle can occur for three reasons:
	  <ol>
	       <li> connection doesn't get to equilibrium
	       <li> sender injects a new packet before an old packet has
		    exited
	       <li> equilibrium can't be reached because of resource limits
		    along the path.
	  </ol>
     <li><B>Slow-start (getting to equilibrium)</b>:
	  <ul>
	       <li> mechanism:  add a congestion window (cwnd) to the per
		    connection state.  When starting or restarting after a
		    loss, set cwnd to one packet.  On each ack for new
		    data, increase cwnd by one packet.  When sending, send
		    the minimum of the receiver's advertised window and
		    cwnd.
	       <li> slow start increases congestion window slowly but
		    exponentially until the sender hits the receiver's
		    advertised window size.  Eliminates huge bursts of data
		    into the network when a new connection starts up.
	  </ul>
     <li><B>Round-trip timing (conservation at equilibrium)</b>:
	  <ul>
	       <li> round-trip time estimator essential core of timeout
		    retransmits
	       <li> round-trip time and variation in round-trip time
		    increase quickly with load.  Setting the timeout to
		    (variation estimate * RTT estimate) is much better than
		    using (constant * RTT estimate);  eliminates wasted
		    bandwidth when load gets high and delayed packets are
		    retransmitted.
	       <li> exponential backoff (i.e. increase in retransmit
		    timeout) is only known scheme that works in nearly all
		    situations.
	  </ul>
     <li><B>Congestion avoidance (adapting to the path)</b>:
	  <ul>
	       <li> If timers are sensible, then timeout indicates lost
		    packet.  Lost packet happen either because of packet
		    corruption or congestion causing a router queue backup
		    and packet drop.  Packet corruption extremely rare
		    (<i>no longer true in wireless</i>), thus timeout
		    implies congestion.
	       <li> In face of congestion queuing theory says queues back
		    up exponentially.  Thus packet loss says that
		    windows should decrease exponentially.
	       <li> If no congestion, window sizes need to increase (as no
		    indication from network that there is no congestion).
		    Small, linear increase in window size is best
		    (exponential increase will lead to oscillations).
	       <li> <B>mechanism</b>: on any timeout, set cwnd to half the
		    current window size.  On each ack for new data,
		    increase cwnd by 1/cwnd.  Of course, slow-start must be
		    used after congestion control kicks in.  Slow-start and
		    congestion control are <i>separate mechanisms</i>,
		    however.
	  </ul>
     <li><B>Gateways and fairness</B>: it is suggested that since
	  gateways/routers are where multiple TCP sessions converge, this
	  is the only place to ensure fairness.  Gateways could drop
	  packets from overly active connections to enforce this fairness.
	  <i>(Sounds like a pretty wild-eyed idea, and many details are
	  totally ignored.)</i>
          (<b>Armando sez:</b>  I think Packeteer's commercial product
          does something very much like this, to allow net
          administrators to enforce "selective fairness" among different
          classes of users coming into a server!)
	  
</ul>

<h2>Relevance</h2>
Fundamental performance issues for the internet today.  TCP has handled
many orders of magnitude increase in load and scale of traffic, but of
course much voodoo has gone into TCP recently.
<p>
Van Jacobson is an excellent research.  He brings the rigour and formalism
of science to an engineering practise, resulting in great benefit.

<h2>Flaws</h2>

<ul>
     <li> The algorithms have much &quot;black magic&quot;; it is fortunate
	  that the TCP engineers are competent shaman.
     <li> Slow-start is extremely expensive for short-lived connections.
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@


1.1
log
@congestion control and avoidance summary.
@
text
@d94 4
d106 1
a106 1
Van Jacobsen is an excellent research.  He brings the rigour and formalism
@
