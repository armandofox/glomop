head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.05.12.10.27.03;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>
<title>
Tenet Realtime Protocols
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
long title
</h1>
<strong>
authors
</strong>

<p><b>One-line summary:</b>

</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Early example of complete arch providing hard QoS guarantees
       using reservations, hard state.    Fault recovery provided  by
       RTMCP protocol.
  <li> Guarantees needed at every layer: so they ditched Ethernet!
  <li> Scheme 1: simplex,  unicast, realtime. Scheme 2: multicast
       extensions.
  <li> Probabilistic guarantees on <i>delay</i>.  Not the same as
       prb. guarantees on <i>delivery</i>.
  <li> RTIP: connection oriented network-layer protocol.  RMTP: realtime
       transport protocol.  Ordering, frag, etc. handled.  "Unreliable"
       (no acks, rtxs).
  <li> CMTP: for cont. media.  User-mapped kernel ring buffer, drained
       to network from interrupt driver.  A convenience hack.
  <li> 
</ul>

<h2>Relevance</h2>

<h2>Flaws</h2>

<ul>
  <li> Another case of making the constraints so severe that the problem
       is not that hard?  (i.e. requiring link layer to provide
       guarantees, assuming hard state)
  <li> Probabilistic guarantees don't hold up under highly correlated
       traces
  <li> Networks' behavior reflected all teh way up to application (in
       their implementation).  E.g. app would block in sleep() if it was
       supposed to slow down.
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
