head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.02.19.00.21.13;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@DNS paper summary.
@
text
@<html>
<title>
DNS
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Development of the Domain Name System
</h1>
<strong>
Paul V. Mockapetris and Kevin J. Dunlap
</strong>

<p><b>One-line summary:</b>
DNS provides distributed, replicated, and cached bindings of
names to address (and other such resource records);  the design,
implementation, surpises, successes, and failures of the DNS system are
examined in this paper.
</p>

<h2>Overview/Main Points</h2>

<ul>
     <li> <B>HOSTS.TXT</B> - was a centrally managed file containing name
	  to address mappings.  Obviously wouldn't scale.  Replacement
	  needed:
	  <ul>
	       <li> same info as hosts.txt
	       <li> allow database to be mainained in a distributed manner
	       <li> no obvious size limits (names, components, data)
	       <li> extreme interoperability (across
		    networks/internetworks)
	       <li> tolerable performance
	       <li> extensible services
	  </ul>
     <li> DNS architecture is simple:  name servers are repositories of
	  information, resolvers are interfaces to client programs that
	  embody the algorithm to find a name server that has the info the
	  client wants.
	  <ul>
	       <li> <B>Name space</B>: variable-depth tree, each node has a
		    label.  Domain name of a node is concatenation of all
		    labels on path from node to root of tree.  <i>Structure of
		    tree is decoupled from any implicit semantics.</i>
	       <li> <B>Data</B>: associated with each name is a set of
		    resource records (RRs) - each record is a (type,data)
		    tuple where the set of types is well known (but
		    extensible).  Example types are host addresses, MX
		    records, etc.
	       <li> <B>Database distribution</B>:
		    <ul>
			 <li> <i>zones</i>: zones are sections of the
			      system-wide database controlled by a specific
			      organization.  Zones are contiguous pieces of
			      the tree (i.e. a connected subgraph).  Zones are
			      created by convincing a parent organization
			      to delegate a subzone consisting of a node,
			      and then the owner of that node can create
			      names within the zone.
			 <li> <i>caching</i>: resolvers and name servers
			      cache responses for use by later queries.
			      A time-to-live (TTL) field is the mechanism
			      for invalidating cache entries.
	  </ul>
     <li> Resolvers search downwards from domains they can access already.
	  Resolvers are configured with hints pointing to servers for the
	  root node of the DNS, and the top node of the local domain.
	  Thus, if a name isn't found locally, you hit (one of the) root
	  nodes of the entire DNS.

     <li> <B>Surprises</B>:
	  <UL>
	       <LI> <i>Performance</i> - underlying network performance was
		    worse than expected, but DNS hierarchy still performed
		    well, to the point where people using lookups for
		    queries that did not need network access.
	       <li> <i>Negative caching</i> - two negative responses (name
		    in question does not exist, name in question exists but
		    requested data does not).  High percentage of negative
		    responses, some from misspellings, some from
		    programmers using DNS lookup to check if address is
		    valid in DARPA internet.
	  </ul>
     <li> <B>Successes</B>:
	  <UL>
	       <LI> <i>Variable-depth hierarchy</i> - matches variable sizes
		    of administrative domains, makes it possible to
		    encapsulate other name spaces.
	       <li> <i>Organizational structuring of names</i> - names are
		    independent of network, topology, etc.
	       <li> <i>Datagram underlying protocol</i> - &quot;datagrams
		    were successful and probably essential, given the
		    unexpectedly bad performance of the DARPA
		    Internet.&quot;
	       <li> <i>Additional section processing</i> - allow responding
		    server to anticipate the next logical request and
		    answer it before it was asked, avoiding significant
		    added cost.  Cuts query traffic in half.  (Prefetch!)
	       <li> <i>Caching</i> - very successful, but security issues.
		    (One administrator reversed TTL and data fields in
		    file, ended up distributing bad data with TTL of years.)
	  </ul>
     <li> <B>Shortcomings</B>:
	  <UL>
	       <LI> <i>Type and class growth</i> - software needs to be
		    recompiled, political hurdle to gain acceptance of new
		    types, new types are useless until software adopts it.
	       <li> <i>Easy upgrading</i> - incorporating DNS into an
		    application is hard, especially since semantics change
		    due to possibility of transient failure of DNS system.
		    (Data lookup now may fail.)
	       <li> <i>Distribution of control vs. distribution of
		    expertise</i> - DNS administrators/maintainers work
		    exactly enough to get their system working, not to get
		    it working well.  Human problem, not DNS problem.
	  </ul>

     <li> <B>Conclusions</B>:
	  <ul>
	       <li> caching can work in a heterogeneous environment, but
		    should include features for negative caching as well.
	       <li> more difficult to remove functions from systems than it
		    is to get a new function added.  All functions become
		    more complex then, as new features are added.
	       <li> implementors lose interest once a new system delivers
		    the level of performance they expect; they are not
		    motivated to optimize their use of others' resources.
	       <li> allowing variations in the implementation structure is
		    good, allowing variations in provided service is bad.
	  </ul>
</ul>

<h2>Relevance</h2>
One of the most successful systems ever built and deployed.  Still works
today, under staggering load.

<h2>Flaws</h2>

<ul>
     <li> seems like hitting the root node if local lookup fails is a poor
	  choice from the perspective of scalability.  I'd be interested in
	  knowing how much load the root servers get nowadays.
     <li> the semantic issues of blocking and potentially failing DNS
	  lookups are thorny, and need some work.
</ul>

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@
