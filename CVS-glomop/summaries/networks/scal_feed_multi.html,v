head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.09.15.30.20;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@feedback summary.
@
text
@<html>
<title>
Scalable Feedback Control for Multicast Video
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Scalable Feedback Control for Multicast Video in the Internet
</h1>
<strong>
Jean-Chrysostome Bolot, Thierry Turletti, and Ian Wakeman
</strong>

<p><b>One-line summary:</b>
Probabilistic methods are used to sample the receiver space and gain
knowledge of the worst RTT of the group, the worst congestion state of
the group, and the number of members of the group - this is in turn used to
control video dissemination.
</p>

<h2>Overview/Main Points</h2>

<ul>
     <li> Need congestion control for video - but danger of control
	  information implosion at source if congestion feedback is sent
	  from all receivers.
     <li> Send out a random N bit key with multicast probe packet - if a
	  receiver key matches the probe key, the receiver responds with
	  control information.  If the source receives no responses, it
	  decreases N by 1 bit and repeats.  This way we eventually
	  probabilistically sample the receiver population space.
     <li> Receivers return the STATE of the network - congestion (indicates
	  to the application to slow down), unloaded (all is well, app
	  should increase rate), or loaded (continue sending at this rate).
     <li> Inria built the IVS video conferencing system (H.261 codec over
	  multicast IP).  This control method allows the video conferencing
	  system to throttle back video information (by throwing away high
	  frequency components, movement detection threshold or frame rate)
	  - IVS trades quality for bandwidth based on this feedback.
	  <i>(SG - sounds familiar, eh?)</i>
     <li> The assignment to LOADED, UNLOADED, or CONGESTED is based on the
	  packet loss rate at the receivers;  authors talk about wanting
	  to use some perceptual quality indicator, and their not being an
	  objective enough one.
     <li> Difficulty in deciding what fraction of receivers indicating
	  CONGESTED should trigger the source to slow down video rate -
	  ideally want to differentiate between different parts of the
	  multicast tree <i>(SG - a la VGW?)</i>.
     <li> Uses additive increase, multiplicative decrease in video rate.
     <li> Theory shows that scalable method works - inverse exponential
	  relationship between number of bits in probe packet and
	  probability that a receiver will respond (duh).  Experiments at
	  Inria show that this seems to work well in practice as well.
</ul>

<h2>Relevance</h2>
Need congestion control for video dissemination or the Internet will die.
This is a good first cut at how to do it in a scalable fashion.


<h2>Flaws</h2>

<ul>
     <li> Single control mechanism for all receivers is not good - nearly
	  nobody gets the optimal rate.  What about those poor saps on ISDN
	  lines - they get flooded?
     <li> Probabilistic methods not so good for identifying low/high
	  bandwidth regions of the multicast tree;  want to identify them
	  and deal with them separately.
     <li> Receiver method for deciding when to report congested seems
	  half-baked.
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
