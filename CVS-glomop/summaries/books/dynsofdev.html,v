head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	97.04.14.01.21.19;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.04.03.07.59.04;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.04.03.07.59.04;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<html>
<title>
Dynamics of Software Development
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Dynamics of Software Development
</h1>
<strong>
Jim McCarthy, Microsoft Visual C++
</strong>

<p><b>One-line summary:</b>
Managing software development is about managing people.  Various hints
for planning, developing, selling, and managing the people effectively.
Although written from the perspective of a project manager
charged with shipping and selling a product, many of the insights apply
at least as well to research projects, and are more profound than the
book's cheesy packaging suggests.
</p>

<h2>Overview/Main Points</h2>


<ul>
  <li> Stages of development: opening game (marketing strategy,
       identifing customer needs, etc.); middle game
       (development/debugging); ship mode (all-out race to get out the
       door).  This last "Death March to Egghead" is the <i>only</i> way
       software ever ships.
  <li> Proposed division of primary ownership:
       <ul>
         <li> program mgmt: scheduling, external dependencies, logistics
         <li> quality assurance: <i>continuous</i> monitoring of the
              state of the software
         <li> development: technical design/execution lead
         <li> product mgmt/mktg: messages to customers, launch
              logistics
         <li> documentation/user education
         <li> Rules of thumb: two developers for each person thinking about
              the software.  One QA, one doc, 1/3 program manager per
              two developers. 
         <li> "scout": clever person sent out to assess technology
              trends, etc. to "scout out" the vision for the next
              release or product.  Visit customers, get trained on
              competitive technologies, etc.  <i>(Ed.: this sounds like
              the job I want!)</i>
       </ul>
  <li> Some things that have bit the author on the butt personally:
       <ul>
         <li> Lack of early establishment of shared vision
         <li> Persistent self-delusion about how much work could be done given
              present resources
         <li> Lack of attention to specific customer feedback
         <li> Lack of encouragement of continuous stream of ideas from
              all participants, and both the tecnical and psychological
              "goodness" they bring
       </ul>
  <li> All about software features.
       <ul>
         <li> Strategic features: necessary to compete at all.
         <li> Competitive features: trump the competition.
         <li> Customer satisfaction features: in response to specific
              suggestions.
         <li> Investment features: return will show up in future
              release.
         <li> <b>Paradigmatic features: change the way people work.</b>
              These can make a killer app and steamroll competitors.
       </ul>
  <li> Ode to feature teams:
       <ul>
         <li> provide empowerment, accountability,
              and identity with a piece of 
              the software, 
              consensus, balance in skills  (<i>Ed.: vertical
              responsibility</i>), i.e. each team has developers, QA,
              marketing, etc.  <b>Corollary:</b> If you don't understand
              something about the structure of the software, examine the
              team interactions.
         <li> <i>(Ed. note: Without coherent
              guiding vision and architecture, 
              feature teams can lead to chaotic software without 
              unifying architecture.   )</i>
         <li> Feature teams don't evolve/take off until repeated failures make
              opportunities for bonding within the team evident.
         <li> Note that the concept of feature teams is in conflict with
              the (traditional) concept of "functional area" managers,
              as those managers' roles <i>with respect to software
              features</i> become indistinct, while their role with
              respect to "people management" grows in importance.
         <li> <b>Corollary</b>: the degree to 
              which an individual from a particular discipline will
              participate successfully in a feature team is inversely
              proportional to their success under the "old regime".
       </ul>
  <li> Happiness in software development.
       <ul>
         <li> Don't flip the bozo bit: if someone says something that sounds
              stupid, listen 
              first to what they have to say before tuning them out for all
              time.  "Make sure some primitive territorial instinct isn't
              clouding your judgment."
         <li> Don't try to achieve stability; instead learn to manage
              technology in motion.  "If you don't persistently muster
              the courage and skill to undermine and supplant your own
              current technology  .  . . someone else will seize the
              historical moment."  Voila Spyglass.
         <li> Empowerment is about enabling people to <i>do their
              best</i>, which is different from enabling them to do
              <i>what they think best</i>.  Corollary: don't impose
              deadlines; instead let inter-group dependencies be the
              deadlines.  Corollary: "lone programmers" are more likely
              to give you a headache than to help you.
         <li> Teamwork to slay the competition: "The word 'teamwork'
              suggests to many a touchy-feely, 
              weak-kneed benevolence and inefficacious good will, but
              teamwork is really exemplified by the image of a vicious
              pack of snarling wolves cornering a young lamb.  The
              remorseless wolves move in and make the kill with
              exquisitely timed moves, in a horrifying ballet of
              conquest."
         <li> Team meetings: the tone (subtext) of the meeting is <i>at
              least</i> as important as the content. It can either
              communicate "this is important and we need to pull
              together", or "this is mandated from above".
         <li> The things you think you understand, but really don't, are
              the ones that come back to haunt you.
         <li> Pick some metrics and report them regularly.  Bug
              arrivals, bug fixes, "churn" (daily #lines of change in
              source code), whatever, but report regularly.
       </ul>
  <li> Milestones:
       <ul>
         <li> Milestones give you the opportunity to "practice shipping"
              at intermediate dates not more than months apart.  Status
              reports keep things from "going dark".  (Ideally, weekly
              or so.)  Regular complete builds add assurance.
         <li> Use ZD
              milestones: at milestone date, no new development 
              allowed till milestone goal met with zero defects.
         <li> Possible milestones: "dogfooding" (eating your own
              dogfood); internal customer release; feature complete, UI
              freeze; friendly external customers.
         <li> If you miss a milestone, do a no-blame postmortem.  Slips
              are inevitable consequences of intellectual-property
              development.  "Slipping isn't the problem; being surprised
              by slipping is the problem."  Resist the temptation to
              attempt to localize the slip cause to a single person or
              group if a "group dynamics" explanation is more likely.
              Sometimes a deliberate small slip is optimum.
         <li> After a slip, hit the next milestone no matter what, to
              restore morale.  If necessary, make the milestone conservative.
       </ul>
  <li> Staying ahead:
       <ul>
         <li> Someone is going to beat you. Who? How? When?
         <li> Invest more in paradigm-shifting features. Compete with
              yourself.
         <li> Set the pace of change beyond the reach of competitors.
              (Voila Netscape.)
         <li> Take big and ineradicable risks to settle new territory.
       </ul>
  <li> Selling:
       <ul>
         <li> Stages of customer interest: Attentive; interested;
              convinced; desire.  Only the last is a sale.  To make the
              first means you must identify customer needs up front.
              You want even the most naive user to name one or two
              qualities that make the technology/product synonymous with
              your offering.
         <li> Ask your teams what user input they'd like.  If they say
              'none', find out why they're so lethargic.  Real goal is
              to inculcate this thinking in your team.
         <li> Pursue the anomalies in your findings.  If 10% of
              customers have switched to a new technology but 80% say
              they are planning to, what's holding them back?
         <li> <b>"Find out what customers are struggling with, then turn
              <i>everything</i> in that direction."</b>  Example:
              Microsoft Wizards (ugh) hit a market sweet spot, because
              configuration etc. was reported by customers to be difficult
              and unpleasant.  Example: customer feedback indicated that
              a common case for spreadsheets was typing in a few numbers and
              instantly converting it into a chart; this was put into Excel,
              and for many customers <i>that single feature</i>
              justified the purchase.
         <li> Corollary: Be single minded.  Pick a theme, focus the
              product around it, turn
              it into a sound bite if necessary.  Example: Microsoft
              surveys found that customers who hadn't yet switched to
              C++ were being restrained by the learning curve.  Message:
              "Visual C++ makes it easy to get started with C++."  Duh.
       </ul>
  <li> Ship mode:
       <ul>
         <li> Beta is not the time for change, but rather for "spin
              development".
         <li> Do aggressive bug triage.
         <li> Instill a horror of changing the product during beta.
         <li> Launch is not just marketing, it's fervent evangelism.
              Everyone should be participating to some extent.  If they
              don't naturally do so by now, you've failed to instill the
              vision (or you've hired the wrong people).
         <li> Hire superstars.  Look for the ineffable "spark of
              intelligence."  Remember racehorses have to run.
              Overreachers should have their energy channeled to useful
              goals, rather than spreading themselves too thin.
              (<i>Ed. note: also have someone else do the prescreening.
              Look for people who are tops in some class, or have some
              outstanding distinction you can calibrate against, etc.)</i>
       </ul>
</ul>

<h2>Relevance</h2>

This is research.  Software development and shipping is what we do, at
least if we want the research to have an impact during our lifetime.

<h2>Flaws</h2>

Could use some editing and reorganization; the above summary localizes
relevant messages much better than the text does.   

<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@


1.1
log
@Initial revision
@
text
@d72 1
@


1.1.1.1
log
@
book summaries of relevant readings for our metier
@
text
@@
