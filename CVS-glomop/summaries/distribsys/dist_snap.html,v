head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.12.11.03.09.02;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.12.11.03.09.02;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Distributed Snapshots
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Distributed Snapshots: Determining Global States of Distributed Systems
</h1>
<strong>
K.M. Chandy (UT Austin) and Leslie Lamport (SRI)
</strong>

<p><b>One-line summary:</b>
Elegant formal characterization of distributed computation, which
supports a proof that the proposed snapshot algorithm captures something
that can meaningfully be called "global state" of a DS.  Also shows how
this algorithm can be used to detect stable properties, e.g. deadlock.
</p>

<h2>Overview/Main Points</h2>

Important definition/assumption (my paraphrase): the only ordering that
can be imposed on a distributed computation is that resulting from
treating send/receive of messages as events tht modify the state of a
single process or comm. channel.  Any permutation of the events that
respects this partial ordering results in the system performing "the
same" distributed computation.  Read the paper for the formal defs.

 Global state detection algorithm (any process may initiate at will):
<ul>
  <li> <i>p</i> sends marker <i>m</i> along each channel
       <i>c</i> that it communicates on (or multicast, etc.)
  <li> When I receive <i>m</i> on channel <i>c</i>:
       <ul>
         <LI> If I have not recorded my state, then record state,
              mark the state of <i>c</i> as the empty sequence, and
              forward marker <i>m</i>.
         <li> Otherwise, record state of <i>c</i> as sequence of messages
              received on <i>c</i> since I recorded my state.
       </ul>
  <li> Simple to prove that algorithm terminates in finite time, if
       communication graph is strongly connected and channels have
       finite latency.
</ul>

Properties of the recorded global state:
<ul>
  <li> It does not necessarily correspond to any "real" global state of
       the system (i.e. one that ever happened at a given global time)
  <li> However, it does correspond to a <i>possible</i> global state
       that is consistent with the ordering imposed by message sends and
       receives.
  <li> Formally: If the state recorded is S*, the sequence of
       distributed computations done by the system is <i>seq</i>, and
       the "true" initial and 
       final states of the system are Si and Sf, then:
       <ul>
         <li> S* is reachable from Si, and Sf is reachable from S*;
         <li> There exists a computation <i>seq*</i> which is a
              permutation of <i>seq</i>,
         <li> Either S*=Si or Si&lt;S* in <i>seq*</i> (&lt; means
              "occurs earlier than"),
         <li> Either Sf=S* or S*&lt;Sf in <i>seq*</i>.
       </ul>
  <li> Proof proceeds by distinguishing <i>prerecording</i> from
       <i>postrecording</i> events in each process, and showing that
       <i>seq*</i> can be constructed from <i>seq</i> without changing
       the "ordering-ness" of subsequences of <i>seq</i>.
</ul>

Stable property detection:
<ul>
  <li> Let y(S) be a function that returns
       true iff global state S exhibits some stable property.
  <li> Note that
       just because y(S) is false at the beginning of the state-detection
       algorithm, it may not be false at the termination of the
       algorithm.
  <li> Algorithm: Record some global state S*; then y(S*) will return
       true iff the stable property holds, since
       <ul>
         <li> S* is reachable from Si (shown in proof),
         <li> Sf is reachable from S* (shown in proof),
         <li> y(S) implies y(S') for <i>all S' reachable from S</i>
              (definition of a stable property of a DS).
       </ul>
</ul>
      
<h2>Relevance</h2>

A particular formal characterizaton of distributed computation, an
algorithm for recording global state, proof that the recorded state is
meaningful, and proof that stable property detection can be done this
way.  Formal characterizations always make me feel better.

<h2>Flaws</h2>

Ordering criteria used as assumptions (i.e. based only on message
sends/receives) may not be appropriate for all DS's.

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@cs269 distrib systems summaries
@
text
@@
