head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.12.11.03.09.02;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.12.11.03.09.02;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Design of Distributed Systems Supporting Local Autonomy
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Design of Distributed Systems Supporting Local Autonomy
</h1>
<strong>
David D. Clark, Liba Svobodova, MIT LCS
</strong>

<p><b>One-line summary:</b>
A particular philosophy of DS architecture based on <i>autonomy</i>, and
the functionality each node's OS must provide to be consistent with this
philosophy.  Lots of vision, no implementation, sparse support.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li>Justification for DS is not primarily economic: some tasks are
       just naturally distributed
  <li> In "real life" distributed tasks, each agent maintains a high
       degree of autonomy.  Use this as principle for building a DS; we
       then get
       <ul>
         <li> autonomy,
         <li> some privacy (node controls its own data),
         <li> availability (one node doesn't bring down whole system).
       </ul>
  <li> 3 classes of components: nodes, servers (invisible to app
       writers), comm substrate
  <li> <b>Each piece of info in the DS has 1 and only 1 home, on some
       node.</b>
       <ul>
         <li> Other copies can exist, but they are not the same as the
              original object.
         <li> Home node retains control over all copies, eg it may
              encrypt them if it wants.
         <li> Applications kow if they're touching the real object or a
              "local version".
       </ul>
  <li> Justification:
       <ul>
         <li> Most accesses are to your own data
         <li> Most nonlocal accesses are read-only; conflict resolution
              should be infrequent
       </ul>
</ul>

Implications of this philosophy for various areas of DS performance:
<ul>
  <li> Efficiency: due to locality argument above, no problems.  App
       must know when it's operating on a copy since this allows
       optimization.
  <li> Reliability (in the data loss sense):
       <ul>
         <li> Functions and data can be replicated on independent
              hardware (availability)
         <li> low-level error propagation restricted by physical
              separation (hardware)
         <li> If a node fails, info for which it was the home node
              becomes temporarily unavailable.
         <li> Comm substrate should be fault tolerant (multi-link).
              ARPANET had just been deployed and showed this was possible.
       </ul>
  <li> Transactional semantics/distributed atomic update: we know it's
       important and complicated, 
       we have no story for it, it should only be used when absolutely
       necessary. 
  <li> Extensibility: they propose RPC service registration and note the
       problems it brings (stale nameserver entries, etc.)
  <li> Protection: assume untrusted network, use end-to-end encryption
       etc.
</ul>

3 requirements for a node's OS:

<ul>
  <li> Expose whether data is original or copy (remote)
  <li> Uniform set of comm. and authentication protocols
  <li> Allow each node control how it stores data (don't make the OS
       enforce a policy)
</ul>

<h2>Relevance</h2>

Underlying autonomy principles and "get OS out of the way" are 
application-level-framing and end-to-end arguments.  Clark went on to
write about these things later.</p>

Main contribution here is to describe a particular philosophy of
distributed-system node design at a time when many others were pushing
for tightly-integrated "transparent" distributed systems.

<h2>Flaws</h2>

No implementation is described, even though the authors admit certain
subproblems presented are of daunting complexity.

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@cs269 distrib systems summaries
@
text
@@
