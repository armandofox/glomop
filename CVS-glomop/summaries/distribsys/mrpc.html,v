head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.12.15.21.34.55;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.12.11.03.09.02;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.11.03.09.02;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fixed formats in multimedia summaries, added some GloMop summaries and the computers and society subdir
@
text
@<html>
<title>
Mobile RPC
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
M-RPC: Remote Procedure Call Service for Mobile Clients
</h1>
<strong>
Ajay Bakre and B.R. Badrinath, Rutgers U.
</strong>

<p><b>One-line summary:</b>
Indirect (like I-TCP) RPC, with reliable UDP for wireless part.
Automatic rebinding of services to servers after handoff is done under
the assumption that  certain RPC's are idempotent.    Lots of
hoopla about how the transport/service layer should 
support disconnection and data filtering rather than forcing every app
to handle it 
explicitly, but in the end, their implementation falls back on
end-to-end solution.
</p>

<h2>Overview/Main Points (Reviewer's opinion in <i>italics</i>)</h2>

Some requirements:
<ul>
  <li>flexible transport layer: different
       clients/services have different needs, and TCP is problematic on
       wireless links.  (Not clear if this is still  true given TCP-snoop.)
  <li> call retries from MSR, to hide from client.
  <li> some support for disconnected operation, e.g. if MH is
       temporarily disconnected, client RPC should wait for reconnect
       before retrying call.
  <li> automatic rebinding of services after a move.
  <li> backward compatibility, i.e. can talk to existing RPC servers.
  <li> Low-bandwidth data filters, etc. should be supported in transport
       layer, rather than forcing each app to do it.  <i>I think this
       violates e2e (end-to-end) argument and is not a good idea.</i>
</ul>

<p>Authors say that the above reqts. apply particularly to sophisticated
apps that engage in long-lived conversations with RPC servers; simpler
apps have looser requirements.  <i>IMHO, all the more reason to do it
e2e!</i></p> 

<p>M-RPC implementation:
<ul>
  <li> Client/MSR transport is RDP, to avoid forcing client to deal
       w/wireless losses at app level.
  <li> MSR/server is UDP, for compatibility w/existing servers.  MSR
       looks like a regular RPC client to the server.  <i>A problem for
       schemes that use client netmask or other form of client
       authentication.</i> 
  <li> Clients should bind to services, not servers.  Service bindings can be
       changed by new MSR after a handoff.  Clients can also bind to
       servers for compatibility, or non-idempotent calls (see below).
  <li> Assumption: any call made by binding to a <b>service</b> is
       idempotent.  Ensures that it's OK for new MSR to switch service
       to a new server if it wants.
  <li> Disconnection: client can setup app-specific callback that is
       called when disconnection occurs, or when RPC fails due to
       disconnection.  <i>So it's e2e after all.</i>
  <li> Performance: about 4x slower than Sun UDP RPC when no wireless
       losses.  As lossage increases, UDP performance is dominated by
       retry timeout whereas M-RPC performance is "protected" since RDP
       is used.  <i>Not really big news</i>
</ul>

<h2>Relevance</h2>

Obvious; is to RPC as I-TCP is to TCP, i.e. a mobile oriented solution,
but not really a very good one.

<h2>Flaws</h2>

<ul>
  <LI> No mention of how to handle failure semantics with this "split"
       model.  Who assumes responsibility?
  <li> Much ado about supporting disconnectedness and data filtering in
       transport layer, but current impl. pushes this to application
       anyway and there is no story for how it might be moved to
       transport layer.
  <li> 4x perf hit is about what you'd expect from the added
       roundtrips.  No discussion of alternate approaches, but authors'
       starting assumption is that TCP is bad for wireless.  Seems like
       RPC over TCP-snoop might be OK, if connection is long lived,
       since it also preserves e2e RPC failure semantics.
</ul> 

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
       violates e2e (end-to-end) argument and is stupid.</i>
d68 1
a68 1
       is used.  <i>Big news---NOT</i>
d73 2
a74 2
Obvious; is to RPC as I-TCP is to TCP, i.e. a mobile oriented solution
but not a very good one.
@


1.1.1.1
log
@cs269 distrib systems summaries
@
text
@@
