head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.12.11.03.09.03;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.12.11.03.09.03;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Arch. Considerations for Location Privacy in MC
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Architectural Considerations for Scalable, Secure, Mobile Computing With
Location Information
</h1>
<strong>
Mike Spreitzer and Marvin Theimer, Xerox PARC
</strong>

<p><b>One-line summary:</b>
Describes a suite of useful mobile/ubiquitous apps, some components of a
HW/SW infrastructure to support these apps, show how the apps are built
on top of the components, and show how component functionality <i>and
app semantics</i> change as privacy goals are introduced and as the
environment becomes less and less "trusted". 
</p>

<h2>Overview/Main Points</h2>

Some mobile apps to consider:
<ul>
  <li> uni- or multicast message delivery
  <li> scoreboard: display useful location info in "screen saver" form
  <li> find: locate nearby person(s) matching some qualification
  <li> note distribution (e.g. at a meeting)
  <li> AIR (activity-based info retrieval): query a log of everything
       that has happened to you, helping you remember things by
       association.
  <li> location: determine someone's location
  <li> visitor guidance
  <li> responsive environment (automatic lighting, doors, etc, as in
       "ubicomp")
</ul>

The baseline architecture:
<ul>
  <li> Sources of location information (GPS, active badge, etc)
  <li> Location Service: answers query about where someone is, or who is
       at a given loc.
  <li> Terminal agent: interface to I/O device (WS, Tab, etc)
  <li> User agent: collects user's location info, and supplies it to
       Location Service (LS).  Can also directly answer queries from
       interested parties.
</ul>

It should be pretty obvious how to build the desired apps given these
components in a trusted environment.</p>

Adding privacy (each user can choose whom to reveal location info to):
<ul>
  <li> Locate and FInd can only find
       persons willing to reveal themselves
  <li> AIR log may not reflect "true" history - some events may be
       blocked by user agent
  <li> UA-centric arch: Let UA (not LS) apply access controls; it can be
       as simple or 
       sophisticated as it wants, without pushing this responsibility to
       centralized LS.
  <li> Trusted escrow service can implement "I'll answer your query if
       you reveal yourself." 
  <li> Secret groups: membership known only to members; access control
       done by handing out memberships.  Eliminates need for escrow.
</ul>

Working in the presence of lying programs but trusted infrastructure:
<ul>
  <li> Group membership auth: either all group members share some
       secret, or can construct a "verifier" that can be independently
       verified by receiver.
  <li> Location auth: entity to be located must possess some unique
       distinguishing feature, <i>and</i> there must be a trusted sensor
       that can detect this feature.
  <li> Since these constraints are hard to meet in practice, Locate and
       Find must treat location info as
       hints rather than truth.
</ul>

Insecure infrastructure or location service (e.g. cross-domain):
<ul>
  <li> Intermediate trusted "address laundering" agent can decouple
       source/dest address of messages; prevents communication patterns
       from being leaked.
  <li> Untrusted LS (e.g. in another domain) implies that only a
       UA-centric arch is practically scalable to large systems.
  <li> Traffic analysis: practically impossible if intruder can observe
       all traffic and perform arbitrary computations over it; a
       compromise ("coarse-grained location") can be achieved by sending
       messages to user by broadcasting it to a slowly changing set of
       cells covering a large area.
</ul>
       
<h2>Relevance</h2>

<ul>
  <li>Combination of absolute privacy guarantees together with reliable
       location-aware apps is impossible because we can't provide authenticated
       location info for people (as opposed to the devices they carry) and we
       cannot protect against traffic-analysis attack.
  <li>However, useful apps with reasonable privacy guarantees can be
       built.
  <li> UA-centric is best for scaling across domains; LS-centric can
       provide some services better if inside a trusted env.
  <li> Solution is to provide a "moded" heterogeneous environment.
</ul>

<h2>Flaws</h2>

A high-level issues paper, not really an architecture paper.

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@cs269 distrib systems summaries
@
text
@@
