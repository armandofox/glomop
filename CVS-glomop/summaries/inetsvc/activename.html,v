head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.08.27.01.47.39;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>
<title>
Active Names
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
<a href="http://www.cs.washington.edu/homes/tom/activenames.ps">Active
Names: Programmable Location and Transport of Wide-Area Resources</a> 
</h1>
<strong>
Amin Vahdat (UCB), Tom Anderson (UW), Mike Dahlin (UT Austin)
</strong>

<p><b>One-line summary:</b>
Late binding of names by executing service-specific nameservers in a
controlled environment.  Addresses some of the thorny naming problems
associated with replication/mirroring, transformation, alternates,
customized/cookie-ized pages, etc.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Define a naming scheme based on a <i>namespace</i>
       concatenated with a <i>name</i>.  Each namespace is controlled
       by a NamespaceProgram that resolves names there via an Eval() method.
  <li> The Eval method also takes as arguments an array of
       <i>afterMethods</i> to be called after the original resolution
       completes, and a <i>DataStream</i> representing the result/output
       state of an evaluation.  This allows a pipeline/CPS-like style of
       composing name evaluations (think distillation pipeline).
  <li> This enables multi-way RPC without multiple roundtrips:
       client calls NS1 which hands off to
       NS2,...,NSn via the <i>afterMethods</i> (any intermediate
       afterMethod can push more afterMethods).
  <li> Security:
       <ul>
         <li> Goal: avoid having the one-thread-per-resolution
              NamespaceProgram consume too many resources.  Approach: a
              Java thread metascheduler, but no way to monitor CPU/mem
              usage.
         <li> Goal: avoid having unrelated NP's stomp on each other.
              Approach: run each in a separate meta-VM.
       </ul>
  <li> Implementation: Java class hierarchy; a VM (on top of JVM) in
       which AN resolvers (NamespacePrograms) run.  ANVM uses
       <A href="http://www.cs.princeton.edu/sip/pub/oakland98.html">
       Wallach
       and Felten's stack inspection</a> and secure class loader.
</ul>

<h2>Relevance</h2>

 Addresses various name-related problems such as cooki-ized or
       customized pages, transforms, alternates, etc.  On the other
       hand, eliminates some of the self-describing properties of
       current names (hostname encapsulation, etc.)

<h2>Flaws</h2>

<ul>
  <li> Besides late binding, a main feature is separation of
       &quot;canonical names&quot; from &quot;parameters&quot;, in the
       sense that cookie-ized pages or transformed objects might
       require.  This is fine, but important to realize that these
       problems are solved by fixing the naming scheme in general---not
       necessarily by making names active.
  <li> Security is treated as a first-order concern, but failure
       semantics of the multi-way RPC/chaining are not.
  <li> Performance is a concern for high workloads; maybe less so if
       resolutions are cached (see below), rare, or expected to be done
       near client with redirects going to faraway servers to do the
       actual work.
       <i>Armando sez:</i>
       How about a hybrid active/passive scheme, where name resolution
       can be cached as an optimization.  The name resolver API could be
       extended to express &quot;consistency semantics&quot; for
       resolved names, or one of the other expiration-based consistency
       schemes could be used.  This would avoid the performance hit and
       still allow AN's to be perfectly adequate for things like replica
       selection.  (Yes, you could build this starting from AN as is,
       but worth asking whether the abstractions are worth providing as
       a first class mechanism.)
</ul>

<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
