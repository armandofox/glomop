head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
    <TITLE>MOWGLI WWW</TITLE>
</HEAD>
<BODY>
<H1>Enhanced Services for WWW in Mobile WAN Environment</H1>
<H3>Mika Liljeberg, Heikki Helin, Markku Kojo, Kimmo Raatikainen, Univ.
of Helsinki (MOWGLI)</H3>
<B>One-line abstract: </B>More fleshed-out implementation of Pythia, but
adding a client-side agent to do various optimizations and focusing on GSM
exclusively (no adaptation, no &quot;smart&quot; compression).  This paper
seems to supersede &quot;Optimizing WWW For Weakly-Connected Mobile Workstations:
An Indirect Approach&quot;; the work here seems more complete.
<H2>Main points:</H2>
<UL>
<LI>Factoid: GSM roundtrip abou;t 1 sec; nominal bandwidth 9600 baud. 
<LI>Mowgli goals: 
  <UL>
  <LI>Discourage burstiness (low utilization) 
  <LI>Minimize data transfer to MH 
  <LI>Disconnected operation 
  <LI>Compatibility w/existing SW 
  <LI>Fine-grain user control over wireless link use 
  </UL>
<LI>Client-side &quot;agent&quot; acts as local HTTP proxy; communicates
with its evil twin at MCH over MDCS (Mowgli Data Channel Service) instead
of TCP, and using MHTTP (Mowgli-HTTP; basically tokenized HTTP) instead
of regular HTTP. 
<LI>MDCS: session-oriented delivery service that provides either reliable
streams or datagrams, with pre-emptive priorities. Creating new logical
connections is very lightweight. Sounds like what we need! 
<LI>Proxy does GIF-to-JPEG translation; prefetching of first-level links;
enforces max. size for text and images; annotates URL's to indicate which
ones are in (agent-controlled) client side cache; supports a background
transfer queue with user interface. UI is provided mostly in HTML, by the
client-side agent; some parts provided by a &quot;control panel&quot; that
runs alongside browser and communicates w/evil twin. See picture on p.7
of paper. 
<LI>Disconnected operation: session state is maintained <I>at the MDCS level!</I>
So application doesn't really know what's happened. 
<LI>Performance: about 50% latency reduction compared to standard setup;
improvement is reduced as more images are added, probably because they don't
do significant image compression, which is where the big wins are. 
</UL>
<H2>Flaws/comments:</H2>
<UL>
<LI>No adaptation to network link, except for disconnection support 
<LI>No &quot;smart compression&quot;: generally lossless compression which
is decompressed at the agent. 
<LI>The approach of a client-side agent is fine for Unix, but may be difficult
for other platforms, which is why I've decided to move the HTTP protocol
filter exclusively to the proxy side. 
<LI>They don't seem to indicate that a proxy is not just for compatibility
with current apps--it is a key part of the picture even with future mobile-aware
apps. 
</UL>
<HR><A HREF="index.html">Back to index</A><BR>
</BODY>
</HTML>
@


1.1.1.1
log
@
@
text
@@
