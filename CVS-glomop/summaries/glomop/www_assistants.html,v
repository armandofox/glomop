head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	97.02.19.18.43.35;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.14.07.51.58;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.14.07.51.58;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@added bayou
@
text
@<html>
<head>
   <title>Quasi-Agent Web Assistants
</title>
</head>
<body>
<i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> 
<h1>An Architecture for Supporting Quasi-Agent Entities in the WWW</h1>

<p><b>Charles Brooks, W. Scott Meeks, Murray Mazer, OSF&nbsp;Research Institute</b></p>

<p><b>One-line summary:</b> Circumvent Web usage limitations by providing
HTTP stream transducers for annotation, semi-autonomous WWW-based (really
HTTP-based) &quot;browsing associates&quot;, and front-ends for encapsulating
non-HTTP content (mail, news, Zephyr-grams, etc).</p>

<h2>Overview/Main Points</h2>

<ul>
<li>Quasi-agent goals: autonomy, temporal continuity (runs for a long time
rather than doing one transaction and quitting), ability to communicate
with user and other entities.</li>

<li>Long-lived stateful stream transducers: browsing assistance that lives
in the HTTP&nbsp;path. Can be used to filter content, characterize (summary
digest) content, index surfed pages, &quot;document correlation&quot;,
etc.</li>

<li>Transducers can be &quot;stacked&quot; via thin interface (HTTP proxy)
to compose functionality.</li>

<li>Browsing associates: silently watch your browsing and do some of their
own in the background. Examples: modify HTML when it detects that a previously-visited
link has been updated; build up graphical maps as user surfs that can be
clicked to control Netscape remotely; etc. These agents have their own
separate UI&nbsp;based on Tcl/Tk.</li>

<li>Encapsulation/annotation: web mail, news, etc. <i>Group servers</i>
capture and compose annotation info, metainformation, etc. from various
people and dynamically generate annotated document in HTML.</li>

<li>Investigating using Web protocols for interagent communication, as
well as having agents be conversant in various browser API's, Zephyr notification,
Tcl/Tk <i>send</i> function, etc.</li>
</ul>

<h2>Relevance</h2>

<p>Stateful proxy-like entities that help you out during Web browsing.
It's Web-centric in terms of implementation but the architecture seems
more general, even though authors don't directly make that claim.</p>

<h2>Flaws</h2>

<ul>
<li>Authors would like to generalize the &quot;transducer&quot; notion,
but seems like they are running into the obstacles of stateless HTTP, HTML
as the only medium, etc. </li>

<li>Plans to build a &quot;shared bulletin board&quot;&nbsp;(basically
a newsgroup) via HTTP gateway, or putting a Zephyr client front-end on
it; how is this different from putting that on top of NNTP news?</li>

<li>In general, this and other work sometimes blurs the difference between
a useful hack that provides <i>new</i> functionality <i>per se</i> (like
browsing associates, transducers) and semi-useful hacks that just reinvent
the wheel using Web protocols and clients (web mail, bulletin board).</li>
</ul>

<p>
<hr><i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> </p>

</body>
</html>
@


1.1
log
@Initial revision
@
text
@d1 76
a76 77
<html>
<head>
   <title>Reliable Multicast Protocol
</title>
   <meta name="GENERATOR" content="Mozilla/2.01Gold (Win32)">
</head>
<body>
<i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> 
<h1>An Architecture for Supporting Quasi-Agent Entities in the WWW</h1>

<p><b>Charles Brooks, W. Scott Meeks, Murray Mazer, OSF&nbsp;Research Institute</b></p>

<p><b>One-line summary:</b> Circumvent Web usage limitations by providing
HTTP stream transducers for annotation, semi-autonomous WWW-based (really
HTTP-based) &quot;browsing associates&quot;, and front-ends for encapsulating
non-HTTP content (mail, news, Zephyr-grams, etc).</p>

<h2>Overview/Main Points</h2>

<ul>
<li>Quasi-agent goals: autonomy, temporal continuity (runs for a long time
rather than doing one transaction and quitting), ability to communicate
with user and other entities.</li>

<li>Long-lived stateful stream transducers: browsing assistance that lives
in the HTTP&nbsp;path. Can be used to filter content, characterize (summary
digest) content, index surfed pages, &quot;document correlation&quot;,
etc.</li>

<li>Transducers can be &quot;stacked&quot; via thin interface (HTTP proxy)
to compose functionality.</li>

<li>Browsing associates: silently watch your browsing and do some of their
own in the background. Examples: modify HTML when it detects that a previously-visited
link has been updated; build up graphical maps as user surfs that can be
clicked to control Netscape remotely; etc. These agents have their own
separate UI&nbsp;based on Tcl/Tk.</li>

<li>Encapsulation/annotation: web mail, news, etc. <i>Group servers</i>
capture and compose annotation info, metainformation, etc. from various
people and dynamically generate annotated document in HTML.</li>

<li>Investigating using Web protocols for interagent communication, as
well as having agents be conversant in various browser API's, Zephyr notification,
Tcl/Tk <i>send</i> function, etc.</li>
</ul>

<h2>Relevance</h2>

<p>Stateful proxy-like entities that help you out during Web browsing.
It's Web-centric in terms of implementation but the architecture seems
more general, even though authors don't directly make that claim.</p>

<h2>Flaws</h2>

<ul>
<li>Authors would like to generalize the &quot;transducer&quot; notion,
but seems like they are running into the obstacles of stateless HTTP, HTML
as the only medium, etc. </li>

<li>Plans to build a &quot;shared bulletin board&quot;&nbsp;(basically
a newsgroup) via HTTP gateway, or putting a Zephyr client front-end on
it; how is this different from putting that on top of NNTP news?</li>

<li>In general, this and other work sometimes blurs the difference between
a useful hack that provides <i>new</i> functionality <i>per se</i> (like
browsing associates, transducers) and semi-useful hacks that just reinvent
the wheel using Web protocols and clients (web mail, bulletin board).</li>
</ul>

<p>
<hr><i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> </p>

</body>
</html>
@


1.1.1.1
log
@
@
text
@@
