head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
    <TITLE>Active Networks</TITLE>
</HEAD>
<BODY>
<H1>Towards an Active Network Architecture</H1>
David L. Tennenhouse and David J. Wetherall, MIT Telemedia, Networks &amp;
Systems Group<BR>
ACM SIGCOMM 96?, (Computer Communication Review)
<H2>One-line summary</H2>
<BR>
Return path noise in CATV networks is dominated by &quot;noise funneling&quot;
(addition at cascade amps) and noise sources inside subcriber homes that
can be only partially attenuated, and will be reduced if &lt;500 subscribers
are on one segment. Return path characteristics suggest that FDMA or FDMA/TDMA
hybrid will be better choice than CDMA or pure TDMA for MAC on this shared
backchannel. 
<H2>Main ideas</H2>
<UL>
  <LI>Replace passive data packets with active &quot;capsules&quot; encoding
programs and data.  This is  generalization of user-injected programs to
its logical extreme.
  <LI>Architectural effect is to raise the level at which network ineroperability
is realized, from IP to application level.
  <LI>This is a good time for large-scale investigation of this approach,
because traditional OSI layering is showing cracks due to obsolete SW/HW
assumptions/limitations. E.g. OSI underemphasizes upper-layer interoperability,
network tunneling, and app-specific behavior at the network layer or below,
all of which are flourishing in popularity now.
</UL>
<B>Requirements</B>:
<UL>
  <LI>Foundation Components: executable format, API for capsule's runtime.
  <LI>Active storage: capsules can leave persistent state at each node they
visit, for use by subsequent capsules.
  <LI>Extensibility: capsules can extend the programming environment on
a visited node, leaving methods for use by subsequent capsules.
</UL>
<B>Programming model issues:</B>
<UL>
  <LI>Mobility/portability: use high-level scripting language, intermediate
bytecode, or &quot;fat&quot; capsule binaries.  Expect that all three will
occur in practice.
  <LI>Safety, security, accountability/authentication: weak arguments given,
primarily based on safe-Tcl and Java and some handwaving abou crypto.
  <LI>Resource allocation at nodes: garbage collection, CPU limiting, bandwidth
limiting, naming constraints.  References to some existing language-based
work and promise to leverage IETF namespace work, but nothing concrete.
</UL>
<H2>Comments/Flaws</H2>
Good example of taking an idea to its logical extreme; some convincing arguments
that some kind of investigation is warranted, but several things are glossed
over:
<UL>
  <LI>Many  routers already have their hands full.  Do we have to put compute
farms at every router to accommodate capsules?
  <LI>&quot;Most capsules will not require sophisticated resource models&quot;:
maybe so, but requires careful API for specifying <I>minimum</I> necessary
resources. Compare Java: &quot;require awt&quot; even when only 1 or 2 classes
ar needed.
  <LI>&quot;...ability to trade computation against bandwidth may be useful
to encourage, for example, compression prior to transmission on low bandwidth
links.&quot;  Not a single citation is provided for this even though a lot
of work has been done.
  <LI>&quot;...our use of active technologies within the network is novel&quot;:
same criticism.  Lots of proxies out there at multiple levels, including
ours, anonymizer, Zenel, etc.
</UL>
<H2><HR></H2>
<A HREF="index.html">Back to index</A> 
</BODY>
</HTML>
@


1.1.1.1
log
@
@
text
@@
