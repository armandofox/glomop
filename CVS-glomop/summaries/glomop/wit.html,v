head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Wit
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Wit: Infrastructure for Wireless Palmtop Computing
</h1>
<strong>
Terri Watson, UW
</strong>

<p><b>One-line summary:</b>
Proxy-like system based on ParcTab IRnet, where Tcl is the programming
language and Tcl-DP-like IPC the transport.  Emphasis on application
partitioning between mobile and fixed world, but no uniform
architecture/methodology for doing so, and no notion of BW management
for high-bw apps.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> HP-95LX palmtops connect to Parc IRnet.  A "half wit" proxy
       running in wired network is the liaison to the wired part of the
       application.
  <li> Reliable and unreliable transport, proxy communication, UI, and
       simple cooperative threading package
       available to Tcl on palmtop.  App-level handlers talk to each
       other, but Tcl's talk to each other on separate logical channels.
  <li> Handoff: as mobile moves, its outgoing packets are routed to a
       new BS.  Application uses RPC to query which BS is the current
       one, but application is not normally notified of handoff.
  <li> Multiple logical streams to same palmtop are separate TCP (or
       RPC) connections.
  <li> Current apps: tty, textual WWW, talk, wireless video.  Uses
       <i>nv</i> to get frames and send them to the palmtop.  <i>No
       compression</i>, so we're talking seconds/frame.
</ul>

Interesting conclusions (from her quals talk):
<ul>
  <li> Tcl is a good infrastructure choice for app
       development, but there was no BW management and as a result
       applications suffered (like video viewer).
  <li> Info browsing most popular app
  <li> Local (mobility) info rarely used, even though it was available!
       Contrast to tab and badge systems.  Is this a chicken-and-egg
       problem?
  <li> Perhaps exploit UI to give user hints about relative costs
       (latency) of
       various operations.
</ul>

<h2>Relevance</h2>

Implemented instance of proxy concept: application partitioning using a
simple scripting language.

<h2>Flaws</h2>

<ul>
  <li> Lack of BW management really bit them on the butt.  The position
       paper talks about adapting to connectivity changes, but doesn't
       say how.
  <li> No "tight integration" between palmtop and fixed apps (eg
       consistent calendar or email,etc ); orthogonal to project
  <li> UI/SDK tightly integrated with network -- maybe too tightly?
  <li> No uniform architecture or methodology for partitioning apps.
       See <a href="rover.html">Rover</a> for interesting approach to
       this.  Wit 2 has a data-driven partitioning architecture.
  <li> Design is extremely broad: covers everything from IP
       encapsulation in IR drivers all the way up to "UI color and
       layout choices"
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@
@
text
@@
