head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Reliable Multicast Protocol
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
A Reliable Multicast Framework for Light-weight Sessions and Application
Level Framing
</h1>
<strong>
Sally Floyd, Van Jacobson, Steve McCanne, LBL; C.G. Liu, USC; Lixia
Zhang, Xerox PARC
</strong>

<p><b>One-line summary:</b> Reliable multicast that allows app-level
policies for reliability and ordering, rather than putting it in the
protocol.  Scalability achieved by having one client multicast a repair
request if none is seen after a small random delay.  </p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Many-to-many multicast (based on IP multicast) where source ID's
       of mcasts are persistent.  All data has a unique name.
  <li> Ordering and naming/sequence semantics are application-level
       only; thus used only when needed, and apps can choose whatever
       naming convention works well for them, eg in <i>wb</i> need to
       know what seq numbers you've missed right after you join.
  <li> BW management/allocation are also at app level.
  <li> To prevent ACK implosion, NAK's are used.
  <li> When someone needs repair, they wait a random amt of time for
       someone <i>else</i> to mcast a repair request; if not seen, they
       mcast it themselves.
  <li> Since ADU names can be independent of the original sender, anyone
       who has a copy of the requested data may transmit it.
  <li> If repair is lost, timeout triggers a retransmit.
  <li> Wb instantiation: most ops are idempotent; time stamps on drawops
       are used to determine rendering order.  Captures reasonable
       temporal causality without heavyweight causal delivery.  For
       repairs, someone who has a copy of requested data mcasts it
       after a random time; this prevents response implosion.
  <li> Some nice simulations of request/repair behavior on various
       topologies suggest that it works well even with large numbers of
       nodes.
  <li> Other apps for which RMP would be interesting: distributed Web
       caching; Usenet; internet routing information exchange.
  <li> Related work: mostly distinguishes between token-based and
       distributed responsibility for reliability and ordering.
</ul>

<h2>Relevance</h2>

Convincing application of the end-to-end argument to reliable multicast.
Effective prevention of ACK implosion and response implosion.

<h2>Flaws</h2>

<ul>
  <li> There are lots of parameters in the simulations whose values were
       fixed (timeout, etc.) - not clear how they affect performance.
  <li> If repair is dropped, have to rely on timer retransmit.  On poor
       networks, this could suck.
  <li> WWW application seems somewhat gratuitous - not clear if mcast is
       the right way to deliver WWW updates to distributed caches.
</ul>
<ul>

</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@
@
text
@@
