head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<HTML>
<HEAD>
  <TITLE>Fast Lossy Internet Image Transmission</TITLE>
  <META NAME="GENERATOR" CONTENT="Adobe PageMill 2.0 Mac">
</HEAD>
<BODY>

<H1>Fast Lossy Internet Image Transmission</H1>

<P>John M. Danskin, Geoffrey M. Davis, Ziyong Song, Dartmouth College</P>

<H2>One-line summary</H2>

<P>Subband compression that dynamically trades redundancy bits for data
bits, to deliver image data using unreliable (droppable) datagrams, like
video.  Sacrifices some quality to get much better performance (latency
to get &quot;entire&quot; image) and eliminate multi-second TCP variances.</P>

<H2>Main ideas</H2>

<UL>
  <LI>Concentrate on &quot;perceptually important&quot; image bits.  When
  loss rate increases, shift bits from data to redundancy but keep total
  # bits transmitted constant.</LI>
  <LI>Optimization: remember effective transfer rates across connections
  to eliminate slow start effects (since UDP is used anyway).</LI>
  <LI>Doesn't rely on network traffic prioritization or delivery classes.</LI>
  <LI>Main problem is how to allocate quantizer bins to get minimal distortion
  for given bit expenditure. Channel coder has access to image source data
  at application level, so it knows which bits can be &quot;sacrificed&quot;
  in lossy transmission.</LI>
  <LI>Assuming integrity of packets and that lost packets can be detected,
  a single parity block allows one lost block out of N to be reconstructed.
   Packets are sent in random order to avoid burst-error lossage wiping out
  a whole block.</LI>
  <LI>Similarly, each subband is distributed across many packets (pixel interleave).</LI>
  <LI>Experiments: knee of load/loss curve for network was determined offline
  and used to determine target bit rate; plan to incorporate rate control
  like that in TCP Vegas (remember connection bandwidth for various subnets).</LI>
  <LI>Results: performs very well even with high error rates and jitter.
   Encoding and decoding are linear time.</LI>
  <LI>&quot;Network citizen&quot;: FLIIT doesn't slow down (as TCP does)
  when congestion happens, but TCP Reno forces dropped packets in this situation,
  so not clear who's the better network citizen.</LI>
</UL>

<H2>Comments/Flaws</H2>

<UL>
  <LI>Destruction of streamlike model may render some <A HREF="network_ilp.html">integrated-layer</A>
  strategies unworkable, esp. to reduce extra copies.</LI>
  <LI>Nonstandard encoding format, based on wavelets (but authors claim their
  techique can be applied to DCT based encodings too).</LI>
</UL>

<H2><HR></H2>

<P><A HREF="index.html">Back to index</A> 
</BODY>
</HTML>
@


1.1.1.1
log
@
@
text
@@
