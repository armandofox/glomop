head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.58;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Selected Mobicom96 Papers
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Selected Papers from Mobicom 96
</h1>

<h3>Mobility Support in IPv6 (Charlie Perkins)</h3>

<ul>
  <li> IP header field for C/O address
  <li> binding update is an IP option
  <li> network-level authentication assumed ubiquitous (for binding update)
  <li> MH creates its own c/o address from link-level address and
       address autoconfig facilities
</ul>

<h3>Lossless TCP Header Compression (Degermark, Engan, Nordgren, Pink;
Lulea Univ. and Swedish Inst. of CS)</h3>

<ul>
  <li> Identify parts of packet that don't change frequently and send
       them once only
  <li> generation number (version number) protects deltas between
       headers of different packets
  <li> "twice" mechanism usually allows state recovery for TCP headers
       (which have serial dependencies due to seq. number, etc)
  <li> Compression slow-start: after state change, send full header
       every 2^k packets as k increases to a steady-state value
  <li> Typical header sizes become 4-6 bytes when all these
       optimizations are applied
</ul>

<h3>WebExpress (Housel and Lindquist, IBM Research)</h3>

<ul>
  <li> client side and proxy side agents
  <li> "virtual sockets": many logical connections onto one logical
       connection at link level
  <li> HTTP forms differencing: compute deltas between form postings to
       send to client
  <li> client cache assigns expiration date to each object (system
       configurable); if
       referenced after exp. date, client compares hash of object
       against server's hash, server may conditionally refetch and
       retransmit if object has changed.
  <li> Amazingly, IBM applied for patents on these things.
</ul>

<h3>Fault Tolerance for Rover (A. Joseph and F. Kaashoek)</h3>

<ul>
  <li> Stable server logs: log incoming Rover QRPC's, replay them at
       server if crash before reply sent to client
  <li> Also log RPC replies before transmitting them
  <li> Stable state variables accessible to programmer: intermediate
       server state is logged to allow recovery from a checkpoint rather
       than full replay from client
  <li> Programmer can specify recovery proc to call on server side after
       a restart; recovery proc can examine log, values of stable state
       variables, etc.
  <li> Implementation: a simple process watches the Rover server process
       and restarts it after crashes, etc
  <li> Flash RAM filesystem used for logging (since log flushing is in
       the RPC request-reply critical path)
</ul>

<h3>CPU Power Management for MacOS (Jay Lorch and A.J. Smith)</h3>

<ul>
  <li> MacOS scheduler is defective: sometimes calls an app before its
       "voluntary sleep" quantum is up
  <li> MacOS apps are defective: sometimes call WaitNextEvent with a
       zero sleep even when they have no work to do
  <li> MacOS scheduling metaphor is defective: applications periodically
       "polled" and just go back to sleep if they discover no work to do
  <li> One fix: multiply sleep values by some constant (but this
       may violate human interface guidelines)
  <li> Better: detect "greedy" processes that request zero-sleep
       <i>n</i> times in a row, but then don't do any work during their
       work interval; in the future, force them to wait some minimum
       sleep time
  <li> Performance is within 20% of "optimal" (oracle) algorithm,
       without being very intrusive
  <li> How applicable is this to any other OS? They're all preemptive now.
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@
@
text
@@
