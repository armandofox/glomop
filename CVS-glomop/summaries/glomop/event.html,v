head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Event Delivery Abstractions
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
Event Delivery Abstractions for Mobile Computing
</h1>
<strong>
B.R. Badrinath and Girish Welling, Rutgers DATAMAN
</strong>

<p><b>One-line summary:</b>
Distinguishes <i>monitored events</i> (poll for parameter of interest to
leave specified window) from <i>triggered events</i> (low-level state
change, i.e. insert PC card), and defines a language-level mechanism
based on C++ objects for event registration, delivery, and handling.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Each app may define several EventObjects or MonitorObjects (by
       subclassing from base classes) that
       register interest in specific events.  Event is delivered once to
       each registered object.
  <li> Small amount of data is piggybacked onto event delivery. <i>
       Not clear how to provide substantially more data,
       esp. since event handlers are encapsulated objects.</i>
  <li> Central Event Registrar provides low-level event capture and
       encapsulates them for delivery.  OS-specific peculiarities of
       dealing with events are encapsulated here.
</ul>

<h2>Relevance</h2>

Proposes a standard abstraction for event delivery; potentially many
uses for this model (interactive groupware, network events, mobility
awareness, etc.)

<h2>Flaws</h2>

<ul>
  <li> Implementation is in Mach 3.0; makes use of Mach threads (for
       monitor objects) and Mach objects, and C++ class mechanism for
       creating objects.  I.e. all the hard work is really already done
       in the OS.  Not appropriate for portables.
  <li> Future work includes determining what minimal OS functionality is
       necessary to support their abstraction.  In my view, this is the
       interesting question, and the one I expected the paper to answer.
  <li> Future work includes abstractions for object and thread
       migration.  Not clear what the relationship is to this paper, or
       whether they will again punt to the OS and just encapsulate the
       OS-provided behavior in a class.  I mean, anyone can do that.
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@
@
text
@@
