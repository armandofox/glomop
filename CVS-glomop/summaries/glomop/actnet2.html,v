head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<head>
   <title>Active Networks and Congestion</title>
   <meta name="GENERATOR" content="Mozilla/2.01Gold (Win32)">
</head>
<body>
<i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> 
<h1>On&nbsp;Active Networking and Congestion</h1>

<p><b>Samrat Bhattacharjee, Kenneth Calvert, Ellen Zegura, Georgia Tech</b></p>

<p><b>One-line summary:</b> Active network packets can be operated on by
functions that do application-specific things (sort of), so the routers
can do things like intelligently drop application-level data units (ADU's)
to decrease congestion. Architecture is basically &quot;active messages
for routers&quot;.</p>

<h2>Overview/Main Points</h2>

<ul>
<li>Approach: provide a well defined set of functions that can be run on
packets. Each packet optionally carries a set of labeled state variables
that can be used in specifying the function's operation.</li>

<li>Interesting motivation: they foresee a large class of applications
that will reactively adapt to network rather than demanding QoS, because
they will have no choice or want to avoid $$ cost.</li>

<li>Goal: ensure that congestion losses occur in a <i>controlled, application-specific
manner.</i></li>

<li>Packets without APCI (Active Processing Control Info) are routed normally;
packets with APCI are sent to an &quot;active processor&quot; before being
routed. Computation may require headers, checksums, etc to be recomputed.</li>

<li>Applications: unit-level dropping (aggregate packets of a video frame,
then drop the frame; drop an MPEG Group-of-Pictures; or control how many
layers of a layered encoding are sent); transformation of ADU's; stream
synchronization with selective dropping; etc.</li>

<li>&quot;Bursty&quot; network modeled as follows: for parameters <i>p,
K,</i> each network write is followed, with probability <i>p</i>, by a
&quot;wait&quot; of <i>rK</i> time units where <i>r</i> is a random number
in [0,1]. Don't know if this is a reasonable characterization of bursty
traffic.</li>
</ul>

<h2>Issues</h2>

<ul>
<li>Fast switch (eg ATM)&nbsp;and processors must be integrated; couldn't
do this in their experimental setup.</li>

<li>Where to add the APCI&nbsp;info to packets? ATM cells are too small;
can add in ATM&nbsp;AAL layer (so processor must reassemble AAL&nbsp;data
units before it can parse the APCI); as a sublayer or optional header in
IPv4. Routers must know how to deal with this.</li>

<li>If network layer causes data unit restructuring (eg IP&nbsp;fragmentation),
APCI may have to be adjusted.</li>

<li>Who computes the original APCI? Should be the application, via an appropriateapp-specific
UI; sometimes transport layer may be able to do it (simple TCP packet dropping)
but this loses most benefits of ALF.</li>

<li>The APCI info must be passed down thru the network layers until it
becomes part of some layer's payload.</li>
</ul>

<h2>Relevance</h2>

<p>A good application of the e2e argument to active networks; a realistic
middle ground between current networks and Clark's long term vision of
active networks; a way of accommodating applications that adapt to the
network rather than demanding it. Relevant if you believe (as I do) that
these apps will dominate future traffic for economic reasons.</p>

<h2>Flaws</h2>

<ul>
<li>Not clear if the modeling of burstiness is mathematically sound.</li>

<li>Simulation setup required routing APCI packets to a separate active-processor
via Ethernet! As such, no real indication of how much CPU&nbsp;load would
be required in the real world (e.g. multiport ATM switch operating at capacity).
There could be wide variability in the CPU&nbsp;demands of AP functions.</li>

<li>How could system be extended? In &quot;true&quot; active networks,
the packet can carry the code (or specify it), in this system it only specifies
a function name, so not clear how the code gets into the routers in the
first place or how it would be updated. How would new apps define new functions?
This is more like active messages for routers.</li>
</ul>

<p>
<hr><i><a href="http://HTTP.CS.Berkeley.EDU/~fox/summaries/glomop/index.html">Back
to index</a></i> </p>

</body>
</html>
@


1.1.1.1
log
@
@
text
@@
