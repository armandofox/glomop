head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.14.07.51.57;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<head>
   <title></title>
   <meta name="Author" content="">
   <meta name="GENERATOR" content="Mozilla/2.01Gold (Win32)">
</head>
<body>

<h1>Microsoft Secrets</h1>

<p>Cusumano (MIT&nbsp;Sloan) and Selby (???); based on the book of the
same name. How Microsoft creates technology, manages software development
and people.</p>

<h2>Highlights in no particular order</h2>

<li>ship early-get 90% right,test new markets early,get free feedback (bugs/feature
enhancements),set baseline de facto standard in case they want to stay
in that market. </li>

<li>synch+stabilize: daily clean builds of each product.</li>

<li>One-to-one relationship between coders and testers! Separate career
track for testers--promotion based on breadth of influence in your own
specialty. I.e. tester is not a &quot;stepping stone&quot;&nbsp;to coder.
</li>

<li>Informal communication, few rules, flat hierarchy (entry level = 10,
Gates is a level 15).</li>

<li>All managers also write code, even those with &gt;200 people under
them. Typical &quot;development lead&quot;&nbsp;(Program&nbsp;Manager)
spends up to 75% time coding rather than managing people.</li>

<li>&quot;Code complete&quot;: you can localize and fix bugs in &lt;1 day.
4-6 months later you will release.</li>

<h2>Lowlights/defects</h2>

<li>Lots of code re-use, but informally; no system for code reuse in place.
&nbsp;(Compare Yourdon &quot;Decline &amp; Fall of American Programmer&quot;)
Justification: code &quot;half life&quot; is only 18 months, too short
to maintain formal reuse infrastructure.</li>

<li>Product &quot;designs&quot; emphasize features not architecture. Resulting
products are feature-heavy. Even the teams are divided along feature lines
(&quot;feature teams&quot;). No formal review of the design.</li>

<li>little defect prevention (reviews) or high level arch; testing and
specs are user experience centric not arch-centric.</li>

<li>Middle managers have virtually no manager training; complaints from
junior employees about lack of team building and similar skills in their
managers</li>

<p><a href="index.html">Back to index</a></p>

</body>
</html>
 
@


1.1.1.1
log
@
@
text
@@
