head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.11.23.16.32;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>

<head>
<title>Design Meth for Adaptive Media Xfrm Apps</title>
</head>

<body>
<a href="index.html"><i>

<p>Back to index</i></a> </p>

<h1>Towards a Design Methodology for Adaptive Applications</h1>
<strong>

<p>Malcolm McIlhagga, Ann Light, Ian Wakeman </strong></p>

<p><b>One-line summary:</b>&nbsp; For media proxies that adapt by distillation, apply
perceptual and UI research to determine how to present the interfaces for controlling the
service, and a configuration-file-like language for expressing policy for degradation.</p>

<h2>Overview/Main Points</h2>

<ul>
  <li>Media policy language (mpl) example:<br>
    <tt>media.image.* : true : toMono&nbsp; </tt>If media type is &quot;image&quot; of any
    kind, convert to monochrome.<br>
    <tt>media.image.jpeg: meta(progressive) == false: toProgressive </tt>If media is
    image/jpeg and not progressive, encode as progressive (procedure call)</li>
  <li>Policy scripts in mpl can be attached to pages, objects, or set by users or proxies.
    &nbsp; They are compiled together (logically anyway) to come up with a complete policy;
    various precedence rules determine what to do when (e.g.) users and authors have different
    rules.</li>
  <li> &quot;Environment&quot; variables (image dimensions, image metadata, client parameters,
    etc.) are made available to policy scripts, simliar to CGI.</li>
  <li><strong>Nice side effect of paper:</strong>&nbsp; Perceptual experiments to determine
    JPG quality level at which degradation is noticeably bothersome to users, for a small set
    of different types of JPG images.</li>
</ul>

<h2>Relevance</h2>

<p>Interesting potential concept here is &quot;hint style sheets&quot; separate from pages
themselves, as in CSS or WIDL.&nbsp; Mpl examples suggests that a purely declarative
language may not be appropriate; a simple scripted language (embedded Tcl?) may be better,
though harder to provide a &quot;novice&quot; forms interface for customization.</p>

<h2>Flaws</h2>

<ul>
  <li>Proposed implementation of doing multiple rule firing on every request may be overkill.</li>
  <li>Media type hierarchy needs to be extensible (like MIME); this introduces issues for the
    scripting language, which knows about different metadata, environment info, etc. for each
    media type/subtype.&nbsp; E.g. what if you ask for the 'progressive' property of a BMP
    because all you know is that it's an image/*?&nbsp; This is the classic problem of
    describing a hierarchy and attributes for an extensible set of types, which is why an
    interpreted scripting language is probably the right choice (late binding of attributes
    allows &quot;default&quot; values to be returned, etc.)</li>
</ul>

<hr>
<a href="index.html"><i>

<p>Back to index</i></a> </p>
</body>
</html>
@
