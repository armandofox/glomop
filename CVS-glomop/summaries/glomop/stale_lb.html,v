head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.15.18.09.42;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added mitzenmachers paper and scalable timers
@
text
@<html>
<title>
How Useful is Old Info
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
How Useful is Old Information?
</h1>
<strong>
Michael Mitzenmacher, UCB/DEC SRC
</strong>

<p><b>One-line summary:</b>
For systems relying on imperfect/stale/periodic load balancing info to
make scheduling decisions, "deterministic" heuristics that choose the
lightest loaded server do poorly (even for "continuously updated but
stale" load info), but a small amount of randomness (e.g. choosing the
lighter loaded of 2 servers determined uniformly at random) suffices to
break the symmetry and give performance comparable to that possible with
perfect information.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Assumptions:
       <ul>
         <li> task arrivals are Poisson
         <li> task service time is exponential with mean 1
         <li> <i>n</i> servers are available;
              the <i>infinite system</i> (limit as
              <i>n</i>&nbsp;--&gt;&nbsp;infinity) is studied
         <li> there is a <i>bulletin board</i> of (possibly stale)
              server load info, which is the only source of load info.
       </ul>
       Goal is to minimize time a task spends in the system.
  <li> Three strategies considered: (the names are my own)
       <ul>
         <li> "Random": Choose a server uniformly at random 
         <li> "d-random:" Choose <i>d</i> servers uniformly at random and
              go to the 
              one with the smallest load
         <li> "Lightest": Go to server with lightest load
       </ul>
  <li> Development of the model with periodic updates at times kT
       ("phases") for integers k 
       <ul>
         <li> Differential eqns yield a fixed trajectory of the system,
              given initial conditions; in fact, they describe the
              behavior of the system in the limit of an infinite number
              of servers.  "Can be proven with standard (albeit
              complex) methods."
         <li> Fixed cycle: because of discontinuities in state at each
              kT (new server load info arrives), the system can't
              converge to a fixed point, but it can converge to a
              <i>fixed cycle</i>, in which the fraction of servers with
              load <i>i</i> at the beginning of a phase is the same as
              the fraction at the end of the phase.
         <li> In author's simulation of differential equations, the
              system converged to a fixed cycle in all cases, but no
              proof of why this is.
         <li> Experiments also suggest that "infinite system" model is
              very accurate even for simulation of small (n&lt;10) systems.
       </ul>
  <li> Simulations
       <ul>
         <li> Surprise! "Lightest loaded server" strategy is bad unless
              T (update interval) is very small, due to "herd behavior"
              (all tasks arriving this interval go to same subset of
              servers).  This is what Yatin discovered experimentally.
         <li> Continuous-update system: load info is continuously
              updated, but is X seconds stale for some constant X.
              Behavior is similar to periodic-update system.
         <li> Surprise!  If X is instead an exponentially-distributed
              (or even uniformly-distributed) random variable, the
              randomness breaks the symmetry and results in much nicer
              behavior for all 3 scheduling strategies.  (In practice,
              <i>d</i>=2 is sufficient for the <i>d</i>-best strategy.)
         <li> In particular, a large uniform interval, or an exponential
              distribution, works much better than a smaller uniform
              interval; suggesting that it's useful to have some tasks
              get extremely accurate info.
       </ul>
  <li> A general lesson: some queueing-theory arguments prove a result
       for an exponentially distributed random variable, and assume the
       result is true for a constant random variable; in systems like
       this involving imperfect information, this is not so.
</ul>

<h2>Relevance</h2>

Direct relevance to TranSend and a variety of similar systems that rely
on soft/stale (BASE) state for load balancing.

<h2>Flaws</h2>

<ul>
  <li> Arrivals aren't Poisson...what's the impact of this?
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
