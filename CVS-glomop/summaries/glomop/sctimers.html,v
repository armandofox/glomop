head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.15.18.09.42;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added mitzenmachers paper and scalable timers
@
text
@<html>
<title>
Scalable timers
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Scalable timers for soft state protocols
</h1>
<strong>
P. Sharma, D. Estrin, S. Floyd, V. Jacobson, ISI/USC and LBL.
</strong>

<p><b>One-line summary:</b>
Like the "experiments" mechanism in SRM: sender algs to dynamically control
<i>aggregate</i> rate of soft-state refresh messages, and corresponding
receiver algs to control when the state is timed out.  Receiver can
estimate interval either from examining start-of-round markers or from
EWMA of interval and interval-deviation; neither is a "clear winner" and
both require parameter tweaking.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Assumption: the control traffic bandwidth, rather than the
       refresh interval, is fixed as more senders are added.
  <li> Argument: receivers should implicitly deduce changes in refresh
       interval, rather than being explicitly notified of changes.
       (Ed.: another "implicit approach" argument)
  <li> Assumption: multiple "classes" of soft state traffic; authors
       distinguish "trigger" from "refresh" messages.  (Presumably the
       former are "urgent" or require rapid response.)
  <li> Simple prio scheme at senders might starve refresh traffic, so
       instead propose 2 alternatives:
       <ul>
         <li> Counting rounds: send some fraction of refresh state on
              each message; after all refresh state has been sent,
              that's one "round".  (Receiver assumes that sender is
              using round-robin.)  State that has not been refrshed for
              3 rounds is timed out.
         <li> EWMA of refresh interval and its deviation.  Receiver
              times out state based on current estimates, and updates
              estimates when refreshes are received.  <b>Exception:</b>
              during a long burst of trigger (high-prio) traffic, don't
              time out any refreshable state, because it might be the
              case that the trigger traffic is soaking up all the
              control bandwidth.
       </ul>
  <li> Simulated for PIM routing; various parameter tweaks, plus the
       constant tension between premature state timeout and using state
       that's too stale.  Conclusion: "Both approaches ... allow the
       receivers to adapt to changes at the sender, so ...there is no
       clear winner." 
</ul>

<h2>Relevance</h2>

This must be a straightforward extension to timers in general, since I
thought about doing this for the PTM and I am a networks doofus.

<h2>Flaws</h2>

<ul>
  <li> The distinction between trigger and refresh is not particularly
       well described or motivated, except with respect to the one
       example (PIM).
  <li> How do senders deduce the amount of control bandwidth available?
       Presumably because they can see other sender's state messages,
       but this isn't made explicit.
  <li> The usual tweaking needed for EWMA constant, except worse,
       because constants are needed for both the interval and
       interval-deviation estimators.
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
