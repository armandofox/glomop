head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.03.20.17.52.11;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.03.20.17.47.11;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added summary author to summaries
@
text
@<html>
<title>
ACTA
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
ACTA: A Framework for Specifying and Reasoning about Transaction Structure
and Behaviour
</h1>
<strong>
Panayiotis K. Chrysanthis and Krithi Ramamritham
</strong>
<P>
<i>Summary by: Steve Gribble and Armando Fox</i>

<p><b>One-line summary:</b>
ACTA is a formalizable framework developed for characterizing the entire
spectrum of transaction models and interactions - a unification of all
possible models.
</p>

<h2>Relevance</h2>
Fairly nice characterization of access semantics of transactions.

<h2>Flaws</h2>

<ul>
     <li> is this truly general?  Proof by 5 examples is convincing, but
	  not absolute.
     <li> is this pragmatic/useful?  Given an ACTA model, now what do I do
	  with it?
     <li> is this correct?  How does one demonstrate convincly without
	  hand-waving that an ACTA model does in fact capture the semantics
	  of the transaction model?
</ul>

<h2>Overview/Main Points</h2>

<ul>
     <li> transaction model is lacking in functionality and efficiency for
	  complex info systems like CAD/CAM.  Functionality - need reactive
	  (endless), open-ended (long lived), and collaborative
	  (interactive) activies supported.
     <li> ACTA - semantics of interactions between transactions are
	  expressed in terms of effects on each other (in terms of abort or
	  commit) and on accessed objects (in terms of state or concurrency
	  status).  Both structure and behaviour of transactions are
	  specifiable in ACTA.
     <Li> transaction specific concurrency - allows operations invoked by
	  two transactions to be interleaved if application semantics can
	  tolerate dependencies to be ignored.  Transaction specific
	  recovery - similar, but for recovery and failure handling.
     <li> Effects of transactions on other transactions
	  <ul>
	       <li> commit-dependency:  if transaction A develops commit
		    dependency on B, then A cannot commit until B either
		    commits or aborts.
	       <li> abort-dependency: of A develops abort dependency on B,
		    and if B aborts, then A should also abort.
	       <li> these dependencies impose commit order that prevent
		    inconsistencies.  Circular dependencies possible and
		    should be avoided.
	       <li> exclusive abort dependency - transaction not allowed to
		    develop abort dependency on more than one other
		    transaction.
	       <li> can define transitive commit and transitive abort
		    dependency in the obvious way
	       <li> dependencies are stored in a compatibility table
		    associated with each object
	  </ul>
     <li> Effects of transactions on objects
	  <ul>
	       <li> object characterized by state (contents) and status
		    (synchronization information).
	       <li> view set - all objects potentially accessible to a
		    transaction
	       <li> access set - objects already accessed by a transaction;
		    accessibility based on concurrency control
		    compatibility info of object.  Abort moves object back
		    to view set.  Commit moves changes back to view set.
	       <li> transaction can delegate some of its access set objects
		    to the access set of another transaction.
	  </ul>
     <li> Modeling different transaction schemes
	  <ul>
	       <li> Nested Transactions
		    <ul>
			 <li> transactions are composed of subtransactions
			 <li> subtransaction can access any object of
			      ancestor transaction
			 <li> If C is child transaction of parent P, then:
			 <li> For all C, Child <i>exclusive abort</i> P and
			      P <i>commit dependency</i> C.
			 <li> View set specification: for all C, ViewSet(C)
			      is (set of all AccessSets of A such that C
			      <i>transitive abort</i> A) union DB. (This is
			      an ordered union.)
			 <li> Delegation occurs when C commits:  for all C,
			      DelegateSet(C to P) is equal to
			      AccessSet of C.  I.e. at commit, child
			      transaction's objects are delegated to parent.
		    </ul>
	       <li> Split transactions
		    <ul>
			 <li> transaction A splits into two transactions
			      B,C.  B,C may be independent (in which case
			      they commit/abort independently) or serial
			      (in which case B must commit for C to
			      commit).
			 <li> can also have 3rd model in which 2
			      transactions join into one.
			 <li> (Logic omitted - see paper)
		    </ul>
	       <li> Nested-Split
		    <ul>
			 <li> new framework that is composition of nested
			      and split.
			 <li> ACTA handles it, but not clear of the
			      framework's usefulness
		    </ul>
	       <li> Recoverable communicating actions
		    <ul>
			 <li> deals with non-hierarchical computations.
			 <li> an action (sender) is allowed to communicate
			      with another action (receiver) by exchanging
			      objects, resulting in an abort-dependency of
			      receiver on sender.
			 <li> because of dependencies, RcAs form
			      recoverable computation, self-contained task
			      which has semantics of atomic update.
			 <li> again, ACTA handles it.
		    </ul>
	       <li> Cooperative transactions
		    <ul>
			 <li> transactions composed into subtransactions,
			      each with own semantics and types. Three
			      types of subtransactions:
			      <ul>
				   <li> project transactions are decomposed
					into cooperative transactions
				   <li> cooperative transactions are
					composed of a set of subcontractor
					transactions
				   <li> subcontractor transactions may
					either have cooperative transaction
					structure or have structure of
					atomic transaction (called a short
					transaction).
			      </ul>
			 <li> similar to nested transactions, but don't
			      support object inheritance in same manner.
			      Object flow is supported only between
			      adjacent levels through semi-public or
			      subcontractor databases.
			 <li> Again, ACTA handles it.
		    </ul>
	  </ul>
</ul>

<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@


1.1
log
@added acta and sonebraker storage system for postgres
@
text
@d14 2
@
