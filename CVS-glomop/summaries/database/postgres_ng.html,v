head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.04.22.15.35.51;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.04.22.15.32.41;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.2
log
@oops - forgot to close <CODE>
@
text
@<html>
<title>
Postgres-NG DBMS
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
The Postgres Next Generation Database Management System
</h1>
<strong>
Michael Stonebraker and Greg Kemnitz.
</strong>

<P><i>Summary by: Steve Gribble and Armando Fox</i>

<p><b>One-line summary:</b>
A &quot;feature-list&quot; of the next-generation Postgres DBMS;  postgres
(which deals with data management) was expanded to handle object management
and <i>knowledge</i> management (rulesets).
</p>

<h2>Relevance</h2>
Trendy ORDBMS system - cool features.

<h2>Flaws</h2>
<ul>
     <li> I just don't buy the performance numbers.
     <li> How much of the extensibility/language features/fast path stuff
	  will users want to and be able to use?  On the other hand, if it
	  doesn't cost anything (in performance/reliability) to provide the
	  features, why not do it?
     <li> This article read more like a feature list than a technical
	  paper.
</ul>

<h2>Overview/Main Points</h2>

<ul>
     <li> POSTGRES Data Model
	  <ul>
	       <li> emphasizes access from POSTQUEL database language, but
		    Postgres is &quot;language neutral&quot;, and has
		    <i>fast path</i> facilities which allow you to make
		    direct calls to Postgres internals.
	       <li> relations in postgres are called classes; tuples are
		    called instances.  Instances are collections of
		    attributes, each of which is of a specific type.
		    Classes have inheritance;  there are real and derived
		    classes, and multiple inheritance.
	       <li> set of base types (strings, characters, integers,
		    dates, ...), and abstract data type (ADT) facility that
		    allows users to construct new base types.
	       <li> Composite types: build complex objects (objects
		    containing other objects, sets, etc.)
	       <li> Classes can have methods (function whose argument is a
		    class name).  Can also introduce new operators (one or
		    more arguments).  Authors can provide hints to query
		    optimizer regarting their operators to help speed
		    things up.
	  </ul>
     <li> POSTGRES Query Language
	  <ul>
	       <li> set-oriented query langauge  (very SQL-like)
	       <li> allows nested queries, transitive closure, time travel
	       <li> &quot;Fast Path&quot;: query language extended with
		    function-name (param-list)
		    notation, where function-name is an internal POSTGRES
		    function.  E.g., author can construct parse tree and
		    bypass SQL parser.
	  </ul>
     <li> POSTGRES Rules System
	  <ul>
	       <li> general purpose rules system that provides view
		    management, triggers, integrity constraints,
		    referential integrity, protection, and version control.
	       <li> rule syntax:
		    <CODE>ON event (TO) object WHERE POSTQUEL-qualification
		    THEN DO [instead] POSTQUEL-command(s)</CODE>
		    e.g.:
		    <CODE>on new EMP.salary where EMP.name = &quot;Fred&quot;
		    then do replace E (salary = new.salary) from E in EMP
		    where E.name = &quot;Joe&quot;</CODE>
	       <li> foward chaining: one rule triggers another.  backward
		    chaining: is fred's salary is not explicitly stored,
		    more rules would be awakened to see whether or not this
		    rule should be triggered.
	       <li> rules mark attributes of instances that affect the rule
		    - if executor touches a marked attribute, it calls rule
		    system before proceeding.  Marker escalation - if
		    sufficient number of markers in class, place enclosing
		    marker on entire class instead.
	       <li> clever query rewriting to help avoid have rules
		    triggered on every attribute touch by executor.
	       <li> rule semantics: immediate vs. deferred rules.  Rules
		    running as part of or separate from transactions.
	       <li> can compile rules into postgres to extend
		    implementation of postgres (e.g. can implement views
		    and versions using rules)
	  </ul>
     <li> POSTGRES storage system:  see <a href="postgres.html">The Design of
	  the Postgres Storage System</a> paper.
     <li> Implementation:
	  <ul>
	       <li> one process per active user - done for fast prototyping
		    - ducked complexity issue of single-server process
	       <li> parser, optimizer, execution engine are all
		    table-driven, &quot;hence postgres is extendible&quot;
	       <li> datatypes, operators, and functions can be
		    added/subtracted dynamically while postgres is running
	  </ul>
     <li> Performance:
	  <ul>
	       <li> questionable results reported - 2 times as fast as UCB
		    ingres, but used fast path to implement all benchmark
		    routines as C functions.
	  </ul>
</ul>

<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@


1.1
log
@Postgres NG summary
@
text
@d78 1
a78 1
		    THEN DO [instead] POSTQUEL-command(s)<CODE>
d82 1
a82 1
		    where E.name = &quot;Joe&quot;<CODE>
@
