head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.15.05.45.17;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@objecstore summary
@
text
@<html>
<title>
ObjectStore
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
The ObjectStore Database System
</h1>
<strong>
Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb
</strong>

<i>Summary by: Steve Gribble and Armando Fox</i>

<p><b>One-line summary:</b>
ObjectStore is an OO DBMS which very tightly couples a C++/C language
interface to traditional DBMS qualities such as persistent storage, query
access, and transaction management;  OS virtual memory support is heavily
used to gain object access speed usually equal to in-memory derefernce
times.
</p>

<h2>Overview/Main Points</h2>

<ul>
     <li> C++ integration yields:
	  <ul>
	       <li> easy learning, expressive power of C++
	       <li> type checking compiler support for both code and
		    data in the database
	       <li> ease of conversion from transient code (eg in-memory
		    DB) to persistent code
	  </ul>
     <li> A nice, rich, flexible application interface is shown.  Support
	  for collections (lists, bags, sets, ...), simple transaction
	  syntax, ease of access to persistent data (looks just like a
	  structure dereference), &quot;relationships&quot; in which if one
	  value in a structure is modified, the related value in a
	  related structure is automatically updated.
     <li> Flexible query interface - looks like SQL code embedded in C++
	  code.
     <li> Versioning is supported for cooperative/groupware apps.
     <li> Architecture
	  <ul>
	       <li> memory-mapped architecture - large virtual memory space
		    is what app writer sees;  DB split into a number of
		    separate address spaces, and an overlay-like technique
		    used to multiplex among them.
	       <li> pointer relocation techniques are used to map between
		    objects' virtual addresses and the values of object
		    pointers inside pages.
	       <li> &quot;tag table&quot; keeps track of the location and
		    type of every object in database - used when mapping
		    a page into a virtual address space and pointer
		    relocation is needed.
	       <li> Applications can give clustering hints so that objects
		    that are frequently accessed together end up on same
		    page.
	  </ul>
     <li> Queries
	  <ul>
	       <li> indexes and a query optimizer are used
	       <li> in ObjectStore, collections are often not named, so
		    available indexes are not discovered until the time at
		    which query is run, so multiple access path strategies
		    must be generated and the final selection left until
		    the last moment.
	       <li> claim is that queries in ObjectStore are usually over
		    small number of top-level (nonembedded) collections,
		    and thus join optimization (a la conventional DBMS's)
		    is not as important.
	       <li> query parse trees can be contructed at compile-time,
		    not run-time as in DBMS.  Functions can be constructed
		    at compile time for scanning data structures and
		    accessing data through an index.
	       <li> index maintenance is difficult - consider statement
		    <B>p->age = p->age+1;</b> - if <b>p->age</b> is really
		    modifying persistent data in a structure, many index
		    entries may need to be updated because of this
		    statement.  Language support is added to C++ so
		    programmers can indicate which variables are
		    indexable.
	  </ul>
     <li> Example apps based on ObjectStore
	  <ul>
	       <li> performance benchmarks
	       <li> extensible C++ object class
	  </ul>
</ul>

<h2>Relevance</h2>
Good idea - language support for persistent storage access is a great idea.

<h2>Flaws</h2>

<ul>
  <li> costs are hidden from programmer - a seemingly innocuous C++
       statement could be extremely expensive
  <li> distributed implementations are mumbled about, but nothing of
       substance is actually said about them
  <li> detailed cost analysis/measurements are omitted
  <li> too much generality?  I'll bet knowledge of application semantics
       required could make this more efficient on a per-application basis.
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
