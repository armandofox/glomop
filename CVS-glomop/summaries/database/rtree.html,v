head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.08.05.06.47.49;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.01.30.09.16.33;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<html>
<title>
R-Trees
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
R-Trees: A Dynamic Index Structure for Spatial Searching
</h1>
<strong>
Antonin Guttman, UCB
</strong>

<p><b>One-line summary:</b>
R-trees (index structure optimized for spatial searching of "geographic"
data) are B-trees in which interior-node keys are k-dimensional
rectangloids rather than scalars, and the comparison test is "overlaps"
rather than linear range comparison.
</p>

<h2>Overview/Main Points</h2>

<ul>
  <li> Each leaf node's rectangle is the smallest rectangle that
       encloses the leaf's data object.
  <li> Each interior node's rectangle is the smallest one that encloses
       all the rectangles in its children.
  <li> Search comparison test is "overlapping", so more than one subtree
       under a node may need to be visited during a search; so
       worst-case performance is not log but linear in number of keys.
  <li> Insertion:
       <UL>
         <li> add leaf to the parent whose rectangle must be
              enlarged by the least amount (break ties using area) to
              accommodate it
         <li> go up the tree adjusting the enclosing rectangles
         <li> when nodes must be split (overfull): see below
       </ul>
  <li> Deletion: may result in deletion/merge of nodes.  Underfull nodes
       are merged with whichever sibling will have its area increased
       least.
  <li> Node merging is better than redistributing the orphans to many
       siblings because:
       <ul>
         <li> the insert procedure can be called to do
       orphan insertion, and the nodes it will visit are likely to have
       been visited during preceding search (that caused the merge);
         <li> reinsertion preserves the spatial structure ("spatial balance")
              of the tree, preventing deterioriation that might occur if a
              given child is forced to never be reparented.
       </ul>
  <li> Node splitting: want to minimize chance that <i>both</i> new
       nodes will need to be visited on future searches =&gt; minimize
       total area of the two covering rectangles.
  <li> Exhaustive alg. must examine exponential number of choices;
       authors propose 2 heuristics:
       <ul>
         <li> repeatedly pick 2
              entries that would waste the most space if they were put in the
              same group (examines O(M<sup>2</sup>) pairs)
         <li> examine entries with highest low side and lowest
              high side, and pick pair with largest 
              separation (normalized along corresponding "width"
              dimension), which examines O(M) pairs.
       </ul>
  <li> Experimental observations
       <ul>
         <li> node splitting is responsible for only
              a small part of insert cost in practice;
         <li> Quadratic algorithm obviously has higher overhead but leads to
              more balanced ("geographically tighter") R-trees;
         <li> R-trees are good at quickly narrowing geographic search.
       </ul>
</ul>

<h2>Relevance</h2>

Illustra.

<h2>Flaws</h2>

<ul>
  <li> No theoretical analysis of worst/expected case performance of
       insert/delete (update is just delete and reinsert)
  <li> No analysis of expected performance of heuristics compared to
       optimal alg.
  <li> Page sizes tried up to 2KB; would quadratic split algorithm be
       much worse on today's 8KB-16KB or larger pages?
</ul>
<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1
log
@*** empty log message ***
@
text
@d60 1
a60 1
              same group (examines M<super>2</super> pairs)
@
