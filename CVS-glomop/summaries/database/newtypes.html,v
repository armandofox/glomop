head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.23.07.34.49;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html>
<title>
New Types for R-DBMS
</title>
<body>
<a href="index.html"><i>Back to index</i></a>
<h1>
Inclusion of New Types in Relational Database Systems
</h1>
<strong>
Mike Stonebraker
</strong>

<b>Summary by:</b> Armando Fox and Steve Gribble<p>

<p><b>One-line summary:</b> Describes which generalized API's are needed
to RDBMS innards in order to implement new datatypes; has implications
for access method definitions, concurrency control, logging/recovery,
query processing/optimization, and performance/security (of extension
code).  </p>

<h2>Overview/Main Points</h2>

<ul>
  <li> new type definition: New types are fixed-size blobs,
              user-provided conversion routines 
              (located, e.g., in dynamically loaded library)
              translate for input and output
  <li> operators on new types
  <li> access method implementation:
       <ul>
         <li> e.g. generalize &lt;, &gt;,
              &lt;=, etc. for B-trees <i>(like GIST)</i>
         <li> implement
              generic calls: <i>open(), close(), get-first(),
              get-next(), get-unique(), delete(),
              replace()</i>. Ideally, make these "universal" so designer
              only has to write back end, i.e. higher-level software
              takes care of begin/end transaction and transaction mgmt.
         <li> if logical logging, some access method calls may have to
              participate in logging too, e.g. specify Undo and Redo
              procedures for logging as in ARIES.
         <li> Concurrency control: main scheduler can make locking "upcalls" to
              new type module, which returns yes/no/abort for each request.
         <li> Buffer management: need generic interface to buffer
              manipulation, e.g. get(), fix(), unfix(), put()...
       </ul>
  <li> query processing/optimization:
       <ul>
         <li>type creator can give
              estimates for number of tuples that match an
              equality-comparison check, number of pages touched
              when running such a query, max and min key values, etc.
         <li> also give estimate of selectivity factor for matching both
              "rel.field&nbsp;OP&nbsp;value" and
              "rel1.field1&nbsp;OP&nbsp;rel2.field2" (for joins), or pick
              rule-of-thumb constant if unknown (as in <a
              href="access_path.html">Selinger et al. 81</a>)
       </ul>
  <li> Would really like "transparent interface" to transaction system,
       rather than the hodgepodge of calls above.
  <li> Security of loaded code: can run in a separate address
       space, or interpret, but those are expensive <i>(Or can
       sandbox)</i>
</ul>

<h2>Relevance</h2>

First semi-formal discussion of how to extend RDBMS from fixed-type
systems; presumably led to Illustra work.

<h2>Flaws</h2>

<ul>
  <li> Hard to get everything right: I suspect RDBMSs are implicitly
       optimized all over the place for "hardwired" relational operators
       (&lt;, &gt;, etc.), datatypes that closely match machine-level
       things (ints, floats, arrays of char), etc.
  <li> By putting flexibility in the hands of users, you're also putting
       performance burden in the hands of users.  A pessimal extension
       could quickly become the bottleneck (this is true in all
       extensible systems and we're coming up against it in our class
       project). 
</ul>
<hr>
<a href="index.html"><i>Back to index</i></a>

</body></html>
@
