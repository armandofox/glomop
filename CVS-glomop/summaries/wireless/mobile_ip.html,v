head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.12.11.03.07.01;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.12.11.03.07.01;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<title>
Mobile IP
</title>
<body>
<a href=index.html><i>Back to index</i></a>
<h1>
IP-Based Protocols for Mobile Internetworking
</h1>
<strong>
John Ioannidis and Dan Duchamp, Columbia
</strong>

<p><b>One-line summary:</b>
Mobility support by tunneling and encapsulation (IPIP) and a simple MSS-to-MSS protocol (MICP).  M-IP  requires no changes to higher-level protocols, scales reasonably well due to small amount of state at MSS (cached and timed out), and places the burden of mobility on the MH¹s and MSS¹s rather than the rest of the world.
</p>

<h2>Overview/Main Points</h2>

<ul>
<li> MH maintains a permanent <i>home address</i>; its MSS is responsible for reaching it
<li> Routing cases:
<ul>
<li> MH-to-MH within a cell, normal ARP delivers pkts (MSS not involved)
<li> MH to FH, normal gateway thru MSS
<li> FH to MH, gateway thru MSS which then "discovers" what MSS is responsible for the MH (see below)
<li> MH to MH across cells: receiving MSS proxy-ARPs for MH
</ul>
<li> Handoff
<ul>
<li> MH detects beacons coming from MSS¹s (multiple beacons is "still a research issue")
<li> MH sends greeting and old MSS to new MSS, waits for ACK that includes new transient-IP addr
<li> New MSS informs old MSS of handoff and starts forwarding <i>before</i> that message is ACK¹d (in case of partition or old MSS down)
<li> Beaconing done by MSS (not MH) to reduce traffic (no req/response needed), allow MH to verify it is still in range, and conserve power on MH
</ul>
<li> MH periodically sends "still here" packet if no other traffic, to inform MSS it is still in this cell
<li> Redirect: MSS receives pkt for MH it no longer serves; redirect is sent to sender, <i>and</i> pkt is forwarded (to avoid having to rely on higher-level timeouts)
<li> Peer MSS discovery: multicast, link-level broadcast, or unicast; list can be static and distributed to new MSS¹s as they join, or each MSS can propagate discovery requests to its immediate neighbors (modulo problems with connectedness of the graph, partitioning, etc)
<li> Some perf issues: handoff latency, MSS load, encaps overhead.  It is argued that all are within reason during normal operation.
<li> Fault tolerance: exploit multiple beaconing?
<li> Scalability: "dogleg routing" is the worst problem.  Argument: scalability should be compared to alternative of reconfiguring MH on every handoff, rather than to "MH-less" alternative.
<li> Tunneling: some discussion of earlier approach based on "loose source routing" (what is this?) and why it doesn¹t work here, since dest addr of MH is a valid unicast address.
</ul>

<h2>Relevance</h2>
Shows how to support mobility transparently to higher-level software by exploiting the "proxy concept" for address resolution, encaps, and routing.

<h2>Flaws</h2>
Approach is advertised as scalable, but argument seems weak. Perhaps they really meant intracampus (not intercampus) scalability, since the latter requires cooperation among the campuses and makes peer MSS discovery a larger size problem.  A hierarchical discovery approach might alleviate this, but seems to be outside scope of this paper.

<hr>
<a href=index.html><i>Back to index</i></a>

</body></html>
@


1.1.1.1
log
@cs294-7 wireless networks summaries
@
text
@@
