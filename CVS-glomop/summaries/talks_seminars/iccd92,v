head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.05.27.23.46.49;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@Received: from ichips.intel.com by omefs4 (4.1/10.0i); Tue, 20 Oct 92 13:30:37 PDT
Received: from pdxfs3 by ichips.intel.com (5.64+/10.0i); Tue, 20 Oct 92 13:30:05 -0700
Received: from ichips.intel.com by pdxfs3 (4.1/10.0i); Tue, 20 Oct 92 13:30:03 PDT
Received: from pdx023 by ichips.intel.com (5.64+/10.0i); Tue, 20 Oct 92 13:29:55 -0700
From: colwell@@ichips.intel.com
Received: by pdx023.intel.com (AIX 3.2/UCB 5.64/SCDT-RS6000)
	id AA20731; Tue, 20 Oct 1992 13:29:54 -0700
Date: Tue, 20 Oct 1992 13:29:54 -0700
Message-Id: <9210202029.AA20731@@pdx023.intel.com>
To: p6arch@@ichips.intel.com
Subject: ICCD conference notes

Some random thoughts from last week's ICCD conference in Boston.

Alpha:

1) Alpha has a "who-am-I" instruction that tells each CPU in an MP which
   CPU it is. Seems like our read_CPU_ID instruction ought to do that too.
   In Alpha's case, it returns a processor number and a "thread number". In
   a P6 MP system, each processor's bus interface "knows" which physical
   processor it is (0..3). It might be nice for the processor itself to
   also know.

2) They left out a multiply-and-add instruction in favor of "future
   implementations with dual issue". Heavy hints all over the place.

3) The 21064 is .75u, .5 leff, 3-layer metal CMOS (not BiCMOS). 14x17 mm,
   23-30. 8k/8k caches, bus is 128 pins, 64 address, 64 data, 4-entry
   32byte write buffer. Clock rise time 0.5 nS, with capacitive load of
   12-13 nF. The clock drives 0-40A (yes, amps) in 0.5 nS, using 10 inches
   of P device pullup. The whole middle of the chip is the clock driver.
   Ok, fine, so you knew all this, but I didn't.

4) FP divide is a wretched 60 cycles.

5) The CPU manages the L2 cache; cache coherence supported includes V bit,
   shared and dirty info. Roll your own protocol on top of this.

6) Sounded a lot like they're already doing P/Q (to me) on their bus.


Random tidbits:

8) Did you know that modern cars, containing anti-lock brake, engine
   control, micros-in-the-stereo, etc., have more aggregate compute power
   than the lunar lander did?

9) The asynchronous design boys think they've licked metastability,
   something I hadn't heard. They have something they call a "Q flop",
   which tells you if it's metastable. Basic idea seems to be that if a
   flop is going to go metastable after a clock edge, it will do it right
   away. So you wait for a while after the edge before even looking at the
   outputs. After that, this metastability detector tells you if the
   outputs have not settled into a usable state, and if they haven't, the
   async outputs don't go out.

10) Bill Dally showed me his latest J-machine prototype; it's on the
   internet. Rich Lethin, another ex-Multiflow refugee, wrote the simulator
   they used and delivered a nice paper on their validation method. They
   had some good ideas, including aggressively using unknown states to
   provoke bugs, and "piggybacking", something we have considered for P6,
   to drive two versions of a module simultaneously while comparing their
   outputs.

   Dally et. al. are now pursuing the "M machine", but not necessarily with
   Intel. They said all the right commercial things about thanking Intel
   for collaborating on the J machine, but I got the feeling their hearts
   weren't really in it. Evidently they're looking towards HP for new
   designs.
@
