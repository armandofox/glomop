head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	99.01.29.03.29.56;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@added regress
@
text
@<html> <head>
<title>A Sketch of Regres</title>
</head>

<body>
<h1>A Sketch of Regres</h1>
<h2>Mike Carey, Joey Hellerstein, Michael Stonebraker</h2>

<h3>Premise</h3>
<ul>
     <li> All current DBMSs architected in late 1970's
	  (System R).  Time to rethink based on today's world.
	  <ul>
	       <li> CPU, memory, disk, much bigger
	       <li> Design point:  1 Tbyte buffer pool, up from 1 Mbyte in
		    1970s.  Will NOT be 250 million 4K pages!
	  </ul>
     <li> Things to build in, rather than bolt on:
	  <ul>
	       <li> Most apps use TP monitors now.  Three tiered
		    architecture:  data at bottom in DBMS, code in middle
		    tier in TP monitor, user interface on client.  Why?
		    DBMS doesn't run code, and 2-tier doesn't scale.
	       <li> 7x24 requirement.
	       <li> End-to-end: RAID not the complete answer, require WAN
		    replication. (!!)  Design this capability in.
	       <li> web changes everything: HTML, XML, ... - must have
		    web-centric architecture
	       <li> SAP / ERP - must have massive scalability and handle
		    huge transaction rates
	       <li> Data mining / warehousing.  Scrape operational systems
		    during offshift into warehouse.  Queries run forever.
	       <li> Multiprocessors are common: clusters, NUMA, MPP.
	       <li> gizmo revolution - disconnected, mobile clients.  small
		    footprint servers (JINI, coke machines, ...).  Scale
		    down as well as up, in one system.
	       <li> SQL-3:  components in the DB, multiple language,
		    inheritance.  Method support.
	  </ul>
     <li> and...current DBMSs are really bloated....stored procedures,
	  object-relational features, warehouse features, triggers,
	  benchmark hacks.  Debugging is really hard.
     <li> so, rethink DBMS.  (and OS.  and network.)
	  
</ul>

<h3>
Rethink result:  Regress
</h3>
<ul>
     <li> mix of discarded ideas that have recome, and new ideas
     <li> WAN replication - federation
	  <ul>
	       <li> transactionally consistent - fasted mechanism is to
		    move the log.  federated DBMS!
	  </ul>
     <li> integrating code and data on multiple machines better than TP
	  monitors.  data and code on each machine in network.
     <li> federated DB - why?  (same as case for NOW) - mimics enterprise,
	  supports mergers naturally, COTS jellybean hardware,
	  incrementally scalable.
     <li> troubles that traditional distributed-DBMS don't overcome:
	  <ul>
	       <li> semantic heterogeneity in schemas (US dollars in US,
		    francs in France)
	       <li> local autonomy necessary.  Each local DBA must control
		    own destiny.
	  </ul>
	  so cannot have traditional query optimizer!
     <li> Mariposa and cohera - good start.
	  <ul>
	       <li> Economic paradigm.   query - budget.  site -
		    independent contractor.  federation - general
		    contractor.
	       <li> flexible replication:  bounded out-of-dateness (day
		    inconsistency vs transactional necessary).
	       <li> mobile ok - out of date replica
	       <li> other ok:  data model:  collection of fragments of a
		    sql-3 table.  range partitioning, type conversion when
		    federated.  each owner by local dba.
	  </ul>
     <li> Room for improvement
	  <ul>
	       <li> query decomposition into economic units of work (bottom
		    up, top down, heuristic)
	       <li> change economic plan midflight - how do you notice
		    changes?  how do you react?
	       <li> partial answers good, especially for warehouse.  how do
		    you integrate this into economic framework?
	       <li> future data will be imprecise.  query processing must
		    become evidence accumulation.  probabilistic models
		    built in...
	  </ul>
</ul>

<h3>Local DBMS</h3>

<ul>
     <li> store segments - i.e. unit of federation.  need split and
	  coalesce.  (Burroughs B5000).  Issues:  eviction? how big? when
	  coalesce?
	  <ul>
	       <li> DBMS will do buffer pool, file system.  DBMS can
		    provide file system abstraction.
	       <li> Threads from compiler.
	       <li> Reliable message delivery from network.
	       <li> DBMS is only application running on machine.  No need
		    for scheduler - thin OS will do.
	       <li> tuning sucks - no knobs, please.
	  </ul>
</ul>

<h3>Network</h3>
<ul>
     <li> protocol:  components must communicate asynchronously - message
	  based stateless protocol.  engineer around www.
</ul>

<h3>Attacking bloat</h3>
<ul>
     <li> basic problem: two data representations - log, and data in database
     <li> consistency of representations on crashes drives complexity
     <li> idea number one:  no log.  <q>no overwrite</q> versioning for
	  undo.  Wide area replication for recovery.  Too slow:  4 writes
	  to commit - can we fix?
     <li> idea number two: log is only storage system.  data is swizzled
	  into high performance format into memory, and unswizzled on cache
	  eviction.  Is cache (i.e. main memory) residency long enough to
	  justify overhead?  Will cold data performance be terrible?
</ul>

<h3>Semantic Heterogeneity</h3>
<ul>
     <li> lots of approaches - code, rules, prolog.  well picked-over
	  space.
     <li> regres: repository-based, yellow-pages for economic model, schema
	  discovery tools.  Focus on repository and building semantic
	  heterogeneity support into it.
</ul>

Summary:
<ul>
     <li> thin local system, fat federator
     <li> lots of interesting design challenges
     <li> focus of DBMS seminar this semester
</ul>

<hr>
<address><a href="http://www.cs.berkeley.edu/~gribble/">Steve
Gribble</a> / <i><a   
HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</a></i></address>
<!-- hhmts start -->
Last modified: Thu Jan 28 17:08:23 1999
<!-- hhmts end -->
</body> </html>
@
