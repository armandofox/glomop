head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	98.05.08.17.54.04;	author fox;	state dead;
branches;
next	1.2;

1.2
date	98.01.04.22.34.33;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.11.12.03.51.30;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@<html> <head>
<title>Structure of 'Ractive Internet Apps</title>
</head>

<body>

<h1>Foreground vs. background processing</h1>

<ul>
  <li> Some tasks are best decomposed into FG/BG
       so foreground can handle stuff that must reach the user
       "soon" and farm off other stuff to the background worker.
  <li> Argument above applies as a generalization of when to
       cache.  E.g. deliver to browser in foreground; deliver to
       cache in background.  Or: deliver to transformer and then
       to browser in foreground; pre and/or post cache in
       background.   (A relevant issue for cache-based
       architectures with a transcoding "layer".)
  <li> Mediator example: foreground app tells poster of new
       annotation that xact succeeded. Background app processes
       the new submission (version control, notifying other
       users, indexing the new documents, etc.)
  <li> WBI does this now: e.g. the full text indexer component is
       something that gets run on every request but whose results
       do not go to the browser.  So they "split the stream" such
       that the stuff that has to get back to the UI can get
       there fast.
  <li> Some dualities:  split stream &lt;--&gt; split application
       FG/BG; low vs. hi pri stream &lt;--&gt; FG vs BG task.
       (Implicit assumption: splitting a stream results in at
       most 1 high-priority stream.)
  <li> In general, consider  apps where you map a small data space
       into a much larger one (derived from computation, cross-products
       of data spaces, etc).  FG/BG issue comes up if there's an element
       of precomputing/prefetching a "neighborhood" around requested
       piece of the big space, as part of the application functionality.
  <li> BG can be optional, optimistic/synchronous, or
       optimistic/asynchronous.
       <ul>
         <li> Optimistic/synchronous: state change
              reflected by FG must be carried to completion by
              BG; furthermore, 
              <i>next</i> FG task will depend on this, so some kind of
              interlocking may be necessary between it and BG.
              (Internet caches already seem to provide the right
              kind of interlock.)
         <li> Optimistic/asynchronous: notification; 
              required for app, but has no synchronization
              constraint with subsequent 
              requests, even ones from the same user.
         <li> Optimistic: BG can be dropped on the floor without
              sacrificing correctness; data/state can be
              regenerated by computation; in fact system may
              choose to shun these under high load, with an
              appropriate scheduling mechanism.
       </ul>
</ul>

</ul>

<h1>State Manipulation</h1>

<ul>
  <li> Workers can be stateless, intermediate-state only, persistent state.
  <li> Stateless: easy case.
  <li> Intermediate: e.g. virtual session.
       Can pass around (forms, fat URLs), or keep at
       service.  Passing around has (at least) 2 problems, besides the
       fact you lose control of the schema:
       <ul>
         <li> If multiple users involved, no way to maintain consistency
              across all of them once you've handed the state out.
         <li> Need to be able to detect when someone hands you stale
              state.  This is either time-based (state "expires"
              automatically) or timestamp-based (so you can detect most
              recent version).  TS-based is more reliable but requires
              you to remember the last TS; therefore as long as you're
              keeping state anyway, may as well just keep the actual
              state you're passing around.
       </ul>
  <li> Persistent: eg account balance, user profile.  Store persistently
       at service.
  <li> Duality: event loop vs thread system &lt;--&gt; explicit
       intermediate-state storage vs. transparent continuation passing
       for intermediate state.  where along this spectrum is support
       provided? 
</ul>


<h1>How to do building-block services</h1>

<h2>Decomposition approach</h2>
<ul>
  <li> Decompose services according to our taxonomy, so that each
       component fits into a single "taxonomy table cell".  (FG/BG, no
       state/intermediate state/persistent state, etc.)
  <li> Ensure that each component meets the semantic constraints of
       the platform it runs on.  (See below.)
  <li> Use the platform's mechanism for deploying and joining the
       modules.
</ul>

<h2>Matching the application to the platform</h2>

Code-running platforms impose <i>semantic constraints</i>: assumptions
that it makes about individual workers in order to achieve whatever its
goals are (scalability through replication, high availability, etc.)
Each assumption essentially corresponds to a weakening of one or more of
the four ACID properties:

<ul>
  <li> Are workers arbitrarily restartable? (non-atomicity)
  <li> Can multiple instances of a worker coexist? (eg multiple writers
       of a DB)....if not, does this just move the worker into another
       category?  ("synchronization needed" vs. "not needed"; or
       "uses unique resource" vs "doesn't") (non-isolation)
  <li> Is any serialization (esp. across users?) necessary for the
       worker to behave?  (non-isolation)
  <li> Does the worker manipulate persistent state?  Does it
       manipulate temporary state, and if so, what happens in case of
       state loss? (non-durable)
</ul>

<h2>Some example platforms and their constraints</h2>
<ul>
  <li> TACC: workers must be restartable.  Show how to achieve
       for each kind of worker, and ones for which it's not
       achievable.
  <li> ACID DB: essentially no restrictions, but 
       cost/performance worse (esp. if you consider complexity)
  <li> IBM WBI?
  <li> Plain old scripts (eg cgi-bin)?
  <li> Other authoring platforms that we know of?
</ul>


<h1>Case studies</h1>

<h2>TACC Infrastructure support for xactional workers (really idempotence)</h2>

<ul>
  <li> Suppose failure after an xact.  Retry worker needs to know that
       (a) it's a retry, (b) handle to the xact id or other unique token
       corresponding to the failed instantiation.  (b) requires that
       frontend have a way to name instantiations, or xacts, or
       something.
  <li> Example of this scenario: charge user for digital content.
  <li> Note that the above 2 mechanisms allow the worker to respect the
       TACC invariant of being restartable.
  <li> Are there workers that need serialization but not the other
       transactional properties?  (though this defeats the benefit of
       replication for scaling)
</ul>

<h2>WAIBA/WebWare support for persistent state?</h2>

<h2>Classifying specific applications</h2>

Talk about a bunch of apps we've built (including TACC apps and
WAIBA/WebWare apps) and bin them according to our scheme.  Goal here
should be to show that restricting the workers/modules to the "simple"
category (in some sense, the "most BASE" category) still yields lots'o
useful apps.

<h2>Misc. issues</h2>

<ul>
  <li> One possible way of deciding whether the result of a particular
       task should be done proactively (optimistic) or reactively  (pure
       on demand):
       if the result is
       something that is common to all users, can do it
       optimistically.  If it's custom per-user, do it
       reactively/lazily (ie the current TACC way).  [Armando
       sez: this is the defining requirement for the
       AsyncDistill() mechanism.]
  <li> Stream vs. buffer: are there new applications that are enabled
       (or made much more natural) by a streaming API?  (being able to
       split stream, etc.) - aside from the performance benefits.
       Possibly having well defined foreground/background worker
       interaction semantics would be sufficient to supplement the
       buffer model.
  <li> Hinting of html and images; hint-authoring support for content
       providers.  Maybe via proxy in authoring mode that makes pages
       active using JS or similar extension.
  <li> Notification: HAve a single unified notification method (like
       Zephyr or mcast,
       etc., something that is proactive push).  Have a separate store &
       forward mechanism (worker?) for reaching offline
       users. (Follow-me notification)
  <li> Case study of ATM's and banking systems in CACM (gifford/spector,
       of camelot/LRVM fame)
       <ul>
         <li> err on the side of client being reactive. User will phone
              if they don't get the money; this is preferable to having
              the system not know that it gave money away.
         <li> have an out of band mechanism for reconciliation of severe
              failures.
         <li> 
       </ul>
</ul>


<hr>
<address>fox@@cs.berkeley.edu, m.mazer@@opengroup.org</address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d7 1
a7 1
<h1>On the structure of interactive Internet apps</h1>
d10 2
a11 10
  <li> Hinting of html and images; hint-authoring support for content
       providers.  Maybe via proxy in authoring mode that makes pages
       active using JS or similar extension.
  <li> Notification: HAve a single unified notification method (like
       Zephyr or mcast,
       etc., something that is proactive push).  Have a separate store &
       forward mechanism (worker?) for reaching offline
       users. (Follow-me notification)
  <li> Foreground vs. background workers; some tasks are best structured
       this way so foreground can handle stuff that must reach the user
d13 20
a32 31
       Related concepts:
       <ul>
         <li> lazy vs. optimistic processing
         <li> Mediator example: foreground app tells poster of new
              annotation that xact succeeded. Background app processes
              the new submission (version control, notifying other
              users, indexing the new documents, etc.)
         <li> One possible way
              of dividing: if the result of applying the new write is
              something that is common to all users, can do it
              optimistically.  If it's custom per-user, do it
              reactively/lazily (ie the current TACC way).  [Armando
              sez: this is the defining requirement for the
              AsyncDistill() mechanism.]
         <li> WBI does this now: e.g. the full text indexer component is
              something that gets run on every request but whose results
              do not go to the browser.  So they "split the stream" such
              that the stuff that has to get back to the UI can get
              there fast.
         <li> Argument above applies as a generalization of when to
              cache.  E.g. deliver to browser in foreground; deliver to
              cache in background.  Or: deliver to transformer and then
              to browser in foreground; pre and/or post cache in
              background.   (A relevant issue for cache-based
              architectures with a transcoding "layer".)
         <li> Some dualities:  split stream &lt;--&gt; split application
              FG/BG; low vs. hi pri stream &lt;--&gt; FG vs BG task.
              (Implicit assumption: splitting a stream results in at
              most 1 high-priority stream.)
       </ul>
  <li> More generally: consider  apps where you map a small data space
d37 21
a57 12
  <li> BG can be required or optimistic.  Required: state change
       reflected by FG must be carried to completion by BG; furthermore,
       <i>next</i> FG task will depend on this, so some kind of
       interlocking may be necessary between it and BG.  (Internet
       caches already seem to provide the right kind of interlock.)
       Required, example 2: notification; interesting because it is
       required but has no synchronization constraint with subsequent
       requests, even ones from the same user.
       Optimistic: BG can be dropped on the floor without sacrificing
       correctness; data/state can be regenerated by computation; in
       fact system may choose to shun these under high load, with an
       appropriate scheduling mechanism.
a58 6
  <li> Stream vs. buffer: are there new applications that are enabled
       (or made much more natural) by a streaming API?  (being able to
       split stream, etc.) - aside from the performance benefits.
       Possibly having well defined foreground/background worker
       interaction semantics would be sufficient to supplement the
       buffer model.
d61 1
a61 1
<h1>Persistence</h1>
d64 6
a69 3
  <li> Distinguish "persistent store" from "intermediate state store".
       Ex.: virtual session vs. persistent profile/account info.
  <li> How to manage intermediate state?
d71 9
a79 5
         <li> Pass it around in urls, forms, etc (signed as needed)
         <li> Store it locally
         <li> Any difference between these semantically?  Esp. w/r/t
              application's resilience to waking up in a confused state
              after being passed a stale continuation?
d81 2
d89 51
a139 1
<h1>Infrastructure support for xactional workers (really idempotence)</h1>
d149 1
a149 1
       invariant of being restartable.
d155 11
a165 1
<h1>Readings</h1>
d168 23
@
