head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.08.14.16.40.24;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html> <head>
<title>Usenix NT Workshop</title>
</head>

<body>

<h1>Usenix NT workshop, Aug 11, 1997</h1>

<h2>Stuff to check out</h2>

<ul>
  <li> <a href="http://www.lotus.com/research/">Lotus Research</a> -
       talked to Quinton Zondervan and Mark Day (latter was lead author
       of "What synchronous groupware needs" paper in HotOS V: a
       "generic" async notification protocol, in the same sense that
       RSVP is a "generic" resource reservation protocol).  They would
       like Pilot browser code, etc.
  <li> <a
       href="http://www.cs.cornell.edu/Info/Projects/Ensemble">Ensemble</a>,
       a clustering version of ISIS-like group protocols over mcast:
       fault-tolerant 
       RPC layer with failover, some support for realtime guarantees
       even with node 
       restarts,  etc.
  <li> Softway Inc. has an OpenNT Unix/Posix compatibility subsystem for
       NT: <a href="http:www.OpenNT.com">http:www.OpenNT.com</a>
  <li> Butler Lampson on security recommends some reading:
       <ul>
         <li> <a href="http://www.cl.cam.ac.uk/users/rja14">Ross
              Anderson's homepage</a>
         <li> <a href="http://theory.lcs.mit.edu/~cis/sdsi.html">Simple
              Distributed Security Infrastructure (SDSI)</a>
         <li> <a
              href="ftp://ds.internic.net/internet-drafts/draft-ietf-spki-cert-structure-02.txt"> Simple public key infrastructure (SPKI)</a>
       </ul> 
</ul>

<h2>Deep Ports</h2>

<h3> NCR "Top End" server:</h3>
<ul>
  <li> NT has good service management but lacks basic support for
       monitoring/restart
  <li> "Unix's security model is too simplistic; NT's is too complex and
       hard to code" -- better documentation is helping
  <li> "File access, suid, etc. insufficient on NT": really means NT's
       model is different enough to require re-architecting your
       security, not just re-engineering
  <li> PID's are reused and not "guaranteed" unique! Ugh.
  <li> NT "shell" sucks; no job control, etc.  Shell scripts got
       converted to Perl
  <li> No parent/child processes, job detach on failure, etc.  Makes it
       difficult for processes to control other processes that they spawn.
  <li> Development/debugging tools (VC++) far superior to Unix
</ul>
<h3>Oracle server:</h3>
<ul>
  <li> Don't port your abstractions: C runtime lib, signals, My Own
       Threads, etc.  Use the NT native versions of these.
  <li> Nice abstraction  "I/O completion port" bundles queue of blocked
       worker threads and queue of incoming async I/O completions.
  <li> Fibers: lightweight threads, with stack-only variables; 10's of
       instructions to switch.
</ul>

<h2>Panel: Do you need source?</h2>

<h3>Todd Needham, MS</h3>

New NT source licenses: can exchange source with like licensees, can
exchange object code with "anyone".  Derivative work distribution
requires MS intervention.  Researchers retain IP rights to their work,
but require commercial (vs research) license to distribute them
commercially. 

<h3>Margo Seltzer</h3>

<ul>
  <li> Source inspection can provide quick confirmation of hypotheses
       ("The problem with physics research is you can't view the source"
       -- paraphrase)
  <li> Demonstrably successful fixes to source are even better than
       measurably successful ones
  <li> Who actually signs?  (PI can't sign; University must
       sign.)
  <li> Publishing: do you need approval to publish?
  <li> Liability:
       if students violate license, University is liable!
  <li> Export
       restrictions: foreign grad students can't join project?
</ul>

<h3>Geoff Lowney, DEC Spike project (Alpha NT optimizer)</h3>

<ul>
  <li> Much Alpha NT tool work done without source (some reverse engineering),
       because of company politics.
  <li> Embedded relocation information has been helpful for
       instrumenting, but relo info is going away!
  <li> Dataflow analysis hard: which references are volatile (and so not
       loop-invariant?  which registers are "really" live on return?
       etc.
  <li> A few researchers write their own OS's, to investigate OS
       structure; the rest confine their (small) changes to
       well-understood pieces of the kernel. Maybe MS should provide a
       "research build" or SDK for the microkernel for the latter
       group.  ("What are you going to do with 10M lines of source?")
</ul>

<h3>Werner Vogels (research assoc. Cornell U)</h3>

<ul>
  <li> Managing the source base: Grep is hard.  Tags tables help a
       little.
  <li> Since there's no docs for NT internals, the code <i>is</i> the
       docs.  (find examples, understand weird behaviors, find
       undocumented but useful API's,debugging)
</ul>

<h3>Brian Bershad</h3>

<ul>
  <li> Sometimes the lack of source leads to good tools (Etch).
  <li> But sometimes you just <i>want</i> source: documentation,
       examples, measurement/analysis
  <li> Sometimes you want to improve on something NT does, or use an
       "undocumented" API in a novel way or to do some new task.
       ("derivative work")
       Often
       API's undocumented because of designer bias as to which API's
       people would care about.
  <li> Alternatives to having source: call someone you know (at MS);
       look in other OS's; etc.
  <li> Why might you <i>not</i> want source: stifle creativity; golden
       handcuffs and MS's rights to your results
  <li> Wrong question: "Do you need source".  Right one: "Do you need
       information".  Sometimes source isn't best way to get the info.
</ul>

<h2>Performance</h2>

<h3>Endo &amp; Seltzer: measuring Windows NT</h3>

<ul>
  <li> Interactive system --&gt; user-perceived performance important.
  <li> Users expect some things to be slow, but unexpected slowness bad.
  <li> Strategy: Use NT's (fairly good) data collection mechanisms; keep
       collected data in an in-memory ring buffer for "a short 
       time".  If bad performance is observed, write out data.
  <li> Problem: confirming hypotheses requires either reverse
       engineering or source, but source license is too restrictive to
       sign. 
</ul>



<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>

@
