head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.11.12.03.51.31;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@
Storing relevant info persistently
  users->groups
  url->annos

notification to worker that some piece of state has changed (form
submission)?  not needed if workers get profiles 

would like an argument registry.

annotation as suport vs. annotation as threaded flame war: at what point
do writes break the system?

how does usage change if annotation is the ONLY real contact (no other
channels, such as email, local newsgroups, etc)?  "social engineering"
aspects of how 

"what's new" with local customization.  "faceless" app.

NOTIFICATION MANAGEMENT

reread mark day's synchronous groupware paper.  (soft state server for
notifications)

generalize monitor model into groupware notification.  (incl. filtering,
multiple channels of info, logging, etc.)

(move it to a browser plugin, then you get implementation free.)

want both subscription control *and* end-user disposition (via
e.g. windowgram client) of what happens to the notification when it
arrives.

something like zephyr.  anything stronger is the ISIS path, or at least
SRM.  not clear if these apps are good for TACC.

what about scaling across domains?  ie different workgroups sharing
state.

authentication: both admission control and app-specific control, even
app-specific permissions semantics.  (eg read only vs. write/annotate on
a document; etc)

SUMMARY OF OPEN QUESTIONS

persistent storage - what write/read ratio is tolerated 
cross-domain scaling
notification: what techniques are useful/necessary, and what guarantees
   does notification mech. provide
@
