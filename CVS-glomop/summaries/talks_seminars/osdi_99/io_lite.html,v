head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	99.02.26.17.30.05;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@more good stuff - osdi 1999
@
text
@<html> <head>
<title>IO-Lite: A Unified I/O Buffering and Caching System</title>
</head>

<body>
<h2>IO-Lite: A Unified I/O Buffering and Caching System</title><p>
Vivek S. Pai and Peter Druschel and Willy Zwaenepoel</h2>

<h3>Paper summary</h3>
<ul>
     <li> <b>Premise</b>:  better to unify all buffering and caching in an
	  OS, to the extent permitted by hardware.  Share physical copy of
	  buffers between apps, file cache, network subsystem, IPC
	  subsystem, and file system.   Eliminate data copying and multiple
	  buffering.
     <li> Essentially pass references around instead of copies.  What about
	  concurrent access?
	  <ul>
	       <li> immutable shared buffers.  WORM.
	       <li> Buffer aggregate as ADT that gets pointed around.
		    Members of the aggregate are immutable buffers.  To
		    modify aggregate, splice in modified, newly created
		    buffer.
	  </ul>
     <li> Better than mmap:  eliminates copy from disk to network, but also
	  eliminates the multiple instances of same data in network for
	  same file to multiple connections.
     <li> Implementation:
	  <ul>
	       <li> Loadable kernel module in FreeBSD 2.2.6
	       <li> wrap IOL bufs inside mbufs, so can work with network
		    and IPC code.  Replaces filesystem buffer cache
		    module.
	       <li> immutability of buffers has nice side-effects: assign
		    generation # to buffers.  Now, (location, generation #)
		    uniquely identifies data for entire system lifetime.
		    Now can do things like cache checksums over data.
	  </ul>
</ul>

<h3>Questions from audience</h3>
<ul>
     <li> paging?  yeah, we do paging under the covers if necessary.  Also,
	  reference count I/O lite buffers so know when to throw away.
     <li> hardware demultiplexing in NIC vs software demultiplexing in
	  kernel?  do harware if can, else pay cost for software.
</ul>
<h3>Steve's thoughts</h3>
<ul>
     <li> Do I/O-lite style buffer unification along with prefetching for
	  long I/O sequences (segments, here representing commonly accessed
	  files and such). E.g. grouping of files for web server a la Drew
	  quals.
</ul>

<hr>
<address><a href="http://www.cs.berkeley.edu/~gribble/">Steve
Gribble</a> / <i><a   
HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</a></i></address>
<!-- hhmts start -->
Last modified: Tue Feb 23 10:01:29 1999
<!-- hhmts end -->
</body> </html>
@
