head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	99.02.26.17.30.03;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@more good stuff - osdi 1999
@
text
@<html> <head>
<title>Automatic I/O Hint Generation through Speculative Execution</title>
</head>

<body>
<h2>Automatic I/O Hint Generation through Speculative Execution<p>
Fay Chang and Garth A. Gibson</h2>

<h3>Paper summary</h3>
<ul>
     <li> Prefetching is useful for masking I/O latency.
	  <ul>
	       <li> Manual prefetching is potentially optimal, but requires
		    programmer intervention
	       <li> Sequential is ok for linear reads, can hurt for
		    non-sequential access
	       <li> idea: use idle CPU cycles when app is I/O blocked to
		    dynamically analyze I/O access patterns and
		    speculatative prefetch.
	       <li> mechanism: add thread to app that does this
		    speculation.  It literally executes app code, but with
		    shadow state regions, and doesn't block on i/o
		    requests.  Only runs when mainline app thread is
		    blocked.
	  </ul>
     <li> How do you avoid hosing app by modifying it with speculation
	  thread?
	  <ul>
	       <li> copy-on-write techniques, signal trapping, etc.
	  </ul>
     <li> What if speculative thread falls behind, or goes
	  &quot;off-track&quot;?
	  <ul>
	       <li> restart it.  keep hint log to tell when thread goes off
		    track or falls behind.
	  </ul>
     <li> How does it perform?
	  <ul>
	       <li> Anywhere from 20%-70% wall-clock time improvement in
		    app performance
	       <li> Roughly equivalent to manual prefetching
	       <li> Very high prefetching hit rate
	       <li> Overhead: order of 1-2MB larger VM footprint for app
		    (Steve sez this will depend radically on the app, and
		    how long you have to keep ahold of the shadow data?
	  </ul>
</ul>

<h3>Questions from audience</h3>
<ul>
     <li> Could you do hardware copy-on-write instead of software
	  copy-on-write, i.e. use MM?  Answer: yes.  we tried with fork,
	  but got expensive to restart for large apps.  Moral:  Do this,
	  but be more clever with choice of OS, or OS modifications
</ul>
<h3>Steve's thoughts</h3>
<ul>
     <li> Multithreaded case?  Fork off one speculative thread per app
	  thread?  Why not try to &quot;hijack&quot; the application thread
	  for speculation when it is blocked, trap the signal or RTS to
          notice when the thread would restart, and stop speculation then?
</ul>

<hr>
<address><a href="http://www.cs.berkeley.edu/~gribble/">Steve
Gribble</a> / <i><a   
HREF="mailto:gribble@@cs.berkeley.edu">gribble@@cs.berkeley.edu</a></i></address>
<!-- hhmts start -->
Last modified: Tue Feb 23 09:30:23 1999
<!-- hhmts end -->
</body> </html>
@
