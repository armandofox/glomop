head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.04.19.23.55.10;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Dogbert">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; U) [Netscape]">
   <TITLE>Winfree</TITLE>
</HEAD>
<BODY>

<H1>
Toward general computing with DNA</H1>
Erik Winfree, faculty candidate, Caltech

<P>High order bits: Model a TM as a tiling problem; make the "tiles" be
different type of DNA structures; use DNA self-assembly techniques to see
if the machine halts (if the tiling succeeds, ie the DNA self-assembles).&nbsp;
Use atomic force microscopy to examine resulting assemblies.&nbsp; 2D lattice
self-assembly still in early stages experimentally.&nbsp; Hypothesis: different
types of DNA structures allow the expression of problems at different levels
of expressiveness (regular languages, CFG, general recursive languages).

<P><B>What can you do with DNA?</B>
<UL>
<LI>
Synthesis</LI>

<LI>
Hybridization: bring strands together whose ends are Watson-Crick complements,
catalyze at low temp</LI>

<LI>
Denature (opposite of hybridization)</LI>

<LI>
Ligation: hybridize, then add covalent bond to splint them</LI>
</UL>
An "enzyme Turing machine" (Bennett, 1982): Polymerase inserts copy of
WC complement to bind to a strand.&nbsp; A simple TM that copies and requires
energy roughly proportional to reaction speed.&nbsp; Can arbitrary fns
be computed?&nbsp; Hypothetical strategy: to make the transition table,
get groups of bases that recognize the group representing the head of the
TM and rewrite it.&nbsp; If th TM computes a reversible fcuntion...

<P>Joyce 89 and others: to find molecule M that binds w/target T, just
generate large library of random molecules, and let the chemicals do their
work.&nbsp; Discard those that "bind nonspecifically" or don't bind.&nbsp;
Brute force, highly parallel.

<P>Extensions of Adleman's technique have been used to solve experimentally
small examples of circuit-sat, formula-sat, Hamiltonian, max-clique.&nbsp;
For about $100K you can get a Beckman Instruments "DNA workstation" setup.&nbsp;
Optimistic estimates suggest it would still take longer

<P>Hagiya &amp; Yokoyama 1997 showed ("whiplash PCR") that you can add
an additional group that inhibits further copying; you can use this to
implement "goto".&nbsp; Suppose you can represent f(x,y,z) and x,y,z discretely
on a strand: as long as formula accesses x,y,z exactly once, this technique
can b eused to code this.&nbsp; You can then create a combinatorial library.&nbsp;
These are called "mu-formulas".&nbsp; Find a mu-formula that agrees with
the example data for N points (one at a time, keeping only consistent results
each time), and in O(N) stepes you'll have a mu-formula that satisfies
all of them.

<P>Other DNA structures (hairpins, crossover double-strands, three-arm
junctures) result in different kinds of libraries thru self-assembly!

<P>Theorems (Winfree 96): Simple Adleman strands yield regular languages;
three-arm junctures yield context free languages; double crossovers yield
general recursive languages (via assembling in 2D lattice).

<P><B>Context: </B>Tiling problem; given a set of shapes, can you tile
the plane?&nbsp; Problem is undecidable!&nbsp; Proof: by reduction to the
Halting Problem; TM halts &lt;--> no tile can be added, so plane cannot
be tiled.&nbsp; Interesting part: the tiles can be used to simulate a computation
performed by a TM.&nbsp; What if the "tiles" can be made from DNA?

<P><B>Example:</B> Pascal's triangle mod 2 is the Sierpinski triangle:
the (n,k) entry is ((n choose k) mod 2.&nbsp; Mod N: if you can compute
any entry from its 2 predecessors, you can make an arbitrary CA.
<BR>&nbsp;
</BODY>
</HTML>
@
