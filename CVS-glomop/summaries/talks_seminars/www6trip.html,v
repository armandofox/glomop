head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.04.15.07.33.44;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.04.15.07.19.33;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<html> <head>
<title>WWW-6</title>
</head>

<body>
<h1>Caching</h1>

<h2>Latency-based caching</h2>


<ul>
  <li> server download lat alone does worse than LRU, LFU, and Size!
  <li> Hybrid: ((ConnTime + WB/Bandwidth)*(Nrefs^WN))/Size
  <li> Estimate ConnTime, Bandwidth using TCP-like smoothing; 
  <li> Modified Harvest to use their alg (actually uses buckets, not
       servers).
  <li> Note: per-server, not per-URL.  More robust estimates even when
       per-URL data is stale.
  <li> Hybrid formula more robust to variety of workloads
       (trace-playback as well as real users); better on average than
       minimizing any single metric, in terms of e2e latency
  <li> Minimizing cache misses (server hits) sensitive to WB; minzing
       Bandwidth sensitive to WN; but minimizing e2eTime
       <i>insensitive</i> to both!
  <li> "With 120K refs from aol.com, results inconclusive".  (AOL gave
       them traces!)  Hypothesis: less locality (or different locality)
       compared to BU and VT traces.
  <li> Problems:
       <ul>
         <li> Self-selection: some people tend not to visit docs whose URLs
              indicate they're far away.  Hypothesis: we may be underestimating
              the improvement.
         <li> Variance in download times  etc. is high in practice.
         <li> How about caches that adapt their algs according to
              traffic patterns? (future)
       </ul>
</ul>

Points I brought up:

<ul>
  <li> Modified Harvest, cool! Customizable eviction?
  <li> Sharing traces and playback engines
  <li> How did you get AOL traces?
  <li> How big cache, and how does perf of each alg depend on size?
       They used a cache that was 10% of "infinite size".  Relative
       performance is invariant to cache size down to about 1% of
       "infinite size", at which point LFU gets much better.
</ul>

<b>Action items:</b> We should share Harvest mods (they are very
interested in partitioned Harvest) and traces (they don't distribute on
CDROM, but have them online and queriable by Java applet, which they'd
be happy to give us)<p>


<h2>Finding salient features by looking for word clusters</h2>

<ul>
  <li> Goal: extract "word clusters" from documents, then use them to
       perform the query "other documents like this one" (Excite does
       something like this)
  <li> get "word clusters" based on word counts, syntactic analysis,
       etc. -- no semantics or "prior knowledge"
  <li> future: rank-ordering rather than raw word counts; word stemming;
       combinations of terms (logical connectives, etc); hierarchical
       cluster refinement
  <li> Problems:
       <ul>
         <li> no word-sense disambiguation (ie by context), since
              purely statistical (solution: since cluster size small,
              try to determine semantic relationships between words in a
              cluster using lexical database; can also do the same on
              orig. query and compare semantic similarity)
         <li> subject to "spam words", outliers, etc (above mech also
              gives formal metric fro "cohesiveness", which should throw
              these out)
       </ul>
  <li> Conclusion: categorization of documents less useful than word
       clusters for doing "similarity" searches
  <li> Flaw: a big leap from statistics/syntax to semantics. The natural
       language folks have tried this time and again and most semantic efforts
       have foundered on the amount of context really needed.
  <li> Flaw: document sample size is <b>85</b>.  Yes, 85.
</ul>

<h2>NSTP - notification service transport protocol for groupware (Lotus)</h2>

<ul>
  <li> Toolkit for "synchronous groupware", using Java or C++.  Looks
       similar to what McCanne et al. are doing with MASH and object
       libraries, but far more stupid.
  <li> Server-multiple clients model; one TCP conn per client.  Forget it.
  <li> "What about consistency in multiuser apps": "It's an application
       level problem" (they provide locks, etc.)
  <li> "What about scalability" question got a fudgy
       answer and handwaving (soudns like it's not designed for
       wide-area anything)
  <li> demo: playing tic-tac-toe and
       chatting using Java applets that have the notification toolkit
       under them)
  <li> Sources avaliable for noncommercial user at <A
       HREF="http://nstp.research.lotus.com">nstp.research.lotus.com</A>
  <li> This doesn't sound useful to me.
</ul>

<h2>WebRule</h2>

<ul>
  <li> Web server plug-in that contains a rules database that allows
       rules to be triggered by actions.
  <li> Actions can be local (startup, shutdown, URL access request,
       permissions violation, etc.) or remote (another WebRule server
       sends you an action request, rule update, etc.)
  <li> Actions trigger rules, which are basically little scripts with
       various attributes attached (permissions, etc.)
  <li> Rule example: "When such-and-such page changes [the action part],
       go get it, plus the
       following other pages, and then run them through this
       table-merging program [the rule part]".
  <li> Can build little groups of collaborating WebRule servers to
       support such services.  Examples they gave weren't terrifically
       well motivated but I think it has potential.
  <li> Flaws:
       <ul>
         <li> Server plug-in written in Java and C.  Clearly this
              application has more leverage on the proxy (imagine
              scalable proxy augmented with rule/action paradigm)
         <li> Not scalable for the obvious reasons, and also not clear
              what happens to scalability if rules cause lots of
              cross-server interactions.
         <li> As far as I can tell, individual users cannot modify or
              upload rules -- only WebRule admins can.
       </ul>
  <li> Wouldn't the scalable proxy be a great place to run a rule/action
       system like this one?
</ul>

<h2>Pseudo-Serving</h2>

<ul>
  <li> Idea: let clients "bid" CPU/disk resources to get faster
       service from servers
  <li> Interesting idea, half baked implementation and simulation
       results, thoroughly unconvincing, and author didn't handle
       questions particularly well.
</ul>

<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.1
log
@*** empty log message ***
@
text
@d144 3
a146 1
  <li> 
@
