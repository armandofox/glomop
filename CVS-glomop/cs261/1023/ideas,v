head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.23.23.10.29;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@-- this time: Java as a type-safe language
   -- nice transition: we've seen C is a bad language; Java is better
-- Java language
   -- applets and applications
   -- object-oriented, garbage-collected, type-safe language
   -- no pointers!!
   -- classes, objects, packages
   -- threads
   -- native code
   -- type-safety
   -- all casts are explicit
   -- private, protected, package scope, public, synchronized,
      final (methods & classes), try{}finally{}
   -- subclassing, interfaces, rules for constructors
-- Java bytecode (JVML)
   -- opcodes for an imaginary ("virtual") machine with a stack & some registers
   -- subroutines for try/finally and nested exception handlers
-- Architecture for type-safety
   -- Compiler totally untrusted
   -- A mixture of static and dynamic type-checking
   -- Bytecode verifier
      -- simple checks
      -- dataflow analysis verifies:
         -- at any given point in code,
	    -- stack is always same size & has same type
	    -- registers not accessed until loaded with correct type
	    -- methods typecheck
	    -- field accesses typecheck
	    -- opcodes have appropriate type arguments on the stack
	 -- instructions are used atomically (i.e. control flow instructions
	    point to the start of an instruction)
	 -- at any "join" in control-flow, merge the type of the world
	    (if possible; otherwise fail)
	    -- note that at any instruction, every registered exception
	       handler is a possible successor (except that you push an
	       exception object on the stack before the jump to the
	       exception handler)
	    -- i.e. registers are not polymorphic
            -- e.g. the following code will fail, due to static type-checking:
      	    Object obj;
            if (flag == 0) obj = new File(); else obj = new String();
	    if (flag == 0) println(obj.getPath()); else println(obj);
   -- JVM
      -- interpreter for JVML
      -- Dynamic type-checking on first access to every class, method, field
      -- array bounds-checking and storage type-safety
         (give an example of why the latter has to be dynamically: covariance)
   -- Garbage collector has to be secure
      -- if it deallocates memory while there's still a pointer to it,
         can subvert type system
      -- if it doesn't zero out memory, you have object re-use problems
-- The remainder of the security architecture: how to use type-safety
   -- SecurityManager
   -- Libraries
-- code signing
-- Stack introspection
   -- privileges:
      -- beginPrivilege(), endPrivilege()
      -- PrivilegedAction()
-- Evaluation
   -- type-safety lets you cross protection domains without a context switch
      (fast)
   -- Does not address denial-of-service attacks!
   -- package mechanism is poorly designed
      -- should be hierarchical
      -- and note that any class can add itself to a package just by
         adding an appropriate "package" line
   -- problems with complete mediation with SecurityManager
   -- use of bytecodes was poorly considered; ASTs would have been better
   -- subroutines hard to verify due to polymorphism, could have been
      left out of JVML at no loss of generality and very little cost
   -- JVML is more general than Java, which has caused some non-obvious bugs
   -- implementation problems, which we'll see in a future class

-- next time: mobile code
@
