head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.21.23.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From chuah@@berryman.CS.Berkeley.EDU  Fri Oct 30 12:46:47 1998
Return-Path: chuah@@berryman.CS.Berkeley.EDU
Received: from berryman.CS.Berkeley.EDU (berryman.CS.Berkeley.EDU [128.32.130.39]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id MAA13781 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 12:46:47 -0800
Received: from localhost (chuah@@localhost)
	by berryman.CS.Berkeley.EDU (8.9.1/8.9.1) with SMTP id MAA13924;
	Fri, 30 Oct 1998 12:47:00 -0800 (PST)
Date: Fri, 30 Oct 1998 12:47:00 -0800 (PST)
From: Chen-Nee Chuah <chuah@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: chuah@@CS.Berkeley.EDU
Subject: Homework 2
Message-ID: <Pine.BSF.4.02A.9810301240530.13734-100000@@berryman.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


	*************************************************************
			CS 261- Homework 2		    
			
		submitted by:  Chen-Nee Chuah			    
	**************************************************************

Acknowledgement: I discussed the problems with Mark Spiller. 


==========
Question 1
==========

For following two parts of the question, I will first state the
similarities and differences between the two systems we are comparing
before I discuss the advantages and disadvantages of each choice.

======
Part 1
======
Stateful Packet Inspection Firewall (SPIF) v.s. Application Level Proxy 
Firewall (ALPF).

SIMILARITIES btw SPIF and ALPF:
* Both are "active". They do more than observing the packets. In fact,
  they examine the packets, keep track of the state of connections in
  progress, and decide whether to forward/relay the packets/update
  security policy based on these state information.

* Both are "fail-close". When an attack is detected, SPIFs will drop
  packet while ALPFs will refuse to forward packet, forcing connections
  to be closed. Therefore, the machines inside the firewall are
  protected against attacks.  When SPIFs or ALPFs are attacked, the worst
  thing that can happen is that they both shut down. In the case of
  SPIFs, the network behind the firewal will be completely cut off from
  the outside network. ALPFs (depending on the implementation) will
  also gives the same effect, if there is no connection between the
  outside world and the network behind the firewall without going
  through ALPFs.

CONTRAST:
* An ALPF has its own protocol stack. It needs higher layer intelligence
  to be able to understand how different protocols (TCP, IP etc) work
  to perform checks on different level of protocol stack.
  
  A SPIF on the other hand operates on the lower layers. 

* An ALPF allows more abstraction because of the layering of protocol
  stacks. It trust low-level TCP/IP to do its job right.

  A SPIF needs more complicated rule to check all the possible scenarios
  because it doesn't have TCP/IP stack of its own.

ADVANTAGES of SPIF over ALPF
*****************************
* Since a SPIF does not have it's own stack, its implementation has to
  include all the possible schenarios/rules that it has to check on
  each packet based on the type of connection and its current state to
  guard against attack. As such, it DOESN'T HAND OFF TRUST to any
  layers below it (since it's already at lower layer). So one can
  claim that it's more secured IF all the checks are implemented
  correctly and IF an ALPF trusts its TCP/IP stack and only implements
  application level protection. (This is a big IF, look at the
  disadvantage of a SPIF discussed below).

* Since SPIFs check the packets at low level without having to
  pass them UP the protocol stack, it is possible that SPIFs are faster
  and causes less end-to-end delay. But again, this is debatable,
  because SPIF's checks involve more complicated rules(since it doesn't
  have protocol stack and the abstraction that ALPFs have) and might take
  more time than ALPFs if the implementation of SPIFs is not optimized.

* Implementation of ALPFs sometimes involve an overhead of rewriting
  some of the applications to handle the proxy. For instance, when a
  machine behind the firewall runs ftp or telnet to connect to an
  outside machine, it is actually connecting to the firewall proxy,
  and the proxy then runs a ftp or telnet to the outside machine. To
  make this transparent to the end user, one need to rewrite the
  applications. (For instance, when I worked at Bell Labs, I have to
  use "ptelnet" or "pftp" to connect back to Berkeley. Simple "ftp" or
  "telnet" won't work.)

DISADVANTAGES of SPIF over ALPF
*******************************
* A SPIF is more difficult to code and prone to error. Since it doesn't
  have a protocol stack, application-level details (TCP/IP layer) need
  to be programmed explicitly into a SPIF. To check against
  application-level attack, one has to go through all the scenarios
  and translate them into rules e.g. checking different data segment
  of the packets. Therefore, it's easier to go wrong in implementing
  a SPIF than an ALPF, leaving behind a lot of possible security holes. On
  the other hand, if an ALPF only implements application-level protection,
  while trusting TCP/IP stack, it's easier to get it right (assuming
  that the stack is trustworthy)

* Because SPIFs don't have the "abstraction" that ALPFs enjoy, SPIFs
  are not flexible to protocol update/modification. E.g. a change in IP
  protocol will require rewriting major portion of the SPIF's code so
  that the new protocl can be understood at the lower layers. On the
  other hand, ALPFs just need to deal with interface of application layer
  proxy with lower stack. All the application-level protection code can
  stay intact.
   
* Although both SPIFs and ALPFs maintain states for every active
  connections, the amount of state information that need to be
  maintained is different. ALPFs have more knowledge of the application
  semantics than SPIFs. For instance, since packets have to travel up
  the stack in the case of ALPFs, ALPFs have to wait for all fragments to
  arrive, before they do a check on application level. On the other
  hand, SPIFs might just forward the packets, since they don't have the
  application level intelligence. As a result, ALPFs have the advantage
  to detect some of the more complex attacks such as IP fragmentation
  attacks.

=======
Part 2
=======
Stateful Packet Inspection Firewall (SPIF) vs. Network Intrusion
Detection Systems (NIDS).

SIMILARITIES:
* Both SPIFs and NIDSs observe packets and keep states of each active 
  connections on all machines. 

CONTRAST:
* SPIFs are active and fail-close, while NIDS are passive and
  fail-open. SPIF dynamically decide whether or not to forward the
  packet, and can tear down a connection when necessarily. When SPIFs
  break down, the machines behind the firewall are completely cut off
  from the outside world. On the other hand, NIDSs only observe the
  packets without tampering it. When NIDS break down, all the
  connections/packet flows are still intact.

ADVANTAGES of SPIFs over NIDSs
******************************
* Every packet has to go through SPIFs, while NIDSs are only passive
  observer. Therefore it's more likely for NIDSs to fail to identify an  
  intrusion.

* SPIFs are shielded from any issues related to heterogeneity behind
  the firewall. On the other hand NIDSs need to fit into the existing
  topology and "co-operate" with the machines behind the firewall so
  that they don't introduce noticeable disturbance.

* NIDSs have to ensure that all machines in the organization are
  running compatible protocol stacks so that the observed activity
  (packet flows) could be analsyzed correctly. SPIFs only checked each
  packet that arrived at the filter without having to worry about what
  happened after it got relayed to the internal network.

* NIDSs can generate false alarms. For SPIFs, at most the packets are
  dropped.

DISADVANTAGES of SPIFs Compared to NIDSs
****************************************
* NIDSs are better at detecting in-bound and internal attacks. Since
  NIDSs observe the activity, keep tracks of the state of connections,
  and run statistical analysis of the collected data for a period of
  time, they have a higher chances of catching the attacker, or
  identify where the malicious behavior originate from. 

  SPIFs on the other hand only protect attacks from crossing the
  line. At most, the packets got dropped. But it's harder to trace to
  originator of the attack.

* SPIFs have to trust the implementation of a complex filter. Again,
  it's harder to code, prone to error in implementation , and
  inflexible to pro tocol change (as discussed in part 1 of this
  question). NIDSs don't have as much problems as far as this is
  concerned.

* SPIFs are too restrictive compared to NIDSs, which makes SPIFs less
  welcomed for research community such as for university networks.


==========
Question 2
==========
What happens if we modify our memory layout so that stacks grown
upwards -- does this help to solve the buffer overrun attacks?
There are different ways we discussed in class how to exploit buffer
overrun and I'm going to answer the above question for each of the listed 
cases.  
 

* 1. Overrun a buffer and overwrite a security-critical piece of
   internal state 

* 2. A slight variant: abuse stdio(overwrite a global variable used by
   stdio).

For 1 and 2, don't necessarily depend on the stack at all, and so it
doesn't matter wheter the Frame Pointer is above or below the current
stack. Making the stack grow upward DOESN'T HELP in these two cases.


* 3. Stack smashing
When the stack grows downwards, any buffers allocated on the stack by
a function invocation f() appears below the return address pointing to
f()'s caller. So one can overwrite the buffer allocated, put malicious
code on the stack and overwrite the return value to call it.

When the stack grows upward, return address resides in the lower
address space than the buffer allocated to f() that grows
upward. Therefore, overrunning buffer in a function only writes to the
part of the stack that has not been used yet (higher and higher
address space).It cannot overwrite return address in the same way as
before.

However, making the stack grow upward only PARTIALLY solve the
problem. A slightly more complicated trick will do the job. 
One can overwrite the return address of your own function f() by
calling another function g() and pass s POINTER to a buffer on the
stack (created by f()) to g(), and have g() overwrite your own buffer
in f(), and thus changing the caller function's (f()'s) return
address. For example:
	
	void f(){
		char buf[32];
		g(buf);
	}
	void g(buf){
		strcpy(buf, "runway, malicious code and address to point
		to the malicious code");
	}

  -------------------------------------
  return address for 
   caller of f()
  --------------------------------------
   f()'s buffer (buf [32])		<----	start writing here,
					    |	overrun
					    |   the buffer, and overwrite
  --------------------------------------    |	return address for f() to 
  parameter buf				    |   point to the start of
					    |   malicious code
  --------------------------------------    |   
   return address for f() bf calling g()    |
  --------------------------------------    |
  
  etc 



* 4. Variant on Stack smashing: point to code outside the stack like
data segment, heap segement of environment variables.
This attack works exactly the sameway, except now instead of overwriting 
return address with address pointing to the code on the stack, it points
to malicious code that lie in other address spaces.

Again, making the stack grows upward only particially solve the problem
and it opens to new attack as explained above (3).

* 5. Overwrite a function pointer stored on the stack (instead of return
address) Same as 3 and 4, except that now you overwrite the pointer
within the stack frame of the function you called, instead of in your
own stack frame (created for f())or it's caller (function that calls
f()).


******
Does growing the stack upwards allow for any new attack methods?

1. Because the new stack frames go above the current frame, it's
possible to use the trick explained above (in 3) to overrun the buffer
of current frame, changing data in the new stack frames, changing
function pointer or return address to point to malicious code, or
insert Call/Jump or system call that will get executed as program
proceeds as normal, and as the new stack frame is poped.

2. Depending on implementation, one has to be careful about what
happens at the end of the stack, if there are not adequate protection
mechanisms between segments, overrunning into higher memory may affect
different areas than previous overrun into lower memory affected.


==========
Question 3
==========
C programs are commonly prone to buffer-overflow attacks. To protect
against these attacks, we can make the following changes to C
compiler:

* Make the compiler search and replace instances like gets(),
  strcpy(), sprintf() etc. that do not perform boundary check with
  fgets(). strncpy(), and snprintf() etc. that are safer and would not be
  exploited to do buffer overrun attacks.

* As discussed in class, we could modify the C-compiler such that it
  will create separate stacks that are protected from each
  other(sandboxed), e.g. one for return addresses, one for buffers, 
  one for arguments. This only solves the problem if one
  doesn't overrun the entire stack and overrun other stacks.

* A more conservative approach (involves more work) is to make the
  compiler accept only a subset of C that are safe and robust against
  buffer-overflow attacksand reject all other skeptical operations
  such as passing pointer as arguments that might cause buffer
  overrun. Another alternative (instead of rejecting such operations)
  is to identify all these instances across the code, and either
  replace them with safer type (e.g. strong type/class in C++); OR
  insert additional code to do safety checks:e.g. before every pointer
  reference, insert an explicit check for buffer size and make sure
  that any writing into the buffer doesn't exceeds the allocated
  buffer size and overruns other address space.

* Make the compiler handle all memory checking(array bound) on runtime,
  such as in Java.

* Not sure if it is possible, it will be neat to put every buffer on a
  separate page, and forbid any overwriting across pages.

* Not sure how intensive this is, one can introduce the idea of sandboxing
  into C-compiler (make it work like Netscape)


@
