head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.20.47.54;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From gebis@@cory.EECS.Berkeley.EDU  Fri Oct 30 10:51:41 1998
Return-Path: gebis@@cory.EECS.Berkeley.EDU
Received: from po.EECS.Berkeley.EDU (po.EECS.Berkeley.EDU [128.32.138.172]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id KAA13633 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 10:51:40 -0800
Received: (from gebis@@localhost)
	by po.EECS.Berkeley.EDU (8.8.8/8.8.8) id KAA03343
	for cs261-homeworks@@joseph.cs.berkeley.edu; Fri, 30 Oct 1998 10:51:54 -0800 (PST)
Message-Id: <199810301851.KAA03343@@po.EECS.Berkeley.EDU>
Subject: HW2
To: cs261-homeworks@@joseph.cs.berkeley.edu
Date: Fri, 30 Oct 1998 10:51:54 -0800 (PST)
From: "Joseph Gebis" <gebis@@eecs.berkeley.edu>
X-Mailer: ELM [version 2.5 PL0b2]
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Status: RO


Joseph Gebis

1) 
firewalls have many similarities: they both use past information
to enhance their security; they both are set up so that data passes
through them; they both have some knowledge of applications (as seen
by the ftp example in the problem statement).

On the other hand, application-level proxying firewalls use two
separate connections (one from inside the firewall to the firewall,
one from the firewall to the outside), and so they are completely
aware of the states of those connections; stateful packet inspection
firewalls can keep some information that somewhat simulates this,
but does not truly keep track of state (as seen by the ftp
example in the problem statement).  The stateful packet inspection
firewall can only decide whether or not to forward packets; if
it decides to allow a questionable packet through, badness might
happen, and if it does not, users might be unnecesarrily
inconvenienced.  A proxying firewall can somewhat "launder" packets
by interpreting questionable packets in a consistent, reasonable
manner, and producing only completely normal packets.

The advantages of using a stateful packet inspection firewall:
- they forward (or not) packets, so users will not be inconvenienced
  by having to use versions of programs that can deal with proxies
- possibly be able to handle more traffic, since there is no need
  to keep full TCP stack information for both sides (inside to
  firewall, firewall to outside) for all traffic

The disadvantages of using a stateful packet inspection firewall:
- they can simulate the state of the connection (as seen by the
  ftp example), but this will never be a completely accurate
  representation of the state: therefore some information is lost,
  and so the stateful packet inspection firewall might not be
  able to make as good a decision (of whether to forward the traffic)
  as a full app-level proxy firewall
- the stateful packet inspection firewall does not launder packets,
  and so has to either forward questionable packets (and thereby
  sacrifice some security) or else block more traffic

b) A stateful packet inspection firewall is similar to a network
intrusion system in limited ways.  They both examine the network
data stream and interpret it above the network/transport layer:
the firewall does it in order to keep some state, the network
intrusion system does it in order to be able to deal with things
like understanding how to filter out xterm codes from the
actual data stream.

A stateful packet inspection firewall is set up to pass all data
through it; a network intrusion detection system just listens
to network traffic.  A stateful packet inspection firewall will not
allow unchecked communication (it will just drop packets); a network
intrusion detection system can.  A network intrusion detection
system tries to notice attacks as they are occuring; a stateful
packet inspection firewall tries to prevent traffic that would
constitute an attack.

The advantages of using a stateful packet inspection firewall:
- the can actually prevent attacks; network intrusion detection
  systems may only detect them, or try to cut them short once
  they've started
- will not allow unchecked traffic to pass

The disadvantages of using a stateful packet inspection firewall:
- can not catch things like phf attack

2) The modified stack layout helps in the sense that it prevents some
of the attacks in class from working.  It does not help in the sense
that you are not guaranteed to be able to run security-critical code
that contains buffer overrun bugs in this model without any
danger of adversarial exploitation.

The methods we talked about in class:
- overrunning the buffer with gets/strcpy/sprintf: the new layout will
  help for the current procedure (you can't write over your own
  return address), but if a buffer is allocated on the stack, then
  passed to a procedure which writes to it, that called proc's stack
  frame can be overwritten
- overwriting function pointers: still possible, depending on where
  the function pointers are allocated relative to buffers
- abuse stdio
  still possible: overrunning these buffers will overwrite something
- cause jump to system: essentially the same as the gets/strcpy case

A new attack method (that is really just a modification of previous
methods): if a procedure allocates a variable on the stack, and
then passes that variable to a called procedure which writes
into it, the same overwriting-the-return-value attack is possible.

Another variation (which is not really a new method, but a slight
difference from the old method): a stack growing upwards allows
some local variables to be overwritten; a stack growning downwards
allows the other local variables to be overwritten.  (So this
actually means that code that won't allow local variables to
be written on one system (in which the stack grows down) WILL
allow them to be written on another system (in which the
stacks grows up).

3) 
- Emit warnings when gets/strcpy/sprintf/etc are used
- if the hardware allows this: place all buffers so their end is
  at the end of a page
- depending on hardware: put buffers in non-executable areas (only
  helps against some attacks, though)
- If it can determine the size of the buffer that is being
  written into (say, with a "gets"), it can replace that call
  with a size-based duplicate (say, "fgets").
- It could add code to keep track of buffer creation/deletion
  and size, and then use this to perform the above checks
  at runtime
- insert code at the beginning of every procedure to store the
  stack frame somewhere safe (just not on the stack), then
  copy this back to the stack at the end of every procedure
  (protects against return address destruction, but not against
  overwriting local variables)

@
