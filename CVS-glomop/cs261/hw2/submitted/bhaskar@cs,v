head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.23.37.18;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From bhaskar@@cs.berkeley.edu  Fri Oct 30 15:33:04 1998
Return-Path: bhaskar@@cs.berkeley.edu
Received: from huginn.CS.Berkeley.EDU (huginn.CS.Berkeley.EDU [128.32.35.5]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id PAA14000 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 15:33:04 -0800
Received: from bidi (bhaskar@@dhcp5b82.CS.Berkeley.EDU [169.229.63.130]) by huginn.CS.Berkeley.EDU with SMTP (8.7.1/8.7.1) id PAA27153 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 15:33:17 -0800 (PST)
Date: Fri, 30 Oct 1998 15:33:31 -0800 (PST)
From: Bhaskaran Raman <bhaskar@@cs.berkeley.edu>
X-Sender: bhaskar@@bidi
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: CS261 Homework 2
Message-ID: <Pine.LNX.3.96.981030153251.343A-100000@@bidi>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

CS261, Fall 1998, Answers to HW2
Bhaskaran Raman, SID: 13738797

Answer 1
~~~~~~~~

(1) Advantages of stateful pkt filters over appln proxies:

    - Appln level proxy may be too strict in many cases. Appln
      firewalls allow less flexibility (and hence better security?).
    - Stateful pkt filters can achieve higher performance than appln
      level proxies (can be done fully in kernel).
    - In a pkt filter, can turn off all services except (the filtered)
      forwarding at the firewall and hence it cannot be subverted very
      easily. In an appln firewall, if it is compromised, all hell
      breaks loose (all the eggs are in one basket).

    Advantages of appln proxies over stateful firewalls

    - Appln proxies protect against bugs in internal hosts. This is
      not provided by a stateful (or stateless) firewall.
    - Stateful pkt filters may not cover all cases in the appln
      level. If the appln state is not captured properly, the
      temporary hole may persist.
    - Changes in the implementation/version/specification of the appln
      are more difficult to reflect at the stateful firewall. With
      each change, one has to rework the cases in which the hole can
      be opened up and when it can be closed.
    - The temporary hole in firewall may persist if one end of the
      connection goes down. One should make sure that the packets that
      go through the hole will be rejected by an internal machine that
      just rebooted.

(2) Advantages of a network IDS over a stateful pkt filter

    - IDS does not need changes at the client.
    - IDS has better knowledge of appln (has an appln stack
      probably).
    - IDS is easier to parallelize & scale.
    - With IDS, can catch hackers (and sue them). Not possible with
      stateful pkt filters.
    - With IDS, can detect insider attacks (or outgoing attacks as
      well).

    Advantages of a stateful pkt filter over an IDS

    - Pkt filter: prevent attacks before they happen.
    - Pkt filters (even stateful ones) can achieve much higher perf.
    - IDS can be eluded with a wider range of evasion/insertion
      attacks (e.g. TTL attacks, DF flag, src routed pkts, bad UDP
      checksum). It is not so easy to bypass the pkt filter's
      functionality.

Answer 2
~~~~~~~~

- Overwriting security critical variables in the program still
  possible. Overwriting a function pointer variable also is still
  possible in the case when such a variable is present after the
  buffer's allocated limit.
- Overwriting return addr is much more difficult. It would require
  buffer underflow - which is more difficult (impossible?) to cause
  for an attacker.
- STDIO abuse by overwriting a global variable is still possible (the
  attack is not related to the stack at all and hence it does not
  matter if the stack grows up or down).

Addnl attacks:

- Overwriting the heap which grows from the other end of the stack
  segment usually (This seems too difficult though. But who knows?)
- Initializing an uninitialized variable of a function to be called in
  future (is this a weak attack?).

Answer 3
~~~~~~~~

You mean "C language" or "C compiler"? Are we allowed to change only
the unspecified parts of the language (like which variable is
allocated where)? If we are allowed to change other things in the
language, then it does not remain C anymore. Anyway, here goes...

- Allocate empty (physical) memory after every buffer. Or, if
  possible, allocate the buffer in a separate segment (and have
  nothing in the adjacent virtual segment) so that hardware protection
  mechanisms are used.
- Randomly allocate space for buffers & variables so that it is
  difficult for the attacker to guess. But this would only be security
  through obscurity since if the attacker comes to know how the
  variables are allocated for a particular binary, an attack is
  possible.
- One way to make it difficult to change the return address on the
  stack is to store the return address after (i.e. at a lower address)
  than the buffer. Is such a calling convention, part of the language
  spec? If so, this would be a change to the C language.
- Index check for arrays - for those declared (cant check for pointers
  anyway since they are equivalent to arrays but have no bound). This
  is a modification to the language itself.

@
