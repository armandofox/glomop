head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.20.47.56;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From ravenben@@joker.CS.Berkeley.EDU  Fri Oct 30 12:10:01 1998
Return-Path: ravenben@@joker.CS.Berkeley.EDU
Received: from joker.CS.Berkeley.EDU (joker.cs.Berkeley.EDU [128.32.33.53]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id MAA13740 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 12:10:00 -0800
Received: from localhost (ravenben@@localhost)
	by joker.CS.Berkeley.EDU (8.9.1/8.9.1) with SMTP id MAA07864
	for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 12:10:15 -0800
Date: Fri, 30 Oct 1998 12:10:15 -0800 (PST)
From: "Ben Y. Zhao" <ravenben@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw2
Message-ID: <Pine.LNX.3.96.981030120042.7773J-100000@@joker.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Ben Y. Zhao
ravenben@@cs
                              CS261 Homework 2

This problem set is due Friday 30 October. Send your answers in plain ASCII
text by email to cs261-homeworks@@joseph.cs.berkeley.edu. Alternatively, if
you prefer to use dead trees, you may hand in your solutions in class on
that Friday.

Question 1

With this background, the question is in two parts:
  1. Compare and contrast stateful packet inspection firewalls to
     application-level proxying firewalls. What are the advantages and
     disadvantages of replacing an application-level proxying firewall by a
     stateful packet inspection firewall?

Stateful packet firewall vs Application-level proxy firewall:
Packet firewall:
  Advantages:
  1. Less processing per packet, don't have to travel up the protocol stack
  2. Trusted codebase is smaller
  3. Don't have to modify client software to redirect connections to the
     firewall instead of the destination hosts
  Disadvantages:
  1. Hard to specify the state transitions to fully account for all
     attacks. Chances are that you'll miss one, since there are so many
Application proxy firewall:
  Advantages:
  1. Can filter out more bad behavior, at higher protocol layers than the
     packet firewall can handle.
  2. Don't have to worry about guessing the state of the internal hosts in
     order to control connections (e.g. TCP sessions etc).  Basically the
     proxy becomes the shield that all attacks will hit instead of the
     internal hosts.
  3. Easy to code and easy to specify policies for

  2. Compare and contrast stateful packet inspection firewalls to network
     intrusion detection systems. What are the advantages and disadvantages
     of replacing a network intrusion detection system by a stateful packet
     inspection firewall?
Packet Inspection Firewall vs Intrusion Detection Systems
Packet Firewalls:
  Advantages:
  1. Active intervention: all packets must pass through filter in order to
     reach internal hosts.  Can actively drop malicious/ill-formed packets
  2. Much less state to keep track of
  3. Don't need to synchronize with internal hosts, keep track of connections
     on its own
  4. Don't need to be trained towards security policies
  5. If it fails, no packets get through.  So attacking it leads to
     disconnectivity and internal machines are still safe.
  Disadvantages:
  1. Different type of security system from an IDS.  Cannot catch the variety
     of attacks that the IDS can.
IDS:
  Advantages:
  1. Can watch for and detect more attacks
  2. Easier to deploy, don't need to reroute traffic
  3. can be used to monitor internal traffic as well as internal-external
  4. Good for university environments where a filter might be too restrictive
  Disadvantages:
  1. Less active, can detect, but prevention is harder
  2. If overloaded, attacks can go by unseen
  3. Need to guess state of internal hosts, hard to synchronize and still be
     transparent to the internal hosts.

Question 2

*NOTE:  I wasn't in class that Friday. Instead I was attending the JINI talk
from Darryl Mocek of Sun.  Thanks for giving us the summary of attacks.
Personally, I think that if you ask a question referencing stuff in lecture,
then you should make lecture notes for that day available.

What happens when we modify the memory layout so that the stack grows
upwards? Does this help against buffer overflow - pointer redirection
attacks?
Attacks:
  1. Overrun a buffer and overwrite a security-critical piece of internal
     state
  *  Flipping the stack does not help, since the internal state is within
     the same stack frame as the overflowed buffer, no frame pointers are
     involved.
  2. Abuse stdio (I assume in this case, that you mean overwrite the stdio
     buffer pointer to point to your buffer before it flushes to disk,
     thereby having it flush your data to the written file).
  *  This depends on where global variables are stored.  I honestly am not
     sure. If it's stored in the beginning of the frame, then it will be on
     the other side of the buffer overflow, and you won't be able to write
     over it. But if it's just a variable in the stack, then you can
     certainly overwrite it, the frame flipping makes no difference.
  *  On second thought, I don't think I understand the attack correctly.
     Global variables shouldn't be accessible in the stack.  Checked with
     other people in the class, but no one seems to really know it.
  3. Stack smashing:
  *  This will be fixed, in most cases.  Since the stack grows up, buffer
     overflows can no longer reach its own frame return pointer.  But, in the
     case that you have access by reference to a buffer in the previous
     frame, such as Main(argv[]) calling run(arg[1]), you can still overwrite
     the return pointer of the current frame by starting your overflow in the
     stack frame of the parent function.
  4. Variants on stack smashing:
  *  This is basically identical to #3, only difference being what value do
     you change the frame return pointer to when you overflow it. So it's
     still fixed in most cases, but still exploitable when the callee has a
     reference to a buffer in the caller stack frame.
  5. Overwrite a function pointer stored on the stack
  *  This depends on where the funtion pointer is stored within the stack.
     If it's ordered, and stored below the buffers, then the flipped stack
     frame helps.  If it's not ordered and just somewhere in the stack, then
     you can definitely reach it through overflow and rewrite it to point to
     your malicious code.

Finally, does growing the stack upwards allow for any new attack methods?

Yes.  Kind of an obscure one. Since we can now write in the direction of
where new stack frames would be allocated, if we know the flow of execution,
we can figure out the next function call, and the size of the next stack
frame, as well as the local variables.  So we can basically overflow the
buffer to the unallocated memory, and write in values for the local variables
of the next function call.  If the next function fails to initialize its
variables, then the values we write will be used in those local variables.

Question 3

This is another brainstorming question; give as many good answers as you
can.

As we saw in class, C programs are commonly prone to buffer-overflow
attacks. What changes could be made to the C compiler to help protect
against (or prevent) these attacks?

Here, we could have used a clear definition of where you draw the line
between the compiler and the OS.

1. Have the compiler preprocessor go through, and basically do search and
replace to replace bad function calls with more verbose code that uses safer
function calls.  E.g. replace strcpy(a,b) with strncpy(a,b,strlen(b)) and
adding a *(a+strlen(b)) = '\0'.

2. We can also try to mimic array bounds checking, by inserting in asserts to
check to see if the destination array indeed has the capacity to store the
incoming string.  The idea is that if there's an array out of bounds
problem into unauthorized memory space, it'll die with a seg-fault.
E.g.  We can replace strcpy(a, b) with:
      char dummyVariable;
      assert (dummyVariable = *(a+strlen(b)));
      if (assert did not fail) strcpy(a,b);

_____________________________________________________________
Ben Y. Zhao WWW: www.cs.berkeley.edu/~ravenben  bzhao@@acm.org

@
