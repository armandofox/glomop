head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.23.37.18;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From fredwong@@CS.Berkeley.EDU  Fri Oct 30 14:22:27 1998
Return-Path: fredwong@@CS.Berkeley.EDU
Received: from cs2.CS.Berkeley.EDU (cs2.CS.Berkeley.EDU [208.1.75.56]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA13958 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 14:22:26 -0800
Received: from u.CS.Berkeley.EDU (u.CS.Berkeley.EDU [128.32.44.123]) by cs2.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id OAA11522; Fri, 30 Oct 1998 14:23:21 -0800 (PST)
Received: from localhost (fredwong@@localhost) by u.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id OAA18625; Fri, 30 Oct 1998 14:22:38 -0800 (PST)
X-Authentication-Warning: u.CS.Berkeley.EDU: fredwong owned process doing -bs
Date: Fri, 30 Oct 1998 14:22:38 -0800 (PST)
From: Frederick Wong <fredwong@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: CS261 HW2
Message-ID: <Pine.GSO.3.96.981030142005.16512B-100000@@u.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


Frederick Wong (SID: 12520254)

Question 1

1. Compare and contrast stateful packet inspection firewalls to
   application-level proxying firewalls. What are the advantages and
   disadvantages of replacing an application-level proxying firewall
   by a stateful packet inspection firewall?

   Advantages: The most obvious advantage of using stateful packet
   inspection firewall is low access time to the Internet. And it is
   much more transparent to the end user since there is no
   "intermediate stage" that users has to go through in order to
   access the net. Since it is transparent to the end users,
   therefore, there is no change in the client software (e.g. edit
   preference in the browser to point to the proxy). Finally, using
   packet inspection firewall will help in faster deployment of new
   services and faster development cycle for internet based
   software. In application-level proxy case, a fully functioned proxy
   need to be in placed before the deployment/development of new
   services.

   Disadvantage: First of all, the packet inspection firewall need to
   know how the client software will responds in all circumstances in
   order to protect the internal network. What it means is the
   complexity of the firewall grows when we need to protect flaws in
   the newly deployed services. Also, if the policy or the standard
   protocol of one service changed, we need to modify the rules. Which
   may lead to expose security holes on other service filtering. It is
   hard to upgrade the services to a new protocol/policy  since
   extensive testing is required. Unlike application-level proxying,
   if one services need to be upgrade, you need to bring the entire
   internet connectivity down, where in proxying case, you only need
   to bring down the specific services. In addition, a buggy
   implementation of one packet filter rules for one service may lead
   to shutdown of the entire internet connectivity (e.g. filter thinks
   that there are active attacks and shutdown the entire
   site). Finally, the default policy for stateful packet inspection
   firewall is allow, not deny. Since the packet filter will only
   looks for suspecious packets/connections.

2. Compare and contrast stateful packet inspection firewalls to
   network intrusion detection systems. What are the advantages and
   disadvantages of replacing a network intrusion detection system by
   a packet inspection firewall?

   Advantages: The advantage of using packet inspection firewall over
   network intrusion detection systems is the former is proactive
   whereas the later is reactive. Since the packet inspection firewall
   is the gateway between the internal network and outside world, the
   filter itself can drop the packets/connections to protect the
   internal network from attack. However, the network intrusion
   detection systems only alert for network attacks. No immediate
   action can be performed by the system. Another advantage is the
   packet inspection firewall can also help to prevent crashing the
   client due to bug in implementation. This is different from network
   intrusion because in the network intrusion system, it looks for
   traces on network attacks. However, if one of the internal client
   is known to crash with a particular packet format (not an intended
   attack), the packet filter can drop that packet from "hurting" the
   system.

   Disadvantages: When compare to network intrusion detection system,
   the stateful packet inspection firewall is less transparent. There
   is a man in the middle to guard the network traffics and therefore
   the access time is higher. Also, the deployment of new services
   will be more easier in network intrusion detection system than
   packet inspection firewall.

Question 2

   What happens if we modify our memory layout so that stacks grown
   upwards -- does this help? (In other words, does this modification
   allow us to run security-critical code containing buffer overrun
   bugs without any danger of adversarial exploitation?) For each the
   ways we discussed in class to exploit buffer overrun bugs, describe
   the effect this modification has.

   1. Overrun a buffer and overwrite a security-critical piece of
      information.

      This attack is still possible since this is totally depends on
      the memory allocation of the security-critical information
      relative to the location of the buffer. If the information is
      stored after the buffer (higher address), buffer-overrun can
      still overwrite the information.

   2. A slight variant: abuse stdio (overwrite a global variable used
      by stdio; then get stdio to do the dirty work).

      In class, we know that this attack is possible since the global
      variable is stored at address lower than the stack. If these
      process memory allocation is still in use (meaning that there
      are no other information, like heap, global variables, codes,
      are stored after the stack at higher address), buffer overrun
      cannot overwrite any of these variables/information and
      therefore the attack is prohibited.

   3. Stack smashing: overrun a buffer on the stack to put malicious
      code on the stack, and then overwrite the return value to point
      to that malicious code
      
      This is not possible since buffer-overrun cannot overwrite any
      information at lower address (assume that the return address of
      the current frame will be stored at lower address relative to
      the buffer location on the stack). Attackers can put the code on
      the stack, but cannot change any return address to point to the
      malicious code.

   4. Variants on stack smashing: point to malicious code in data
      segment, heap segment, or in environment variables; point to an
      existing library call in libc.

      This attack requires modification of the return address of the
      current frame. Like stack smashing above, since the attacker
      cannot modify any return address, this attack is prohibited.

   5. Overwrite a function pointer stored on the stack (instead of a
      return address on the stack) so it points to your malicious
      code; then wait for the program to call the function pointer.

      This is possible, depends on the memory location of the function
      pointer. If the function pointer is stored after the buffer (at
      higher address), attacker can overrun the buffer and overwrite
      the function pointer to malicious code.

   Finally, does growing the stack upwards allow for any new attack
   methods? 

   Yes, it does.

   Attack 1: On some system, local variables are allocated on the
   stack without initialization when the stack growth. This open a new
   attack by using buffer overrun. Consider the following code:

      f() {
             int x;
	     
	     while (condition)
                 x += 123;
             ... ...
          }

      g() {
             char buff[256];
             gets(buff);
             f();
          }

   Function f uses variable x without initializing it. If the stack is
   growth towards the higher address, a buffer overrun in function g
   can make the initial values of x to be non-zero. This is okay if
   the stack is growth towards lower address since buffer overrun will
   only modify the memory of the caller. Now, since the stack is
   growth towards higher address, buffer overrun can potentially
   modify the initial values of the callee if the system do not
   initalize variables correctly.

   Attack 2: By combining 3,4 and 5 (above), two buffer overruns
   attack is much more easier than the stack smashing alone. In stack
   smashing, the attacker need to precisely estimate the address of
   the malicious code in order to jump to the right place. Here, if
   the stack is growth towards higher address, attacker can simply
   smash the stack with pages of NOPs to create a perfect runway. The
   first buffer overrun creates this runway and ended with malicious
   code. The second buffer overrun overwrite a function pointer to
   point to anywhere on the runway.

Question 3

   The most simpliest way to attack this problem is to use the
   pre-processor to replace all non-bound checking library calls to
   bound checking library calls. However, this requires the
   pre-processor to know all possible non-bound checking library
   calls and therefore, the default is allow, not deny.

   There are two other different approaches to the buffer overrun
   attack. One approach is to prevent the buffer overrun. The other
   approach is to make sure that even if there is buffer overrun, it
   makes no harm to the program.

   The first approach, requires software isolation and bookkeeping of
   buffer at runtime. Compiler can inserts checking code before each
   memory access to the buffer. Bookkeeping of the buffer address and
   size of the buffer is required. On every store instruction, the
   compiler is require to insert code that check the address reference
   by the pointer (register) in order to prevent overwriting other
   variables. This also require compile time hints to tell the insert
   code which buffer this store instruction is trying to modify.

   The second approach, requires that if there is a buffer overrun,
   other stored information will not be altered. One way we can do
   this is to use higher address of the process for allocating
   buffers. For example, if the highest address is 0xFFFF, we can
   allocate 0xE000 to 0xFFFF to be the stack buffer space. A new
   buffer allocation will be started from lower address to higher
   address. Therefore, the buffer growth to higher address when the
   stack growth. In addition, when a new buffer is being allocated,
   the buffer need to be initialized to zero before use. Since the
   buffer allocation in function are separated from other information
   stored in the process address space (separte stack), this prevent
   overwriting of any variable even if there is buffer overrun. And
   since the buffer space growth downwards (towards higher address),
   buffer overrun will only affect callee, where zeroing out the
   buffer before use can prevent altering the initial values of the
   callee buffer. (note tha we also need to disallow global buffer
   allocation in order to prevent the buffer overrun on global buffer
   to overwrite any existing variables. we can do this by forcing all
   global buffer to be local and when it is being reference in a
   function, a new "local" buffer is being allocated and initialize to
   the values of the former. When function return, the buffer is copy
   back to the callee. This requires heavy bookkeeping at runtime.)

@
