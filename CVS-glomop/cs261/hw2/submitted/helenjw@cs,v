head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.23.37.19;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From helenjw@@barque.CS.Berkeley.EDU  Fri Oct 30 14:13:53 1998
Return-Path: helenjw@@barque.CS.Berkeley.EDU
Received: from barque.CS.Berkeley.EDU (barque.CS.Berkeley.EDU [169.229.62.44]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA13949 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 14:13:53 -0800
Received: (from helenjw@@localhost)
	by barque.CS.Berkeley.EDU (8.8.5/8.8.5) id OAA02729
	for cs261-homeworks@@joseph.cs.berkeley.edu; Fri, 30 Oct 1998 14:14:06 -0800 (PST)
Date: Fri, 30 Oct 1998 14:14:06 -0800 (PST)
From: "Helen J. Wang" <helenjw@@CS.Berkeley.EDU>
Message-Id: <199810302214.OAA02729@@barque.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Status: RO

Homework 2	CS261		Helen J. Wang

Question 1: 
~~~~~~~~~~~
SPIF -- Stateful Packet Inspection Firewall
ALF  -- Application Level Firewall
NIDS -- Network Intrusion Detection System

1.SPIF vs. ALF
  Advantages of SPIF over ALF (or Disadvantages of ALF over SPIF): 
  - SPIF performs protection at both the transport layer and application
	layer.  Therefore denial of service attack may not be as detrimental
	to SPIF as to ALF. To counteract on the flooding attack using SYN 
	packets, SPIF can be designed to pass along a max number of SYN 
	packets, and reject additional ones. In this case, ALF will 
	be out of service due to the flooding attack, and denial of service
	would be achieved.
  - SPIF is more efficient than ALFs that performs the same checkings 
	because the packets do not need to travel through the network stack 
	to the application level
  - SPIF is a centralized security code base. The security code
	is therefore more trackable and maintainable for SPIF. ALF, on the 
	other hand, is per application, and is a distributed solution to
	firewalling, which may be hard to maintain, but there are
	advantages of this distributedness such as scalability and
	less complexity as described below under "advantages of ALF".
  - ALF sometimes requires client program modification, where SPIF does not. 
	For example, a telnet ALF requires modifying telnet program
	to communicate with the firewall machine first then the target
	host behind the telnet ALF.

  Advantages of ALF over SPIF (or Disadvantages of SPIF over ALF):
  - ALF is less complex to design because it is targeted on a single
	application. Therefore, it has a smaller code base. SPIF,
	on the other hand, has to consider and maintain states for 
	all security sensitive applications; and also the 
	transport layer states for each connection.
  - Security policies in ALF can be tailored for the specific application 
	in question. As a result, the security policies are more 
	precise and effective. Because SPIF considers 	
  - ALF has better scalability.  Adding a new application to a system 
	only implies adding a new ALF for that application.  For the 
	case of SPIF, adding a new application to the system requires
	re-evaluating and making additions to SPIF which is 
	already very complicated.

2. SPIF vs. NIDS
   SPIF and NIDS solve different problems.  SPIF is for protection, while 
	NIDS is used for detection.  Both are needed in a system.  
	Nonetheless, if one has to be chosen over the other.  The following 
	is a compare and contrast of them.
   
   Advantage of SPIF over NIDS:
   - SPIF prevents an attack by actively dropping the suspicious
	packets at run time, while NIDS can only detect the suspicious 
	behavior, then record for later measures.
   - SPIF hardly get desynchronized with the end host because it keeps 
	states of each connection, and all packets must pass through 
	SPIF to get to the internal host.  This is not the case for 
	NIDS.  NIDS may get desynchronized with the end hosts (e.g.
	exploiting ttl, etc.)
   - Denial of service (flooding) attack is more serious for NIDS than SPIF. 
	NIDS would not be able do its job recording the DOS attack.
	SPIF simply rejects all the packets in this case, which 
	prevents bad packets getting in as well as the good ones.

   Advantages of NIDS over SPIF:
   - NIDS is every easy to deploy.  
   - No policies on NIDS can ever be too conversative. In another word,
	because its nature of passiveness, it is completely not 
	disruptive.  While for SPIF, a overly conservative policy
	can disrupt rightful work (e.g. a research experiement)
	giving false-negatives.
   - Because NIDS is passive, it is not on the critical path
	of packet delivery. SPIF is on the contrary. It has
	to intercept each packet, and process on it.  SPIF
	can become a bottleneck of packet delivery.
   - NIDS can also detect bad behaviors of internal host in addition
	of outside attacks. SPIF, on the other hand, only protects
	internal hosts from outside attacks, but not the reverse.



Question 2:
~~~~~~~~~~~

Growing stacks upward does NOT help with the buffer overrun problem.  
What is inherent in the buffer overrun problem lie in the lack of 
array bound checking, and nature of pointer arithmatics.

Now, I will illustrate the scenarios discussed in class when
stacks grow upwards:
1. Overrun buffer and overwrite a security-critical piece of internal
	state.

   Buffer overrun can still occur in this case if the security-critical
	piece of internal state is declared after the buffer. 

2. A slight variant: abuse stdio (overwrite a global variable used by
	stdio; then get stdio to do the dirty work

   This will still happen because stack is not even in the question.
   Regardless of stack growing upward or downward, buffer overrun
   can still happen in data segment.

3. Stack smashing: overrun a buffer on the stack to put malicious code on
	the stack, then overwrite the return value to point to that
	malicious code.

   This will still happen.  Consider the following example:
	int f() {
	  char buf[20];
	  g(buf);
	}
   In this case, g's return address is above the "buf", therefore
	overrunning buf can overwrite g's return address.

4. Variants on stack smashing: point to malicious code in data segment, 
	heap segment, or in environment variables; point to an existing
	library calls.

   These are all independent of the growing direction of the stack. They
	will all still happen.

5. Overwrite a function pointer stored on the stack (instead of 
	a return address on the stack) so it points to your
	malicious code; then wait for the program to call the
	function pointer.
   
   This can happen very easily for stacks growing upward. For example:
	int f () {
		char buf[10];
		buf = "long string";
		g();
	}
   The function pointer of g() on the stack can be overwritten by the long
	string in the buf.



New attacks:
------------
- In the following example, g's return address can be overwritten in
	a stack growing upward, but not for a stack growing downward.
	int f() {
	  char buf[20];
	  g(buf);
	}
  
- Also, function f() can overrun a buffer, if it call another function say
	k(), if k() has uninitialized security sensitive local variables, 
	they will have the values written by f().  This can only happen
	for a growing upward stack.



Question 3:
~~~~~~~~~~~
1. Turn unsafe calls (e.g., "strcpy") to safe calls (e.g.,"strncpy") 
	through pre-compilation.

2. Compilers insert code for array bound checking. For each pointer, the
	compiler inserts code to maintain the following state: starting
	address, amount of allocation, current pointer position.  With
	these states, it performs array bound checking for each usage
	of the pointer.

3. To alleviate buffer overrunning the security critical data (e.g.,
	"run-as-root" flag) within a subroutine, compilers move the
	declaration of buffers to the very end of the all the variable
	declarations. This way, buffer cannot overrun the security
	critical data unless it is a buffer itself (in which case, compiler
	cannot distinguish which buffer is security critical).

4. To alleviate buffer overrunning the return pointer or function pointer, 
	we divide the stack into 2 areas, and classify the data on the stack 
	into two categories segregated from each. One category is parameters 
	and local variables for different function calls on the stack, while 
	the other include return addresses and function pointers.

@
