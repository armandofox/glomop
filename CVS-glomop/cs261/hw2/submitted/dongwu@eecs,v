head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.31.02.12.53;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From dongwu@@radon.eecs.berkeley.edu  Fri Oct 30 15:44:46 1998
Return-Path: dongwu@@radon.eecs.berkeley.edu
Received: from ithaca.eecs.berkeley.edu (ithaca.EECS.Berkeley.EDU [128.32.244.41]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id PAA14084 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 15:44:46 -0800
Received: (dongwu@@localhost) by ithaca.eecs.berkeley.edu (8.8.5/8.5) id PAA22524; Fri, 30 Oct 1998 15:45:01 -0800 (PST)
Date: Fri, 30 Oct 1998 15:45:00 -0800 (PST)
From: Dong Wu Zhao <dongwu@@radon.eecs.berkeley.edu>
X-Sender: dongwu@@ithaca.eecs.berkeley.edu
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw #2
Message-ID: <Pine.SUN.3.91.981029111239.16489B-100000@@ithaca.eecs.berkeley.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Dong Wu  Zhao
CS 261 HW#2

1. Some abbreviations.
	SPIF = stateful packet inspection firewall
	ALPF = application-level proxy firewall
	NID = network intrusion detection 1.1 Both SPIF and ALPF try to
prevent bad packets from entering the network. SPIF checks the packets at
a much lower level. ALPF checks the packets at application level. So SPIF
is much faster, more general. ALPF is much slower and
application-specific. For ALPF, special-purpose code has be used for each
application. As a result, not every application will be protected, only
the popular ones will be. Whereas, SPIF has a set of policy applied to all
applications. On the other hand, ALPF is much more secured, since it
consider one application at a time, and one can come up with all cases.
Also, it is easy for ALPF to log and control the traffic for a particular
application, as to prevent hackers from stealing valuable things. However,
for a different application, a different ALPF user program or user
interface has be developed. 

1.2 NID monitors a single link for the entire network for all 
applications. It allows the packets to get in the network and monitor the 
activity closely. It does not drop packets. Whereas SPIF just tries to 
prevent bad packets from getting in. The policy script for NID is 
application-specific, that is, each application requires a different 
policy script. If the application's traffic is very complicated and 
unstructured (e.g., telnet), the policy script will be complicated as 
well, and it can easily have holes. On the other hand, for simple and 
structured traffic, NID can tell exactly what is going on; and it can 
give real-time notifications, so that the administrator can quickly trace 
the source of attack and take immediate measures, such as phoning the 
malicious site in question. SPIF is general for all applications; since 
it drops packets, it won't leave much trace for an attack. SPIF is 
faster than NID, since it works in a lower level. 


2. Growing the stack upwards does not help.
	A. Corrupting data. Instead of corrupting the previous variable, 
now an out-of-bound write instruction will corrupt the next variable.
	B. Altering function return address. the adversary can add a 
negative offset instead of a positive offset to a pointer to get to the 
function's return-address memory location and overwrite it.
	C. Corrupting global variables. Out-of-bound writes corrupt the 
next global variables as before since they are stored in the data segment 
in an upward fashion.
	D. Altering function pointer in the stack frame. An out-of-bound 
write can alter the next function pointer instead of the previous one.
	void bar(char *large_array, (funct *) f)
	{
		char *small_array[256];
		(funct *) g=f;
		...
		strcpy(small_array, large_array);
		...
		(funct *)g();
	}
As shown above, function pointer g will be overwritten by the strcpy 
instruction.

	Finally, growing the stack upwards is pretty much the same as 
growing downwards, so it probably does not allow any new attack methods.

3. The following answers might not be compatible with each other.
	A. To have Pascal style run-time range checking, making sure that 
pointers points within bounds.
	B. To have stronger typing. Make sure that type casts are 
explicit, and do compile time check that they are valid. 
	C. Get rid of pointers altogether, like Java does.
	D. Disallow freeing memory, and do garbage collection, so that no 
instruction can manipulate freed memory content.



@
