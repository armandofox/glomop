head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.18.44.17;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From jackchen@@tautog.CS.Berkeley.EDU  Fri Oct 30 06:43:09 1998
Return-Path: jackchen@@tautog.CS.Berkeley.EDU
Received: from tautog.CS.Berkeley.EDU (tautog.CS.Berkeley.EDU [128.32.36.53]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id GAA13368 for <cs261-homeworks@@joseph.cs.Berkeley.EDU>; Fri, 30 Oct 1998 06:43:07 -0800
Received: from localhost (jackchen@@localhost) by tautog.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id GAA11696 for <cs261-homeworks@@joseph.cs>; Fri, 30 Oct 1998 06:43:19 -0800 (PST)
Date: Fri, 30 Oct 1998 06:43:18 -0800 (PST)
From: Jack Chen <jackchen@@tautog.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.Berkeley.EDU
Subject: homework #2
Message-ID: <Pine.HPP.3.96.981030064232.11677A-100000@@tautog.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


Jack Chen
CS261 Homework #2

1. 
A. 

Advantages of stateful packet filter over application level firewall
a1. easier to manage -- you only have one program to keep running instead of a bunch, one for each application. Set-up time and deployment time (assuming that all the rules are correctly implemented already) is quicker. You only have to debug and understa
nd one chunk of code instead of many chunks of code, decreasing your cognitive load.
a2. faster -- Because it is implemented on a low level, the packets don't have to travel all the way up the protocol stack. For a situation where you have a flood of bogus packets, this is a big win. 
a3. one mechanism -- You can aggregate classes of checks into one small, central set of rules. Instead of having to implement the same checks in each application proxy, you catch everything of that class at the front door. 
a4. smaller trusted code base -- Instead of having to get a bunch of application proxies right, you only have to get the packet filter code right.
a5. cross application attacks -- For possible attacks in which the interactions of two applications may cause a breach, you can catch it with centralized state here. You maintain cross-application state, and you screen out those problems.
a6. minimizing damage -- When you detect a problem, you can easily shut down your network and stop further exploitation. For example, let's say that someone does an FTP bounce attack on your system. They manage to insert a .rhosts file, and now they log i
n without any noticeable problems via rlogin. Detecting this in the ftp proxy wouldn't do anything to the telnet proxy in the application level firewall, but here you can stop further damage by shutting everything down until you can find and fix the probl
em.
a7. in currently deployed application firewalls, you often have to run a special version of the client software on the inside or you have to make an extra step of connecting to the firewall first. This might not be transparent enough for users.

Disadvantages of stateful packet filters over application level firewalls
d1. re-evaluation on new applications -- Each time that you upgrade any application anywhere in your network or start using an entirely new application, you have to re-evaluate the security of your packet filter. You may have to add new rules for behavior
s not previously described by your previous packet filter. For an application firewall, you only have to add a new proxy.
d2. stop whole network while upgrading -- Each time that you're reinstalling the packet filter because you've upgraded it due to new applications, you have to stop traffic for all other applications while you switch over. For application level firewalls, 
you can simply start up a new process on the firewall machine for the new proxy, not incurring any network down-time.
d3. less complicated -- Trying to mimic the state of a throng of applications is impossible. Your state diagram would be absolutely huge. Application proxies do this well because there are many specialized application-specific considerations which follow 
a particular application. Implementation of these considerations is easier because an application already knows what you are talking about with high-level  knowledge.
d4. new attacks -- Every time there is a new attack, like when you start using a new application, you have to re-evaluate the security of your firewall. Application firewalls are nice because you only have to re-evaluate that particular proxy.
d5. harder language -- The language to specify security on a lower level has to be very general. Therefore, it is less powerful in some ways. When the language used to specify proxies is compared, the proxy language is very powerful and can be very succin
ct because the language has built into it knowledge of the particular application to which it is targeted. Therefore, it may actually be easier to code on an application proxy level because it is more succinct and much more defined. 
d6. general language holes -- Because the general language of the packet filter is so general, there will be some application-specific interactions which you will not be able to specify. In such a case, you would leave yourself open to a hole since you co
uldn't specify some interactions. If you tried to plug the hole, then you would be moving to the "explicit allow" model, which from class we know can virtually be impossible to get secure.
d7. doesn't protect the internal hosts from buggy stack implementations. Packets on reaching an application firewall must go up the stack and back down before the firewall forwards the information. If some attack was going on in the stack, the firewall wo
uld find it. Then, the internal hosts would not be exposed to such stack bug attacks.



B.

Advantages of a stateful packet filter over a network IDS
a1. active -- Instead of simply detecting attacks, a packet filter can actively prevent them and minimize damage. A packet filter doesn't simply listen and gather information to tell when an attack has taken place, it forwards only valid packets into the 
network. It breaks the topology into two separate networks, thereby guarding the goods.
a2. harder to fool -- An IDS simply listens on the network and gathers information from what goes by. 
Now, before a packet can reach the end host, it has to go through the packet filter. Therefore, attacks where the IDS somehow doesn't get to process a packet, like the TTL and flooding attacks, will not work. 
a3. security tied to network availability -- In the case of IDS's, you can get the IDS machine to drop packets or die all-together by flooding it or breaking into it. In that case, attacks could go on and no one would know what was going on because the ID
S would be down. Certainly, the network admin would know that the IDS is down, but he wouldn't be able to tell what happened after that, which machine was compromised. If a packet filter gets overloaded, then it will start dropping packets. Therefore, if 
it dies, no attacks can take place because no packets can get through to the inside. Now you don't have to worry about trying to figure out which inside machine was compromised after the packet filter failure.
a4. synchronization -- It is easy to get an IDS out of sync with respect to its internal state and the internal state on the target machine it's guarding. You could do this easily by making the IDS drop a packet or doing the TTL attack. However, a packet 
intended for a host on the guarded network must go through the packet filter. This guarantees that you cannot get out of sync because you know everything that goes on to inside hosts.
a5. smaller trusted computing base -- Instead of having to get all computers on the network right, you only have to get one right.

Disadvantages of a stateful packet filter as compared to an IDS
d1. failures don't prevent good traffic -- If a packet filter fails, then you are cut off from the network outside. However, in an IDS system, the majority of hosts, who are doing good things, can still continue their transactions when the IDS dies. You a
ren't crippled by a disk failure or something on the IDS.
d2. bottleneck -- Because everything goes through the packet filter, it can easily become a bottleneck for a large network. 
d3. deployment and maintenance without losing connectivity -- Whenever you start up the packet filter or you have to change it, you have to disrupt network traffic. This could happen a lot since new bugs are found every day. You may do daily maintenance i
f you were a good administrator, and disruptions like this are inconvenient
d4. can't detect insider attacks -- Since you're only concerned with packets from the outside network interface to the inside network interface, you don't see when attacks happen inside your network.
  d5. no host independence -- a security breach on one host means that all other hosts have to suffer. This is the 1 affects many problem. 


2. 
a. No, just because we make the stack frame grow upwards, it does not help. Imagine a situation like this. We are currently in a function F(). F() has a buffer as one of it's local variables, so the stack frame looks like
f()--fr--bufa--------...
for fr=the return address that the execution should jump to after executing f() and bufa=buffer a.
f() calls g() and passes bufa as an argument to g().
The stack would look like
f()--fr--bufa--g()--gr--bufb(which is actually the same address as bufa)
Now, if bufa is overflowed by g writing to it's local copy of the pointer bufa, it could overwrite the return address in g() because the stack frame for g() comes after the buffer in f() and buffers grow upwards. Thus when g returns, it could jump to mali
cious code.

Attacks mentioned in class and the effect with upward stacks.
1. overwriting security critical internal state.
The upward stack doesn't have any effect. If we take the example of the input function overwriting it's boundaries and putting a 1 where the critical "run as root flag" is, this is done within one stack frame. Since it only deals with variables in a singl
e stack frame, frame placement has no effect.

***Note: for 2-5, having stacks grow upwards makes it harder to exploit overwriting stack frame stuff, but it doesn't make it impossible. The same concept of pointers in the function on the stack which write to buffers declared lower on the stack can be o
verrun to achieve the same behavior.

2. stdio attack
If the top function on the stack has a pointer to a buffer somewhere before a stdio function, you could overrun that backwards pointing buffer to overwrite there iob points to. Then, when you returned to your stdio function and you tried to write somethin
g else to iob, you could have the stdio function write to whereever you wanted to.

3. stack smashing
As stated in part a, you can prevent a function from doing this by itself because buffer overrun will write to unused space if there is no frame on the stack after the current function. However, if a function has a pointer to a buffer in a lower stack fra
me, it can overwrite a higher return address. With malicious code in the buffer, overrunning can write data even beyond the memory for the last stack frame, and in this way, that altered return pointer can point to the beginning of the malicious code.
4. variations on stack smashing
The common factor in all the variations is that you overwrite a return address. As we said in #4, this doesn't help because of backward pointers.
5. overwriting function pointers.
Here, again, if you had a pointer to a buffer before such a function pointer, you could overrun that buffer til you overwrote that function pointer. Then, when that function gets executed, your code would take over. We could use the backwards pointing buf
fer to overwrite any function pointer lower on the stack provided that we have a pointer to a buffer which exists somewhere before a function pointer.


3. compiler changes
a. Align array ends at the page boundaries and make the next page empty. This way, if you try to write past the end of an array, you'll get a page falt. This will tell you when a buffer over-run happens.
b. When possible, insert code to dynamically check array bounds on arguments. For example, when you declare an array which is going to receive a command-line argument, insert code to check that the length of the argument is less than or equal in size than
 your internal, statically allocated buffer. You can get the length of an argument by doing a strlen since it is null terminated.
c. When reading an argument from an untrusted source, eg stdin or from the network, read in the information in fixed sized chunks, reassembling them yourself. As you read in a chunk, keep track of how much space you have left in your saved input buffer. I
f the next read overflows this, resize your input buffer and continue. Think of this as using many fgets instead of gets and many freads instead of a read.
d. To solve the stack smashing problem, you can have the compiler write the function return addresses and other critical information to one section of memory. The local variables and other buffers can be written to another part of memory, completely separ
ate from the critical function return and other information. This way, buffer overruns only corrupt user data, not stack frame returns.
e. to solve the specific problem of the "run as root hack," you could imagine allocating all flags and basic date types before buffers in your function stack frame. This way, an over-run won't clobber a vital flag. (this still has many holes)
f. Change all unsafe functions to safer ones, like whenever you see a gets or strcpy, change them to explicit fgets's and strncpy's. Do some bounds checking.

@
