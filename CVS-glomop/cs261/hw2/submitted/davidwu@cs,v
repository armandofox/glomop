head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.20.47.53;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From davidwu@@cs.berkeley.edu  Fri Oct 30 11:01:39 1998
Return-Path: davidwu@@cs.berkeley.edu
Received: from dilbert.cs.berkeley.edu (dilbert.CS.Berkeley.EDU [128.32.131.87]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA13646 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 11:01:38 -0800
Received: from localhost (davidwu@@localhost) by dilbert.cs.berkeley.edu (8.8.8/8.6.9) with SMTP id LAA18784 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 11:01:35 -0800 (PST)
X-Authentication-Warning: dilbert.cs.berkeley.edu: davidwu owned process doing -bs
Date: Fri, 30 Oct 1998 11:01:35 -0800 (PST)
From: David Wu <davidwu@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: my hw 2
Message-ID: <Pine.BSF.3.96.981030110006.18782A-100000@@dilbert.cs.berkeley.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


David Wu (davidwu@@cs.berkeley.edu)
CS 261 Homework #2
Oct. 18, 1998

(Question 1)

Part 1:

Stateful packet inspection firewalls combine the low level packet
filtering with high level application state to provide security.  Like 
packet filtering firewalls, stateful packet inspection works on the packet
level, thus it can examine the packet headers and log and deny suspect
packets.  However, like application-level proxying gateways, known
services such as FTP can be detected and special handling can be done to
properly secure the session (for example, instead of forcing PASV mode under
normal packet filtering firewalls, stateful packet inspection firewalls,
like application-level proxying firewalls, can allow a hole to be open
temporarily for FTP transfers).

Stateful packet inspection firewalls have several advantages compared to
an application-level proxying firewalls.  First, as mentioned, stateful
packet inspection firewalls allow the detection of low level packet tricks
since it operates on a lower level than application-level proxies.  It may
be possible for stateful packet inspection firewalls to detect TCP hijacking,
for example.  Another possible advantage is that since stateful packet
inspection firewalls are lower level, it can be user extended to support
new services.  Application-level proxies, however, typically need to have
new services programmed in in order to support them.  Lastly, stateful
packet inspection firewalls may have better performance since not all
packets need to be examined at the application layer.  Application-level  
proxies, on the other hand, evaluate all packets at the application layer.

There are a few disadvantages of stateful packet inspection firewalls compared
to application-level proxying firewalls.  First, application-level proxying
firewalls allow information hiding: the names of internal systems do not
need to be made known via DNS to outside systems, since only the application
gateway need to be known.  Stateful packet inspection firewalls, on the
other hand, work on the packet level, therefore addresses of internal systems
need to be provided to the outside world.  Another disadvantage is that
stateful packet router will have more complex filtering rules.  Since
stateful packet router operate on complex rules that modify internal
dynamic state, as more rules are added, it may become hard to manage compared
to service specific application-level gateways.  Lastly, stateful packet
inspection firewalls may not be as secure as the application-level proxying
firewall.  Since not all packet data are captured and examined, and coupled
with the difficult and complex filtering rules, security holes may exist that
may be not present in the application-level proxying firewall.

Part 2:

Stateful packet inspection firewalls are similar to network intrusion detection
system in that they both operate on the lower (packet) level.  Both maintain
internal state for analyzing connections and have rules that modify the
state dynamically in response to the packets seen on the network.  Both
can also log suspicious activity based on packet information (i.e., SYN
DoS attacks.) However, stateful inspection firewalls are active participants 
in the communication process, whereas intrusion detection systems are 
typically passive participants.  Stateful packet inspection firewalls are 
actively passing or denying packets to provide security.  Intrusion 
detection systems are used to monitor the network traffic for suspect 
packets.  At best, some intrusion detection system can close down TCP 
sessions, but most are just able to log hacking attempts.

It is clear that the advantage of stateful packet inspection firewalls over
intrusion detection system is that they are indeed active participants in
its security role.  Compared to intrusion detection systems, stateful
packet inspection firewalls can prevent unauthorized use from occurring.
Intrusion detection systems, on the other hand, can only detect such
activity and can usually do nothing about it other than send alerts (of course,
as mentioned above, some may actually send RST packets to close down
the TCP sessions, but UDP services are defenseless).  Stateful packet
inspection firewalls can prevent harmful packets from even showing up in
the internal networks.  Intrusion detection systems, by their nature, cannot.

The disadvantage of replacing a network intrusion detection system by a
stateful packet inspection firewall is that users may be inconvenienced by
having some services denied.  From security principles, most unknown services
will be denied by the stateful packet inspection firewalls.  Intrusion
detection system, by its nature, allows all communication to occur.  
Thus, for some organizations, such as research centers and
universities, detection may be the right level of security versus convenience
compared to firewalls which offer higher security but more inconvenience.
Also, stateful packet inspection firewalls may have performance issues
compared with intrusion detection systems.  If there is heavy load on the
network (legitimate heavy load, that is, not denial of service), firewalls
can be a bottleneck on the network since all traffic must pass through it.
Network intrusion detection systems, however, simply lose the ability to
log some packets.

(Question 2)

Many of the techniques described in class to smash the stack can be easily
modified to work with a stack that grows upwards instead of downwards (btw,
the HP PA-RISC, I've been told, grows its stack upwards).

It's easy to see:

Say you have:

void g(char *buf)
{
}

void f()
{
  char buf[128];
  g(buf);
}

Then the stack looks like:

Lower Address      0x00000000
.                  
.                  ( f() )
.                  ( buf[] )   
.                  ( g() )      <-- TOS
.
.
.
Higher Address     0xffffffff

Oops! Now you have a buffer overrun within g()! 

So, the effect that this modification has to the different ways we have
discussed in class to exploit buffer overrun bugs is very little.  For
example, overruning a buffer is simple if you have a reference to a buffer
passed in from a previous frame. Stack mashing and function pointer 
overwriting can be done this way as well.

Does growing the stack upwards allow for any new attack methods?  

Yes, now automatic variables can be overrun to do the malicious dirty work.

(Question 3)

I've categorized the different types of compiler modifications to prevent
buffer overflow attacks in C.  

--Stack related--

1. Have separate stacks for return addresses (actually, have multiple stacks,
one for the call stack, one for automatic storage, one for exception
handling, etc.).

2. Allocate automatic variables somewhere other than the stack, like in a heap
somewhere (this is probably the same as #1).

These two suggestions are still vulnerable, however.  We note that buffer
overruns can occur anywhere, not just on the stack!  You could overrrun
the heap for example, but that would be a bit harder to exploit.

--Bounds checking--

Have automatic bounds checking on array accesses.  This will prevent out
of bounds array access, which is exactly what buffer overruns are trying
to exploit.

This is very hard to do with a programming language like C that has pointers
and crazy cast-as-you-wish capability (in fact, it is probably impossible).
Another problem is that if you can trick a pointer to point to some location
you'd like to write to, you can then write data to the location you desire.

--Eliminate pointers--

1. Pointers are capabilities to write arbitrary data with in a process'
memory.  If you can get rid of them, you are less vulnerable buffer overruns
(and hordes of other programming bugs).  This typically means you go with
a garbage collected dynamic memory management.  If you combine the elimination
of pointers with array bounds checking, you can prevent buffer overruns
from occuring.

Eliminating pointers is more of changing the C language than the compiler.
Bounds checking, to some degree, can be gained by changing the compiler since
it can insert some bounds checking code on array access (of course not all
situations can be checked).  Similarly, the stack related changes can be
done with the compiler.

Other compiler changes that can help include providing better analysis such
as those obtain from lint or PC-lint.  These products help catch lots of errors
that could prevent buffer overruns.

@
