head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.20.47.55;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From hildrum@@guaymas.CS.Berkeley.EDU  Fri Oct 30 11:01:17 1998
Return-Path: hildrum@@guaymas.CS.Berkeley.EDU
Received: from guaymas.CS.Berkeley.EDU (guaymas.CS.Berkeley.EDU [128.32.33.204]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA13642 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 11:01:17 -0800
Received: from localhost (hildrum@@localhost) by guaymas.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id LAA05437 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 11:01:30 -0800 (PST)
Date: Fri, 30 Oct 1998 11:01:29 -0800 (PST)
From: Kris Hildrum <hildrum@@guaymas.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: Hw #2
Message-ID: <Pine.HPP.3.96.981030105710.5412A-100000@@guaymas.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Kris Hildrum

Question #1

1.  A stateful packet inspection firewall would in general be faster,
since messages don't have to travel up a TCP stack.  A stateful packet
inspection firewall would also be much more flexible.  (Allowing a new
application would be easier, for example.)  You also wouldn't need to
modify software.


    A disadvantage is that you probably aren't going to get the same
security.  It would be much harder to get rid of, for example, all the
useless and possibly dangerous telnet stuff in a packet filter than it
would be in application level firewall.  The flexibility could also be a
disadvantage in that new applications could have new methods of attack
that the packet filter doesn't see.  In an application level firewall, the
new application couldn't be used until it was built into the firewall, and
so it would be harder to have surprise attacks. 

2.  It seems to me that the big difference is that intrustion detection
systems don't mess with the flow of traffic.  One advantage of replacing
and IDS by a SPF is that it could be made harder to evade, in that a SPF
could just drop all the malformed packets that make can make an IDS
ineffective.  An SPF also stops attacks before they occur, rather than
afterwords, which is nice.

One disadvantage is that a SPF, because it actually drops things, can be 
detected.  (An intruder would have to make an effort to check for an IDS,
and if the IDS was setup to not send packets, it would be very difficult
to detect it.)  The hacker can play with the SPF and figure out what works
and what doesn't, and use through trial and error find an attact that gets
through.  With an IDS, the hacker will never know if his or her attack is
being detected. It would also possible to actually catch people with an
IDS.

Question #2.  No, it doesn't make it much more secure.  It does, I think
prevent attacks based on user-written loops.  However, programs with gets
and the like are just as vulnerable since the attacker can overwrite the
return statement in the gets frame rather than the return statement in the
frame in which the buffer exists.
	I believe you could still overwirte the funciton pointer, abuse
stdio and force the system to do a different system call than it meant to
when the stack grows up.

	I can't think of any new attacks.  

Question #3.  The compiler could do array bounds checking, or disallow
gets, but this would be really heavy handed.  Some better solutions might
be:

o warn the programmer when/if "gets" or other problematic code is used
o look for loops that write into arrays and warn the user there could be a
buffer overflow problem if they are reading form user input.
o When stacks growing up it would help to make the stack frames a linked
list rather than in contiguous memory.

Another option is to include an extra word in the stack frame after all
the local variables.  This word would be set to zero, and before
returning, the compiler would insert a check to make sure it's still zero. 
If it wasn't zero, it would exit the program with an error, and otherwise
return normally.  The attacker cannot overwrite the return address without
overwriting this zero word, and cannot write a zero word because gets or
whatever would terminate. 
 
	The above would only work on stacks that grow down.  On stacks
that grow up, the compiler could instead insert a zero word at the
beginning of the frame (lowest address), and before jumping to the return
address, the compiler could insert a check on the word and proceed only if
it was still zero.  The hacker couldn't use a buffer in the calling
function to overwrite a buffer in the called function without filling the
zero word with something other than zeros. 

	At least in the second case, to be effective it would require
recompiling and replacing all libraries.  In either case, would add
overhead to the running program.  


@
