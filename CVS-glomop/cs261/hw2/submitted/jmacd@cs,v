head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.20.47.55;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From jmacd@@paris.CS.Berkeley.EDU  Fri Oct 30 11:54:30 1998
Return-Path: jmacd@@paris.CS.Berkeley.EDU
Received: from paris.CS.Berkeley.EDU (paris.CS.Berkeley.EDU [128.32.34.47]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA13727 for <cs261-homeworks@@joseph.cs.Berkeley.EDU>; Fri, 30 Oct 1998 11:54:30 -0800
Received: (from jmacd@@localhost) by paris.CS.Berkeley.EDU (8.8.3/8.8.2) id LAA24410; Fri, 30 Oct 1998 11:54:43 -0800 (PST)
Message-ID: <19981030115442.48523@@paris.CS.Berkeley.EDU>
Date: Fri, 30 Oct 1998 11:54:42 -0800
From: Josh MacDonald <jmacd@@paris.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.Berkeley.EDU
Subject: hw2
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
Status: RO

Josh MacDonald
CS261 Fall 1998

1.

The advantage to stateful packet inspection is that it can be
implemented more efficiently than application-level proxies due the
the latter's complexity.  Consequently, they offer a significantly
less expressive security-model and can therefore implement only a
coarse security policy.  It is certainly possible to prevent some
attacks with the state of various TCP connections.  An
application-level proxy can run through a complete application session
before forwarding some protocols where user-interaction is not
required (e.g., mail transport).  The stateful packet filter must
govern the session by only accepting or rejecting packets.  Its form
of admission control does not, from the description provided, cover
the ability to modify or delay packets, limiting its capabilities
compared with the application-level proxy.

The difference between network intrusion detection systems and
stateful packet filters is presumably their intent, and therefore
function.  In a general discussion, all three perform the same logic,
are characterized by their efficiency, expressiveness, and resource
requirements, and are parametrized by their capabilities selected from
a list: ability to insert packets, ability to delete packets, ability
to delay packets, ability to use state.

2. For the 5 examples listed in the assignment, `a' through 'e':

a. For the static buffer overrun attack, there is no difference if the
stack grows upwards, since the buffer is not on the stack (for
example, the sendmail running_as_root flag bug).

b. The stdio abuse is similar to the above.

c. The stack smashing attack is not improved with changing the stack
growth direction because either way, the buffer sits between the
caller's and callee's stack frame.  If the stack grows upwards, the
stack-smashing attack is to replace the callee's (strcpy's, for
example) return address, instead of the caller's return address.

d. This variant is similar to the above.

e. This attack is potentially more difficult with the stack growing
upwards because you can only potentially modify function pointers
allocated after the buffer you are overrunning on the stack, as
opposed to potentially being able to modify the stack frame of any
ancestor in the call chain.  (Of course, it is not altogether uncommon
to see a program using negative indexing of a pointer; these instances
permit the opposite set of attacks whether the stack grows up or
down.)

3. The compiler could place return addresses on a different stack to
prevent buffer overruns from modifying them.  This isn't enough, of
course.  What to do about function pointers and variables?  Bounds
checking is neccesary but difficult to do efficiently.  Combining
static analysis with bounds checking to eliminate runtime tests is
likely to be efficient enough.  To be extremely sure, a C interpreter
could be written, its correctness established, and used to execute the
program source code directly.



-josh

@
