head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.12.02.02.18.33;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From pchong@@boopsie.ml.org  Tue Dec  1 16:36:04 1998
Return-Path: pchong@@boopsie.ml.org
Received: from cs2.CS.Berkeley.EDU (cs2.CS.Berkeley.EDU [169.229.60.56]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id QAA10876 for <daw@@joseph.CS.Berkeley.EDU>; Tue, 1 Dec 1998 16:36:03 -0800
Received: from zonker.waldenet.berkeley.edu (r-491a.IHouse.Berkeley.EDU [169.229.54.154]) by cs2.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id QAA07906 for <daw@@cs.berkeley.edu>; Tue, 1 Dec 1998 16:36:36 -0800 (PST)
Received: (from pchong@@localhost)
	by zonker.waldenet.berkeley.edu (8.9.1/8.9.1) id QAA16465
	for daw@@cs; Tue, 1 Dec 1998 16:37:07 -0800
From: Philip Chong <pchong@@boopsie.ml.org>
Message-Id: <199812020037.QAA16465@@zonker.waldenet.berkeley.edu>
Subject: HW2 (fwd)
To: daw@@cs.berkeley.edu
Date: Tue, 1 Dec 1998 16:37:06 -0800 (PST)
Reply-To: pchong@@cs.berkeley.edu
X-Mailer: ELM [version 2.4 PL25]
Content-Type: text
Status: RO

Forwarded message:
>From pchong Mon Nov  2 09:09:20 1998
Subject: HW2
To: cs261-homeworks
Date: Mon, 2 Nov 1998 09:09:20 -0800 (PST)
Reply-To: pchong@@eecs.berkeley.edu
X-Mailer: ELM [version 2.4 PL25]
Content-Type: text
Content-Length: 3495      

Sorry for the slippage.



CS261 Homework 2
Philip Chong


1.1)

    One advantage to using stateful packet inspection firewalls (SPIF)
over application-level proxy firewalls is that the SPIF does not require
a complete implementation of the protocol being firewalled;  the SPIF
can be implemented more simply, and thus SPIFs can be smaller and faster.
    A disadvantage of SPIFs vs. proxies is that the SPIF requires the
state of the server be observable.  For the FTP example given in the
question, the port of the data channel must be available to the SPIF.
For this example, it is easy to determine the state of the server.
However, other protocols may have relevant server state which is not
observable, and so a SPIF may not be able to perform appropriate
forwardings.
    Another disadvantage of SPIFs as compared to proxies is that
protocol sanitization is more difficult.  A proxy can take incoming
requests and reword them to be "more appropriate" to the real server
behind the firewall.  This can be a benefit if the server has known
holes so that exploits can be neutralized, or if there are
commands which are otherwise undesirable.  This is difficult to do with
SPIFs, which do not proxy connections.
    Common features between SPIFs and proxying firewalls include the
ability to delete/drop packets crossing the firewall, and the need to
add additional code to the firewall as complex protocols are added.



1.2)

    An advantage of SPIFs to intrusion detection systems (IDSs) is that
SPIFs can delete/drop packets crossing the firewall;  passive IDSs 
can only log "bad" packets/events, while active IDSs cannot completely
neutralize attacks (counter packets may be too late, or there may
not be any appropriate counter action for some attacks).
    A disadvantage to SPIFs is that there is a performance penalty
as packets cross the firewall;  an IDS, as an observer, does not
add to the packet delay.



2)

    A buffer overrun attack made possible with upward-growing stacks is to
initialize local variables arbitrarily.  For example, consider the
C code:

void bar(void) {
    int i;
    ...
}
void foo(void) {
    ... /* overflow here */
    bar();
}

If bar() somehow uses the value i before it is set, a buffer overflow
in foo() can set i arbitrarily.  This is admittedly more difficult
to take advantage of;  not only must there be a buffer overrun in foo(),
but bar() must have a variable reference before assignment (which can
be caught statically at compile-time).



3)

    An idea (from Immunix Stackguard,
http://www.cse.ogi.edu/DISC/projects/immunix/StackGuard/ ) is to
place "canary" values on the stack at the start of every function,
and just before returning, check the canary value to ensure no change
has been made.  If the canary value has changed, then it is likely the
return address (immediately following the canary on the stack) has been
touched by a buffer overrun.  ("Canary" comes from the use of canaries
in mines to detect hazards.)  A nice value to use for a canary is 0;
this ensures that an attempt to restore the canary as part of an
overrun will fail if the overrun is due to a string operation.

Another idea (with help from the O/S) is to make the stack non-executable.
This can be done by tagging all stack pages as non-executable.  This
certainly prevents attacks which place code on the stack;  it
may cause problems with programs which legitimately construct
code on the stack (just-in-time compilers may do this, for instance).

@
