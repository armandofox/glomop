head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.23.37.19;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From mikechen@@cs.berkeley.edu  Fri Oct 30 15:32:34 1998
Return-Path: mikechen@@cs.berkeley.edu
Received: from cs2.CS.Berkeley.EDU (cs2.CS.Berkeley.EDU [208.1.75.56]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id PAA13996 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 30 Oct 1998 15:32:33 -0800
Received: from u7.CS.Berkeley.EDU (u7.CS.Berkeley.EDU [128.32.44.131]) by cs2.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id PAA13150; Fri, 30 Oct 1998 15:33:25 -0800 (PST)
Received: from localhost (mikechen@@localhost) by u7.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id PAA24500; Fri, 30 Oct 1998 15:32:42 -0800 (PST)
X-Authentication-Warning: u7.CS.Berkeley.EDU: mikechen owned process doing -bs
Date: Fri, 30 Oct 1998 15:32:42 -0800 (PST)
From: Mike Chen <mikechen@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: Michael Chen <mikechen@@cs.berkeley.edu>
Subject: hw2 v1.0
Message-ID: <Pine.GSO.3.96.981030152827.24442B-100000@@u7.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

1. Packet Inspection Firewall

a) Packet inspection firewall vs. application proxy

adv.
- transparency: the clients don't have to know about it
- faster
    - 1 connection instead of 2.
    - checks are done using low-level routines

disadv.
- coarse-grain: use sets of rules to decide, can't protect against application
errors
- has to know all the bugs apps behind the firewall may have
- the application proxy is likely to be simpler and thus more correct


b) Packet inspection firewall vs. IDS (assume look but not modify)

adv.
- can drop attacks and bad packets

disadv.
- IDS doesn't drop packets yet detects attacks. so it's better for research
communities.


2. Buffer overrun
a) depending on the order the vars are declared, buffer overrun can
   still overwrite internal state.  can't overwrite vars in the caller though.
b) if the stdio segment if below the stack, then it's safe
c) if the return address is stored below the buffers, then buffer-overflow
   can't overwrite the return address.  see (f2).
d) same as c)
e) buffer overflow can still overwrite function ptrs, if the ptr is declared
   after the buffer.

f) New Attacks:
   1) first overflow the buffer into unused space.  later, vars will take up 
      the value if they aren't init. properly.
   2) if you pass ptrs to your children, then buffer-overflow can still
overwrite
      return addresses and everything above it.     


3. Making the C compiler protect against buffer-overflow.
a) software fault isolation:
   bracket each buffer with unmapped pages, so buffer-overflow can't overwrite
   anything else 
b) disallow ptr arithmatic, store buffer size, and check to see that each
accesss is within the bounds

Mike

@
