head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.30.18.44.18;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@CS261 Homework 2
Jimmy Shih

Question 1:

SPIF (Stateful Packet Inspection Firewall)
ALPF (Application-Level Proxying Firewall)
NIDS (Network Intrusion Detection System)

Advantages of SPIF over ALPF:
1. The SPIF is faster because it is at a lower layer. 
2. The SPIF is faster because there is only one connection between 
the external host and the internal host. In contrast, the ALPF is 
slower because it has a split connection between the external host 
and the internal host.
3. The SPIF is safer because it has a smaller trusted computing 
base. The SPIF places all the security at one place and uses one 
security mechanism for every application. In contrast, the ALPF 
places security at each application and uses different security 
mechanisms for different applications. New applications will 
need their own security mechanisms and some applications might 
not even have any security at all.
4. The SPIF is more secure because it can coordinate security 
between applications. In contrast, the ALPF totally isolates 
applications from each other.

Disadvantages of SPIF over ALPF:
1. It is harder to specify the security policies for the SPIF because it 
needs to deal with things at a lower level.
2. The SPIF needs to keep more states because it doesn't have the 
application knowledge to optimize on things. 
3. For a particular application, the SPIF is less secure because it 
doesn't have the application knowledge.
4. The SPIF is less flexible because it can't have different 
mechanisms for different applications. It is harder for the SPIF to 
tailor to a specific application's needs.

Advantages of SPIF over NIDS:
1. The SPIF is more secure because every packet needs to go 
through it.
2. The SPIF is more secure because it can actively control things. 
3. The SPIF can keep less states because it can always drop packets 
to shed load.
4. The SPIF is more secure because failures of the SPIF mean 
denial of service. In contrast, failures of the NIDS can lead to a 
security breech.
5. The SPIF doesn't need a training period. In contrast, a NIDS 
might be vulnerable to attacks during the training period.

Disadvantages of SPIF over NIDS:
1. The SPIF represents a performance bottleneck because 
everything needs to go through it. In contrast NIDS isn't a 
performance bottleneck because it doesn't have to check for 
every single packet. It can randomly check for break-in attempts. 
2. The SPIF can not protect against internal attacks whereas the 
NIDS can prevent an internal host from attacking another 
internal host.
3. The SPIF needs to do all the security check quickly because all 
the packets need to go through it in real-time. In contrast, the 
NIDS can take its time checking for hidden attacks because it can 
do things off-line. 
4. A SPIF is harder to install than a NIDS.
5. A SPIF needs to have lots of knowledge about the internal hosts 
because it is actively protecting them. In contrast, a NIDS doesn't 
need to know that much about the internal hosts because it serves 
just as a passive entity.

Question 2:

2.1 What happens if we modify our memory layout so that stacks 
grown upwards -- does this help? (In other words, does this 
modification allow us to run security-critical code containing buffer 
overrun bugs without any danger of adversarial exploitation?) 

	An upward growing stack makes it harder to use the trick of 
over-running a local buffer in the current stack frame to overwrite the 
values in the previous stack frames. But an upward growing stack 
can't protect the data in the current stack frame any better than a 
downward growing stack can. An upward growing stack also can't 
protect the values in the previous stack frames if the current stack 
frame has access to a buffer located in those frames. It also can't 
protect the values in the other segments if the current stack frame has 
access to a buffer located in those segments.

2.2 For each the ways we discussed in class to exploit buffer overrun 
bugs, describe the effect this modification has.

1. Overrun a buffer and overwrite a security-critical piece of 
internal state.

If the internal state is in the same stack frame as the buffer, then 
an upward growing stack doesn't help any better. If the internal state 
is in the previous stack frames, then it will be harder with an upward 
growing stack. But you can still overwrite the internal state if you 
have access to buffer in the previous stack frames such that when it is 
over-run, it can overwrite the internal state.

2. A slight variant: abuse stdio (overwrite a global variable used by 
stdio; then get stdio to do the dirty work) 

The global variable is stored in the data segment. So if you have 
access to a buffer in the data segment from your current stack frame, 
then you can overwrite the global variable by over-running the buffer. 
So an upward growing stack doesn't help any better than a downward 
growing stack.

3. Stack smashing: overrun a buffer on the stack to put malicious 
code on the stack, and then overwrite the return value to point to 
that malicious code 

With a stack growing upward, it is harder to overwrite the return 
value. You can still overwrite the return value if you have access 
from the current stack frame a buffer in the previous stack frames 
such that when the buffer is over-run, it can overwrite the return 
value.

4. Variants on stack smashing: point to malicious code in data 
segment, heap segment, or in environment variables; point to an 
existing library call in libc.

With a stack growing upward, it is harder to overwrite the return 
value. You can still overwrite the return value if you have access 
from the current stack frame a buffer in the previous stack frames 
such that when the buffer is over-run, it can overwrite the return 
value.

5. Overwrite a function pointer stored on the stack (instead of a 
return address on the stack) so it points to your malicious code; 
then wait for the program to call the function pointer.

With an upward growing stack, it is harder to overwrite the 
location of a function pointer stored on the stack. But you can 
overwrite the function pointer if the function pointer is in the current 
stack frame or if you can access from your current stack frame a 
buffer in the previous stack frames such that when the buffer is over-
run, it can overwrite the function pointer.

2.3 Finally, does growing the stack upwards allow for any new 
attack methods?

You can write ahead into the unallocated region of the next stack 
frame. Then if the next procedure call doesn't initialize all the local 
variables, then those uninitialized local variables will contain the 
previously written values.

Question 3: 

To detect buffer-overflow attacks:
1. The compiler can perform some static checks. For example, the 
compiler can check the bounds on statically declared arrays. 
2. The compiler can perform some dynamic checks by inserting 
code into the program. For example, the compiler can insert code 
to make sure the program is only accessing allocated memory.
3. The compiler can try to prove the correctness of the code against 
buffer-overrun problems, then gives warnings about the places 
where there might be problems
4. Assuming the code isn't buggy, the compiler can add code to 
check the validity of inputs from the outside world. 

To prevent buffer-overflow attacks:
1. The compiler can make C a safer language by replacing the 
dangerous library calls with the safer version of the library calls.
2. The compiler can disallow dangerous C features like implicit 
casting.
@
