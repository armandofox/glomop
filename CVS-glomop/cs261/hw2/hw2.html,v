head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	98.10.16.20.55.43;	author iang;	state Exp;
branches;
next	1.1;

1.1
date	98.10.16.20.54.19;	author iang;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<html><head><title>CS261 Homework 2</title></head>
<body bgcolor="white">
<h1 align="center">CS261 Homework 2</h1>

<h2>General notes</h2>
<p>Give detailed answers to each of the following problems.</p>

<p>This problem set is due Friday 30 October.
Send your answers in plain ASCII text by email to
<a href="mailto:cs261-homeworks@@joseph.cs.berkeley.edu"><tt>cs261-homeworks@@joseph.cs.berkeley.edu</tt></a>.
Alternatively, if you prefer to use dead trees, you may hand in
your solutions in class on that Friday.</p>


<h2>Question 1</h2>
<p>A <em>stateful packet inspection firewall</em> is roughly
a cross between a packet filter and a application-level proxying firewall.
It acts like a packet filter in the sense that, for each incoming
packet it sees, it decides (somehow) whether to forward that packet;
however, it acts like a firewall in that it keeps track of the
state of connections in progress and uses this information to
dynamically adapt its security policy.
A stateful packet inspection firewall might not even have any TCP/IP stack
of its own.

<p>For instance, a stateful packet inspection firewall's security
policy might look something like this.
Initially, we disallow all connections to internal machines.
However, when we see an outgoing TCP SYN packet from an internal host H
on port P to an external host H' port P', we update our internal state
to allow any subsequent TCP packets with the ACK bit set to flow from
H',P' to H,P.
If H later closes that TCP connection (e.g. by sending a FIN or RST packet),
then we return to our initial state, so that H' can no longer send
any packets to H.

<p>Obviously more complicated policies are required for applications
such as FTP.
In this case, we may use analogous techniques to those we have seen
in application-level proxying firewalls.
For instance, to handle outgoing FTP, we might search the payload portion of
all outgoing packets on a FTP control channel; when we see the client
send PORT and RETR commands (which ask the server to send a specified file
to the client on some new TCP connection), we may open a temporary hole in
the firewall to allow that new TCP connection through.
Real stateful packet inspection firewalls often end up implementing
many of the same checks found in an application-level proxying
firewalls; however, those checks are implemented by low-level
routines which modify internal dynamic state rather than by
application-level proxies.

<p>With this background, the question is in two parts:
<ol>
<li>Compare and contrast stateful packet inspection firewalls
to application-level proxying firewalls.  What are the advantages
and disadvantages of replacing an application-level proxying firewall
by a stateful packet inspection firewall?
<li>Compare and contrast stateful packet inspection firewalls
to network intrusion detection systems.  What are the advantages
and disadvantages of replacing a network intrusion detection system
by a stateful packet inspection firewall?
</ol>

<h2>Question 2</h2>
<p>We have seen in class that buffer overrun bugs in security-critical
code may allow attackers to smash the stack, overwrite the return address
to point to arbitrary malicious code, and cause the processor to jump to
that code when the current function returns.
This works because stacks grow downwards (towards smaller addresses)
on most popular modern architectures;
and because in the stack frame for a function invocation <tt>f()</tt>,
any buffers allocated on the stack by <tt>f()</tt> appear below
the return address pointing to <tt>f()</tt>'s caller.

<p>What happens if we modify our memory layout so that stacks grown
upwards -- does this help?
(In other words, does this modification allow us to run security-critical code
containing buffer overrun bugs without any danger of adversarial exploitation?)
For each the ways we discussed in class to exploit buffer overrun bugs,
describe the effect this modification has.

<p>Finally, does growing the stack upwards allow for any new attack methods?

<h2>Question 3</h2>
<p>This is another brainstorming question; give as many good answers as
you can.

<p>As we saw in class, C programs are commonly prone to buffer-overflow attacks.
What changes could be made to the <em>C compiler</em> to help protect against
(or prevent) these attacks?
</body></html>
@


1.1
log
@*** empty log message ***
@
text
@d88 1
a88 1
<p>As we saw in class, C programs are commonly prone to stack-munging attacks.
@
