head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	98.09.17.02.40.04;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	98.09.17.02.39.19;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.09.16.19.44.40;	author daw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@Below are listed some security holes, which we described in the
third lecture to illustrate how they violated prudent design principles
for secure systems.
Your task is to fix them from first principles.
(Don't merely propose a narrow patch which just happens to fix
this particular problem; suggest a broad design pattern which would
fix all related holes of this class.)
Which, if any, of the principles did you use?
1. The ftpd/gnutar interaction.
2. Imperfect bookkeeping in sendmail leading to holes in alias expansion
   and program execution.
3. Complete mediation in Java.
4. Tractorbeaming wu-ftpd.

Consider a malicious Java applet which somehow manages to get access
to confidential information.  List some covert channels it could
use to leak that information to a colluder at large somewhere in the
network.

Imagine a system which does strong authentication at the start
of a TCP session.
1. If no other cryptography is used, how do you break this?
2. Suppose now that the session (after authentication) is encrypted
   in 3DES ECB mode.  How do you break this?
3. What if 3DES CBC mode is used instead of 3DES ECB mode -- how do
   you break that?
4. What is the right way to fix these weaknesses?

Consider the following proposal for fixing the weaknesses in DNS:
each DNS record is signed with the relevant authority's public key
(so cs.berkeley.edu's record is signed by berkeley.edu, berkeley.edu's
record is signed by edu, and edu's record is signed by the root key).
This way, when you do a query and get back a DNS record, it will be
self-authenticating.
Suppose that negative responses (of the form "there is no entry for
the domain www.berkeley.edu") are not signed or authenticated in
any way.
1. Can you see any weaknesses that might result?
2. Suppose you wanted to implement authentication of negative responses
   in a way that allows them to be cached.  How would you do so?
@


1.2
log
@*** empty log message ***
@
text
@d16 1
a16 1
to confidential information.  List all the covert channels it could
@


1.1
log
@*** empty log message ***
@
text
@d39 2
a40 1
2. How would you fix this?
@
