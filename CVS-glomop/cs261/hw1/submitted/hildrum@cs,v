head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.18.32.12;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From hildrum@@guaymas.CS.Berkeley.EDU  Fri Oct  2 10:41:21 1998
Return-Path: hildrum@@guaymas.CS.Berkeley.EDU
Received: from guaymas.CS.Berkeley.EDU (guaymas.CS.Berkeley.EDU [128.32.33.204]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id KAA10328 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 10:41:20 -0700
Received: from localhost (hildrum@@localhost) by guaymas.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id KAA26048 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 10:38:15 -0700 (PDT)
Date: Fri, 2 Oct 1998 10:38:14 -0700 (PDT)
From: Kris Hildrum <hildrum@@guaymas.CS.Berkeley.EDU>
Reply-To: Kris Hildrum <hildrum@@guaymas.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: 261 Homework
Message-ID: <Pine.HPP.3.96.981001154242.25629A-100000@@guaymas.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


1.  I wouldn't allow the use of tar with ftp.  If I felt there was really
good reason to allow tar, I would definately not allow arbitary arguments
to the tar command.  (Maybe I'd create a command like gettar where the
only arguments were the same sort of things you could send to an mget
command.)  This is the principle of least priviledge and keeping it
simple.

2.  I would not treat email addresses the same as program execution.  The
few cases where one might want program execution (.forward files,
perhaps), I'd make exceptions.  This is the principal of least priviledge
and the principle of keeping it simple.

3.  The principle to focus on here is simplicity.  It's very hard to
ensure that every access to a possibly security critical thing is mediated
by the security manager.  One possible approach is to require the user to
use more calls to get access, for example, first requiring one call to get
a ticket to do X, and a second call to do X that checks the ticket.  This
would still not be very good.
	One could also be very restrictive in what is allowed.  For
example, only allowing writes in /tmp/java.

4.  Fixing this would require redesigning the operating system so that
ftpd could get its work done without having to become root.  This would
apply the priciple of least-priviledge.

Question #2:
	The applet could send the information directly back to the server.
The applet could sent "normal" information (ie, stuff having to do with
program exectution) back to the server, sending messages with an even
number of bytes as a 0 and messages with an odd number of bytes as a one.
The applet could use the pause between message sent to the server to send
information.

Question #3
1.  Just hijack the session as described in the paper.  
2.  You can still hijack the session, but it gets harder to use.  However,
the case isn't so bad, because you can guess what commands the user is
sending, and what the server is sending back.  You might be able to guess
that the first thing the user sends is "pine" and then the telnet session
send the user back the instructions to draw the screen.  Based on this
guessing, you could build a table that maps the encrypted text to
decrypted text.  You could, after hijacking the connection, replay these
packets at will.  Possibly, you'd be able to have enough packets that you
could send any desired command.

3.  This makes things harder, but not too much harder.  Most of the
messages sent from the user are not going to be bigger than a block.  In
fact, they probably will be single characters.  Plus, assuming the IV is
the same in the whole connection, you'll always be able to identify the
first block of any message.   So, you could still build a table as
described above.  It would just be more difficult.

4.  The right way is to include a MAC of some sort.  The MAC must
authenticate not just the message itself, but also something like the
sequence number so that packets cannot be replayed.  So, you'd want to
hash the message along with the sequence number, encrypt it, and stick it
on to the end of the message.  

Question #4
1.  Yes.  People are still very vulnerable to denial of service attack.
Anytime a message goes out asking for X.Y.com, the hacker could send a
message back saying that X.Y.com does not exist.  Further more, if
target.com is trying to communicate with X.Y.com, the hacker can send a
message to X.Y.com saying that target.com does not exist.
	It is possible that programs which try to do a reverse lookup and
find that it fails will assume that the source is who it says it is.  (For
example, universities may not always put temporary IP addresses into the
DNS server; some programs may be built to accomodate this.)

2.  I don't see any particular problem with this.  If you get a negative
response saying that "www.berkeley.edu" does not exist, it should be
signed by the "berkeley.edu" name server.  Then put "www.berkeley.edu"
into the cache.  Add a bit to the cache specifing whether it the entry
exists or does not exist.  
	If you don't want to add a bit to the cache, you could put all
negative entries into the cache with 0000... as the public key.  Then, if
you do a cache lookup and find the key is 00000 then you'll know the thing
involved does not exist.  For positive entries, you put the public key of
that entry in the cache.  



@
