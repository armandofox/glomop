head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.23.30.27;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From mikechen@@cs.berkeley.edu  Fri Oct  2 16:33:17 1998
Return-Path: mikechen@@cs.berkeley.edu
Received: from u0.CS.Berkeley.EDU (u0.CS.Berkeley.EDU [128.32.44.124]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id QAA11082 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 16:33:17 -0700
Received: from localhost (mikechen@@localhost) by u0.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id QAA19846; Fri, 2 Oct 1998 16:30:12 -0700 (PDT)
X-Authentication-Warning: u0.CS.Berkeley.EDU: mikechen owned process doing -bs
Date: Fri, 2 Oct 1998 16:30:12 -0700 (PDT)
From: Mike Chen <mikechen@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: mikechen@@cs.berkeley.edu
Subject: cs261 hw1
Message-ID: <Pine.GSO.3.96.981002162727.19844A-100000@@u0.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


QUESTION 1
----------
1) false-safe defaults.
   If the ftpd has to allow tar to run, it should first deny everything and 
   then explicitly allow the subset of tar commands/flags that is safe to run.

2) false-safe defaults.
   Deny everything and then explicitly allow where addresses could appear.  
   Make sure you check those places well.

3) separation of privilege.
   Require more than one check before granting access to an object, to minimize 
   the chance of oversight.

4) sandbox and code confinement, least privilege
   Treat wu-ftpd as untrusted code and verify each access to protected
   resources.  Also, we can seperate wu-ftpd into multiple programs that 
   does not require privilege elevation.



QUESTION 2 - Java Applet
------------------------
If the attacker has some control of the server:
1) Since the applet can open network connections back to the server it 
   came from, it can simply upload the confidential data back to the server.    
2) The applet can talk to a proxy on the server which then connects to the 
   attacker machine.

If the attacker has no control of the server:
1) Look for services like ftp and use port bouncing to connect to evil.com.
2) If sendmail is running on the server, then send email to evil.com.
3) Generate some URLs pointing to evil.com which will send the the confidential 
   data when clicked on (either using GET or PUT).  Since the URLs generated is 
   in HTML and is displayed by the brower, it can get around the security model 
   imposed on Java applets.
4) combine 1) and 4)



QUESTION 3 - TCP
----------------
1) Easy.  The usual TCP-hijacking techniques after the authentication has
   completed.
2) Without knowing the keys, the attacker can do replay attacks, or do block
   swapping.
3) The attacker can add blocks to the end of an encrypted messaeg without being 
   detected, and introduce controlled changes in the following decrypted
   plaintext block.
4) Use MAC to authenticate each message.


QUESTION 4 - DNS
----------------
1) The obvious answer is denial of service.
2) Each negative response is signed with the relevant authority's public key.  
   For example, a negative response of the form "there's no entry 
   for berkeley.edu" is signed by edu.  The response can then be 
   marked as verified and cached for performance.  In addition, 
   the public keys should also be cached.
   

@
