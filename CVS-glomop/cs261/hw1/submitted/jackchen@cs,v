head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.18.32.13;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From jackchen@@tautog.CS.Berkeley.EDU  Wed Sep 30 12:47:31 1998
Return-Path: jackchen@@tautog.CS.Berkeley.EDU
Received: from tautog.CS.Berkeley.EDU (tautog.CS.Berkeley.EDU [128.32.36.53]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id MAA00412 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Wed, 30 Sep 1998 12:47:30 -0700
Received: from localhost (jackchen@@localhost) by tautog.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id MAA03245 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Wed, 30 Sep 1998 12:51:26 -0700 (PDT)
Date: Wed, 30 Sep 1998 12:51:26 -0700 (PDT)
From: Jack Chen <jackchen@@tautog.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: home ork #1
Message-ID: <Pine.HPP.3.96.980930125037.3082I-100000@@tautog.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


Jack Chen
CS261 homework #1

question 1
1. gnu tar in ftpd
Fix this by least privilege. Any operation run by someone within the context of another program, like FTP, has no privileges until it is deemed necessary. Here, make everything run within FTP run as nobody until an operation needs more priveleges. Then, w
hen trying to rsh, the server will not grant this privilege and it will fail.
2.incomplete bookeeping in sendmail
 Here are two ways to fix this. programs are supposed to be small, right? don't run sendmail and run something a lot lot smaller. If you have to run a send-mail like program, sandbox it so it only gets access to mail stuff. This will prevent accidental pr
ogram executions from doing anything harmful.
3. mediation in java
Again sandboxing will solve many problems. Only allow java programs to run in restricted address spaces and restricted file system areas. Don't give access to other subsystems. Also, for security problems like the mkdir thingy, why didn't they move the se
curity check into the actual sensitive operation itself. Then they wouldn't have to remember all 70 cases. You could try to bring the check down to the level of the critical operation, but then it is still vulnerable to race conditions, ie making a signal
 happen and somehow replacing the checked path with your own. Just restrict what can be mkdir'ed to a small local program area. (have to present a valid capability to the mkdir program itself)
4. tractor beaming
use least privelege. Don't just give root access just because you have to check something small. Make a way of checking that small thing only, and give that heightened privilege to the FTPD.

Question 2
I don't know the intimate details of java security, but...
1. connect back to the server via FTP and dump the information. Then we can distribute it any way we want. (any variation of this)
2. I might check for shared address space between the browser and java applet. I would imagine there would be some, and if so, then we could imagine dumping a program which packaged up the information and which could mail us the information at a later dat
e. The browser has the ability to save programs on disk, so you could imagine giving the user instructions to run that program somehow unknowingly. Maybe you would call the program, "ls"
3. If I'm correct, you can have an applet interact to make the browser window go to a URL. I'd go to one which had a mailto: URL which I could use to send the information to myself.

Question 3
1. After authentication, the session is still open to man in the middle attacks. Some attacks are
a. Ian's character for character telnet insertion, 
b. guessing sequence numbers and packet spoofing. Here, we can either flood the sender and bring it down and send our own or try to beat the sender's packet to the receiver with our own.
c. send a whole bunch of packets to the receiver and move the sliding window out of the range of the sender's window. Then, we can do whatever we want to and the sender will just sit there dumb. The receiver will drop all the sender's packets because they
 are outside the window.
2. Since the sender's keystrokes are packaged up in one keystroke per packet, we can simply read the packages off the wire and memorize which packet belongs to which letter. The packets will look the same since each block (in this case one byte instead of
 8 bytes) will be encrypted independently. We can guess some keystrokes. For example, we know that the sender will send their username with a <CR> and wait for the sender to send back "password:". Then they'll send their password followed by a <CR> Theref
ore, we know what a <CR> should look like.
We can look for a common occuring character which is sometimes repeated. When repeated it will usually follow a standard character, making the block coorespond to a " " and the one preceeding it a "." perhaps. We can do analysis and find all the character
s we need in order to do "echo ++ > ./rhosts" Then, we insert our own text via cipher block keystrokes that we've remembered and pieced together by one technique in #1.
3. Similar attack as above. If we listen in the beginning, we can get the IV since it is transmitted in the clear. We simply remember the last cipher block and we use it to get the currently encrypted block. Then from there, we do the analysis of keystrok
es as in #2. Then, we do #1.
4. The problem in #2 and #3 was that encryption used external state or no state at all. I mean that it used state available to people listening in, the use of the previous byte of cypher text. If we move the state internally, then we are set. If we can im
agine using an algorithm which generates a cipher block based on a 3des key which is rotated each time a cipher block is generated. No one outside can notice patterns in the cipher blocks going by because adjacent blocks look nothing alike and cracking de
pends on internal secrets only. They have to know the 3des key and which rotation the block was on in order to generate a spoofed cipher block. I don't know if the overhead is prohibitive, but if you also sign the blocks with a digital signature, then the
 receiver now know's it's definitely from you. This prevents Mallot from sendin spurious stuff. This is the "something you know, something you have, something you are" principle.

Question 4
1. If you are evil.hackers.org, and you send a negative response for 
whitehouse.gov to congress.gov, then all traffic from congress.gov to whitehouse.gov would be cut off. Let's say you know that negatives are not signed and that someone could be tricking you. Then, if congress.gov goes out to find whitehouse.gov, you coul
d give it another invalid whitehouse.gov not found message. Then, there's no way to tell whether the negative response is actually wrong or someone is spoofing that response.
2. Negative response records need only contain the hostname and address. They will be signed by the guy who should be the domain. In other words, when a server makes a request to find a host, it begins at root, and the first domain to say that it does not
 exist will sign the record. Therefore,
www.anonymous.berkeley.edu and anonymous.berkeley.edu will be signed by berkeley.edu. Therefore, negative responses are also self-authenticating. In this case, the root will always exist. We can simply cache negative responses at the server level. They ca
n time out and such just as positive responses do.


@
