head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.18.32.10;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From davidwu@@cs.berkeley.edu  Fri Oct  2 11:15:44 1998
Return-Path: davidwu@@cs.berkeley.edu
Received: from dilbert.cs.berkeley.edu (dilbert.CS.Berkeley.EDU [128.32.131.87]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA10414 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 11:15:44 -0700
Received: from localhost (davidwu@@localhost) by dilbert.cs.berkeley.edu (8.8.8/8.6.9) with SMTP id LAA13553 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 11:12:27 -0700 (PDT)
X-Authentication-Warning: dilbert.cs.berkeley.edu: davidwu owned process doing -bs
Date: Fri, 2 Oct 1998 11:12:27 -0700 (PDT)
From: David Wu <davidwu@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw#1
Message-ID: <Pine.BSF.3.96.981002111132.13551A-100000@@dilbert.cs.berkeley.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


Hi-

Below is my homework 1.

Thanks-

Dave.

--< CUT >--

David Wu (davidwu@@cs.berkeley.edu)
September 30, 1998

CS261: Homework 1

Question 1:

1) Economy of Mechanisms: As already mentioned in class, we need to keep implementations simple. Feature crawl here (allowing execution of programs) exposed a new hole.
   Fail-safe Defaults: (Assuming quote exec in ftpd can be turned on or off), there should have been a safe default of disallowing execution of quote exec. In general, the defaults should all be to turn off these "extra" features.
   Complete Mediation: Should check each interaction. For example, the gnu tar option is allowed. (In general, this is very hard! You have to know what options are allowed for each potential "quote exec"'able program. Or, you could only allow a subset of 
options you _really_ trust and disallow all others).
   Least Privilege: As mentioned above, grant only subset of options you _really_ trust.  For example, only allow the standard options to create a tar.
   Compromise Recording: All quote exec commands should be recorded so that we can check if someone does something funny. We can go as far as recording all interactions (but we may then be vulnerable to a log overflow denial of service attack).

2) Complete Mediation: As already mentioned, did every access get checked? This might not be the way to fix it because that's what was tried, but there were way too many places to check.
   Economy of Mechanisms: A better way to fix this hole is to realize that sendmail is probably way too complicated. These crazy features can probably be taken out.
   Fail-safe Defaults: Again, if we're going to allow these crazy options, maybe what we should do is make the default configuration to turn these off.
   Compromise Recording: We can record all of the transactions. Again, we might then be vulnerable to denial of service attacks.
   Least Privilege: Should run sendmail daemon with as little privilege as possible to minimize damage done by these holes (Doesn't sendmail run as root only to be able to write to people's inboxes? that's not a good reason to run as root, then, but I gue
ss under Unix, that's what you have to do).

3) Complete Mediation: Of course, this is what we would like to do, be able to check every access.  But typically, there's way too many checks, so this is not a 100% way of fixing the problem.
   Least Privilege / Separation of Privilege: Put JDK in another sandbox (say, Janus). You'll get a second check of everything in the end.

4) Least Privilege: Should run everything with the least privilege possible to minimize the hole.
   Complete Mediation: Check every access even after login authentication "passed". For example, when receiving a file for write, ftpd should check again the access is allowed (do the setuid again?)

Question 2

There are several possibilities for covert channels.  First, the fact that an applet can connect back to a host can be used non-covertly to send information back.  Covertly, you can vary the rate at which you send legitimate information back using a conne
ction back to the host to encode the target information.  Thus, at the host end, you would measure the rate at which data is received to decode the target information (so maybe a rate of 10 kbits per second encodes a 0 bit, while 20 kbits per second encod
es a 1 bit).  You can vary the port number you use to connect back to the host as another way to encode target information (for example, if you know all the possibilities that the information can be and there are less than 65536 possibilities, you can ass
ign a possibility to each port number).  

If the attacker did not reside on the host that served the applet, you still have some possible covert channels.  For example, you can hog the CPU to encode a 1 bit and release CPU resources to encode a 0 bit for a long period of time and try to ping the 
machine and measure its response time to send information back.  You can do the same by using a lot of memory resources to cause lots of paging to occur and then measure the response time of the target machine to decode the information.

Question 3

1) Since only authentication is done at the start, TCP hijacking (for example, Ian's attack of injecting packets) would be an excellent choice to break the security, since the stream is unprotected after authentication is done.
2) You can apply replay attacks to compromise security when ECB is used.
3) If the encryption key is shared between two hosts, then if an attacker has access to both the client and server machine, the attacker can apply the cut & paste technique described in Bellovin's paper, "Problem Areas for the IP Security Protocols".  Bri
efly, the idea is to use the hosts to encrypt the desired (or decrypt the desired packet) and use CBC's self-correcting properties to inject/hijack the session.
4) Using Triple-DES CBC mode is a good idea.  Furthermore, the encryption key should be randomly generated by connection instead of shared by host pairs.  Even better, the packets can be signed so that we know that the person that was authenticated is the
 one that is sending the packets (of course, this might be very slow to do in practice -- alternatively, if we had, say, a ftp transfer, we can send a MAC for the file after it is sent to check for its authenticity).

Question 4

1) It's quite obvious that denial of service attacks exists in this scheme.  For example, it may be possible to pollute a DNS server's cache by sending packets indicating that "www.berkeley.edu" has no entry.  Or, we can send a no entry result by injectin
g such a packet and hoping it will beat the true result to the client machine.

2) From the given description, it seems that all DNS clients only has the public key for the root (i.e., "dot").  To implement caching, one would like to consult a local DNS server (which is caching the DNS records and has performed a full authentication 
by walking down the tree) and trust its results instead of walking down the tree again.  This is easily implemented if each client has the public key for its local DNS server.  That way, the clients can trust its local DNS server's responses (assuming tha
t the local DNS server is secure and has performed its required authentication) without walking down the tree and checking each record for authenticity.




@
