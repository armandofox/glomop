head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.19.18.07;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From pchong@@boopsie.ml.org  Fri Oct  2 12:23:55 1998
Return-Path: pchong@@boopsie.ml.org
Received: from zonker.waldenet.berkeley.edu (r-491a.IHouse.Berkeley.EDU [169.229.54.154]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id MAA10552 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 12:23:50 -0700
Received: (from pchong@@localhost)
	by zonker.waldenet.berkeley.edu (8.9.1/8.9.1) id MAA04973
	for cs261-homeworks@@joseph.cs.berkeley.edu; Fri, 2 Oct 1998 12:22:59 -0700
Date: Fri, 2 Oct 1998 12:22:59 -0700
From: Philip Chong <pchong@@boopsie.ml.org>
Message-Id: <199810021922.MAA04973@@zonker.waldenet.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw1
Status: RO

CS 261 HW 1
Philip Chong
13327872

1.1.  The idea of economy of mechanism (KISS) applies;  servers must be
kept simple and with minimal features.  A solution to this particular
problem is to disallow on-the-fly tarring (which may benefit performance
as well).  If this is unacceptable, then a small, feature-poor tar
replacement should be integrated with ftpd;  this is an example of
least common mechanism (reduce sharing and hence reduce unforeseen
interactions).

1.2.  Imperfect bookeeping in sendmail is a violation of the principle of
complete mediation;  every interaction (alias expansion) must be checked.
The principle of least common mechanism can help solve this problem;
alias expansion should be handled distinctly from filter execution.

1.3.  Complete mediation in Java is an attempt to apply the principle
of complete mediation;  however, spreading the security checks over
individual syscall wrappers violates the principle of economy of
mechanism.  For simplicity, a single monolithic security checking
mechanism should be employed.

1.4.  Tractorbeaming exploits a failure of the principle of least
privilege.  Programs should not be allowed to regain root privileges
once they have dropped them, and privileges should be dropped as soon
as possible.


2.  (If the applet is malicious, why can't we expect the bad guys to
control the originating server and hence be directly in communication?
I guess the applet could have been spoofed.)
    The applet could send back to the server cleartext packets containing
the data itself, allowing the colluder to snoop if possible.
    The applet could return a flood of data back to the server, allowing
the colluder to observe the network congestion, or watch ping replies from
the server slow down.  This would allow some very crude "morse-code"
communication.
    The applet could perform operations that trigger hostname lookups;
the communications to the DNS may be snooped/monitored (morse code again,
or some encoding in the lookup requests).
    The applet could use EM emission/TEMPEST techniques to transmit its
information.
    The applet could exploit a sandbox implementation error.


3.1.  Since the traffic is not encrypted, normal TCP hijacking works to
break this system.

3.2.  An attacker can watch the traffic, and grab parts which can be
replayed to launch the attack.  For instance, in a telnet session, it may
be possible to guess which packets correspond to the user typing 'e', 'c',
'h', etc.  The attacker can try building a codebook, and reordering and
replaying these packets allows the attacker to insert the fatal command.

3.3.  If the attacker can record a fatal sequence of packets, he can
replay them, including the packet/CBC block immediately before the fatal
sequence.  This dummy packet will decrypt to garbage (which hopefully
is tolerable), but the insertion of this block allows the fatal sequence
to be decrypted "properly".  For the telnet/shell session, the attacker
may choose a fatal string which starts with a '\n', so that the garbage
from the first packet will be "ignored".

3.4.  Stream ciphers can help against these replay attacks.  It is also
useful to encrypt at the IP level (including TCP headers), as this keeps
the TCP sequence numbers intact and makes the packets unreplayable.


4.1.  Denial of service is possible by spoofing negative DNS replies;
hosts will seem to disappear once the negative reply is received.

4.2.  Why can't the negative responses be cached similar to the
positive responses?
    I suppose it might be more efficient to cache whole domains instead
of just hostnames.  Example:  suppose a lookup for host1.csee.berkeley.edu
fails;  there is no csee department.  ns1.berkeley.edu, the authoritative
DNS for berkeley.edu, should return a negative for *.csee.berkeley.edu.
This should be cached locally so that a future lookup for
host2.csee.berkeley.edu would fail quickly.  The lookup should go
as follows:
    1. If host2.csee.berkeley.edu in positive or negative cache,
return its status/IP.
    2. Else, if csee.berkeley.edu in positive cache, ask authority for
csee.berkeley.edu.
    3. Else, if csee.berkeley.edu in negative cache, return "not found".
    4. Else (csee.berkeley.edu has unknown status), strip off yet another
level of hierarchy (now berkeley.edu) and go back to step 2.
    This helps us reuse the cached results.

@
