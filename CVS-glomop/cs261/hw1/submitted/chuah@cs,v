head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.23.30.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From chuah@@berryman.CS.Berkeley.EDU  Fri Oct  2 14:15:24 1998
Return-Path: chuah@@berryman.CS.Berkeley.EDU
Received: from berryman.CS.Berkeley.EDU (berryman.CS.Berkeley.EDU [128.32.130.39]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA10949 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 14:15:23 -0700
Received: from localhost (chuah@@localhost)
	by berryman.CS.Berkeley.EDU (8.9.1/8.9.1) with SMTP id OAA03835;
	Fri, 2 Oct 1998 14:12:18 -0700 (PDT)
Date: Fri, 2 Oct 1998 14:12:18 -0700 (PDT)
From: Chen-Nee Chuah <chuah@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: chuah@@CS.Berkeley.EDU
Subject: CS261- Homework 1 
Message-ID: <Pine.BSF.4.02A.9810021410040.3576-100000@@berryman.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Dear instructors,

The following is my homework solution for assignment 1. Thanks!



	*************************************************************
			CS 261- Homework 1			    
			
		submitted by:  Chen-Nee Chuah			    
	**************************************************************

Acknowledgement: I discussed the problems with Mark Spiller and
Sreedhar Mukkamalla.


Question 1
==========
1.1) In ftpd/gnutar, malicious user can use rsh-command through ftp/GNU
tar.  It violates the economy of mechanism principle. 

Solutions:
(a) Fail-safe Defaults: specify what can do and exclude everything else
Deny all rsh-commands access. Explicitly permit ftp to access only
"tar" commands to "read" files. 

(b) Least Privilege: Keep the set of permitted access to the minimum
Figure out exactly what capabilities ftp/GNUtar requires in order to
run "tar" and "read files" and grant exactly those. e.g. keep a
capability list for ftp specifying explicitly which rsh-commands it
can use. 

(c) Separation of Privilege
Only allows ftp/GNU to perform "tar" and "read-files" operations. For
any other rsh-commands, prompt user for additional information to
authenticate of user identity.


1.2) In this case, Complete Mediation is violated because there are
potential places where sendmail program forget to check and ensure
that it isn't program delivery.

Solutions: 
(a) Fail-safe Defaults & Least Privilege Design Principle.
Instead of treating program execution as address, deny all execution
as default. Instead, write a program to check every program execution 
treating it as alias expansion. Abort if the program fails the security
check. 

(b) Separation of Privilege
When program execution is detected. Prompt user to grant permission by
hitting a separate key.


1.3)  Complete mediation in Java 
It's hard to check every access to every object. 

Solutions: 
(a) Fail-safe Defaults & Least Privilege
Deny all access to objects and allow access to only a minimum set of
objects toperform the task


1.4) Tractorbeaming wu-ftpd
uid/euid in qu-ftpd is not robust and violates least privilege design
principles by occasionally elevates to root privilege to perform
critical section.

Solutions:
(a) Fail-safe defaults
Whenever there is an interrupt while performing a privileged critical
section, always do a seteuid(getuid()) and revert back to least
privilege according to user identity before executing anything else
(being tractorbeamed away to a signal handler). Before resuming
operation, seteuid(0) again.

(b) Least Common Mechanism and Separation of Privilege
Avoid privileged critical section in between less privilege section
completely.  Avoid using common section that needs to be run with root
privileges.  Clean separation of executable sections with and without
root privileges. Use those that doesn't need root privileges only.

Has a single super-user. We need an individual capacibility list that
provide a cleaner separation of privileges between users.

(c) If possible turn off interrupts when running in the critical section.



----------------------------------------------------------------------------
Question 2
==========
A malicious Java applet somehow manages to access confidential
information. The following are some covert channels that it could use
to leak that information out to a colluder somewhere in the network:

2.1) One loop hole is that Java applet is allowed to connect back to
the host where the applet was downloaded from. The applet could
connect back to the host and send information back to the web server,
or connect to other ports on the server machine. If the attackers
cannot receive the data on a certain port directly, they can still
hijack/eavesdrop the packets sent back to the host by the Java applet.

2.2) Browser redirect call in Netscape Java that will let the applet
to a new page. The applet can generate a URL that contains
confidential information in the form of
(http://www.cs.berkeley.edu/confidential_info) and send it to a
colluder's http server.

2.3) If the applets are allowed to talk to each other, they can
transfer their data to other applets downloaded from other servers and
retrieve data via the second server(colluder).

2.4) If the browser security is weak, it might allow some Java system
exec calls that lauch malicious attack on local machines when the
applet is downloaded.

----------------------------------------------------------------------------
Question 3
==========
Imagine a system which does strong authentication at the start of a TCP
sesion.

3.1) If the authentication is only done at the start of a TCP session,
it is subjected to TCP hijacking attack. The attacker can eavesdrop
the packets and get confidential information (since the packets are
not encrypted), insert false data packets or modify some bytes in the
original packets.


3.2) Triple-DEC ECB uses the same key for different blocks of data.
The attacker can build a table of code blocks sent across the network, and
insert packets (what they recorded) out of order, and cause the connection
to
tear down (DENIAL OF SERVICE ATTACK). 

If the session is long and there is a lot of repetition in the data,
it is still possible for the attacker to build a table of code
blocks. Based on the patterns, one could guess what commands/data are
being transmitted etc.


3.3) If Triple-DES CBC mode is used, it is harder to guess the content
of the packets. But one might still be able to record packets and
insert it randomly to mess up the sequence number and cause Denial of
Service Attack.


3.4) There are several ways to fix these weaknesses (some might be more
economical and realistic than others):

(a) For part 1, we need to encrypt the data besides initial
authentication, so that it's harder for attackers to eavesdrop or
modify packets. In addition we need to sign and authenticate each
packet. Even if the attacker can guess the sequence number, and tries
to insert data, they can't confuse the receiver because the receiver
will check each packet to verify where it's coming from.

(b) Time division multiplexing in sending the data packets. As such,
malicious attacker can't insert additional data packets.



----------------------------------------------------------------------------
Question 4
==========
Suppose the negative responses from DNS servers are not signed or
authenticated in any way.

4.1) The major weakness is that any body can forge a negative response
(of the form "there is no entry for the domain XX.XXX.XX ) and cause
Denial of Service attack.

Other weanesses: 
(a) An attacker can pollute the local cache with false negative
responses. This might cause inconsistency in cached information, and
some applications rely on information that is cached on different
locations. This will lead to serious problem, depending on what the
applications do, it might cause Denial of service or Integrity attack
(modify data due to spurrious input)

(b) In general, a foreign DNS server can send a client a signed
but invalid DNS packet.


4.2) Besides authenticating negative responses, the record should also
be time stamped or have a Time to Live (TTL) field. If these responses
are cacheable, the record will time out after a certain time period
and be discarded.

This is important because:

(a) if the host that the client is trying to contact is temporarily
down, we need a mechanism that will allow new status to reach the
client. If the negative responses are cached, the host will seem
permanently unreachable for the client.

(b) if there is some network problem that temporarily cut off the
client from other domains, you don't want the all the negative
responses (x.edu, x.com, etc) to be cached and be there
permanently. The client will be completely cut off from the world if
each time it tries to contact a host, it always get the cached
negative response.




@
