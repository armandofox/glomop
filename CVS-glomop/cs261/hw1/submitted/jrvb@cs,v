head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.23.30.26;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From jrvb@@CS.Berkeley.EDU  Fri Oct  2 14:23:02 1998
Return-Path: jrvb@@CS.Berkeley.EDU
Received: from bamako.CS.Berkeley.EDU (bamako.CS.Berkeley.EDU [128.32.34.138]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA10956 for <cs261@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 14:23:01 -0700
Received: from localhost (jrvb@@localhost) by bamako.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id OAA14893 for <cs261@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 14:18:14 -0700 (PDT)
X-Authentication-Warning: bamako.CS.Berkeley.EDU: jrvb owned process doing -bs
Date: Fri, 2 Oct 1998 14:18:13 -0700 (PDT)
From: James Robert von Behren <jrvb@@CS.Berkeley.EDU>
To: cs261@@joseph.cs.berkeley.edu
Subject: Homework 1
Message-ID: <Pine.HPP.3.96.981002141731.14766D-100000@@bamako.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO



CS261, Homework assignment 1.
Rob von Behren
jrvb@@cs.berkeley.edu
10/02/98



QUESTION 1

1. The ftpd/gnutar interaction.  The fundamental problem here is that
   ftpd relied on using an essentially unknown external program to
   achieve some of its functionality.  Hence, when the functionality
   of the external program was changed, the functionality of ftpd
   implicitly changed as well.  The best way to stop this would be to
   remove the dependancy on unknown external programs by either
   disabling the retrieval of entire directories or by building some
   tar-like abilities directly into ftpd.  (This is the principle of
   defining your trusted code base.)

2. Sendmail alias expansion.  The difficulty with sendmail was that it
   reused code in inappropriate places.  Essentially, the modularity
   of the system hid important contextual information from the lower
   level address handling routines, leading to unexpected behavior.
   The best solution to this would be to use more stringent coding
   practices, to make sure you understood the implcations of using a
   low-level routine before you use it in a higer level routine.

3. Complete mediation in Java.  I'm not as sure about this one....  I
   believe that Java does not use complete mediation.  Essentially, it
   just presents an interface to an object, and then assumes that the
   language will protect it from any unexpected accesses to the
   internal pieces of the object.  If this could be circumvented in
   some way, you would break the language, and be able (for example)
   to access private methods or data for any object.  (I seem to
   remember hearing of some sort of Java security correctness proof,
   however, so this may in fact not be possible w/ Java.)

4. Tractorbeaming wu-ftpd.  The fundamental flaw with this part of
   wu-ftpd is that it assumed that certain operations were atomic when
   they in fact were not.  To fix this, you would need to be more
   specific in your coding about when you expected operations to be
   atomic.  In these cases, you need to then take extra steps to
   ensure that they are in fact atomic, and that any "cleanup" (such
   as seteuid(getuid())) actually happens as expected before you
   execute any other code.






QUESTION 2

Java applet covert channel list:

1. Since the applet can communicate back to the server from which it
   came, it can clearly send back any information it wishes to this
   server.  In addition, the server could be configured as a proxy to
   allow the applet to send information to any other host on the
   Internet.  

2. Now let us suppose that the server is not in collusion with the
   evil applet.  (Perhaps it was planted there by some third party.)
   The applet can still send sensitive information to the server.
   Although the server will not do anything with it, the evil third
   party could snoop the wire, and watch the packets between the
   client and the server.  The applet could also play with packet
   sizes, packet timings, etc. to leak information that way durring
   legitimate conversations with the server.  (This would allow it to
   leak information while not raising the suspicion of the server
   through bogus connections.)

3. Finally, even if the author of the evil applet were not able to
   directly snoop the packets back to the server, the applet might be
   able to send information by initiating an FTP session with the
   server, and causing it to bounce information to the evil applet
   author. 


QUESTION 3

1. With authentication only at the beginning of the connection and no
   encryption, you can simiply use a TCP hijacking technique to
   capture the session and send in your own evil data.  (Additionally,
   if the "strong authentication" at the beginning isn't
   cyrptographically secure, you may simply be able to snoop the
   user's identificaiton information, and gain access that way.)

2. As long as you know something about the protocol in use, you can
   probably use frequency analysis to figure out the plaintext that
   corresponds to one or more blocks of data.  This would give you
   considerable leverage in breaking the code.  Once you know the key,
   you can use TCP hijacking to inject data as in (1).  

3. With Triple-DES CBC mode, frequency analysis will not give you any
   useful information about the content of packets.  However, more
   general traffic analysis (looking at the size and timing of
   packets, for example) may allow you to once again deduce the
   plaintext that corresponds to several cyphertext blocks, and
   thereby gain some hooks into cracking the code.

4. To prevent traffic analysis, you would need to make sure that the
   rate of data flow from client to host was more or less constant (or
   alternatively random), by inserting dummy data into the stream. 

Follow up question: With typical Internet encryption schemes such as
SSL, is the encryption applied only to the data portion of the TCP
packet?  If so, it would still be possible to hijack a TCP connection
and mount a denial of service attack by inserting bogus data.  It
would seem like the sensible thing to do would be to encrypt the TCP
information as well.  However, since this is going to be handled by
the kernel, this might not be possible (SSL is user-level, right?)  Do
you know what is done with this at present?


QUESTION 4

1. Without authentication for negative responses, you could easily
   mount denial of service attacks by inserting bogus negative
   information into the caches of DNS servers around the Internet.

2. Negative responses would need to be authenticated by the DNS server
   for the lowest level existing domain that might have known about
   the address.  For example, if someone looked up "foo.ibm.com", the
   DNS server for "ibm.com" would be able to authenticate a negative
   response for host "foo".  Alternatively, if ibm.com didn't exist,
   the root server for ".com" would authenticate the negative response
   for the existance of the "ibm" subdomain.  Finally, if ".com" was
   not a valid base domain, you should get back an authenticated
   negative response from the root server.  




@
