head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.03.01.07.35;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From misha@@scam.XCF.Berkeley.EDU  Fri Oct  2 18:05:42 1998
Return-Path: misha@@scam.XCF.Berkeley.EDU
Received: from xcf.berkeley.edu (scam.XCF.Berkeley.EDU [128.32.43.201]) by joseph.cs.berkeley.edu (8.8.5/local) with SMTP id SAA11409 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 18:05:41 -0700
Message-Id: <199810030105.SAA11409@@joseph.cs.berkeley.edu>
Received: (qmail 16736 invoked from network); 3 Oct 1998 01:04:15 -0000
Received: from localhost (127.0.0.1)
  by localhost with SMTP; 3 Oct 1998 01:04:15 -0000
From: Misha Dynin <misha@@xcf.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
X-Editor: vi
Subject: HW1
Date: Fri, 02 Oct 1998 18:04:15 -0700
Sender: misha@@scam.XCF.Berkeley.EDU
Status: RO

Michael Dynin (misha@@xcf) SID: 12158488                        CS261 Homework 1

Question 1.

    ftpd/gnu tar: A secure program shouldn't execute another program,
    especially the one that is not written with a secure environment
    in mind.  Violates "Least Common Mechanism" principle.

    sendmail aliases: Use redundant security information and check it;
    in case of sendmail, along with an address store whether it
    came from the message or from aliases file, and allow writing
    to a file or executing commands only for local aliases.
    Separation of Privilege and properly implemented Complete Mediation.

    Java: use different libraries for different security domains
    (e.g. SecurityManager for applets loads a version of shared
    libraries that doesn't have code that writes to the file system at all).
    Least Privilege.

    Tractorbeaming wu-ftpd: do not rely on restorable setuid mechanism
    for protection -- it provides just an illusion of security (attacker
    may be able to execute seteuid(0) with some buffer overflow).
    Asynchronous events in general lead to many hard-to-track-down
    security holes; logic of a secure program should be as straightforward
    as possible.  Least Privilege.


Question 2.
    
    Java security model usually allows the applet to open a connection
    to a server it was downloaded from; passing information over such
    connection is trivial.  Even if direct communication is disallowed,
    chances are the applet can request documents over HTTP; a maliciuos
    applet can encode information in a URL or PUT request.  In general,
    it is impossible to distinguish between legal communication between
    the applet and the server and malicious ones, as data can be disguised
    using steganographic technics.  Java does not have a data tainting
    security restrictions, and implementing them would be impractical;
    and it is powerfull enough to allow execution of any steganographic
    algorithm.

    Come to think of it, in JavaScript there should be a similar hole;
    contructing URLs on the fly (for example, for animated images)
    has some valid uses, and information accessible to JavaScript
    could be passed to the server using some predetermined URL encoding.

Question 3.

    No crypto: the connection, once established, can be hijacked.

    ECB: hijack the connection and insert encrypted command sequence
    that grants access.  The encrypted value of command sequence can
    be learned with traffic analysis and plain text attacks; for example,
    send the victim an email message with "echo", "rhosts" and "+ +"
    in the text somewhere, and get ECB cyphertext values when the victim
    reads the message. [ doesn't quite work if different keys are used
    of different directions, but even in that case forcing the user to
    input bits of known plain text is reasonably easy... ]

    CBC: predict what the user will send over the connection (easy),
    catch the packets and, by XORing the cyphertext with the expected
    plaintext, get the data necessary to encrypt malicious sequence
    of commands (by XORing them).

    Fix by using CFM mode.  Problems: 56-bit sequences can probably be
    inserted anyway by hyjacking a connection.

Question 4.

    1. The only weakness I can think of right now will lead to exploitation
    of DNS serach paths.  Suppose a user@@victim.com has "search victim.com"
    in resolv.conf (a reasonable assumption).  He wants to access WWW.IT,
    an IT department webserver; but the evilhackers.org polluted his
    DNS cache by inserting a negative response for www.it.victim.com,
    and instead user@@victim.com accesses www.it, a site in Italy.
    
    Did I mention that evilhackers.org had ties to sicilian mafia?

    2. The performance problem arises with a non-existant
    hostname like very.long.name.nowhere.edu .  The problem is that not only
    such hostname, but all the domains up to and including
    long.name.nowhere.edu do not exist.  So which public key should sign
    the negative response (without complicating the logic of the resolver)?
    My solution would be to create a special "Non-existant" DNS server,
    that sends out negative responses.  Once .EDU name server
    figures out that NOWHERE.EDU does not exist, it designates the
    "negative.net" DNS server as the master of the domain (certifying its key).
    The "negative.net" server, of course, appoints itself as a server for
    name.nowhere.edu and long.name.nowhere.edu, and gives a signed "no such
    host" reply for very.long.name.nowhere.edu .  All the exchange
    for with "negative.org" can be done with one request/reply,
    if the mechanism for aniticipating requests is in place.

    My favorite long.host.name: bring.out.the.gimp.org

-- Misha.

@
