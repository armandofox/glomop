head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.20.18.21;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From bhaskar@@cs.berkeley.edu  Fri Oct  2 13:24:23 1998
Return-Path: bhaskar@@cs.berkeley.edu
Received: from huginn.CS.Berkeley.EDU (huginn.CS.Berkeley.EDU [128.32.35.5]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id NAA10857 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 13:24:23 -0700
Received: from bidi (dhcp5b84.CS.Berkeley.EDU [208.1.91.132]) by huginn.CS.Berkeley.EDU (8.8.3/8.7.0.Beta0) with SMTP id NAA26417 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 13:21:18 -0700 (PDT)
Date: Fri, 2 Oct 1998 13:21:23 -0700 (PDT)
From: Bhaskaran Raman <bhaskar@@cs.berkeley.edu>
X-Sender: bhaskar@@bidi
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: HW1 Solutions
Message-ID: <Pine.LNX.3.96.981002131659.174A-100000@@bidi>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

----------------------------------------------------------------------

CS261 Fall 1998, Homework 1 Solutions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Bhaskaran Raman, SID: 13738797, <bhaskar@@cs.berkeley.edu>

Question 1
~~~~~~~~~~

(1) ftpd/gnutar interaction

    --> The security hole resulted because the principle of "Economy
        of Mechanism" was violated. "ftpd" allowed the client to
        execute a "tar" command at the server which lead to problems
        as the "tar" program evolved into one that allowed execution
        of an arbitrary sub-process.

    --> fix: provide as little functionality as possible in "ftpd" -
        since it is supposed to be secure; just provide access to
        files and nothing else. This way one can be reasonably sure
        that such holes don't pop up in the future.

(2) Imperfect bookkeeping in sendmail

    --> The bug arises because sendmail does not check all requests
        for program execution. This is because it allows a program
        execution request to appear wherever an address can
        appear. This makes complete mediation difficult.

    --> fix: to do checks on every request for program execution and
        to do so without bugs, addresses should not be treated as
        requests for program execution in the first place.

(3) Incomplete mediation in Java

    --> Complete mediation is made difficult in this case because all
        the routines in all libraries should make an authentication
        check.

    --> A fix for this from first principles: change the access
        validation to use dynamic name space mapping as follows. Have
        fail-safe defaults: initially, a java program sees only dummy
        libraries for privileged routines. When trying to access a
        file (or other privileged access) -> exception is rised in the
        dummy library -> JVM then does the check -> remaps the
        relevant routine to a different library that allows
        access. This way, the validity check has to be made at only
        one place in the JVM.

(4) Tractor-beaming wu-ftpd

    --> The bug results because the same code (process) is used for
        both privileged actions as well as for unprivileged
        actions. The process does not have the "least privilege"
        required for it to run.

    --> The fix for the problem, as suggested by this argument would
        be to have the privileged section of the code separate from
        the unprivileged section of the code (in different processes,
        interacting minimally).

Question 2
~~~~~~~~~~

Ways in which a java applet can leak confidential information that it
manages to get access to:

- Dump all information back to the host where it came from (this is
  not a "covert" channel)

- If the colluder is on the path between the applet and the
  originating host, the applet can leak information by varying the
  rate at which packets are being sent to, or connections are being
  made to, the originating host. (Of course, if the information is
  sent on the wire, it can just be read off the wire).

- If the colluder is somewhere else in the Internet, the java applet
  can still leak information by varying the rate at which it sends
  packets to the originating host (which the colluder can roughly
  monitor by connecting itself to the applet's originating host).

Question 3
~~~~~~~~~~

(1) No crypto used for sending telnet packets ==> just modify the
    characters typed on the fly -OR- do TCP hijacking ==> send
    malicious commands to the server.

(2) 3-DES ECB used ==> can figure out (cipher text <--> plain text)
    mapping by frequency analysis ==> then problem reduces to previous
    (non-encrypted) case.

(3) 3-DES CBC used ==> Neither of above attacks possible ==> Have to
    decrypt 3-DES CBC -OR- break the initial authentication mechanism.

(4) Every packet sent has to be authenticated and the initial
    authentication also has to be fool proof ==> Complete mediation.

Question 4
~~~~~~~~~~

(1) The obvious weakness is that "denial of service" attack is too
    easy. To use this to mount an actual attack is also possible in
    certain cases.

    - With fake negative response for a server, the client can be
      forced to approach another server ==> may either make the attack
      easier for the hacker since new server is on a more vulnerable
      path or has already been compromised.

    - Example of situation where a client looks at a set of servers
      arises in several occasions: a set of mirror sites, a set of
      search domains as specified in /etc/resolv.conf (if company X is
      collaborating with Y, the search sequence could be "X.com Y.com"
      and hacker at Y can force clients at X to come to Y).

    - Another hypothetical attack: With fake negative responses for
      reverse lookups, ".rhosts" can be rendered useless & the user
      can be tricked into typing a password (which can be sniffed).

(2) Negative responses for "x.domain.com" must be authenticated by
    "domain.com" using its signature. The authentication of the public
    key is recursive as with positive responses. Caching can take
    place just as with positive responses and as with positive
    responses, more caching can result if the response goes up & down
    the tree instead of directly to the client.

----------------------------------------------------------------------

@
