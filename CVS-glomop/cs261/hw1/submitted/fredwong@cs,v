head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.23.30.25;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From fredwong@@mill.CS.Berkeley.EDU  Fri Oct  2 14:05:05 1998
Return-Path: fredwong@@mill.CS.Berkeley.EDU
Received: from mill.CS.Berkeley.EDU (mill.CS.Berkeley.EDU [128.32.44.239]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA10931 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 14:05:04 -0700
Received: from localhost (fredwong@@localhost)
	by mill.CS.Berkeley.EDU (8.9.0.Beta5/8.9.0.Beta5) with SMTP id OAA20587
	for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 14:01:46 -0700 (PDT)
X-Authentication-Warning: mill.CS.Berkeley.EDU: fredwong owned process doing -bs
Date: Fri, 2 Oct 1998 14:01:46 -0700 (PDT)
From: Frederick Wong <fredwong@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: HW #1
Message-ID: <Pine.GSO.3.96.981002140050.20584A-100000@@mill.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Name: Frederick Wong (fredwong@@cs)
SID:  12520254

Question 1)

1) ftpd/gnutar
   The problem ftp and gnutar is when gnutar is used with ftp, one of
   it's command line option (rsh-command) can be used to break into a
   system. The major problem with this class is letting any program
   available to the user. Although one stand-alone program is secure,
   the interaction between them are mostly unknown. Since large
   programs are buggy and interaction between large programs are
   mostly unknown, the best solution to this class of problem is to
   let as little programs to expose to outside world to reduce the
   unknown harmful interaction that might result.

2) sendmail
   The problem with sendmail is the email alias expansion which might
   lead to program execution if the alias itself is point to
   executable. Therefore, it violates the complete mediation if not
   all the alias expansion is not checked against potential executable
   accesses. Since email alias can happen in lot of places in an email
   transaction, sendmail need to do a good job in bookkeeping of all
   possible place where alias expansion can happen and perform checks
   against the alias before the actual expansion take place. Missing
   one checks expose the security hole to the hackers. The best way to
   solve this problem in general, sendmail's calls to underlying
   system objects need to be sandboxed. For example, instead of
   directly expand the alias whenever it encounters, all alias
   expansion should invoke a separate function and that function
   should be sandboxed and return the results of the expansion. Then,
   complete mediation can be achieved. 

3) complete mediation in Java
   Meditaion in Java relies on checks with security manager before the
   actual access to the system objects. This is not the best and
   secure way since it relies on the programmers to do the right
   thing. One way to attack this problem is to verify every single
   system object/service call has a security check before. To fix this
   problem in general, however, we can do something like having one
   centralized place for the call to the restricted
   object/service. Using parameter indexing for each type of access
   with one centralized method make sure that the security checks will
   not be missing from one of the many restricted calls.

4) Tractorbeaming wu-ftpd
   wu-ftpd violates the least privilege principle. wu-ftpd doesn't not
   disable interrupt before changing the mode of privilege results
   with a line of attack. In general, programmer need to ensure that
   the services need to be run with the least privilege mode. For
   example, ftp with user login should be run as a different program
   than the guest login since guest login should have the least
   privilege. This will prevent the attack that make use of the
   "supposely" least privilege user and gain access to more privilege
   mode. Mostly this is due to programmer want to generalize the use
   of the services to a wide variety of users with different
   privilege.

----------------------------------------------------------------------

Question 2)

Although Java applet is sandboxed, the applet itself can still have
lots of way to leak the information out. For example, since the applet
can connect back to the server, it can use the timing of the data
being sent to tell what the confidential information is (e.g. the
applet can use an interval of more than 100 milliseconds between
packets to signal a '1' and an interval of less than 10 milliseconds
to signal a '0'). To the client user, event he log all the data in and
out of the system, he still not knowing that the information is
leaked. Another way includes spawning hundreds of threads to slow down
the cpu to redce the response time of the client is also a good way to
leak information out.

----------------------------------------------------------------------

Question 3)

1) This can be done by TCP hijacking since no cryptography is in use.

2) Triple-DES ECB is vulnerable to the command replay attack, since
   the man in the middle can always inject packets that are equivalent
   to the one that send by the user. In particular, if the man in the
   middle manage to know a particular packet corresponse to "xhost +"
   or "echo ++ > ~/.rhosts" this is bad because he can just inject
   this packet just right before the end of the session and break in.

3) CBC mode uses the previous packet contents to encrypt the next
   packet. Therefore, an attacker can eaily inject a garbage packet to
   the server such that the server cannot decrypt it correctly. Since
   the algorithm runs with one dependence with the previous packet,
   therefore, the attacker can inject another packet with depends on
   the previous packet and successfully breakin to the system.

4) To solve these problems, the session packets should be sequenced and
   tagged with checksum for highest possible security. If any error
   occurred, the service should be aborted immediately for possible
   attacks.

----------------------------------------------------------------------

Question 4)

1) The lack of authentication for negative responses open the
   opportunity for denial of services attack. As long as the negative
   responses arrive the requesting DNS server before the real positive
   response, the requesting DNS server will think that the address is
   wrong.

2) In order to do caching correctly, the time-to-live for the negative
   response has to be sent securely to the clients, otherwise,
   attacker can easily attack with denial of services. However, since
   DNS is not supposely carrying out the signing online (easily for
   attacker to obtain the signing keys), absolute time-to-live may be
   an alternative choice instead, as described by Bellovin in (Using
   the Domain Name System for System Break-ins).


@
