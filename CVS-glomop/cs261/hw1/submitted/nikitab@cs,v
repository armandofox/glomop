head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.23.30.28;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From nikitab@@glasgow.CS.Berkeley.EDU  Fri Oct  2 16:11:19 1998
Return-Path: nikitab@@glasgow.CS.Berkeley.EDU
Received: from glasgow.CS.Berkeley.EDU (glasgow.CS.Berkeley.EDU [128.32.37.64]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id QAA11019 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 16:11:19 -0700
Received: from glasgow.CS.Berkeley.EDU (localhost [127.0.0.1]) by glasgow.CS.Berkeley.EDU (8.8.3/8.6.9) with ESMTP id QAA15904 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 16:08:34 -0700 (PDT)
From: Nikita Borisov <nikitab@@CS.Berkeley.EDU>
Message-Id: <199810022308.QAA15904@@glasgow.CS.Berkeley.EDU>
X-Mailer: exmh version 2.0.2 2/24/98
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: forgot the s
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Fri, 02 Oct 1998 16:08:33 -0700
Status: RO

I'm not sure whether this got to you... I haven't gotten a bounce, 
but...

- Nikita
------- Forwarded Message

To: cs261-homework@@joseph.cs.berkeley.edu
Subject: hw1 
Date: Fri, 02 Oct 1998 16:00:21 -0700

1.1. FTPD/gtar interaction results to poor "economy of mechanism".  Gtar
is a big hammer used to solve a specific small instance of a problem.  A
few hundred lines of an "star" (simple tar) implementation would be much
easier to monitor for security issues.  If it's incorporated into FTPD,
even better - you end up consolidating your Trusted Computing Base.

1.2. Sendmail/alias expansion - "complete mediation" fails here.  My
suggestion would be to distinguish between "expanded" and "unexpanded"
addresses.  Expanded addresses _must_ be generated by expanding an
(untrusted) unexpanded address.  Unexpanded addresses could not be used for
delivery, and hence could not execute commands; the expansion function
would check that paths only come from alias expansion, thus performing
complete mediation.

1.3. Complete mediation in Java - one idea for this is "least common
mechanism".   Ie. don't run the unprivileged apps using the same
interpreter that you use to run your private applications that are
supposed to have full access to your system; run it in a sandboxed
environment or something.

1.4. wu-ftpd tractorbeaming - "least privilege" is useless, if there is a
way to regain privilege.  It would be ideal for the FTPD to fork, once a
connection has been established, and _irrevocably_ give up privilege
once the userid information is collected.

2. 
The java applet could secretly drive up system load, and the attacker
could measure ping timings, which would eventually go down.  One could
possibly fine tune this to send a sequence of binary values. 

If the attacker is on the same machine, the java could do the same with
disk access - just use lots of disk bandwith writing junk inside the
sandbox.  Disk free space could also be a good indicator of how much
data the java applet has written (if sandbox is not on a separate
filesystem, which it likely won't be) - another covert channel.

3.1. Hijack the TCP session after authentication.  Use any of the
hijacking/re-routing/insertion techniques discussed in class.

3.2. You can tell which messages are the same, which is often good
enough, given that most messages are single characters.

3.3. If one does CBC within a packet (ie. IV, then CBC), this is not
nearly good enough, for reasons above, since, once again, messages are
short.  In fact, you can do better, since if you know that blocks "0x12345678
0x87654321" mean "something followed by an 'a'", you can just send those
packets together.  The first one will be dropped since it's garbage (or
even if it's not, compose a short message called '<CR>echo ...'), and
the other one would be a good message.

3.4. Use a stream cipher.

4.1 The weakness that comes to mind is playing with search rules.  If I
have 'search cs.berkeley.edu berkeley.edu hip.berkeley.edu' in
resolv.conf, and someone can fake NXDomain messages from cs.berkeley.edu
and berkeley.edu for, say, glasgow, then a HIP user could pretend to be
my workstation when I say "telnet glasgow".  Similarly, when somebody
types in "microsoft/foo" into netscape, I can make the checks for
microsoft.com and www.microsoft.com fail, and then the server will
search for other microsoft sites.

4.2 If you aren't worried about authentication performance, the server
can simply issue an NXDomain certificate with an expiration date for
every request that there is.  (of course, this means offline server
authentication is impossible).  A better scheme would be to issue a
signature on a cannonicalized COMPLETE list of hosts inside eg.
berkeley.edu; NXDomain is authenticated by such a complete list which
does not include the requested info.

- - Nikita

------- End of Forwarded Message



@
