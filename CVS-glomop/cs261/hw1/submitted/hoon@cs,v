head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	98.10.09.19.43.40;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.10.02.18.32.12;	author daw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@From hoon@@galaxy.CS.Berkeley.EDU  Fri Oct  2 05:08:13 1998
Return-Path: hoon@@galaxy.CS.Berkeley.EDU
Received: from galaxy.CS.Berkeley.EDU (galaxy.CS.Berkeley.EDU [128.32.131.143]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id FAA09118 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 05:08:13 -0700
Received: from localhost (hoon@@localhost) by galaxy.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id FAA00966; Fri, 2 Oct 1998 05:04:57 -0700 (PDT)
Date: Fri, 2 Oct 1998 05:04:57 -0700 (PDT)
From: ByungHoon Kang <hoon@@galaxy.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: ByungHoon Kang <hoon@@galaxy.CS.Berkeley.EDU>
Subject: hw1 cs 261
Message-ID: <Pine.GSO.3.96.981002050254.925B-100000@@galaxy.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

HW1 CS 261 Byung-Hoon Kang

1.    Those security holes are due to the changes in the usage of expected functionality's. 
It is error-prone to check every access to every object for security. 
Least Privilege: Grant minimal capabilities that a program requires to perform the minimal of its 
required functionality's; In same principle, don't statically allow capabilities in advance, wait until it 
becomes necessary in design phase; To keep the least minimal necessary capabilities principal, try to 
have two or more different program with its specific required funtionalities rather than combined huge 
one.

2.    Java applet can talk to the server it came from and the malicious script on the server can leak the 
information collected by the applet since the server can talk to any machine in the world. 
The data can be passed in the form of normal gif image and the content of gif can be encrypted 
version of data. 

3. 
        1. TCP hijacking: inserting the packet with attacking text.(echo ++ > ./rhosts.) 
        2. Block-replay; Mallory can watch and compare the encoded blocks and figure the encoded 
block of attacking text by constructing code-encodedblock table. And insert this.
        3. Block-replay is not easy but bits of the first block can be changed and repetition allows some 
controlled changes. 
        4. CBC with controlled redundancy and authentication code so that the malicious change attack 
can be detected. 

4. 
        1. Race condition between the positive reply from legitimate source and the negative response 
from Mallory; the authentication process can be contaminated.
        2. The authenticated negative response can be cached with its label of the authenticated source 
so that it can trace back in case the upper-authorative dns server contaminated.  Don't prefetching any 
unnecessary additional info. Short time to live for possible cache contamination.


================================================================= 
UC BERKELEY                                  hoon@@cs.berkeley.edu
ATTN: ByungHoon Kang/ 493 SODA HALL           (voice)510-642-8468 
COMPUTER SCIENCE DIVISION                     (fax)  510-642-5775 
387 SODA HALL                                    Attn:B.Hoon Kang
BERKELEY, CA 94720                                     Rm493-Soda               
================================================================= 


From hoon@@coke.CS.Berkeley.EDU  Thu Oct  8 20:49:45 1998
Return-Path: hoon@@coke.CS.Berkeley.EDU
Received: from hofmann.CS.Berkeley.EDU (root@@hofmann.CS.Berkeley.EDU [128.32.35.123]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id UAA25589 for <daw@@joseph.CS.Berkeley.EDU>; Thu, 8 Oct 1998 20:49:44 -0700
Received: from coke.CS.Berkeley.EDU (coke.CS.Berkeley.EDU [128.32.35.69]) by hofmann.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id UAA27986; Thu, 8 Oct 1998 20:46:50 -0700 (PDT)
Received: from localhost (hoon@@localhost) by coke.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id UAA03212; Thu, 8 Oct 1998 20:46:48 -0700 (PDT)
Date: Thu, 8 Oct 1998 20:46:48 -0700 (PDT)
From: ByungHoon Kang <hoon@@coke.CS.Berkeley.EDU>
Reply-To: ByungHoon Kang <hoon@@coke.CS.Berkeley.EDU>
To: David Wagner <daw@@cs.berkeley.edu>
cc: iang@@cs.berkeley.edu
Subject: Re: your CS261 homework (Question 1 only)
In-Reply-To: <199810080401.VAA23627@@joseph.cs.berkeley.edu>
Message-ID: <Pine.GSO.3.96.981008004319.27848B-100000@@coke.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Q1.The ftpd/gnutar interaction.
Yes, interaction is night mare. I suggest following design priciple to
tackle interaction related security holes.
	
 1.Try to avoid combining two or more individual programs since the 
complexity of examining the possible interaction for a security whole
would be much greater than the benefit of combining two or more programs.

 2. Clean user interfaces between module.

 3. Try to find all the prossible interaction of programs against
security holes so that we can be sure the interactionon of current
versions of the programs is safe. ( it would be practically doable by
following principal 1 and  2 since we tries to reduce the order of
interaction complexity by reducing n in Omega(n^2) or 0mega(2^n) 

 4. When design programs for interaction, store the version number
or checksum of the other programs to interact with, and then check the
version and checksum to verify that the other program is exactly the same
as before at runtime.  If the version and checksum is different then just
stop running(deny all service and repeat step (1,2),3,4 with new
programs).

2.Imperfect bookkeeping in sendmail leading to holes in alias expansion
and program execution. 

Complete mediation is error-prone since checking every access to every
object is hard. 
 1. If the object to be secure can be anywhere, just disable
problematic un-secure funtion that object associated with. 
for example, the place of address field can be hardly confined in sendmail
case, disable the functionality of program execution in address field. 

 2. Provide totally separate funtions which can be simple and can
secure the every possible access of the desired access of the object if we
have to.

 3. In doing 2, we can use AccessCheckList per to-be-secured object
everytime it is accessed.

OR
 1. Do strong type-enforcing of object. for example address can only have
certain syntax which is good for address and it can never be a program
execution command.
 2. Use separate type if one type needed to have another usage; Do not
cast. Do not share one type for two different semantics. 
 3. Confine the dangerous type using ACL or Capabilities-check always.

Q3.Complete mediation in Java. 

Programmer tends to forgot to do the security check in their code.

 1. We can classify the to-be-secured object and its associated funtions.
    (ex: local-file-system with mkdir(),copy()....)
 2. And enforce the access of those class's private function go through
security manager check by DEFAULT.( We can make JAVA VM to do that or
compiler can generate thosec checks in making class file)
This is much less error-prone than having the programmer write the
security checking code whenever the to-be-secured methode is being access.
We can be sure that the object we classified will go through
secure.manager check whether the programmer write explicit checking in
their code or not.

Q4.Tractorbeaming wu-ftpd. 
 1. Figure out exactly what capabilities a program requires and grant
exactly those.
 2. Use sandbox(like Janus)-confinement tool to see if the program tries
to use some other capabilities other than the granted one. (uid/euid is
not a robust mechanism to implement least priviledge)

--hoon.

On Wed, 7 Oct 1998, David Wagner wrote:

> In the process of grading your CS261 homework (#1), we discovered
> an anomaly in your answer to Question 1.  From my reading of your
> answer, it seems that you may have been trying to answer all four
> subparts of Question 1 at the same time.
> 
> Upon re-reading the assignment, I have to admit that the problem
> statement was a little ambigous; I could see how someone could
> reasonably think we were asking for a single answer to all parts.
> 
> Nonetheless, that wasn't what I intended.  I don't believe there
> is any single answer to all four subparts; each one needs a different
> solution.
> 
> So, I've concluded that it would be pretty unfair of me to grade
> your answer if it was my fault for posing the question imprecisely,
> and I wanted to offer you the chance to try again with the new
> clarification on the question.
> 
> Send me email with your new answer to each of the parts of Question 1,
> if you'd like to.  (Otherwise, I don't think I can give you high
> marks on Question 1 of Homework 1.)
> 
> I apologize for the poorly-posed problem.  My fault.
> 
> Sorry about that. :-(
> -- David
> 






@


1.1
log
@*** empty log message ***
@
text
@d56 124
@
