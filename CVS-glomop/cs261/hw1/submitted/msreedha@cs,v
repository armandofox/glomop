head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.02.19.18.06;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From msreedha@@cs.berkeley.edu  Fri Oct  2 11:51:54 1998
Return-Path: msreedha@@cs.berkeley.edu
Received: from jackalope.CS.Berkeley.EDU (jackalope.CS.Berkeley.EDU [128.32.33.30]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA10508 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 11:51:54 -0700
Received: from localhost (msreedha@@localhost)
	by jackalope.CS.Berkeley.EDU (8.9.1/8.9.1) with SMTP id LAA05273
	for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 2 Oct 1998 11:48:50 -0700 (PDT)
X-Authentication-Warning: jackalope.CS.Berkeley.EDU: msreedha owned process doing -bs
Date: Fri, 2 Oct 1998 11:48:49 -0700 (PDT)
From: Sreedhar Mukkamalla <msreedha@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: My answers to Problem Set 1
Message-ID: <Pine.BSF.4.02A.9810021123050.5037-100000@@jackalope.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


Answers to Problem Set 1
----------------------------------------------------------------------
Sreedhar Mukkamalla		SID: 13739706 
-----------------------------------------------------------------------
Question 1
==========

(1) ftpd/gnutar interaction :
This bug is a result of the violation of the principles of ECONOMY OF
MECHANISM. We want the client to be allowed to run "tar" on the server
(it provides necessary functionality),  but doing so 
by allowing the client to specify arbitrary command line  arguments to
gnu-tar (which will run as root on the server), thus allowing it to
write files to remote machines is the wrong way to do it. 
The correct approach would have been to implement a 'bare-bones' subset of
the "tar" functionality within the ftp server itself (so it wouldn't have
to exec gnu-tar to do it)

(2) Imperfect bookkeeping in sendmail
Violation of priniciple of COMPLETE MEDIATION. 
This problem could be solved by using a level of indirection
i.e. structure the code of sendmail so that every interpretation of an
address is done by making a call to a function which does the job
properly.

(3) Complete Mediation in Java
Violation of principle of COMPLETE MEDIATION
This problem, too, could be solved by using a level of indirection that
forces the security check. The JDK code should be structured so that
every library call actually results in a single function being called
(with an argument that specifies which library function actually needs
to be called). This function then does the security check and calls the
appropriate library function.

(4) Tractorbeaming wu-ftpd
Violation of principle of LEAST PRIVILEGE
Ideally, the ftp-server should not have root privileges, but the way
UNIX works, this is impossible to do. So, the ftp server should be
written such that the very first messages MUST BE user +
authentication. As soon as authentication is done, the ftp-server
process should compeletely relinquish root privileges by doing an suid
to the appropriate user. Only after this should any other commands
(such as cd, get, put etc...) from the client be considered. 


Question 2
==========
Possible covert channels for java applet:
-----------------------------------------

(0) Obvious --- applet just opens network connection to its home site
and leaks info (not really a covert channel, but its the easiest)

(1) Every second the applet will either try to consume 100% CPU or will
just block (depending on whether info being leaked is a 1 bit or 0
bit). Remote machine keeps track of load on target machine to get info.

(2) Attackers (who  have written the applet) control the DNS server for
their domain which has a couple of uncacheable host entries(i.e. TTL for
these DNS records is set to zero). If
the applet is allowed to do DNS queries, it can use this as a covert
channel by repeatedly doing DNS queries for these uncacheable host
entries. (Attackers keep logging the queries made for these hostnames)

Question 3
==========

(1) The TCP session can be hijacked using the scheme presented in the
paper by Joncheray[A Simple Active Attack Against TCP] and arbitrary
data can be inserted into the data stream. Alternatively, (fake) data
can just be inserted into the stream (as in the telnet attack mentioned
in the question).

(2) & (3) If the session uses DES encryption, but does not use MACs to verify
the authenticity of each message, an attacker can send spoofed garbage
packets that will be accepted by the communicating hosts and could make
them behave unpredictably. (Perhaps the garbage packets will not really
affect the hosts because they fail some other sanity checks, but it is
worth a shot).  
Cracking Triple DES (either CBC or ECB), by trying to exhaustively
determine the key is practically infeasible (given current knowledge) and
this is the wrong approach. An attacker should instead try to steal the
key by some other means.

(4) The attack mentioned above (sending garbage packets) can easily be
foiled by using MACs to authenticate each message. (The MACs can be
agreed upon right after the initial authentication). 


Question 4
==========
An obvious observation here is that every response from a server should
have a timestamp (to guard against replay attacks) and a TTL. 

(1) Lack of authentication for negative responses could lead to denial
of service attacks.

(2) The authenticated negative responses can be authenticated using the
same mechanism (as for positive responses). Cache entries can be made
for the negative responses (just as they are for positive responses)
with TTL values specified by the authoritative server for that
entry. The difficult question here is what value should be assigned to
the TTL for negative responses. A small value (a few minutes)  should
suffice for the normal case. 


@
