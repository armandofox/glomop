head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	98.12.16.18.56.19;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	98.12.16.16.35.21;	author iang;	state Exp;
branches;
next	1.1;

1.1
date	98.12.16.06.30.16;	author iang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@jmacd@@cs
"On Program Security and Obfuscation"
o Survey paper; no new results, unfortunately.
65

mikechen@@cs geweke@@cs
"Pay-Per-Use Services"
o If the merchant and the bank collude, they discover who bought what.
o The client must to sig. verification on T's key to check the validity
  of the certificates.
o Link encryption from cust to merchant may be able to be done in the manner
  of ssh (RSA encryption is relatively cheap).  You can also try a
  Kerberos-like thing (get the Bank to set up a shared secret between the
  customer and merchant).
94

helenjw@@cs
"Secure Network HotSync"
o With a bit of work, the title would lend itself to a nice acronym. :-)
o The key exchange isn't D-H at all; also, the messages don't seem to be
  MAC'd; this opens a possible weakness.  (But the crypto can be readily
  fixed; key exchange or key agreement given a shared secret is fairly
  straightforward.)
o You need to trust that the server will obey the user preferences on what
  to and what not to back up, but that's probably OK.
o Why did you need DES for a MAC?
o The details on the crypto are lacking, but they're not terribly important.
o Not quite done the implementation.
87

nikitab@@cs
"Authentication Agent"
o Good design.
o For PGP decryption, you needn't send the decrypted message back to the host;
  just send the decrypted session key.
o Performance issues?
o I'd really like to see this working really well for ssh and PGP... :-)
90

jrvb@@cs hoon@@cs
"Secure Email Infrastructure"
o There exist PDAs today that are much faster than the Pilot.  Unfortunately,
  they're mostly WinCE machines.
o The USER/PASS protocol should be replaced with a challenge/response thing
  (like APOP, for example).
o "The Network" is not properly part of the TCB (that's actually the whole
  point of using cryptographic protocols).
o Be careful when you say "the firewall is trusted".  It's trusted to do
  different things (not to store private keys of users).
o Very good analysis.
92

dongwu@@eecs
"A Sniffer Detection Tool"
o Describing your changes to the source code is not needed.
o Very short paper; not really any new work here, just implementation (and
  prude was handed to you).
66

davidwu@@cs fredwong@@cs
"Remote Sniffer Detection"
o Nice: you only need to send a few packets.  Any idea why?  (This seems
  counterintuitive.)
o Good use of statistics!
o You somewhat need to know what OS the remote machine is running, but
  that's easy to figure out (queso, for example).
o Excellent work.
98

hildrum@@cs
"Encryption Security of rlogin in Kerberos IV"
o Short paper; not really any new work here (not even implementation).
o But good detail on just what krlogin is doing with variously-sized packets.
72

hcheng@@cs ronathan@@cs
"Traffic Analysis of SSL Encrypted Web Browsing"
o The "random padding" defence you suggest does not actually work very well;
  statistics can be used to remove the padding with pretty good accuracy.
o Similarly, "the size and timing of extra packets must be sufficiently
  random that [they] cannot be reliably identified using statistical
  techniques" is (surprisingly) wrong: in fact, you need to _remove_ the
  randomness from the _real_ packets, and send a data-independent stream
  of traffic back to the client.
o Excellent work.
94

bhaskar@@cs shailen@@cs
"Quantifying Traffic Analysis of Encrypted Web Browsing"
o More detail on exploiting locality would have been good.
o Of course, it would be nice to know _which_ stocks were being traded...
86

pchong@@cs
"Active Intrusion Detection Systems"
o Very short paper.
o Good implementation and measurement of IMAP attack.  Too bad about the
  SYN bombing not working.  (Was it that you couldn't get a SYN bomb to
  work at all, or that you couldn't stop one with the IDS?)
76

gebis@@cs
"Remote Automatic TCP Stack Probing and Inspecting Tool"
o Nice acronym. :-)
o Very nice work.  I encourage you to finish (and automate) the
  implementation.
84

msreedha@@cs jshih@@cs
"Scalable Key Distribution and Authentication for Real-time Multicast"
o Very nice summary of related work.
o Nice implementations and measurements.
o Excellent work.
98

jackchen@@cs
"Reliable Layered Authentication Protocol"
o You maintain that signing every nth packet in unfeasible, but you're very
  close to the solution found by the other group: put the hashes of _each_
  of the n packets into the signing packet; you can verify whatever packets
  you _did_ get.
o You have to be careful if the sender changes the security parameters to suit
  the weakest participant.  To subvert the system, I can join the network
  with my PalmPilot, and advertise its computational strength.  The server
  needs to reject me outright, not set the signature parameters to something
  trivial to break.
o The layered security method is interesting.
o What about DSA?  Key generation for DSA is a single modexp (complexity
  about that of an RSA signature).
o Too bad about a lack of implementation.
74

mds@@cs chuah@@cs
"Infrastructure for a Secure Interface between Wireless and Data Networks"
o Your definition of "trust" is pretty broad, but at least you gave one. :-)
o Very nice analysis of the different models.
o Not enough detail on the implementation / measurement.
84

czerwin@@cs ravenben@@cs
"A Secure Service Discovery Service"
o "verification is cheaper than signing": only for RSA-like algorithms.  But
  if you're only doing it every 5 minutes (per server, though), that's OK
  anyway.
o Secure 1-way broadcasts need to protect against replay attacks.  Figure 2
  seems to indicate that there is a timestamp and MAC in addition to the
  encryption (which would suffice if done right), but it's not mentioned in
  the text.
o DSA verifications are expected to be expensive; for DSA, signatures are
  cheap (if you do the precomputation).  RSA is the reverse.
o DON'T move to an algorithm _weaker_ than 3DES; move to a _faster_ one.
o Joining MIT's CA and Berkeley's CA into some sort of trusted group is
  effectively equivalent to solving the PKI problem.
o Excellent work.
98
@


1.2
log
@.
@
text
@d76 1
a76 1
henying@@bmrc ronathan@@cs
@


1.1
log
@*** empty log message ***
@
text
@d31 8
a38 1
*** nikitab@@cs
d88 5
a92 1
*** bhaskar@@cs shailen@@cs
d116 16
a131 1
*** jackchen@@cs
d133 1
a133 1
*** mds@@cs chuah@@cs
d135 4
d140 1
a140 2

*** czerwin@@cs ravenben@@cs
d142 14
@
