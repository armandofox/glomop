head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.12.14.22.51.21;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@Other possible homeworks:

[crypto]
  Design a secure garage door opener protocol.
  You have a radio receiver in the garage door, and a radio
  transmitter in the remote control.  One constraint: due to cost,
  you can't put both a transmitter and a receiver in the remote
  control.
  Design a secure protocol for this application.
  (It should be secure against passive eavesdropping attacks,
  against replay attacks, etc.)
  Part two: Modify your protocol so the two endpoints can easily
  stay synchronized.  (If you press your remote while still out
  of range of the garage door, or if there is a burst of static
  that causes a transmission error just when you press the remote,
  you don't want the two endpoints to get desynchronized.  Design
  a protocol which allows for synchronization without sacrificing
  security.)  Part three: If you allow the remote to contain both
  a transmitter and receiver, does the problem get any easier?
  Part four: If you're concerned about export control (e.g. no
  export of encryption algorithms with better than 40-bit security;
  but authentication algorithms are unrestricted), how can you
  design the system to have maximal security?
  (Answers: send encrypted---or MACed---counters using a shared
  secret; use windowing techniques with some care; use challenge-
  response; use a MAC, not a cipher.)

[crypto]
  Within the constraints of export control (you may only use
  40-bit symmetric algorithms and 512-bit asymmetric algorithms),
  design a protocol for secure email exchange which has the best
  possible security against NSA-style eavesdropping.  You may
  assume both endpoints have modern computers.
@
