head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	98.09.16.20.48.35;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	98.09.16.19.46.57;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.09.16.19.45.32;	author iang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@Snooping

o Make sure people know about TCP, and that it's relatively simple to read
  or write packets to any segment on which you sit

o If you _are_ the router/gateway, you can also delete or modify packets,
  which will be interesting later

DNS games

o Describe DNS: UDP packet with ID number, response has same ID number

o Reverse lookup

o Cache pollution: response may contain answers to questions you didn't ask

o Not enough to just ignore those:  query for MX of cypherpunks.ca
   cypherpunks.ca. IN MX 0 mail.cypherpunks.ca
   mail.cypherpunks.ca. IN A 10.1.2.3
   cypherpunks.ca. IN MX 10 mail-backup.cypherpunks.ca
   mail-backup.cypherpunks.ca. IN A 10.2.3.4
   cypherpunks.ca. IN MX 100 trusted.domain.com
   trusted.domain.com IN A 10.2.3.5

o You must only use the responses in the _context_ for which they were asked

o Tag cache entries with their source

ISN prediction

o Subvert the channel setup procedure

o NT (SP3) is vulnerable

o Question for class: how do you use this against DNS?

TCP hijacking

o Subvert the channel _after_ it is set up

o Any protocol which does authentication only at the beginning, and no
  chaining over the data itself (and sometimes even then) is vulnerable

o Mine: replace data

o Question for class: how do you use *this* against DNS?

o The paper: desynch, ACK storm
@


1.2
log
@*** empty log message ***
@
text
@d33 2
@


1.1
log
@*** empty log message ***
@
text
@d33 2
d43 2
@
