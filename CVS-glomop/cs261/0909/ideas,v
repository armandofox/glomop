head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	98.09.17.23.07.56;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	98.09.08.22.23.00;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	98.09.08.22.18.32;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.09.02.17.05.44;	author daw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@the adversary is the network  (threat model)
crypto lets you reduce trust (& size of the trusted computing base)
link encryption vs. end-to-end encryption
encrypted communications channels vs. encrypted storage
order: compress then encrypt then encode (add redundancy)



PRIMITIVES:

symmetric-key encryption
one-time pads
  & why you can't use it in practice: key distribution/generation
stream ciphers
combining stream ciphers by xor-ing them
block ciphers
chaining modes
  & turning block ciphers into stream ciphers
ways to make block ciphers stronger
  (e.g. multiple modes, iteration, -X construction;
  triple-des, meet-in-the-middle)

key length
key generation
gathering entropy in software
reseeding

zeroization

one-way function
collision-free function
hash function
prf
mac
  & lack of non-repudiability
when to use which
birthday paradox

public-key crypto
difference between decryption and signing
non-repudiability
##number theory intro
##RSA math
##pitfalls of implementing your own RSA
##  (e.g. padding, probabilistic encryption, etc.)

need for authentication of public keys
  man-in-the-middle attack, diffie-hellman
certificates
public-key infrastructure

the right tool for the right job
  when should you use public-key crypto, when will symmetric-key suffice?
  why does the web use SSL, but web browser for a pilot uses symmetric...
  number of keys needed: O(n) for pubkey, O(n^2) for symmetric-key
  cost of revocation vs cost of key-establishment in symmetrickey & pubkey

good algorithms (e.g. triple-DES, SHA1, SHA1-HMAC, D-H, RSA)
don't bother implementing your own
(anyone can create a cryptosystem that they can't themself break)



PROTOCOLS


key-transport protocols
key-agreement protocols
perfect forward secrecy

EKE, etc.

pitfalls of session-layer crypto
  (e.g. always mac everything, append random padding, etc.)
examples: ssl, ipsec

protocols
examples of bad protocols
one good protocol

techniques:
hash chaining (e.g. for s/key, payword, certificate revocation, etc.)
timestamping

protocol failures

PGP's problem with fingerprints

@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
crypto lets you reduce trust
@


1.2
log
@*** empty log message ***
@
text
@d23 1
@


1.1
log
@foo
@
text
@d1 5
a5 1
crypto:
a6 1
threat model (adversary *is* the network)
d8 2
a9 7
one-way function
collision-free function
hash function
prf
mac
when to use which
birthday paradox
d12 4
d18 4
a21 5
triple-des, meet-in-the-middle
stream ciphers

one-time pads
why you can't use it in practice: key distribution
d29 9
a38 1
number of keys needed: O(n) for pubkey, O(n^2) for symmetric-key
d41 4
a44 6
number theory intro
RSA math
pitfalls of implementing your own RSA
  (e.g. padding, probabilistic encryption, etc.)

good algorithms (e.g. triple-DES, SHA1, SHA1-HMAC, D-H, RSA)
d47 1
d51 15
d81 1
a81 1
hash chaining (e.g. for s/key, payword, etc.)
d83 5
@
