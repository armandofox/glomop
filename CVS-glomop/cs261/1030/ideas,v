head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	98.10.31.00.45.43;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	98.10.30.22.01.40;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	98.10.30.21.47.40;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.10.30.20.47.51;	author daw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@-- This lecture will be mostly about Java as a platform for
   secure mobile code
-- ``Stack introspection'' paper
   -- Why language-based security for memory protection?
      (rather than e.g. the Unix model)
      -- (Note that this question is about Java as a platform for
         building secure apps, not about for secure applets)
      -- Their answer: better performance + more natural code structuring
      -- Do you believe it?
      -- (my answer: one of the greatest strengths of Java is a great
          model for managing privileges in the presence of code in
	  many protection domains (e.g. libraries, applets, apps);
	  many current systems only allow for two levels (e.g. kernel
	  + user-mode); thus, my answer is about its suitability for
	  building secure services)
   -- basic model
      -- every class is tagged with a security label (e.g. its Classloader)
         -- more generally, in the presence of code signing, could
	    be the set of principals who have signed this code
      -- reference monitor (e.g. SecurityManager) may have access to
         the entire stack, and can check for each stack frame how the
	 relevant class is tagged
   -- simple JDK1.0/1.1 policy
      -- roughly, if any frame is tagged with network classloader,
         this code executes under "applet" security policy
	 (plus hacks for classloader depth)
      -- otherwise, it's under (trusted) application security policy
      -- but this is too simple in the presence of libraries, etc.
   -- capabilities
      -- flexible, but would require major changes to runtime libraries;
         thus, they looked for a better system which doesn't require
	 rewrites of the libraries
      -- btw, the example they gave in fig 2 about capabilities and
         SubFS and so on is very important: SubFS is a "guard" (only allows
         access to a subdirectory of the FS), and you
         can construct a guarded object and hand the guarded object to
         someone else who you only partially trust; thus, this allows
         for very flexible delegation -- a very cool technique you should
         know all about
   -- extended stack introspection
      -- enablePrivilege(priv); disablePrivilege(priv); checkPrivilege(priv);
      -- to use a protected resource, must first call enablePrivilege()
      -- calls to enablePriv() and disablePriv() are notated in stack
         frames from where they are called
      -- algorithm to check whether access to P is allowed:
         -- run up the stack (backwards! for efficiency)
	 -- ignore closed pairs of enablePriv()/disablePriv()
	 -- ignore enablePriv(P) by class C if C is not allowed to touch P
	 -- if you hit the root, initial privileges are none
	 -- allow access only if P is enabled after all this
      -- what is the flaw in this algorithm?
         (luring attacks, e.g. via callbacks)
	 true algorithm stops the backward search if at any time
	 you find a stack frame running code from class C where C
	 is not allowed access to P
	 -- result is callee can use privileges of its caller,
	    but only those that the callee could have requested
	    for itself, and only if the callee has enabled them
      -- actually, this isn't quite right, either: if you hit the root,
         Microsoft allows all privileges.  bad idea.  (why?)
      -- algorithm given in paper is slightly different: 
            for each stack frame F {
	       if (F enabled P) return allow;
	       if (class(F) forbidden access to P) return deny;
	    }
	    if (netscape) return forbid; else if (microsoft) return allow;
	  why is incorrect?  (switch order of allow/deny checks;
	  also watch out for disablePriv())
	  why is it probably ok?
      -- note that this is dynamic scoping (sort of, except that
         privileges are automatically disabled when you return from
	 a method, because the stack frame which remembered the
	 enablePriv() disappears); true lexical scoping is better (why?)
         and is indeed implemented in JDK1.2 via e.g.
	   AccessController.doPrivileged(new Privileged() {
	      public Object run() { /* privileged code here */ }
	   });
	 this is a simple hack; might be better to have a language
	 keyword called e.g. 'privileged', much like 'synchronized' keyword
	 but Ian says maybe this isn't lexical scoping, because
	 privileged code could call other methods
	 cmopare to 'setuid(0);/*privileged*/ setuid(getuid();' in C
      -- interesting detail: how to check whether class C is
         allowed access to privilege P, if there are multiple signers
	 S_1,..,S_n?  in netscape, answer is "consensus" voting:
	 any signer may veto access to P; to allow P, at least one
	 signer must vote for P
	   -- beware: if S_1 wrote the code, he may have implicitly
	      assumed app would only get privileges he allowed;
	      his code might be unsafe if granted extra privileges
	      because a second signer S_2 later signed it too (unknown
	      to S_1)
	   -- this is tricky
      -- nice for auditing: a simple grep shows you every security-critical
         code section, by looking for calls to enablePriv()
      -- by the way, God help you when reflection gets involved.....
         (because you can invoke methods via reflection, scary, scary,
	 might not have the same stack setup as the implementor expected)
   -- name space management
      -- use dynamic linking by not linking a class into some
         protection domain's namespace until it is allowed to reference it
      -- more generally: can load in a "stub" / "guard" / "wrapper"
         which is compatible with the original
	 (explain what a "guard" class is if necessary; this is a
	 very useful technique)
      -- implementation: heavily modified ClassLoaders
      -- sharing is a problem: shared classes have to be the same
      -- god help you when reflection gets involved
      -- this technique was used in Safe-TCL: safe-tcl *removes* all
         unsafe library calls from namespace, so there's no chance of
	 the mobile code calling unsafe stuff (cool, eh?)
   -- so why did we bother with all this?
      -- we can get away with a LOT less trust in the system libraries:
         e.g. if AWT libraries are broken, it might be posible to abuse
	 them to draw bogus stuff on the screen, but NOT to e.g. replace
	 the SecurityManager and break the entire system; this is a
	 BIG WIN
      -- also, we can handle mutually untrusting code, etc. more naturally
         because by default the protection domain + stack introspection
	 stuff usually just does the right thing:  A BIG WIN
      -- also fixes a lot of the problems with complete mediation, etc.
         in JDK1.1
      -- lesson: good delegation mechanisms can be A BIG WIN
         
  
-- ``Java Security'' paper
   -- A very early, influential paper; it talks about JDK1.0/1.1.
   -- Namespaces
      -- A different naming environment for each applet,
         except that they share a common "system" name space; "system"
         namespace always searched first
      -- Classloaders define the namespace:
         File classloader + network classloader; when classes
         are loaded, they are tagged with which classloader they came from;
         this identifies whether they get the "applet" security policy or the
         "application" security policy
      -- Packages: flat namespace, anyone may join a package;
         but decisions on "protected" access etc. are made using the pair
	 (package name, type of classloader)
      -- except...
      -- defeating the namespace (e.g. with a rogue classloader) lets you
         do type confusion (because implicit "sharing constraints" are
	 violated); given an example
	 -- problem is there's not a very strong tie between class names
	    and Class objects
   -- Denial of service
      -- spinloop (and threads may not be preemptive!)
      -- while(1)malloc();
      -- acquire a lock on other shared code (deadly to Hotjava, other
         applets that you can name)
      -- can kill other threads (deadly to other applets that you can name)
      -- denial of service not always easy to detect, because it might
         merely cause degradation rather than a total lock-up
      -- also, it can be hard to assign blame (might be time-delayed) 
      -- cute example: a hostile applet by Microsoft which sits innocently
         in the background, until you download an applet from one of its
         competitors; then it starts eating up system resources and occasionally
         crashes the JVM, in an effort to make you think that the competitor's
         applet is unstable.  If done right, you might never use the
         competitor's applet again; you might even decide never to buy anything
         from that competitor again ("if they can't even write an applet
      -- hard to fix; not a design goal
   -- Covert channels
      -- accept() wasn't protected
      -- leak via DNS
      -- you already saw this in your homework
   -- bad security policies
      -- Hotjava: read .mailcap, public_html (privacy)
      -- Hotjava on Windoze95: write to C:\TEMP (disrupt other programs; virii)
      -- Netscape: no file access
      -- Hotjava: System.getenv() not protected
      -- time not protected, so possible to benchmark a system, and
         potentially deduce what kind of box it is (similarly, can learn
	 how much memory it has, can potentially learn how much disk space
	 by writing to C:\TEMP until it overflows, can learn something about
	 OS and browser by asking browser to open a new web page, can learn
	 something from whether threads are preemptive or not, etc.)
      -- they just forgot...
   -- Implementation 
      -- algorithm for checking whether an applet from host H can connect
         to host J:
	 -- let IP(h) be the set of IP addresses for host h
	 -- then, if IP(H) \intersect IP(J) is non-empty, allow the connect
         -- what's wrong with this?  (attacker can choose IP(H))
	 -- why should we care?
	    (applets running behind a firewall can attack all other hosts
	     behind the firewall; this shows that Java's security model
	     doesn't compose well with the firewall security model-- Java
	     and firewalls don't play together, because firewalls assume
	     everything inside is trusted, and the whole point of Java is
	     to run untrusted stuff inside)
         -- Discussion pt: How do you fix the firewalls stuff?
            (one solution: run Java on a playground machine *outside* the
            firewall, then send X events in through firewall)
      -- Hotjava: can change the FTP and HTTP proxies (!)
         -- why is this bad?  (can play MITM games)
	 -- what went wrong?
	    (browser state was in public variables in public classes;
	    Hotjava relied on Java type system for isolation from applets,
	    which means every class has to have every field and every
	    method declared properly -- forgetting even one is deadly)
         -- Discussion pt: Netscape coded in C++, with an explicit JVM;
            HotJava purely in Java; which was a better design strategy, and why?
      -- Interactions between applets:
         -- paper suggests "non-interference" property
	    (roughly, no applet can tell whether there are even any other
	     applets running, let alone what they might be doing; thus, no
	     applet can affect any other applets execution)
	 -- Discussion pt: is this a good idea?
	    (very hard to do: covert channels, timing, shared state, etc.)
      -- Classloader attack
         -- was this clear?  (if not, explain it)
	    -- constructed a rogue ClassLoader via
	       class CL extends ClassLoader {
	         CL() { try { super(); } catch (Exception e) {} }
	       }
	    -- then you defeat the namespace, boom, done
      -- Trusted path woes: (aka ``slash and burn'' attack)
         -- JVM looks for class java.net.Socket in java/net/Socket.class
	 -- but they forgot to prohibit '/' in a package name...
	 -- why is this a problem?
	    (applet can run /tmp/netscape/cache/foo.class as trusted
	     "application" code by running the foo class from
	     /tmp/netscape/cache package, since anything loaded from
	     file is marked with file classloader and thus trusted)
	 -- similar example of this problem with Eudora, MSIE, etc.:
            email someone a Java applet; it gets saved on disk in a tmp
	    file; then Eudora calls the Windoze HTML renderer library;
	    Eudora forgets to turn off Java; renderer reads the Java stuff
	    from the file, loads it via file classloader, and thus marks
	    it as trusted; boom
      -- Array woes:
         -- name of class for array of A is 'A[]'
	 -- in some cases it is possible to declare a class with name 'A[]'
	 -- this is supposed to get erased later
	 -- but one version of JDK didn't quite erase everything it was
	    supposed to, and some remnants were left -- boom, type confusion
      -- Return by reference
         -- At one point, it was possible to change Hotjava's (
	    or JDK1.1.1's) idea of who signed your applet
	 -- you call getSigners().  it returns an array of the principals
	    who signed the current applet.  BY REFERENCE !  boom
	 -- is it obvious why this is bad?
    -- Language weaknesses
       -- methods can be called on partially initialized objects
          (by calling them from within a constructor)
           -- and object creation separated from initialization
       -- bytecode should be AST, for ease of parsing
       -- no formal semantics
       -- jsr adds to complication a LOT (polymorphism)
          -- and is unnecessary
       -- package system is very weak (and no nested packages)
          -- anyone can join a package (and this caused a real bug in 
	     August 1996 in MSIE: Microsoft chose to prevent folks from
	     entering a crucial system package with SecurityManager checks,
	     but they screwed up; safer would be if packages could declare
             in one place who their members are, but Java doesn't allow
	     for that)
    -- Lots of interesting user interface problems
    -- Architecture weaknesses
       -- #1 problem: TCB is huge (what's in it?)


Notes after the fact:
-- Beware: semantics for enablePrivilege() disablePrivilege() are a
   bit tricky: think of disablePrivilege() as an "undo last enable"
   operation -- if you do 'enable;enable;disable', the privilege is
   still enabled
@


1.3
log
@*** empty log message ***
@
text
@d262 7
@


1.2
log
@*** empty log message ***
@
text
@d78 5
d94 5
d100 12
a111 1
      -- more words here
d121 3
a124 1
      -- by the way, God help you when reflection gets involved.....
@


1.1
log
@*** empty log message ***
@
text
@d1 2
d4 98
d209 12
d230 6
@
