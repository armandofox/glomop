head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	98.10.28.21.09.30;	author iang;	state Exp;
branches;
next	1.2;

1.2
date	98.10.28.20.29.51;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.10.28.17.02.10;	author iang;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@mobile code paradigms:
  o Distinction between safety and security: safety is protecting the
    program against itself, security means protecting against malice
  o Safe languages (Java, BPF, Modula-2, agent-tcl, taintperl, Penguin)
    * eliminate "undefined" behaviours in the language
      -  a = (a++) + (++a)
      -  f += 4; (*f)();
      -  ((char *)f)[17] = 0xE7; (*f)();
    * Make sure the code, when executed, does not do anything "unintended"
    * Protects mostly against mistakes (coding errors)
    * _very_ limited languages (BPF) can be made quite safe this way,
      but there's not much you can do in them
    * Often uses "virtual machine"; if not, make sure the output of the
      compiler is really what's run
  o Code verification (Java/JVML, BPF, ASH)
    * Almost impossible with general code
    * Some results having to do with having the compiler insert invariants
      that can be easily checked ("Proof-carrying code")
    * With safe languages, much easier
    * If the code is compiled into a "non-safe" form, you probably _need_
      to do this
    * ASH = event handlers you can download into the kernel; like
      assembly language; kernel checks to make sure they have bounded
      runtime and don't access memory they're not supposed to;
      like BPF, but used for more than just packet sniffing (e.g.
      general user-controlled de-multiplexing in Exokernel)
  o Sandboxing (Java, Janus)
    * In combination with safe languages, protects against malice
    * Alone, you may get the situation that undefined behaviour may lead to
      the killing of the job
  o Code signing (ActiveX, SPIN)
    * (SPIN used trusted compiler with safe language; compiler signed code;
      kernel accepted only code signed by the trusted compiler)
    * Have different sandbox policies depending on who wrote the code
    * beware that a signature on a piece of code indicates only accountability
      not authorship (because a third party can always strip the signature off
      of some signed code and sign it themselves)
    * Eric's "parking lot" analogy
    * suspicious
    * rant
    * It just doesn't scale...
  o "YOYO" You're On Your Own (mash-tcl)
    * Are You Out Of Your F* Mind?!
  o Active networks
    * Each packet can contain a chunk of mobile code (!)
    * Do you want to rant on this, Ian?
    * By the way, if you've ever read Vernor Vinge's _Fire Upon the Deep_,
      there's a cool quote in there where he takes this to the extreme.
      In the High Beyond and the Transcend, the laws of physics allow
      for AI to become sentient, vastly more intelligent than humans, and
      even "gods"; while the Middle and Low Beyond only allow for limited
      forms of AI and automation.  The Known Net (a takeoff on usenet) spans
      the Transcend, the High Beyond, the Middle Beyond, the Low Beyond, etc. 
      Of course, High Beyond network protocols are much more efficient than
      Low Beyond ones.
      In his book, an evil power rises in the Transend, and begins attacking
      other powers with sentient network packets (!).
      The suggested defense: forward any network packets you receive from the
      Transend down to Middle or Low Beyond (where the laws of physics do
      not allow for artificial intelligence) where you should translate their
      contents to a Low Beyond language (which does not allow for much malice,
      because it is not very rich or complex -- and the translation is safe
      because the automation in the Low Beyond is too limited in power to
      allow for packets to attain sentience).
  o Interesting question to ask about secure languages: do they protect
    against denial of service?
    * Java: no
      + applets can spinloop (which hoses all other applets on same JVM)
      + applets can even kill other applets on same JVM (!)
      + cute example: a hostile applet by Microsoft which sits innocently
        in the background, until you download an applet from one of its
	competitors; then it starts eating up system resources and occasionally
	crashes the JVM, in an effort to make you think that the competitor's
	applet is unstable.  If done right, you might never use the
	competitor's applet again; you might even decide never to buy anything
	from that competitor again ("if they can't even write an applet
	that works, how are they going to write an application?")
    * BPF, ASH: yes, code verifier ensures bounded execution time by making
      sure that there are no backwards loops
    * SPIN: no (?)
    * Janus: yes, mostly
      + each new piece of untrusted code goes in a separate Unix process,
        so if the OS scheduler is any good, that should help limit the risks
      + Janus sets resource limits (via ulimit) on those processes, so they
        can't do e.g. 'while(1) malloc();' or 'while(1) fork();' or
	'while(1) ;'
    * agent-tcl: ?
    * taintperl: no (but not really a secure language; only a safe language)
    * Penguin: ?

Examine the "Trusted Computing Base" in each of these paradigms:
  Always trust:
    + local processor (soon maybe no?)
      (remember that new x86 CPUs can be re-programmed: privileged code
       can download new *instructions*, or re-define the behavior of
       existing ones; Intel claims the special codes needed to use this
       feature will be kept secret, but who knows?)
	- Also interesting to ask which of these fail when the CPU has subtle
	  bugs, like the F00F bug (interpreted languages are probably ok, but
	  ones which are merely checked statically and then run at full speed
	  are not)
    + memory,
    + BIOS (!) (easily re-programmed by malicious code)
  o Safe languages:
    trust: the compiler, virtual machine, (path between compiler and native
           code), libraries
  o Code verification:
    trust: code verifier, libraries (?)
  o Sandboxing:
    trust: sandbox system
  o Code signing:
    trust: sandbox system, signature checking system, and also everyone
           who can generate a "trusted" signature
  o YOYO:
    trust: everyone who can write code
      (or point and click at www.rootshell.com)
@


1.2
log
@*** empty log message ***
@
text
@d18 1
a18 1
      that can be easily checked
a43 1
  o Do you want to talk about Proof Carrying Code?
a89 4
    * Also interesting to ask which of these fail when the CPU has subtle
      bugs, like the FOOF bug (interpreted languages are probably ok, but
      ones which are merely checked statically and then run at full speed
      are not)
d98 4
@


1.1
log
@*** empty log message ***
@
text
@d2 3
a4 1
  o Safe languages (Java, BPF, Modula-2, agent-tcl, Penguin)
d8 1
d10 1
a10 1
    * Protects mostly against mistakes
d15 1
a15 1
  o Code verification (Java, BPF)
d22 5
d32 2
d35 3
d41 1
d44 51
d97 8
a104 1
  Always trust: local processor (soon maybe no?)
d107 1
a107 1
           code)
d109 1
a109 1
    trust: code verifier
d117 1
@
