head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.10.17.00.25.23;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@-- buffer overruns
   -- stack smashing
      -- putting code on the stack
      -- using nops as a "runway"
      -- overwriting the return address to point to the runway
   -- defenses
      -- remove execute permission for the stack segment
         (trampolines, nested functions, signal handlers, tricks)
      -- StackGuard: put a "canary" at the end of each stack frame
         when you call the function; before you return, check the canary
	 (tricks; can trick the program into disclosing the canary)
      -- don't put allocated automatic variables on the stack
         (use e.g. the heap, or a secondary stack)
      -- full bounds checking (slow)
      -- use a safe language, e.g. Java
   -- other tricks
      -- avoiding '\0's, avoiding lower-case letters (for code
         that does strcpy(buffer, strtolower(getenv("HOME")));)
	 e.g. self-modifying code
      -- put malicious code in env variable or elsewhere in heap/data segment,
         instead of on the stack; then overwrite return addr to
	 point to that code
      -- overwriting function pointers
         if a function pointer occurs in the code
	 (is passed as an arg) and is called in the code
      -- use stdio (overwrite __iob[0])
      -- overwriting return address to point to a library call
         (e.g. system()); can also point to two library calls
	 (e.g. setuid() plus system()) if first one takes one arg
	 return-into-libc
      -- it keeps going; I can't even keep track (and I do try)
   -- note: there have been buffer overflows in libcrt.0, which
      meant that *EVERY* setuid program was vulnerable at one point!
-- the internet worm
   -- holes:
      -- sendmail: used debug backdoor
      -- fingerd: stack smashing
         (but I saw one claim that one could have simply overwritten the
	 string "/usr/bin/finger" (in the data segment) with "/bin/sh")
      -- other uses: once it got access to a single user on a system,
         it tried to break into other accounts on the same system by
	 guessing passwords; then spread by
      -- rexec, rsh: transitive trust
   -- story:
      -- not intended to be harmful
      -- not intended to be released to the world
      -- intended to be tried out on a single simple subnet
      -- it escaped.  oops...
      -- some coding errors meant that the stuff intended to prevent/limit
         its propagation didn't work
      -- lots of press
      -- big legal case: should law be interpreted as "you must have
         intended to cause the harm to be found guilty", or as
	 "to be found guilty, you only need to have intended to have
	 created the tool which caused the harm, you didn't need to
	 have intended to cause any harm"?  law came down on strict side;
	 may have made for a good sentence in this case, but not necessarily
	 for good law (hard cases make for bad case law)
      -- perpetrator has done his time, paid his price
         (perhaps far more than necessary)
      -- all in all, more a sad story than an evil story
      -- the amazing thing is not that it happened; but that it
         hasn't happened again!
      -- question: what has changed since the worm?
-- other holes
   -- /tmp races
   -- resource limitations
   -- perror("")
@
