head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 iang:1.1.1;
locks    ; strict;
comment  @% @;


1.1
date     98.09.02.16.15.21;  author iang;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.09.02.16.15.21;  author iang;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@\documentclass{slides}
\usepackage{landscape}
\pagestyle{plain}
\raggedright
\begin{document}
\pagestyle{plain}
\newcommand\dolengths{ %
\setlength{\topsep}{0in}
\setlength{\parsep}{0in}
\setlength{\parskip}{.1in}
\setlength{\itemsep}{0in}
}
\addtolength{\textheight}{1in}
\addtolength{\topmargin}{-1.3in}


\begin{slide}{}
{
\Large
\begin{center}
Protection and OS security
\end{center}
}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Admin} \end{center} \vskip 1.5in
Administrivia:
readings on the web page.

\begin{center} \tt
http://www.cs.berkeley.edu/\~{}daw/cs261/
\end{center}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Definitions} \end{center} \vskip 1.5in
Computer security: \\
\begin{quote}
Techniques for computing in the presence of adversaries.
\end{quote}

Cryptography: \\
\begin{quote}
Techniques for communicating in the presence of adversaries.
\end{quote}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Definitions} \end{center} \vskip 1.5in
Protection: \\
\begin{quote}
The subset of computer security which deals with
controlling access to information stored locally.
\end{quote}

Traditionally excludes issues arising from networks.

Traditionally associated with operating systems,
and in particular with centralized mechanisms. \\
Note that the typical role of an OS is to manage
multiplexed access to resources; protection is about
access control, but not more general resource management issues.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Protection} \end{center} \vskip 1.5in
Three categories of security goals:
\dolengths \begin{itemize}
\item Confidentiality:
	preventing unauthorized release of information
\item Integrity:
	preventing unauthorized modification of information
\item Availability:
	preventing denial of service attacks
\end{itemize}
Protection is about providing all of these in the setting
of a single machine.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Protection} \end{center} \vskip 0.5in
The protection problem
can be approximately factored into three sub-problems:
\dolengths \begin{itemize}
\item Access control: enforcement of restrictions on who may access what
\item Policy selection: a human-level statement of goals for the
	security subsystem
\item Policy specification: human-computer interface
\end{itemize}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Access control} \end{center} \vskip 0.5in
The access control problem is to decide whether a given request
should be granted.

Can be conceptually divided into two steps
\dolengths \begin{itemize}
\item Authentication:
	verifying the identity of an entity making a request.
\item Authorization:
	verifying whether the policy allows the request.
\end{itemize}
\end{slide}


\begin{slide}{}
\begin{center} {\Large Policy} \end{center} \vskip 0.5in
Policy:
\dolengths \begin{itemize}
\item A specification of the desired security properties of the system
\item Roughly speaking, the goals which security mechanisms are
	intended to achieve
\item ``Human intent''
\item Thus, policy cannot be automated; it is a fundamentally
	human-centered decision about ``what ought to be''
\item A good rule of thumb for formulating computer security policy
	is that it should roughly correspond to real-world policies
	\dolengths \begin{itemize}
	\item For example, at a bank, two officers may be required
		to both authorize the opening of a bank vault
	\item Further constraints might be placed (i.e. that the vault
		may only be opened between the hours of 9:00--3:00)
	\item If documents are moved from the vault and stored on
		bank computers, the computer security policy should
		probably uphold those same properties
	\end{itemize}
\end{itemize}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Subjects and objects} \end{center} \vskip 0.5in
A useful way of thinking about access control is in terms of
{\em subjects} and {\em objects}.

A {\em subject} is an entity making a request.
(An executing program, a user sitting at a terminal, etc.)
Also called a {\em principal}.
In Unix, this is just a user-id.

An {\em object} is an item to which access is requested.
(A byte in memory, a file on disk, a printer, etc.)
\end{slide}

\begin{slide}{}
\begin{center} {\Large Subjects and objects, cont.} \end{center} \vskip 0.5in
Then, the policy specification can be translated into an
{\em access control matrix}.

The rows of the matrix are labelled by the subjects,
and the columns by the objects.
The entry at row $S$ and column $O$
specifies whether $S$ may access $O$.

In this language,
we see that authentication is the problem of identifying
the subject making the request,
and checking authorization just comes down to checking a
matrix entry.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Access control, cont.} \end{center} \vskip 0.5in
Usually, ``all-or-nothing'' access control is insufficient;
we want more fine-grained controls.

In this case,
we may establish a set of {\em permissions}.
(For example: read, write, execute, etc.)
Then, the matrix entry at location $(S,O)$
is filled with the set of permissions which $S$ may acquire on $O$.

This provides a way to view the system which is convenient for analysis.
For instance, suppose we want to find whether there is any
way which a subject $S$ may send a message to another subject $S'$.
Then we may simply search for all objects $O$ which $S$ has write
permission to, and check whether $S'$ has read access to them.
% Actually, we probably want a transitive closure, but this is a
% pedagogical example
\end{slide}

\begin{slide}{}
\begin{center} {\Large Mandatory access control} \end{center} \vskip 0.5in
{\em Discretionary access control}: owner of each object gets to
set the permissions on that object.

{\em Mandatory access control} (or MAC): system administrator gets some
control over the access controls on every object.
Usually found in military systems (e.g. anything marked ``classified''
may not be sent to a printer in an unclassified facility).
We'll discuss this in detail next week.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Objects, cont.} \end{center} \vskip 0.5in
What are objects in real life?

Some examples: pages of memory, files on a storage system,
I/O devices, communications channels to other subjects.
%Next, we'll explore some standard techniques for enforcing these
%sorts of protection semantics.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Access control lists} \end{center} \vskip 0.5in
One typical way to implement access control is via
{\em access control lists}, or ACLs.

In this approach, each object is tagged with an ACL.
The ACL identifies a list of subjects $S$ which may access the object.
For each subject $S$, the ACL lists the permissions $S$ has on the object.

An example:
\begin{verbatim}
allow read,write Alice,Jim
allow read John,Jim,Bob
allow delete Alice
deny read Eric
\end{verbatim}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Capabilities} \end{center} \vskip 0.5in
Capability: An unforgeable ``ticket'' which presents proof that the
presenter is authorized to access the specified object.

Example:
\[ (O,\mbox{read}) \]
means the holder of this capability
has read permissions on object $O$.

Permissions may be further restricted, e.g.
by including an expiration date, etc.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Capabilities, cont.} \end{center} \vskip 0.5in
Example implementations:
\dolengths \begin{itemize}
\item Some old computer architectures supported capabilities in hardware.
	The memory system provided the unforgeability properties by
	tagging each memory word; only special privileged processes
	(e.g. the OS kernel) could create new capabilities.
\item More commonly, enforced in the OS:
	the OS keeps track of all your capabilities for you,
	and manipulating them requires a system call.
\item Pointer solutions:
	a capability is a pointer to the object in question.
	The address space is so large that one cannot guess the
	pointer by pure trial and error.
\item Cryptographic solutions:
	a capability is a ticket encrypted under a key only
	the OS knows.
\item Safe languages:
	a type-safe language gives capabilities a different type
	and enforces strict rules on the use of that type.
\end{itemize}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Comparing ACLs and capabilities} \end{center} \vskip 0.5in
Access control decisions:
\dolengths \begin{itemize}
\item ACLs: made at time of each access request
	(late binding).
\item Capabilities: made once when capability is granted
	(early binding).
\item Thus, capabilities potentially allow much higher performance by
	caching access control decisions.
\end{itemize}

Passing privileges to another subject:
\dolengths \begin{itemize}
\item ACLs: usually not possible without explicit provisions for delegation.
\item Capabilities: usually may be copied and passed to other entities at will.
\end{itemize}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Comparing ACLs and capabilities, cont.} \end{center} \vskip 0.5in
Revocation of priviliges:
\dolengths \begin{itemize}
\item ACLs: easy; just change the ACL list.
\item Capabilities: impossible;
	once a capability is granted, it usually cannot be revoked.
	(Expiration dates help somewhat.)
\end{itemize}

It's clear that all of the interesting tradeoffs come in the
{\em dynamic} behavior of the system.
\end{slide}

\begin{slide}{}
\begin{center} {\Large ACLs and capabilities} \end{center} \vskip 0.5in
A useful implementation technique:
\begin{quote}
When an ACL is too slow, inflexible, or unwieldy,
grant access to a capability by checking an ACL and
then grant access to objects according to the capability.
\end{quote}
This is known as a hybrid approach.

For example, in Unix, when you
{\tt open()} a file, it checks the file's ACL.
The {\tt open()} returns a file descriptor, which is
just a capability to access the file;
the file descriptor may be passed around at will.
\end{slide}


\begin{slide}{}
\begin{center} {\Large Address spaces} \end{center} \vskip 0.5in
For a nice example,
let's look at how memory protection works in Unix.

Element of protection is a memory page.

Enforcement is provided by the combined effort of the OS kernel
and the hardware memory management subsystem.

The main idea is to use virtual memory for protection:
authorization is checked by OS when you load a page of memory into
your virtual address space, and hardware ensures that memory accesses
are restricted to valid pages.

You can think of the set of the virtual memory map loaded into
the hardware as capabilities granting access to physical memory;
the OS kernel enforces an ACL on physical pages of memory.

% draw stuff on the board now
\end{slide}

\begin{slide}{}
\begin{center} {\Large Dynamics} \end{center} \vskip 0.5in
Enforcing access control on a static system with an unchanging
access control policy is ``easy.''
The problem becomes much harder when you introduce {\em dynamics},
e.g. the ability to modify policy while the system is running.

A useful permission (like read, write, etc.) in this context is
the permission to modify the ACL for the object in question.

But note how difficult it becomes to analyze the system.
For instance, suppose we want to find whether there is any
way which a subject $S$ may affect an object $O$ in any way.
Then it is not enough to just check whether $S$ has write permission
on $O$; one must also check whether $S$ has permission to modify
the permissions for $O$, or whether $S$ can modify anything
which can modify $O$, etc.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Groups} \end{center} \vskip 0.5in
Often it is useful to group a list of subjects together
and specify a common set of permissions for the group.
This is intended to simplify the specification (and management)

Examples: graduate-students, cs261-students, developers.

Then an ACL for this course's syllabus might look like
\begin{verbatim}
allow  read,write   Eric Brewer, Ian Goldberg, David Wagner
allow  read         cs261-students, graduate-students
\end{verbatim}

Warning: be careful with dynamics of group membership!
\end{slide}

\begin{slide}{}
\begin{center} {\Large Authentication} \end{center} \vskip 0.5in
Authentication is about identifying the person who initiated a given request.

A few categories:
\dolengths \begin{itemize}
\item Something you know: passwords, cryptographic keys
\item Something you have: hardware tokens
\item Something you are: biometrics
	\dolengths \begin{itemize}
	\item e.g. fingerprints, iris scans, hand-geometry,
		key-typing rates, etc.
	\end{itemize}
\end{itemize}
Strongest approach is to use several of these in combination.
\end{slide}

\begin{slide}
\begin{center} {\Large Password authentication} \end{center} \vskip 0.5in
Many systems just require the user to enter a secret {\em password}
known to the system.

Disadvantage: the sys-admin knows your password. \\
Fix: when the account is created,
apply a non-invertible one-way hash function to the secret password
and store the result.  Then a login request may be validated by
hashing the password provided and comparing it to the value stored earlier.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Passwords, cont.} \end{center} \vskip 0.5in
Weaknesses:
\dolengths \begin{itemize}
\item Guessability: most people pick poor passwords.
	\dolengths \begin{itemize}
	\item The Internet Worm (1988) included automatic password-guessing
		code.
	\end{itemize}
\item Eavesdropping: passwords are usually sent in the clear
	over the network, where they may be intercepted.
	\dolengths \begin{itemize}
	\item In 1995, CERT issued a security advisory noting that
		intruders had broken into many ISPs and backbone routers
		and intercepted tens of thousands of account passwords.

		CERT's advice?  Every Internet user should change their
		password.
	\end{itemize}
\end{itemize}
These weaknesses have been known for decades.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Secure authentication} \end{center} \vskip 0.5in
For authentication across a network,
passwords are obsolete technology.

The only known solution is cryptography;
wait two weeks.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Enforcement} \end{center} \vskip 0.5in
How is access control enforced?
\dolengths \begin{itemize}
\item Hardware
\item Operating system kernel
\item Trusted subsystems
\end{itemize}

In practice, hardware provides very simple mechanisms,
which are used to bootstrap an OS kernel.
Then the security policy is refined by trusted programs run under
the OS.
\end{slide}

\begin{slide}{}
\begin{center} {\Large Hardware architectures} \end{center} \vskip 0.5in
The concept of privileged execution states is critical.
\dolengths \begin{itemize}
\item One simple concept: two modes of execution, {\em supervisor} mode
	(or {\em privileged} mode) and {\em unprivileged} mode
	(or {\em user} mode).
\item May only access some features (memory mapping management, I/O, etc.)
	in supervisor mode.
\item OS kernel runs in supervisor mode;
	normal programs run in unprivileged mode.
\item May only switch to {\em privileged} mode by way of predefined
	gates (e.g.: a system call)
	which contain special checks and guards.
\end{itemize}
A refinement of this approach is {\em rings}, where there are
multiple levels of privilege. \\
\end{slide}

\begin{slide}{}
\begin{center} {\Large Upgrading privileges} \end{center} \vskip 0.5in
How does a call to a privileged-mode process work?
\dolengths \begin{itemize}
\item Trap to operating system
\item Operating system checks arguments
	\dolengths \begin{itemize}
	\item Be careful with call-by-reference arguments and return addresses!
	\end{itemize}
\item OS executes privileged system call code
\item Return to user-mode
\end{itemize}
\end{slide}

\begin{slide}{}
\begin{center} {\Large Saltzer/Schroeder paper} \end{center} \vskip 0.5in
General notes:
\dolengths \begin{itemize}
\item In 1975, most systems didn't provide much security, or only
	recently contemplated the issues.
\item Military a driving force behind much research on protection.
\item Not much distinction made between hardware architectures and
	software operating systems.
\item Lots of basic ideas known in 1975 keep getting independently
	``re-discovered.''
\item Some of it (e.g. details of Section II: descriptor-based protection
	systems) is basically outdated.
\end{itemize}
More on Wednesday\ldots
\end{slide}

\end{document}
@


1.1.1.1
log
@Repository for CS 261 stuff
@
text
@@
