head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	98.11.06.00.40.42;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	98.11.06.00.40.11;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	98.11.06.00.39.35;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.11.06.00.31.17;	author daw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@<html><head><title>CS261 Homework 3</title></head>
<body bgcolor="white">
<h1 align="center">CS261 Homework 3</h1>

<h2>General notes</h2>
<p>Give detailed answers to each of the following problems.</p>

<p>This problem set is due Friday 20 November.
Send your answers in plain ASCII text by email to
<a href="mailto:cs261-homeworks@@joseph.cs.berkeley.edu"><tt>cs261-homeworks@@joseph.cs.berkeley.edu</tt></a>.
Alternatively, if you prefer to use dead trees, you may hand in
your solutions in class on that Friday.</p>


<h2>Question 1</h2>
<p>The following program is intended to allow unprivileged users to edit
the <tt>moderators</tt> file, which is
used for configuration of Usenet news servers.
(You don't need to understand anything about Usenet or the
<tt>moderators</tt> file to do this assignment.)
It is installed setuid root.
The code is available <a href="hw3code.txt">here</a>.

<p>Find as many security vulnerabilities as you can in the code.

<h2>Question 2</h2>
<p>This question asks you to explore some of the consequences
of active networks, where packets
can contain mobile code that is executed by the routers along the
path.

<p>For concreteness, we can think of 'adaptive routing'
as a sample application: if your TCP connection to France is too slow
because of poor bandwidth on the transatlantic link and for some reason
you happen to know that there is a much faster route to France via
China, you might wish to adaptively update the route your TCP packets
take.  In this case, you would "push" some mobile code into each
router along the way; the mobile code would run at each router before
the packet is forwarded and select which interface to send it out over.

<p>We describe below a series of extensions to the IP protocol suite
which allows for progressively more sophisticated active networks applications.
For each of the extensions below, list the security threats
that might arise and how they could be addressed.

<ol>
<li>In the simplest variant, we'd extend the IP packet format to allow
an optional extra header which contains some mobile code to run at each
router.  The mobile code is specified as BPF bytecodes.
Each router which receives such a packet first  verifies
that the bytecode contains no backwards loops, and then interprets the
bytecode.  The only memory locations the bytecodes are allowed to read
are (1) the packet itself, and (2) a global list of interfaces available
at the router.  (No writes to memory are allowed.)
Just before exiting,
the bytecode should store the desired interface in a fixed register;
the router should use that interface to forward the packet on.
<li>One obvious performance issue with the previous scheme is that
it requires an overhead of potentially hundreds of bytes on every packet.
So we use the notion of "flows" to amortize the cost of specifying
the mobile code.
Each packet is associated with a flow somehow (for instance, in TCP
the flow ID might be the (src host, dst host, src port, dst port) tuple;
for otehr protocols, we might simply extend the packet format to allow
for a 32-bit flow ID).
We add a "set handler" option which allows endpoints to specify
a single chunk of mobile code which will be run at the router
on every packet reception.
This allows us to specify a chunk of mobile code once; then all
subsequent packets will inherit the same code without incurring any
bandwidth overhead.
<li>We decide we might like to allow the mobile code to make routing
policy decisions based on the payload of the packets.
Since this might require scanning the entire packet and possibly
interpreting higher-level protocols, we will need to be able to write
loops in bytecode.
Therefore, we eliminate the restriction on backwards jumps, and allow
arbitrary control flow in the bytecode.
<li>It occurs to us that it would be neat to have our handler compress
packets for us when bandwidth is scarce.
But this requires the handler to be able to modify the contents of
the packet, so we relax our security policy so that handlers are allowed
both read and write access to the packet itself.  If the handler
modifies the packet during execution, the router will forward the
modified packet instead of the original contents.
<li>To realize better compression ratios, we relax the security policy
so handlers may maintain state across packet reception events.
Thus, when a new flow is created, we set aside a chunk of memory for
use by that flow's handler; the handler for is allowed read and write
access only its own chunk of memory.
<li>An astute reader points out that decompression may increase the
size of a packet; if this exceeds the network's MTU, our decompression
handler may need to send multiple packets.
So we allow handlers to construct whole IP packets in their own memory
space and invoke a special operation to send that packet over the wire.
<li>Users clamor for more features: threads, utility libraries,
a better development language, etc.  So the protocol is extended to
allow handlers to be specified as Java bytecodes instead of BPF bytecodes;
the Java bytecodes get executed in a JVM on the router.
</ol>


<h2>Question 3</h2>
<p>As we discussed in class, the firewall security model doesn't
compose well with mobile code.  This questions asks you to consider
various attempts to deal with this tension.

<ol>
<li> If it is acceptable to block all mobile code at the firewall,
how would you do so and what problems might you expect to encounter?

<li> Suppose next that you can't get away with blocking all mobile code:
you are asked to block dangerous mobile code and
let through (the majority of) safe mobile code.  (But it is ok to be cautious
and occasionally block some mobile code which might have been safe.)
What additional problems does this introduce, and how might you try
to solve them?

<li> For each of the problems you listed, who is to blame?
The firewall, or the end host?
</ol>

</body></html>
@


1.3
log
@*** empty log message ***
@
text
@d119 1
a119 1
<li> For each of the problems listed above, who is to blame?
@


1.2
log
@*** empty log message ***
@
text
@d108 2
a109 1
<p><b>A</b>. If it is acceptable to block all mobile code at the firewall,
d112 1
a112 1
<p><b>B</b>. Suppose next that you can't get away with blocking all mobile code:
d119 1
a119 1
<p><b>B</b>. For each of the problems listed above, who is to blame?
@


1.1
log
@*** empty log message ***
@
text
@d17 4
a20 1
the <tt>moderators</tt> file (used for configuration of Usenet news servers).
d63 4
a66 2
the flow ID might be the (src host, dst host, src port, dst port) tuple),
and we add a "set handler" option which allows endpoints to specify
d83 3
a85 1
both read and write access to the packet itself.
d98 2
a99 2
allow handlers to be specified as Java bytecodes which get executed
in a JVM on the router.
@
