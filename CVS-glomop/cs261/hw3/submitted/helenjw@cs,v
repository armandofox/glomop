head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.20.26.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From helenjw@@barque.cs.berkeley.edu  Fri Nov 20 17:54:23 1998
Return-Path: helenjw@@barque.cs.berkeley.edu
Received: from barque.cs.berkeley.edu (barque.CS.Berkeley.EDU [169.229.62.44]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id RAA17910 for <cs261-homeworks@@joseph.cs.Berkeley.EDU>; Fri, 20 Nov 1998 17:54:16 -0800
Received: (from helenjw@@localhost)
	by barque.cs.berkeley.edu (8.8.7/8.8.7) id RAA21284
	for cs261-homeworks@@joseph.cs; Fri, 20 Nov 1998 17:54:23 -0800
Date: Fri, 20 Nov 1998 17:54:23 -0800
From: "Helen J. Wang" <helenjw@@barque.cs.berkeley.edu>
Message-Id: <199811210154.RAA21284@@barque.cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.Berkeley.EDU
Status: RO

CS261 Homework 3
Helen J. Wang

Question 1:
 
I find the following security vulnerabilities in the program:
- Moderator lock file (/tmp/vi_moderators.lock) is created on local drive,
  which is not effective at all if the moderator file is NSF mounted. Similarly
  the debug file is also on local drive, and created with umask "077" which
  is also not appropriate for a multi-user machine -- first writer of debug
  file can always modify the file.

- The program is run as root by default and most of the time even though 
  it is not necessary at many places, e.g., when "vi" is called, a malicious
  user can start a shell with root priviledge in vi. This violates the 
  fail-safe principle, and is very dangerous. (This is manifested in 
  function "secure_open_as_user")

- Buffer overrun problems can occur on line 68 (sprintf) for buffer "line", 
  and on line 157 (sprintf) for buffer "msg".

- Lack of error checking: e.g., after file opens in line 98, 99, may read/write
  information from unintended files; e.g. no checking after calling groups on
  line 33 "getGroups".

- Race conditions can happen between setting privildge (line 33,34) and using
  the priviledge between "looksok(tmpf)" and "rename(tmpf..)" (line 168, 169)

- Predictable "tmpname" in line 162 can trap the user to copy the wrong
  file (not the moderator file).

Question 2:

1. Denial of service can be easily achieved. Even though no loop may 
   be possible on a single router due to the restriction of no backward
   jump, but loops can be formed across several routers since the mobile
   code can determine the routing, and denials correct forwarding of packets.

2  Denial of service happen when run out of memory, which is easy, some number
   of long running flows will run out of memory, and deny router's service
   for other flows.
   In addition, anyone can set the handler for a flow which can cause all
   possible attacks.  Need authentication here.

3. Denial of service can be achieved by a single piece of mobile code
   containing an infinite loop. This can alleviated by allowing only
   max CPU time a mobile code can use.

4  Again, if setting handler is not authenticated, or the handler is
   subverted, packets flowing in the network can be easily tamperred, all 
   possible security attack can also happen in this case. But authentication 
   makes packet processing slow, can make the router the bottleneck, and 
   therefore cause congestion.

5 router keeps more state for each flow.  Denial of service due to memory
  exhaustion is much easier.  A lot more information about a flow is exposed 
  to router, or some malicious mobile code.

6.the mobile code can form IP fragmentation attacks. Sending one packet
  is equivalent of sending many packets, and is more efficient for attacks. 
  Also, creation of new packets can do IP-spoofing more effectively, the
  mobile code on firewall can generate IP-spoofing packets, this, in turn,
  can cause lots of other attacks exploiting ip-spoofing.

7. all the security holes in Java are here with the routers.


Question 3: 
1. It is hard to detect whether mobile code is being transferred, it is
   all 0's and 1's in the network. We really need the application level
   protocol that supports detecting what is mobile code. Then , an application 
   gateway is able to block the mobile code according to 
   the application protocol.  In any case, if sender and receiver of 
   mobile code cooperate for the mobile code transfer, there is no
   way of preventing it through firewall or application level gateway.
   Application level gateway may need to keep a lot of state 

2. We can only allow the mobile code signed by some trusted entity to 
   pass through.  Or we can only allow the proof carrying mobile code
   that can prove itself pass by.  In both cases, there are still risks.
   In the first case, all the endhosts protected by the firewall need to 
   trust the signer, and revoking the running signed mobile code, in 
   addition, programming bugs is inevitable even if
   the intent is good. A more restricted case is to have a trusted entity
   sign only the code, but also the feature of the code, such as whether
   it has networking code, and the firewall can decide to block all signed
   mobile code without networking code.  The risk in the second case lies
   in the correctness and effectiveness of the proof.

3. difficulty of identifying mobile code: end host may be blamed for obtaining
	mobile code in an unobvious way, or illegally with regard to firewall's
	rule
   Cannot trust signer: if the signer is not trust worthy, it is firewall's
	blame to have trusted the wrong guy
   Buggy mobile code: it is end host's blame to trust the potentially buggy
	mobile code.
   incorrectness or ineffectiveness in proof: firewall is blamed for accepting
	bad proofs.

@
