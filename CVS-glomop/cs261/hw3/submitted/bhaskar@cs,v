head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.20.26.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From bhaskar@@cs.berkeley.edu  Fri Nov 20 20:19:48 1998
Return-Path: bhaskar@@cs.berkeley.edu
Received: from huginn.CS.Berkeley.EDU (huginn.CS.Berkeley.EDU [128.32.35.5]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id UAA17986 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 20:19:47 -0800
Received: from bidi (bhaskar@@bidi.HIP.Berkeley.EDU [136.152.118.231]) by huginn.CS.Berkeley.EDU with SMTP (8.7.1/8.7.1) id UAA08681 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 20:19:41 -0800 (PST)
Date: Fri, 20 Nov 1998 20:19:57 -0800 (PST)
From: Bhaskaran Raman <bhaskar@@cs.berkeley.edu>
X-Sender: bhaskar@@bidi
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: HW3 submission
Message-ID: <Pine.LNX.3.96.981120201843.343B-100000@@bidi>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

CS261, Fall 1998, HW3 Solutions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bhaskaran Raman, SID: 13738797

Question 1
~~~~~~~~~~

(1) "looksok" is not good. It just checks for invalid characters and
    the default is to okay the file.

(2) Even assuming "looksok" is fine, there's a race condition between
    "if looksok()" on line 168 and "rename()" on line 169. The user
    who edited the file could change the file between the check and
    the rename.

(3) Buffer overrun problem: in function "debug", sprintf in line
    68. The variable "line" is only 1024 bytes long, but "progname" is
    copied onto it. And "progname" can be arbitrarily long.

(4) In creating the lock file, O_EXCL flag is used. The OS should not
    follow sym-links (This of course is not a problem with the
    program).

(5) Does "tmpnam" have any race condition problems like "mktemp" does?

Question 2
~~~~~~~~~~

Note: all the attacks are cumulative. Attack possible in "i" is
possible in "i+1".

(1) Denial of service attack is much more powerful now. We can just
    let a few packets bounce between a bunch of routers (far away from
    the origin of the packets) and those routers are permanently
    down. The whole Internet can be stopped in a few seconds. TTL will
    stop the looping eventually but that is way too ineffective. A
    partial & inefficient fix would be to record the route the packet
    has taken on the packet itself and detect loops.

(2) Now, anyone can set the handler for every flow through a router -
    more than just denial of service attack is possible. Now, one can
    write an "internet-wide" packet sniffer!! Man-in-the-middle attack
    of any of the higher layers is easier since now anyone can come in
    the "middle". Fix: "set-handler" should be authenticated. IPSEC
    can help in doing this.

(3) Now, I can just take over the machine with a "for(;;)". Partial
    fix: timeout & kill mobile code.

(4) This is cool! I now have all the CPU power of the world (at least,
    those in the routers). I can just take over any machine by running
    arbitrary code on it. Getting a root-shell is only a few steps
    away from getting to run arbitrary code. Even without a root
    shell, I can run an OS simulator - slow, but I have a million
    machines. Partial fix: timeout and kill the mobile code.

(5) Now a router is a more general CPU server. You can get more memory
    than the MTU of the packets. Also, just by sending a bunch of
    "set-handler" packets, we can take up all memory on the router. A
    partial fix would be to restrict the amount of memory that a flow
    can take up. A satisfactory fix is not possible with such a "rich"
    mechanism.

(6) Now, firewalls are useless. The mobile code can just send an
    arbitrary packet from the router after the firewall (or at the
    firewall). Fix: Just to solve this problem, we may be able to
    restrict the construction of an arbitrary IP header - the code may
    be allowed to touch only a few parts of the header. The contents
    of the IP packet may be allowed only from the decompressed
    data. But still, pkt filters based on TCP/UDP ports are
    useless. Also appln level gateways are useless (well, you can
    potentially run an entire malicious appln in any router).

(7) A router is more than a CPU server - it has stuff that you dont
    need to write in the mobile code. Defining a security policy for
    java byte code that is part of the handler is going to be
    tricky.

Question 3
~~~~~~~~~~

(1) If the user behind the firewall wants to run mobile code, there is
    virtually no way of preventing it. The firewall simply cannot know
    which is mobile code and which is not. An extreme example is
    mobile code in steganography. Even without that, how does the
    firewall know that a stream of bytes is mobile code or not?

(2) If we assume that mobile code would only be transferred through
    html docs and as applets, it may be possible to identify mobile
    code at an appln level proxy. Now, we have to differentiate
    between safe and unsafe mobile code. To do this, we can implement
    policies like: any mobile code using file libraries is unsafe, any
    mobile code using network libraries is unsafe etc. Now, we have to
    deal with the problem of what happens when a graphics library used
    by an applet uses a file library. The firewall certainly cant do
    anything about that. Fix for this? Should have some mechanism for
    specifying that an applet should not use any file libraries. And
    the firewall should be able to modify this specification that
    comes along with the applet on the fly.

(3) For the first problem, the end-host is to blame. The problem
    arises since the end-host can virtually run anything as mobile
    code. For the second problem, again, there is not enough mechanism
    in java (as of now) to implement a flexible policy at the
    firewall.


Bhaskaran Raman, 510-642-9076 (Off), 510-644-1906 (Res)
http://www.cs.berkeley.edu/~bhaskar
Visit ASHA at http://www.ashanet.org/
______________________________________
INDIA Together: "we know, and we care"

@
