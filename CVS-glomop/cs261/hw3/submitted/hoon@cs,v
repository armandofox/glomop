head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.20.26.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@
CS261 Homework 3

ByungHoon Kang

Question 1

The following program is intended to allow unprivileged users to
edit the moderators file, which is used for configuration of Usenet
news servers. (You don't need to understand anything about Usenet
or the moderators file to do this assignment.) It is installed setuid
root. The code is available here; or you can use a version with line
numbers if that makes your life easier (but beware that the version
with line numbers will not compile, of course). 

Find as many security vulnerabilities as you can in the code. 

Line 18,19, /tmp/vi_moderator.lock is created using O_EXCL 
mode in line 84 but we can create vi_moderator.lock as symlink and 
have it pointing to null, if the OS follows the symlink and thinks it
is not exist, it can be exploitable.

Line 68,69,157,158, sprintf(msg …); debug(msg) etc. can be exploited 
buffer overrun by overflowing the line[1024] buffer using msg, 
progname, ctm combination. Or overflowing msg[512].

Line 162-169, looksok(tmpf) can be fooled by having the tmpf file with no 
shell escape but the MODF actually ends up contain shell 
Escape by exploiting race condition to /tmp directory.  
(By guessing the return value of tmpnam(NULL) we can 
create same tmpf file with shell escape in it.  
In line 168 tmpf binds to the file with no shell-escape but in line 169 
tmpf binds to the file with shell escape that we created by 
manipulating race condition to /tmp directory.

Or in line 134 since it opens without O_EXCL for opening tmpf file 
and the shell escape can be executed as root. 

Or in line 99 since it opens without O_EXCL for opening tmpf file 
and the shell escape can be executed as root.

Line 117, execl(“/usr/bin/vi”…) and in certain shell / is IFS and we 
can exploit this.

Line 18, we can create /tmp/debug.vi_moderator with shell escape along 
with setuid(0) in line 36-43 in secure_open_as_user call. It is 
exploitable since the fopen in line 38 is done without O_EXCL and the 
save-id is still 0 when the fopen call is running in line 38. The mallory 
still be able to call setuid(0) to get root access since saved-uid is 
still 0(root) in fopen shell script exploitation.





Question 2

This question asks you to explore some of the consequences of
active networks, where packets can contain mobile code that is
executed by the routers along the path. 

For concreteness, we can think of 'adaptive routing' as a sample
application: if your TCP connection to France is too slow because
of poor bandwidth on the transatlantic link and for some reason you
happen to know that there is a much faster route to France via
China, you might wish to adaptively update the route your TCP
packets take. In this case, you would "push" some mobile code into
each router along the way; the mobile code would run at each
router before the packet is forwarded and select which interface to
send it out over. 

We describe below a series of extensions to the IP protocol suite
which allows for progressively more sophisticated active networks
applications. For each of the extensions below, list the security
threats that might arise and how they could be addressed. 

   1.In the simplest variant, we'd extend the IP packet format to
     allow an optional extra header which contains some mobile
     code to run at each router. The mobile code is specified as
     BPF bytecodes. Each router which receives such a packet
     first verifies that the bytecode contains no backwards loops,
     and then interprets the bytecode. The only memory locations
     the bytecodes are allowed to read are (1) the packet itself,
     and (2) a global list of interfaces available at the router. (No
     writes to memory are allowed.) Just before exiting, the
     bytecode should store the desired interface in a fixed register;
     the router should use that interface to forward the packet on. 

-Mallory’s bytecode might not update the fixed register so that it can 
follow the previous packet’s interface.
-> Make sure the fixed register is zeroed out after every packet 
processing.

-Race condition: Mallory can update the fixed register right after 
other packet’s bytecode processing is done so that the packet can be 
redirected to Mallory’s nest.
-> Make sure the access to the fixed register is locked per packet 
processing.

-Sounds like source routing attack can be exploited since mallory can 
control the BPF code for its attacking packet to be delivered to a 
target.  IP source based packet filtering may be fooled.
-> Router can record the travel history and authenticate it so that it 
can’t be forged.  And use this routing history information in packet 
filtering.

c.f.
-Denial of service attack might be easily exploited by simply sending 
many packet to router and make the queue overflow since the 
bytecode processing is required per every packet with huge overhead.  

-The global interface need to be securely installed out-of-band mechanism.
-The global interface of the router could be known to Mallory clearly, not 
a big deal but could be used as an information for further attack.  

   2.One obvious performance issue with the previous scheme is
     that it requires an overhead of potentially hundreds of bytes
     on every packet. So we use the notion of "flows" to amortize
     the cost of specifying the mobile code. Each packet is
     associated with a flow somehow (for instance, in TCP the
     flow ID might be the (src host, dst host, src port, dst port)
     tuple; for otehr protocols, we might simply extend the packet
     format to allow for a 32-bit flow ID). We add a "set handler"
     option which allows endpoints to specify a single chunk of
     mobile code which will be run at the router on every packet
     reception. This allows us to specify a chunk of mobile code
     once; then all subsequent packets will inherit the same code
     without incurring any bandwidth overhead. 

Mallory can insert its attacking packet within the flow and easily 
perform IP packet insertion attack since any packet in between the 
flow can be treated with same handler code.
-> authenticate and encrypt each packet and sequence number per 
hop-to-hop basis.

   3.We decide we might like to allow the mobile code to make
     routing policy decisions based on the payload of the packets.
     Since this might require scanning the entire packet and
     possibly interpreting higher-level protocols, we will need to
     be able to write loops in bytecode. Therefore, we eliminate
     the restriction on backwards jumps, and allow arbitrary
     control flow in the bytecode. 

- There is no guarantee that the bytecode can be finished in 
reasonable amount of time; hence can consume resources(CPU,bus) 
at the router. (Denial of service attack)
->Setting the timer for each mobile code to run.

- Mallory code can stay and make interaction to another mallory's code to 
subvert or consume the router's resource.
- Malicious bytecode can stay in the router(we can have loops) and 
could watch on-going traffic and its packet content. (If the access
control is enforced, Mallory can not look at other packet's content 
directly, but some sort of security hole could trick other packet tell its 
own data to Mallory since other packet's data portion is readable now.)
->end-to-end encryption and hop-to-hop encryption is needed
->transient bytecode: when the last packet in a flow leaves the router 
make it sure the bytecode is kicked out from memory. 

And also make sure not to allow a transient code call another 
transient code since this interaction can be badly exploitable. We need 
cleaner and unwieldy safety/security closure boundary somehow to enforce 
our safety/security invariants.


   4.It occurs to us that it would be neat to have our handler
     compress packets for us when bandwidth is scarce. But this
     requires the handler to be able to modify the contents of the
     packet, so we relax our security policy so that handlers are
     allowed both read and write access to the packet itself. If the
     handler modifies the packet during execution, the router will
     forward the modified packet instead of the original contents.
 
Mallory can modify its packet content after it bypass the firewall 
with disguised normal packet. When Mallory's packet is inspected at 
firewall it contains no attacking content, but the packet content can 
be modified by handler code to have such content at the router 
located inside firewall.
-> Firewall can decompress and/or applying the handler’s 
modification and filter out the attacking packet.

Mallory might be able to exploit the buffer overrun at the router by 
taking advantage of the fact that packet size can be larger than 
maximum when it is decompressed.
-> don’t assume decompressed packet size always be within the limit 
and make provision for overflowed packet size in secure way.

-The contents of packet may not be the same due to bug in handler in 
compression/decompression process. (a bit safety concern)
-> make sure bug-free non-lossy compression/decompression is used.

   5.To realize better compression ratios, we relax the security
     policy so handlers may maintain state across packet
     reception events. Thus, when a new flow is created, we set
     aside a chunk of memory for use by that flow's handler; the
     handler for is allowed read and write access only its own
     chunk of memory. 

Security: Memory protection cannot prevent that mallory's mobile 
code watch the on-going traffic; Mallory cannot read the other flow’s 
state directly from memory but might be able to trick system resource 
tell him the information.
-> try to find flaws in system service and make it to be secure service

State across packet reception events can be exploited by Mallory by 
inserting certain attacking packet at a vulnerable state such as the 
state after admission control is done.
->authenticated and encrypted sequence number within the flow


   6.An astute reader points out that decompression may increase
     the size of a packet; if this exceeds the network's MTU, our
     decompression handler may need to send multiple packets.
     So we allow handlers to construct whole IP packets in their
     own memory space and invoke a special operation to send
     that packet over the wire. 

Mallory can bypass firewall and create attacking packets inside 
firewall.
-> firewall decompress the packet and apply handler’s code and create 
new sanitized IP packets for the end node behind firewall.

Mallory can create a whole IP attacking packet at the router without 
revealing Mallory’s source.
-> Whenever the packet leaves node, the special operation replace the 
IP source field as original one.


   7.Users clamor for more features: threads, utility libraries, a
     better development language, etc. So the protocol is
     extended to allow handlers to be specified as Java bytecodes
     instead of BPF bytecodes; the Java bytecodes get executed
     in a JVM on the router. 

Mallory’s Java bytecode can watch all the traffic and its packet 
Content.
-> Hop to hop and end-to-end encryption/authentication is needed.

Denial of service attack is very easy since java bytecode can consume 
various system resources at the router.
-> Assign quota for each packet processing and limit the resource 
consumption along with timer.

Mallory’s java bytecode can access all the files and memory at the 
router since the handler’s bytecode doesn’t have applet’s security 
restriction at all
-> do appropriate access control to all system resource.

All sort of JVM’s implementation/design flaws can be exploited.
-> Try to patch bug fixed JVM as soon as possible.



Question 3

As we discussed in class, the firewall security model doesn't
compose well with mobile code. This questions asks you to
consider various attempts to deal with this tension. 

   1.If it is acceptable to block all mobile code at the firewall,
     how would you do so and what problems might you expect
     to encounter? 

- For JAVA example, we can use a proxy to scan enabling documents for 
<applet> tags and rewrite such tags in a benign form(html text 
explaining that an applet has been blocked), so never even attempts 
to fetch the attacker’s applet.  
Some other mobile code delivery is blocked in the same way by 
changing the enabling document.

-Blocking packets start with CA FE BA BE : all java class files begins 
with the 4byte hex CA FE BA BE signature; 
-> the packet might be split up and arrive out of order 
-> legitimate HTTP traffic doesn’t always occur on the same port; a 
packet filter would have to determine on-the-fly which ports on which 
hosts are being used for HTTP

-blocking by requested file name(.class or .zip or .jar) ; reject all 
browser request via HTTP,FTP, gopher etc for files with names 
ending in .class .jar;
-> blocking .zip file may block the Zip file service, so .zip file need to 
be unpacked and inspected for signature of applet to be sure.

Some other mobile code like Java script, safe-TCL can be blocked 
similar way above. 

Blocking the applet or mobile code may be very annoying since lots of 
the service might be dependent on these mobile code functionality.

    2.Suppose next that you can't get away with blocking all
     mobile code: you are asked to block dangerous mobile code
     and let through (the majority of) safe mobile code. (But it is
     ok to be cautious and occasionally block some mobile code
     which might have been safe.) What additional problems does
     this introduce, and how might you try to solve them? 

-The mobile code can access local resource and reveal it through 
covert channel. And denial of service attack and modification of 
protected resource can be exploited.
To distinguish dangerous mobile code from safe mobile code is not 
easy task. Digital signing (endorsement) by author or brand name can 
be used for static analysis, but user might not pay attention to the 
signed information when user invoked the mobile code also it doesn’t 
guarantee that the mobile code is not dangerous (hostile).
Proof carrying code, software fault isolation(memory protection), safe 
language or using compiler safety (modular-3) can be used as an 
indication.

-Playground : Physically separate the attacker from the resource of 
value; each mobile code downloaded to the protected domain can be 
rerouted to a dedicated machine(playground) and executed; the 
mobile code can be transformed to use the end-user’s web browser as 
a  graphics terminal for its input and output, and so the user has the 
illusion that the mobile code is running on user’s own machine but its 
execution is on playground machine not the user’s own. 
Firewall can have playground for its inside host’s mobile code 
executions.

   3.For each of the problems you listed, who is to blame? The
     firewall, or the end host? 

Totally blocking the mobile code at firewall is not a good idea since 
we can’t benefit from the use of mobile code. Firewall has to do much 
better than that.
User might be responsible for running a possibly-hostile-mobile-code 
without checking the endorsement signature.



================================================================= 
UC BERKELEY                                  hoon@@cs.berkeley.edu
ATTN: ByungHoon Kang/ 493 SODA HALL           (voice)510-642-8468 
COMPUTER SCIENCE DIVISION                     (fax)  510-642-5775 
387 SODA HALL                                    Attn:B.Hoon Kang
BERKELEY, CA 94720                                     Rm493-Soda               
================================================================= 


@
