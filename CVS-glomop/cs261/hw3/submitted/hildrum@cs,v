head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.20.19.41.55;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From hildrum@@guaymas.CS.Berkeley.EDU  Fri Nov 20 11:14:35 1998
Return-Path: hildrum@@guaymas.CS.Berkeley.EDU
Received: from guaymas.CS.Berkeley.EDU (guaymas.CS.Berkeley.EDU [128.32.33.204]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id LAA17035 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 11:14:34 -0800
Received: from localhost (hildrum@@localhost) by guaymas.CS.Berkeley.EDU (8.8.3/8.6.9) with SMTP id LAA20125 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 11:14:49 -0800 (PST)
Date: Fri, 20 Nov 1998 11:14:48 -0800 (PST)
From: Kris Hildrum <hildrum@@guaymas.CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw #3
Message-ID: <Pine.HPP.3.96.981120111349.20066E-100000@@guaymas.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

#1  

	One can do a buffer overrun attack via argv[0].  In class, one of
you mentioned some weird way you can call a program with an arbitrary
argv[0] (though it's normally just the program name).  This program, in
the function debug, on line 68, copies the arg v[0] (now called progname)
into a local variable line.  Now, one possible attack is to overwrite
another local variable, like f and you could send the debug messages to
stdout, stdin,stderr.  More interesting is that you can use progname to do
a typical b uffer overrun attack, overwriting the return address and
putting some code into memory. 

	Another option is to take advantage of the gap between checking to
make sure the temp file is okay and renaming it.  More precisely, if the
attacker can change the file between the time that looksok opens the file
and the time that the rename occurs, the n he or she can put something bad
in the file.  One think that would help is running this program with a
high nice value so it will go slow.  Also, the attacker can probably
figure out the tempfile name, so all that would be needed would be a
rename. 

	The program also doesn't seem to do a very good job of checking
for shell escape characters in looksok.  A attacker could probably exploit
the fact that the only character not allowed is !. 

	Another possible attack is via the "getpwuid(getuid())->pw_name". 
That seems like it's a system thing, so that it is something the user
cannot mess with, but I'm not sure.  (I did try to look it up, but the my
hp knows nothing about a getpwuid command.) 


2. a)  The packet could leave an invalid interface in the register.  If
the forwarding program is well coded, this shouldn't be a problem, but if
not, then this could be, especially if the mobile code could put arbitrary
stuff in other registers.  The pac ket could also send itself back to
where it originated.  This could be a good way do a denial of service
attack, since the packet could just bounce back and forth between two
routers, making it easy to do a denial of service on two routers without
overloa ding the others.  There are also minor opportunities for the code
to reveal possibly sensitive information about the router, via covert
channels.  A packet could send it self out on one interface to represent a
1, and on another to represent a 0.  It coul d send out information about
the interfaces, for example.  Also, if there is any sensitive information
in any of registers when the program starts, the mobile code could send
out information on that. 

b)  One way to attack is to eat up memory by creating many flows and not
deleting them.  This could cause a denial of service.  Another method of
attack would be to set up false mobile code for a flow.  This mobile code
could work like IP source routing.
 This would require faking only one packet.  It might also be possible for an attacker to setup a valid flow from one src to dest, and terminate that connection without the router realizing it, and then the attacker could prod a security sensitive program
 into using that same src, dest, and port, and hence, the same mobile code (which could again do the equivalent of IP source routing).

c)  This could allow the handler to take up a long time, which leads to
more denial of service .  This could also allow for some attacks.  For
example, if a network had two gateways, some packets could be sent to one
gateway and some to the other.  The mo bile code could select the packets
for each gateway such that neither gateway saw anything strange.  Also,
this allows for a wider use of covert channels if any sensitive
information happens to slip to the mobile code. 

d)  If the handler is broken, it could cause greater problems.  One thing
that could be done with this is to get by firewalls, if there is a router
accepting mobile code on the other side.  (The attacker could send a
"safe" packet through the , and then t he mobile code on the other side of
the firewall makes it "unsafe".)  A variant of this attack would be for
someone on the inside of a reverse firewall to put mobile code in routers
on the outside. 

e)  This gives the attacker more power in the attacks I described above,
but I can't think of anything new that it allows. 

f)  This would be very bad.  The attacker could perform interesting denial
of service attacks by sending the same packet (or even a slightly
different packet) sent to the same destination over and over again.  The
attacker could also use this as a way to produce TCP packets with data
that overlaps.  Also, if an attacker can manage to break into an already
existing connection, then then for every packet the attacker sees, the
attacker can send that packet on to it's real destination and send a copy
to the attacker. 

Depending on how this is written, the attacker may even be able to use the
router to faked packets.  (For example, the attacker sets up a flow, and
every time a packet passes through the router, the headers and such are
modified so that the packet appears
 to come from a different destination.)  (And you'd have to allow the mobile code to specify the source, otherwise, the destination would be confused by a packet that appears to come from somewhere it's never heard of.)


g)  This would be the equivalent of running a Java applet on the router. 
You can probably get the Java threads to communicate with each other, so
the attacker could find out information about and possibly even affect the
behavior of other flows.  You can
 also do every one of the attacts already mentioned. 

Question #3 a) One problem would be figuring out what mobile code is. 
Clearly, Java and Javascript are, but what about, say, postscript? 
Another problem would be figuring out where mobile code can come into the
system.  Clearly, it can come in through web browsing,
 so you'd have to be careful not to make sure that no web pages other then .html .htm .txt and so on make it through.  (And you'd have to strip javascript out of html.)  But it's more complicated that that, since Netscape parses files based on extension, 
a web page could contain directions that tell the user to change Netscape's interpretation of .txt files to be interpreted as postscript, and then the user could click on a postscript file that had a .txt extension and ...  Ftp could also be a source of m
obile code (to get, for example, Java), and there extensions might or might not be as useful.  What if a file name ends in .Z or .gz for example?  A compressed text file might do that, but so might a compressed executable.  Email also presents the same pr
oblems as web pages.  

	One could be very picky and probably make sure that no non-text
got through by doing some checks to make sure a given set of data is text. 
But, that might not stop some things.  (Like a tcl script?)  If you
consider something like Perl mobile code, it p robably wouldn't stop that. 
And if you consider Perl mobile code, why isn't C mobile code?  You have
to compile it, sure, but there are compilers everywhere. 

	If you were very strict about enforcing this, many things would be
broken, your users would be unhappy, and would try to find a way to get
around the firewall, and the might well be able to do that. 

b)  One simple policy is to allow through only verifiable mobile code and
verify it at the firewall.  This would take a long time, but would be the
safest thing.  One could allow through Java, for example.  Probably one
could find a subset of Java script that is relatively safe (for example,
even some command in Java script opens a million windows, rebooting the
machine gets rid of the problem completely).  I'd guess that something
similar is true for postscript as well.  With the possible exception of Ja
va (which is automatically verified), all these would have to be verified
at the firewall, which will take a long time.  Email & FTP could be
treated similarly. 

c)  In an ideal world, the end host would take up a much larger share of
the burden of protecting itself from mobile code.  The only thing the end
host protects itself against is Java.  It seems to me that it would be
better if the end host could attempt to check code, or if it could run a
program like Janus to sandbox all mobile code.  However, the majority of
end hosts are not now capable of doing that. 

	Also, for many things, you have to trust the user.  For something
like C code or a Perl script, you have to trust the user that the user
knows what he or she is doing when he or she compiles and runs the program
or runs the script. 








@
