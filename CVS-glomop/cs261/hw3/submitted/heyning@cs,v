head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.23.19.14.19;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From heyning@@bmrc.berkeley.edu  Mon Nov 23 07:40:25 1998
Return-Path: heyning@@bmrc.berkeley.edu
Received: from gumby.CS.Berkeley.EDU (gumby.CS.Berkeley.EDU [128.32.32.38]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id HAA21980 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Mon, 23 Nov 1998 07:40:24 -0800
Received: (from heyning@@localhost) by gumby.CS.Berkeley.EDU (8.8.4/8.6.9) id HAA21442; Mon, 23 Nov 1998 07:40:44 -0800 (PST)
From: "Heyning A. Cheng" <heyning@@CS.Berkeley.EDU>
Message-Id: <199811231540.HAA21442@@gumby.CS.Berkeley.EDU>
Subject: Problem Set #3
To: cs261-homeworks@@joseph.cs.berkeley.edu
Date: Mon, 23 Nov 98 7:40:43 PST
Cc: heyning@@CS.Berkeley.EDU
Mailer: Elm [revision: 70.85]
Status: RO

Heyning A. Cheng
November 23, 1998


CS 261: Computer Security, Assignment #3
------------------------------------------


Problem 1
---------

1. LINE 33: If there are more than 20 groups, the remaining groups will 
   not be stored in glist and will not be restored when setgroups(glen,glist) 
   is invoked on LINE 46. This could cause problems in verifying group 
   permissions.

2. LINE 68: sprintf is susceptible to buffer overruns; use snprintf instead. 
   Code safety should not depend on implicit assumptions about the lengths 
   of strings passed into a function as parameters.

3. LINE 117: vi is run with root privileges, which is not appropriate for 
   an external program interacting with an unprivileged user and which 
   violates the principle of least privilege. Instead, make the tmp file 
   writable by the unprivileged user and run vi with user privileges.

4. LINE 157: sprintf is susceptible to buffer overruns; use snprintf instead.

5. LINE 168: there is a possible race condition: if another process writes 
   the file tmpf after it has been verified by looksok(tmpf) before it is 
   renamed to MODF on LINE 169, the new changes will not be detected by the 
   security check.  (The locking mechanism ensures that only one copy of 
   this particular program can be run at any given time; however, other 
   programs could modify the tmpf file simultaneously.)

						

Problem 2
-----------

1. Malicious mobile code could overload routers and links as a denial of 
   service attack: it could direct large numbers of packets to specific 
   routers and links, or define a policy which causes packets to follow a 
   circular path, traversing the same nodes and links until they time out 
   or until their TTL reaches zero.

2. Same as 1)

3. If backward jumps are allowed, the handler for a packet may not 
   terminate; denial of service (or degradation of service) attacks would 
   then be possible.  In this case, the packet would not reach its 
   destination, and the processing load could consume most of the processing 
   resources at the router, causing other packets to be dropped. 
   Solution: Limit the amount of computation per packet. If a handler 
   invocation runs out of time, drop the packet or forward it normally 
   without using the mobile code handler.

4. Assume that the handler has permission to write to the payload (including 
   application-level headers) but not to the TCP/IP header. Malicious handler 
   code could alter the payload or forge application-level header information. 
   Solution: Use a MAC to authenticate the payload of each packet at the 
   destination (the original payload should be preserved after compression 
   followed by decompression).

5. Same as 4)

6. Malicious handler code could generate spurious IP packets with forged 
   TCP/IP header information, enabling IP spoofing attacks. 
   Solution:  The special operation to send a new packet over the network 
   should be modified as follows: each new outgoing packet must be associated 
   with a specific incoming packet. The outgoing packets must follow the 
   same order as the incoming packets: if packet A is received before packet 
   B, then all outgoing packets associated with A must be sent before any of 
   the outgoing packets associated with B. An outgoing packet should be sent 
   only if the relevant header information (e.g. source and destination 
   fields) for the  outgoing packet matches the header information of the 
   corresponding incoming packet.

7. The use of Java substantially increases security risks. The Java language 
   does not have precisely defined semantics and is therefore not verifiable.  
   The Java software environment is also much more complex, using extensive 
   libraries in addition to the mobile handlers. The interactions between 
   handler code and library code further increases complexity and is likely 
   to result in additional security holes.  Any classes which are insecurely 
   programmed (e.g. neglecting to call the Security Manager when needed) will 
   be vulnerable to malicious mobile code. Some Java runtime environments 
   allow applets to write the \TEMP directory, which might disrupt other 
   processes running on the host.  There are numerous vulnerabilities which 
   may allow attacks against the routers, especially denial of service 
   attacks. 
   Solution: There is no good solution in general; we might give routers the 
   option of rejecting Java handlers, since packet handlers could probably 
   be implemented in a much simpler language.



Problem 3
----------

1. Problems with blocking all mobile code at the firewall:

    * (Firewall problem) The firewall would need to accurately identify all 
	mobile code. A naïve approach may be to look for suffixes such as 
	.java, which may not be very effective. A somewhat better approach 
	would be to search for words which typically occur in mobile code 
	(e.g. Java keywords such as "package", "class", etc.); however, this 
	is likely to cause many non-code documents to be blocked. Analyzing 
	the document for code structure would probably be more effective, but 
	would be more computationally expensive.

    * (End host problem) Traffic between an internal end host and an external 
	server may be encrypted, which would make mobile code 
	indistinguishable from non-code documents.   

    * (End host problem) Mobile code may be transferred by tunneling using 
	another application protocol such as FTP; however, this requires 
	collusion by an insider.


2. Problems with selectively blocking dangerous mobile code:

    * (Firewall problem) How do we determine whether a given piece of code 
	is safe? Precise code analysis for most expressive languages is 
	intractable in the general case; and Java does not even have a 
	precisely defined semantics. A reasonable approach would be to use 
	heuristics which reject any code whose security cannot be established 
	to a realistic degree of accuracy. Restricting mobile code to easily 
	verifiable languages such as BPF is not generally feasible, since 
	most mobile programs require a more expressive language such as Java 	
	to implement the desired functionality.

    * (End host problem) The security of a program may depend on interaction 
	with the end user. A firewall cannot possibly predict how every 
	human in the organization will interact with an arbitrary piece of 
	software. Thus, programs whose safety cannot be reasonably established 
	in the presence of user interaction should be blocked (identifying 
	such programs could be difficult).

    * (This is essentially an administrative problem, which involves both the 
	firewall and the end hosts). Different end hosts may use different 
	browsers and software environments, or different versions of the same 
	software products.  Different versions often have different security 
	features and bugs, and it is very difficult for the firewall to 
	determine whether a given program is safe for each platform which may 
	be used on some internal host. The best solution would be to maintain 
	a centralized software warehouse for the entire organization, and to 
	install the same versions of the browsers and runtime environments on 
	all end hosts if possible.

3. See 1) and 2) above.


@
