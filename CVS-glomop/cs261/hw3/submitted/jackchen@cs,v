head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.20.26.24;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@
   Jack Chen
   
   CS261 homework 3
   
   Question 1.
   
   a. 68. Line is a fixed sized array. progname is taken from the argv
   passed in, so someone could overrun the line buffer by symlinking this
   program to a program name bigger than 1024 bites. Then, all sorts of
   bad behaviors could take place like somehow modifying the running as
   root flag or clobbering a stack frame return pointer.
   
   ***38
   
   b. If you created the moderator file before this program was ever run,
   you could make the permissions for the file whatever you wanted. You
   could make it executable, and from then on, you would have
   unrestricted to access to the file. As an executable, you could stick
   shell commands in it as described later. If the moderator is a member
   of a group with rot, then you might be able to stick commands in that
   shell script to get root access and then do whatever you wanted to.
   You might be afraid of others clobbering your moderator file in the
   meantime, so what you can do is to go through the machines which can
   run this program and write lock files only accessible by you. Then, no
   one will be able to run the program and you're evil schemes won't be
   interrupted by people running the program and clobbering your
   executable moderator shell script.
   
   c. 155. This grablock function has a hard-coded lock file. The problem
   with this particular file is that /tmp is often on the local machine,
   and is not a common actual directory across machines. So, two
   different people running this program on two different machines can
   get a lock and hence run the program because they are checking for the
   lock file on their own machine. The moderator's file is probably in a
   central place that all machines know about, ie probably NFS mounted.
   This is one actual file, and with multiple people running this
   program, the file is sure to get clobbered with multiple write
   accesses. In fact, if someone timed it just write, they could probably
   corrupt the moderator's file on purpose.
   
   d. 165. Oh boy... run vi as root? you can do shell commands within the
   VI window, and you are completely free.
   
   e. 130. The looksok function is supposed to check for invalid
   characters, like perhaps the '!' character to begin shell commands.
   You can fool it with race conditions though. If before running this
   program I had already anticipated the tmpnam() file name and created
   it with my uid, then when root openned it in the vi call, it would of
   course open fine. It would close fine. Usually only root would have
   access to this temporary file, and you could normally protect against
   sticking my own stuff into the file before root wrote the stuff to the
   moderator's file. But, since I created the file, I am the owner and I
   can do this.
   
   If you suspend the program between lines 136 and 137, you could empty
   the tmpnam() file since as the creator of the file, you can still have
   access to it. Then, you resume the program through the check and again
   suspend it between 139 and 140, you can modify the file to say
   whatever you wanted to, including stuff that the looksok function
   should have caught. In line 169, you copy this file to the moderator's
   file, and you have successfully stuck whatever you want into the
   moderator file. I guess you could stick shell commands in there or
   something which could be run because of the previous argument for
   creating a moderator file with any umask you wanted before this
   program was ever run. This is described above.
   
   
   
   
   
   Question 2.
   
   1.
   
   a. execution time in routers makes them slow and can deny users
   passage.
   
   fix: get much faster routers or use routers in parallel.
   
   b. unrestricted choice of what link to take can purposely flood
   congested networks, cutting off access for targetted individuals.
   
   Fix: the problem are packets which aren't sent by the sender... Maybe
   some authentication for packets actually being from the sender.
   
   2.
   
   a. An attacker can fill up the memory of a router by generating tons
   of packets all with different flow ID's. This would prevent any
   further people from using the router.
   
   fix: Have short time-outs for flow handlers.
   
   b. Collisions with flow ID's and no way of creating unique flow id's
   will mean that someone could anticipate your flow id and route your
   packet off somewhere completely wrong by sticking in evil handlers
   before you even sent a single packet into the router.
   
   Fix: need very good algorithm of unique flow id's or perhaps a central
   server?
   
   authenticate any handlers installed with public keys?
   
   c. An attacker can change your handler by sending an update packet
   into a router along your path. There is no authentication amongst
   packets.
   
   Fix: authenticate handlers.
   
   d. An attacker can slow your connection down no matter how you route
   it. It simply figures out your flow ID, and starts at the router you
   start at. Then, his packets will follow yours through all the routers
   yours goes through til they reach the receiver. When you change your
   handler, these packets move with yours, creating congestion all the
   way down the line.
   
   Fix: authenticate all packets? All packets going down a flow must come
   from the sender and belong to that flow. Authenticate packets
   belonging to the sender and to the flow.
   
   3.
   
   a. infinite loops in mobile code tie up router CPU time, preventing
   others from getting through.
   
   Fix: ceiling on execution time for a packet's handler.
   
   b. loops can probably be used to send arbitrary numbers of packets to
   flood a link with just one packet.
   
   Fix: limit to one packet send per handler invocation.
   
   4.
   
   a. change src, dest and such flags to fool routers, packet filters,
   and firewalls about the identity of this packet's sender. You could
   pretend to be a valid packet at a firewall and turn back into a
   malicious packet once you got inside a firewall.
   
   Fix: only allow the write of certain fields of the packet, ie not
   those mentioned here and any others deemed dangerous to change.
   
   b. Modifying sequence numbers allows for easy ip segmentation attacks.
   
   Fix: see a.
   
   c. modifying TTL fields means packets never die and flood the network,
   denying service. This is especially deadly when packets are replicated
   on multicast addresses.
   
   Fix: see a.
   
   d. collecting information. Because you can modify payloads of packets
   and also see all interfaces of a router, you can collect information
   inside a firewall and report back to me internal addresses and such...
   Get into the firewall, go through a few routers, collecting
   information, pass security check to get out again, and come home.
   
   Fix: the evil handler is the problem, so authenticate handlers as
   above.
   
   e. An attacker can modify any information about a sender's packets
   before it is sent out, like shrinking the payload size down to 0.
   
   Fix: same as d.
   
   f. An attacker can mount attacks like TCP hi-jacking much more
   efficiently by placing a handler watching for the synack packet and
   then modifying the next packet to be a telnet packet adding "xxx" to
   the .rhosts file.
   
   Fix: see d.
   
   g. Sniffingg types of services a firewall allows through. Get into the
   firewall, and every so often send me a copy of the packet intended for
   an internal host by modifying the path to come back through the
   firewall and the destination address to be mine.
   
   Fix: seee d.
   
   5.
   
   a. you listen to what you've seen to mount attacks which involve more
   than one packet. An example is listening for DNS information requests
   and changing evil.hackers.org in the packet to trusted.domain.com and
   making the response fool the sender. You could do this each time a
   request came through here asking for that. You could also listen for
   the reverse DNS look up and spoof answers to this too.
   
   b. can listen for and remember interesting information across packets,
   like passwords ands sent in one-character telnet packets This can be
   remembered and the next packet coming through can be loaded with this
   information and sent to me. Now, someone could get all passwords going
   through the entire network by placing bogus handlers in many routers.
   
   .
   
   Fix: I don't think there's a direct fix but authenticating handler
   installations would certainly solve the problem.
   
   6.
   
   a. Generate your own packets, possibly inside a firewall, to mount an
   attack truly without being caught. Everything is done within a router,
   and flows up to the firewall can be destroyed so that no one can link
   you to the crime.
   
   Fix: Restrict the types of packet generations allowed, like packet
   split... No arbitrary packet generation.
   
   b. flooding attacks are done within a router.
   
   c. since you can generate arbitrary packets, you have memory, andyou
   have loops, you can carry out any attack you would on a home host on a
   router. Now, no initial compromise of a system is necessary to gain
   resources to carry out an attack or to cover up tracks (reduction of
   work factor and increase anonymity)
   
   7.
   
   a. All holes in Java security are added to your liabilities. trusted
   computing base, trusting security manager, code verifier, JVM...
   
   Fix: don't use Java.
   
   
   
   Question 3.
   
   a. how do you block mobile code at the firewall?
   
   There are many types of mobile code, and within each, drastic measures
   need to be taken to block it. Here, we discuss Javascript and Java
   applets, active networks, email attachments, and FTP'ing code as a few
   examples of mobile code. Of course other examples exist. In short, to
   block even this set of mobile code, you would have to screen out
   virtually all useful interactions with people outside your firewall to
   ensure complete blockage of mobile code. From looking at how we might
   do it for the mobile code listed above, we can understand the
   restricted costs involved in such a proposition.
   
   1. Javascript and Java applets on the web
   
   In this case, we can screen out mobile code with the web browser's own
   "turn off" function for these mobile codes. We might place a
   browser-specific application proxy on the firewall which only passes
   through those pages which pass through the "turn off" check function.
   
   2. active networks. We would disallow active networks all-together
   much as people disallow source routing today.
   
   3. FTP'ing and emailing executables
   
   Here, we would have to disallow these and any other communication
   media because it is always possible to sneak code through the
   firewall. You could encrypt the data, and the firewall would not know
   what the data was. A sender could encode the data to make it look like
   normal text and then the receiver could convert it back to mobile code
   upon receipt. Finally, a piece of code could be received in small
   chunks, across different applications and over time, rendering
   tracking of a single piece of mobile code impossible. A user could
   receive one portion through email one day and then another via FTP the
   next day.
   
   So, in order to completely eliminate transferring mobile code, you
   would have to shutdown any meaningful communication with the outside
   world. Why even have a network then?
   
   B. letting safe code through
   
   Because of our previous discussion with FTP and email executables as
   mobile code, it is virtually impossible to tell what code is safe and
   what is not. The examples showed that we couldn't tell what was mobile
   code, so how could we tell what was dangerous mobile code then?
   Therefore, blocking dangerous mobile code bye screening out dangerous
   code is the same as not letting any mobile code through. The latter is
   impossible to do without cutting off the entire network, and so
   screening out dangerous code is likewise difficult.
   
   One option here might be to use a digital signature to verify the
   safety of the code. Using the web of trust model, we could verify that
   trusted people have verified that this code is safe. This of course is
   no guarantee, but it at least allows for some interaction.
   
   &#26;
[50;1H[K@
