head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.01.11.00;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From fredwong@@CS.Berkeley.EDU  Fri Nov 20 14:34:11 1998
Return-Path: fredwong@@CS.Berkeley.EDU
Received: from cs2.CS.Berkeley.EDU (cs2.CS.Berkeley.EDU [169.229.60.56]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id OAA17549 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 14:34:10 -0800
Received: from u30.CS.Berkeley.EDU (u30.CS.Berkeley.EDU [128.32.44.154]) by cs2.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id OAA06086; Fri, 20 Nov 1998 14:33:55 -0800 (PST)
Received: from localhost (fredwong@@localhost) by u30.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id OAA00696; Fri, 20 Nov 1998 14:34:21 -0800 (PST)
X-Authentication-Warning: u30.CS.Berkeley.EDU: fredwong owned process doing -bs
Date: Fri, 20 Nov 1998 14:34:20 -0800 (PST)
From: Frederick Wong <fredwong@@CS.Berkeley.EDU>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: Frederick Wong <fredwong@@CS.Berkeley.EDU>
Message-ID: <Pine.GSO.3.96.981120143155.688A-100000@@u30.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

Hi,

Sorry about the delay, but I have been sicked for the whole week after
coming back from the supercomputing conference last week. Here is the
homework solutions that I have. Thanks.

- Frederick

---------------------------------------------
HW  : 3
Name: Frederick Wong
SID : 12520254

Question 1

  The biggest problem is the program use "/tmp" for locks and tmp file and
  combine with the unlink function. If the user manage to change the lock file
  to be a symbolic link to the password file, or some important files, since
  the program is run as root, those file will be gone.
  Also, the program tries to detect whether the modified file contains shell
  escape before committing. However, the whole operation is not atomic. That
  is, if the user can modify the contain of the file right after the check,
  shell escape can still appear in the final version of the file.
  The other problem is the "sprintf" in the main routine can cause buffer
  run if the pw_name is longer than 512 bytes, even it's not likely to.
  The setuid, setgid are not consistent on all platform and security hole might
  still exists.
  The "vi" program is another problem. In the routine "vi", it fork off another
  proess to exec a "vi" program. However, the "vi" program is run as root.
  If the user do the command ":e <filename>", the file will be opened with root
  privilege, or ":!" to exec the command as root.

Question 2

  Part 1
  
    One of the problems is the denial of services. Since the bytecode need to be
    completed enough in order to determine where to route, it might be very long.
    This incurs lots of overhead for processing a packet at the router. An
    attacker can easily inserts a bunch of packets that contains long, but valid
    bytecode packet into the network and the router will eventually not responding
    to other valid packets.

    Another problem is this means it is doing a source-based routing. This is bad
    in terms of security because the hacker can flake the source ip address and
    re-route the packet to some other routes that the firewall or the router will
    not reject the incoming packet. The solution is to not believe the source
    address at all for routing and security checking purposes.

  Part 2

    The hacker can insert any packet with mobile code and redirect all the
    traffic. In order to solve this, we need to use some kind of authentication
    to authenticate the mobile code with the flow id.

  Part 3

    If the control flow of the bytecode can be arbitrary, the bytecode itself may
    never terminate, which make the router not able to route other packets. As
    part 2, we can specify the time to live / executed instructions count for the
    bytecode. If the bytecode run longer than it claim, the router has the right
    to terminate and stop routing that packet.

  Part 4

    The same problem with part 2, but even worst because the hacker can modify
    the packet, not just re-route the packets. To solve this is we need someway
    to verify the mobile code with the flow stream so that untrusted hacker mobile
    code will never modify the flow stream and the flow handler.
    
  Part 5

    One major problem with this is it open the internal state of the packet flow
    to the hacker and therefore the hacker can insert a packet to the stream and
    can trick the flow handler to change the state of the stream and therefore
    corrupt the state. To solve is to use crypto methods to enforce the incoming
    packet is authenticated.
    Another problem with this is the amount of memory the router need in order to
    maintain all the states for all the flows occur in the network. We need to
    ensure that the router has enough resources to do the routing.

  Part 6

    Since the mobile code is allowed to modify and send multiple packets, the
    mobile code can change the ip header for it's own sake. This enabled 
    IP spoofing since the mobile code and send multiple packets.
    The solution to this problem is to ensure that the ip address pair does not
    change when the route trying to route the output packets of the handler.

  Part 7

    JAVA seems to address all kinds of security problems. However, JAVA is so
    complex that it is hard to find and correct security holes in JAVA. Also,
    what this means is the bytecode can do a tcp/ip stream inside the handler or
    open files inside the handler. This is bad and has all kinds of security
    problems. Another concern is the resources requirement to run the JVM. My
    solution to this problem is don't do it at all.

Question 3

  Part 1

    In order to block all the mobile code, we need to filter all the html, ftp
    traffic and remove all the tags that can use to download the mobile code.
    Also, we need to scan the incoming packets for signs of mobile code, like
    the ".class" extension, etc. The problem is it is really hard to find all
    the possible mobile code contain in the documents.

  Part 2
    
    One way we can solve this problem is to only let the signed and trusted
    mobile code to enter the gateway. However, we still need to distinguish
    the signed mobile from a trusted agent from an untrusted entity. Also,
    the PKI infrastructure problem, which is even harder to solve.
    Finally, eventhough the code is signed, it does not gaurantee the mobile
    code does no harm to the internal network.

  Part 3

    The major problem is that the firewall cannot entirely simulate the
    behavior of an end host. Most of the protocol are well known (like tcp/ip,
    smtp, etc.) and we can reduce the functionalities of a protocol to achieve
    the security. This can be easily deal with a firewall. However, mobile code
    itself is at a more complex level which can contains any arbitrary actions.
    To verify a safe mobile code is therefore hard and a firewall can simply do
    nothing about it. In addition, mobile code can hide in any place. A good
    hacker can hide their mobile code in a on-going streaming movie which is
    hard to detect. Since the firewall hardly simulate the behavior of an end
    host, it cannot play a stream video and detect the harmful mobile code
    before forwarding the packets to the end host.

@
