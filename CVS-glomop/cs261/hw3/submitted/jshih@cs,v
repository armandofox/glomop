head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.20.19.41.56;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@CS261 Homework 3
Jimmy Shih

Question 1:
General Problems:
1. Shouldn't start running the program as the root. Should start running the 
program as the user. Then temporary increase the privilege when need to.
2. Didn't clearly define the security model, the security threat, or the 
trusted computing base.

Specific Problems:
In "int main(int argc, char **argv)"
1. Buffer overflow problem with "msg[512]" in line 157.
2. Can anticipate the "tmpf" file handle in line 162; therefore can setup a 
trap when someone uses that file handle.
3. Race condition between doing the check in the "looksok(tempf)" and the  
"rename(tmpf, MODF)".

In "void debug(char *msg)"
1. Buffer overflow problem with "line[1024]" in line 68.

In "FILE *secure_open_as_usr(cahr *fname, uid_t uid, gid_t gid)"
1. Race condition between setting the privilege and using the priviledge.
2. Should explicitly create the "DEBUG" file the first time using it. An 
attacker could have created the "DEBUG" file with write permission set and 
wait for someone to append to the file.
3. Need to make sure someone didn't change the "DEBUG" file in between 
calls to "debug".
4. The security depends on the file system permission mechanism.
5. In line 33, not clear on the behavior when the user is in more than 20 
groups.

In "void grablock(void)"
1. The "LOCKF" file is probably in the local machine. So this only prevents 
users from the same machine from using that file at the same time.

In "void copyfile(char *src, char *dst)"
1. Doesn't check the return value on "fopen", so "copyfile" might not have 
really copied the file.

In "void vi(char *fname)
1. Can use another process to send the quit signal early inorder to 
bypass the "looksok" check later.
2. Since "vi" runs as the root, can use it to create a shell with the root 
priviledge.

Question 2:

Security Threats in Step 1:
1. The mobile code can degrade the router performance and deny other packets 
from using the router by taking a long time to execute.
2. The router can no longer restrict the output links that a packet can go to
based on the packet content.

Security Threats in Step 2:
1. An attacker can deny services to other packets by tieing up the 
memory resource at the router.
2. A flow can't trust the mobile code in the router because the code is not
authenticated.
3. More than one flow can have the same flow id.
4. The mobile code at the router is not encrypted, therefore other people
can find out what you are trying to do with your mobile code.

Security Threats in Step 3:
1. Infinite loop, the mobile code might never stop.

Security Threats in Step 4:
1. Impossible for the routers to ensure the integrity of the routing algorithm
because packets can modify the time-to-live field, QoS field, or the 
congestion field.
2. An attacker can fool the routers and the hosts by changing things like
the sequence number. 
3. An attacker can fool a firewall by changing a packet's context aftter it
has passed the security check.

Security Threats in Step 5:
1. Can collect information across packets. Gives an attacker the ability
to mount attacks with a sequence of packets instead of just with individual
packets. Thus can greatly reduce the workfactor for breaking into a system.

Security Threats in Step 6:
1. Can spoof IP packets at any point on the network, like inside the firewalls.
Reduce the workfactor of an attack.

Security Threats in Step 7:
1. All the Java security threats learned in the class. Java has too many 
security holes. Its security model isn't well defined. The trusted computing 
based is not defined. Need to trust the security manager, the bytecode
verifier, etc.

Question 3
1. One problem is how to identify the mobile code. There are too many covert
channels. Therefore we need application knowledge to identify the mobile code. 
So we should use application gateways instead of firewalls. 

Another problem is performance, you want to avoid a centralized bottleneck at 
the firewall.

2. You can have people sign the mobile code. Then only allow the trusted 
signed mobile code into the firewall. But the problem is how much
trust you can place with a signed mobile code. Another problem is how to
revoke a signed mobile code.

Another solution is to use proof-carrying code. Have the firewall verify the
safety of the mobile code. But the problem is how to make sure the proof is 
correct. There can still be many security leaks.

3. The endhost should be blamed for the difficulty of identifying the mobile
code because the endhost wants too much flexibility from the mobile code.
The endhost can make it easier for the firewall to identify the mobile code 
by restricting the instances that it might use it.

The firewall is to blamed for the poor performance. The firewall needs to be
efficient if it wants to regulate all the mobile code coming into a
firewall.

The endhost should be blamed for the problems with the signed mobile code 
because the endhost is willing to trust the signer.

The firewall should be blamed for the security holes with the proof-carrying 
mobile code because the firewall fails to detect all the security holes in it.


    
@
