head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.21.01.11.00;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From dongwu@@radon.eecs.berkeley.edu  Fri Nov 20 15:31:49 1998
Return-Path: dongwu@@radon.eecs.berkeley.edu
Received: from ithaca.eecs.berkeley.edu (ithaca.EECS.Berkeley.EDU [128.32.244.41]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id PAA17580 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Fri, 20 Nov 1998 15:31:48 -0800
Received: (dongwu@@localhost) by ithaca.eecs.berkeley.edu (8.8.5/8.5) id PAA12283; Fri, 20 Nov 1998 15:32:04 -0800 (PST)
Date: Fri, 20 Nov 1998 15:32:03 -0800 (PST)
From: Dong Wu Zhao <dongwu@@radon.eecs.berkeley.edu>
X-Sender: dongwu@@ithaca.eecs.berkeley.edu
To: cs261-homeworks@@joseph.cs.berkeley.edu
Subject: hw #3
In-Reply-To: <Pine.SUN.3.91.981029111239.16489B-100000@@ithaca.eecs.berkeley.edu>
Message-ID: <Pine.SUN.3.91.981120041005.11266A-100000@@ithaca.eecs.berkeley.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO

1. sprintf() calls on line 68 and 157 implicitly trust getpwuid() and 
ctime() library functions. If these library functions are compromised to 
return malicious values and overflow the buffer, then the program can be 
compromised.

2.1 The mobile code can get the global list of interfaces at the router, 
and send the list to an attacker at the source or somewhere in the net, 
so that the attacker can know something about the configuration of the 
router.

2.2 *If the source crashes in a TCP connection and cannot send the 
router a "reset" signal, the mobile code and flow ID may stay in the 
router's buffer forever.
   *If an attacker open a lot of TCP connections via the same router, so 
that all the buffer for mobile code is used up, and the attacker does 
not send "reset" or "done" signals, then the router cannot process any 
more packets with mobile code even it is idle.
   *Therefore, a time-out scheme should be adopted if flow IDs are to be 
used.

2.3 Since the mobile code can figure out the payload of the router by 
looping, it can also learn the benchmark of it.

2.4 The mobile code might not just compress the data, it can also modify 
the packet content so that it can get through security systems. After 
getting through security checks, the mobile code may undo the 
modification at some later router.

2.5 *An attacker can find out how much memory the router has by opening 
up a lot of TCP connection via it. 
    *Also, it becomes much easier to construct malicious content in the
packet. 

2.6 The packets constructed at the router might not destinate for the 
same place. After getting through the relevant security checks, the 
mobile code can construct new and malicious packets destinated to some 
other targets which trust the router.

2.7 If Java bytecodes instead of BPF bytecodes are used, then in 
addition to all the thread mentioned above, we are going to have the 
security threats for Java applets, including denial of service attack, 
two and three party attacks, various covert channels attack, information 
leaking such as system environment variables, login names, machine names, 
etc. 

3.1 There are two ways to block mobile code:
	A. Strip the mobile code and then process the packet. It may take 
longer for the packet to reach its destination; and this might cause the 
network to slow down due to packet congestion.
	B. Drop the packet altogether if it contains mobile code. If many
firewall does this, then it might be difficult for a packet with mobile
code to find a path and reach its destination. 

3.2 The problem is how to determine the mobile code is safe. We need to 
figure out how much features we want to allow the mobile code to have. 
The trade-off is that the more features it has, the more difficult it is 
to implement a verifier. As a matter of facts, the verifier for Java 
bytecode had not been proved to be loop-hole-free.

3.3 (3.1 A): The router is to be blamed since it gives a slow path. The 
firewall has a right not to run the mobile code if it thinks the code is 
unsafe, so we can blame the firewall.
    (3.1 B): The firewall is to be blamed since it drops the packets.

    (3.2) It is the network designer and engineer's responsibility to make
sure the firewall's bytecode verifier is correct. However, it is the
attacker from the end host that find the loopholes in the verifier and
break it. The firewall can be blamed for having an incorrect verifier, and
the end host can be blamed for allowing the attacker using the resources. 



@
