head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.23.03.29.48;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@From mikechen@@cs.berkeley.edu  Sun Nov 22 16:47:59 1998
Return-Path: mikechen@@cs.berkeley.edu
Received: from cs2.CS.Berkeley.EDU (cs2.CS.Berkeley.EDU [169.229.60.56]) by joseph.cs.berkeley.edu (8.8.5/local) with ESMTP id QAA21482 for <cs261-homeworks@@joseph.cs.berkeley.edu>; Sun, 22 Nov 1998 16:47:59 -0800
Received: from u14.CS.Berkeley.EDU (u14.CS.Berkeley.EDU [128.32.44.138]) by cs2.CS.Berkeley.EDU (8.9.1a/8.6.6.Beta11) with ESMTP id QAA29639; Sun, 22 Nov 1998 16:47:51 -0800 (PST)
Received: from localhost (mikechen@@localhost) by u14.CS.Berkeley.EDU (8.8.3/8.8.2) with SMTP id QAA24812; Sun, 22 Nov 1998 16:48:15 -0800 (PST)
X-Authentication-Warning: u14.CS.Berkeley.EDU: mikechen owned process doing -bs
Date: Sun, 22 Nov 1998 16:48:06 -0800 (PST)
From: Mike Chen <mikechen@@cs.berkeley.edu>
To: cs261-homeworks@@joseph.cs.berkeley.edu
cc: Michael Chen <mikechen@@cs.berkeley.edu>
Subject: hw3 v1.0
Message-ID: <Pine.GSO.3.96.981122164717.24797B-100000@@u14.CS.Berkeley.EDU>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: RO


---------- Forwarded message ----------
Date: Fri, 20 Nov 1998 15:02:48 -0800 (PST)
From: Mike Chen <mikechen@@cs.berkeley.edu>
To: homeworks@@joseph.cs.berkeley.edu
Cc: Michael Chen <mikechen@@cs.berkeley.edu>
Subject: hw3 v1.0

CS261 HW3

Question 1 - Broken Program
===========================

- sprintf() might have a buffer overflow problem if pw_name
  is longer than 512 chars
- the vi program is run as root.  the user can execute code or modify
  files as root
- the looksok() check isn't atomic and has race conditions
- security hole in using /tmp and unlink as a locking mechnism.
  if the user can create a symbolic link say to the passwords file,
  the it will be wiped out.   


Question 2 - Firewall
=====================
1. - the code might create a routing loop and eat up resources
   - restrict the packet so it can't leave from the interface it just
     came from. also, use TTL to drop packets that aren't leaving the 
     routers
    
2. - DOS attack. one can guess the flow id, then inject code to 
     redirect the entire flow so it can then be captured more easily.
   - need ways to authenticate mobile code/flow id.
   - let the routers pick the flow IDs and guarantee that flows coming 
     from different interfaces would be labled differently and won't 
     affect each other.  

3. - the obvious problem is that a program may spin forever
   - use timeout to enforce an upper bound on execution time.

4. - the code can now change payload on the router/firewall 
     and turn it into malicious content.
   - firewalls must scan outgoing packets instead of incoming packets

   - may leak router info.
   - ensure that sensitive info isn't available to the mobile code until 
     after the phase that it's allowed to modified the payload.

5. - flows may eat up memory excessively
   - need policies to restrict the max. memory allocation for each flow and
     for detecting the end of the flow in order to free the resource.

6. - the code can now construct packets used for attacks on the 
     router/firewall instead of the hacker's own host
   - firewalls must scan outgoing packets instead of incoming packets

   - the code may eat up arbitrary bandwidth by constructing a large number
     of packets
   - put an uppder bound on the data in/out ratio

7. - the standard Java doesn't provide enough resource monitoring 
     capabilities and the complexity of the full Java language opens 
     up many holes.
   - use a specialized JVM that provides resource monitoring and 
     only uses a "safe" subset of Java



Question 3 - Mobile Code/Firewall
=================================

consider: Java, Javascript, ActiveX, active networks, 
          and downloading executables.

1. it's difficult to identify mobile code at the firewall.  the firewall 
   would need to have knowledge of what mobile code "looks like".
   (eg. distinguishing between a .ppt binary and a .exe binary).
   what's even worse is that the line between documents and executables 
   is blurry. (eg. .pdf can have scripts embedded in them.)

   we can attempt to block all mobile code by explicitly allowing only 
   certain file formats to go through, but that implies that the firefall 
   has to keep lots of state.  In addition, some mobile code might look 
   like safe file formats and slip through.

2. Assume that all end hosts are identical, and we want to block
   all mobile code that access the file system.  Java and scripts can
   be easily analyzed to see whether it makes any file system calls.
   Only let through code that's verified to be safe.

   We can also have policies to treat signed mobile code differently.

3. There is only so much can be done at the firewall without having it
   simulating the whole network and hosts it's protecting.
   I think the solution is to require all mobile code to run in sandboxes
   on the end hosts.  



Mike  :)
--
http://www.cs.berkeley.edu/~mikechen/


@
