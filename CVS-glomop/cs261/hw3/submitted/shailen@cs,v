head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.11.24.23.41.54;	author daw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@Shailen Mistry 	
shailen@@cs.berkeley.edu
CS 261 Computer Security
Homework 3


Q1: Find as many security vulnerabilities as you can in the code. 

- buffer overrun vulnerability with sprintf
- even if the moderators file and lock file cannot be accessed by other
  users, the debug file in the tmp directory can directly be
  editted or even deleted by other users.
- its dangerous to run vi as root
- possible vulverability if the hacker uses a group after the first twenty


Q2: 
1.  The extra headers with the mobile code can easily cause a denial of 
  service attack by making the packets run in a path that does not have 
  a backwards loop currently in the code, but it is produced in transit.
  Eventually the TTL will kill the packet and it will not reach it's 
  destination.  This threat can be addressed by writing out the path taken
  so far statically and having the router make sure it does not go to a
  router it has already seen.

2.  Having chunks of mobile code run at each point creates a security 
  threat even greater than in (1) since only one piece of malicious code 
  can force the packet to go to a specific router.  This router can be 
  controlled by a hacker so all the data sent can be read, modified, 
  and/or deleted before sending it onwards.  This threat can be handled
  by authentication of the chunk or the set handler.

3.  This can be very dangerous as the backwards jumps can loop forever in
  turn causing a denial of service attack.  The loops will engulf the 
  routers resources and it will not be able to do it's main job of routing
  packets (as tic-tac-toe took away Joshua's computing resources from 
  global thermo nuclear war in War Games).  This threat can be addressed 
  by not allowing backwards loops, a timeout after a certain amount of 
  processing, or a kill after a certain amount of processing.  

4.  This basically gives us the green light to do whatever we want to 
  anything that comes through our router.  It seems silly to give the router
  read/write access to the packet itself.  Any malicious code could just
  destroy communications over the network.  This huge threat can be stopped
  by over-riding read/write access or having some type of authentication 
  at the destination (if it ever gets there).

5.  Whenever a new flow is created, more memory is set aside for it.  This
  could create extremely large packets.  If a loop was possible, this could
  cause a breakdown of all the routers as processing time would rise 
  indefinitely.  This threat can only be handled if we set a limit on the
  number of flows possible and curtail the possibility of loops.

6.  If we are allowed to have compressed packets, a gateway or firewall 
  cannot keep certain unwanted packets out.  This threat can be addressed
  by having a check at decompression that the extra packet has the same 
  source, destination, and other header information as the first.  (although
  a hacker could potentially attack the code that controls decompression
  at a router she has control over)

7.  Now this has gone overboard and goes beyond the scope of routers 
  "routing" packets.  Java has a lot of security threats that can cause 
  havoc on the network.  Every router is trusting the writer of the code.  
  Just using the JVM will slow the router down tremendously and cause other
  packets to be dropped.  Looping, read/write abilities, and eating up 
  computing resources are all possible when interpretting java byte code.
    I really can't think of a way to address this threat entirely.  Java 
  itself is not secure enough to use on routers IMHO.  Dropping packets 
  with Java in it is not feasible either as we could loose a lot of 
  important data.


Q3:

1.  If it is acceptable to block all mobile code at the firewall, how 
  would you do so and what problems might you expect to encounter? 
  
    In order to block all mobile code, a packet analyser would be needed to
  look at each one for mobile code.  A buffer of all packets would be 
  needed in case any were split up, then analyse them together.  
  A application level blocker would be needed for packets that are tunneled
  through another application like FTP.  A smart decoder would be needed to
  decode packets and see if they contain mobile code (very difficult to 
  recognize all the different types of compression if it was not alrady
  specified).

2. Suppose next that you can't get away with blocking all mobile code: you 
  are asked to block dangerous mobile code and let through (the majority of) 
  safe mobile code. (But it is ok to be cautious and occasionally block 
  some mobile code which might have been safe.) What additional problems 
  does this introduce, and how might you try to solve them? 

    Problems this introduces is the blocking program will be extremely 
  complicated.  It will have to be smart in that it will have to be able to 
  analyse whether or not code is safe.  A possible solution is to set up 
  a simple policy that would not allow use of certain functions, memory
  allocations, or libraries.  (even this might allow in a great deal of 
  malicious code.
 
3. For each of the problems you listed, who is to blame? The firewall, 
  or the end host?   

    I'm not really sure the firewall or the end host is to "blame".  I think
  the problem is with mobile code itself.  We should just not allow it.
  The best way to control it is not to allow it.  If it is already in a 
  packet, it is probably more work to figure out whether it is malicious 
  or not than it is worth.  


-sm


@
