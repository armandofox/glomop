head	1.2;
access;
symbols
	start:1.1.1.1
	iang:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.09.02.16.47.12;	author iang;	state Exp;
branches;
next	1.1;

1.1
date	98.09.02.16.15.21;	author iang;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.02.16.15.21;	author iang;	state Exp;
branches;
next	;


desc
@@


1.2
log
@.
@
text
@Principles:

1. Economy of mechanism

   interactions are the security guy's nightmare.

   number of interactions goes quadratically in the size of the program
   (and you could even argue that it goes as O(2^n) rather than O(n^2))

   e.g. butler lampson's anecdote about recovering a password by abusing
   interactions between the page fault mechanism & the password checker

   quote site exec tar -c -v --rsh-command=commandtorunasftp -f somebox:foo foo

   millions of examples

   quote bellovin's fundamental law of firewalls :-)

2. Fail-safe defaults

   nt webservers: to prevent read access to certain types of files,
   you are instructed to include a list of file extensions which you want to
   be protected (instead of just setting appropriate permissions on those
   files).  but if you forget any extensions, you get screwed, because
   the default is to allow all access -- and lo and behold, several successive
   attacks have in fact been found based on this observation

   CERN webserver has a similar hole: if you mark the directory
   "/secret/*" as protected, then access to "www.berkeley.edu/secret/foo.html"
   will fail, but access to "www.berkeley.edu//secret/foo.html" will succeed.
   this is just the canonicalization problem...

   smb's observations on the sendmail wizard hole

   lots of example regarding config files.  e.g. cisco routers by default
   opened up access to a telnet port, which you have to turn off by hand.

   sandboxing: anything not explicitly allowed is denied by default
   (and the idea is if you get that wrong, and aren't permissive enough,
   you'll notice because your apps won't work.  in contrast, if you had
   followed the opposite approach, then if you got something wrong and
   were too permissive, you wouldn't notice until someone exploited it and
   broke into your machine.)

3. Complete mediation

   NFS only checks access on access to mountd; but if you get a filehandle
   without contacting mountd (e.g. by network sniffing or by guessing it),
   you can bypass all access checks

   java: apps stored on disk run with full privilege, apps coming over
   the web run in a sandbox.  but what happens if you construct a file://
   url to point to a .class file in the browser's cache?  whammo!

   java's use of securitymanager -- if you forget a check, there's no
   mediation

   bellovin's comment on sendmail: failure to do perfect bookkeeping
   allows email addresses expansion to cause program execution

   capabilities and acls: both allow for complete mediation, it's just
   that the checking of capabilities is potentially much easier than the
   checking on acls, since you don't have to check the identity of the
   requestor is

4. Open design

   north american + gsm cellphone crypto failures

   secret backdoor passwords (e.g. sam_exec/Yosemite, csadmin/hp
   on HPUX9.x,

   unix a good example of where open design went well

   military a counter-example
   also firewall-1 a counter-example; there was a hole in it, but
   never found for years (also Kerberos4 with its PRNG, also X11)

   pgp: bugs were indeed found in pgp2 (e.g. rng was improved)

   ssh, too

   CERT, and its lack of full disclosure, and the argument about
   publication of flaws
   system design should include not just the static system, but your
   detection and reaction methodology -- what are you going to do when
   it breaks?  have you designed in some mechanism to fix it & deploy
   the fix?

   difference between strong argument for open design and weak argument

   steve suggests drawing a 2x2 matrix ('secure+open', 'insecure+open',
   'secure+closed', 'insecure+closed')

   most controversial? do it last?

5. Separation of privilege

   ???

   kerberos checks both ip address and your cryptographic ticket

   secret sharing

   remailers: must compromise all in the path to break anonymity
   (strongest link vs weakest link property)

6. Least privilege

   sendmail on unix, etc.: once broken into, the intruder has root access,
   and the game is over.  better would be for sendmail to run in a limited
   execution domain with access only to mail-related stuff, so that a hole
   in sendmail doesn't affect the rest of the system.

   sandboxing in general, janus specifically

   ftpd tractorbeaming attack (!)

   at one point, a bug in shockwave plugin could be used to read your
   netscape mail

7. Least common mechanism

   java, javascript, and channels between them and the browser: opened
   up new attacks where a malicious java applet cooperated with a malicious
   javascript page.  problem was that java and javascript gave two different
   ways to get system information, and they had slightly different security
   policies, which didn't compose well.

   all sorts of web servers, file servers, etc. try to reimplement
   filename access control, i.e. has to be under some directory, and
   almost all of them have a bug with "../" in their version. :-)
   they should be using the underlying os mechanisms.  (NFS, rpc.statd,
   MS webserver, MS SMB, ...)

   unix fs seems like a good example of where this was followed to
   good effect

   windoze exports an easy interface to msie web-browsing code, for use
   by other apps (e.g. eudora, pointcast, etc.).  unfortunately, java and
   javascript is enabled by default.  eudora reuses this html-rendering
   component without remembering to turn off java/javascript.  unfortunately,
   eudora invokes the html-renderer on a local file, so any java/javascript
   sent to you by email will be executed with full permissions.  eek!

   sendmail: 41k lines of code.  enough said.

8. Psychological acceptability

   if folks don't like your firewall, they'll hook up their work machine
   to a modem so they can dial in from home, and you're hosed.

   n/cypher boxes (and NSA crypto gear too): physical tokens in the form
   of a key that you insert and turn

   change your password often?

Weaker principles:

9. Work factor

   one important distinguishing feature of crypto is the ability to
   put concrete numbers on the required work factor

   much more important today because its the basis for secure authentication
   protocols.  also, because there are more script kiddies today (along with
   www.rootshell.com, etc.)

10. Compromise recording

   the idea behind modern-day intrusion detection systems

   fips 140: tamper-evidence

   casinos: don't bother looking for fraud unless your daily take is off
   from what you'd expect; principle is you don't care about fraud
   if it doesn't affect your bottom line enough to notice


11. Orthogonal security (?)

   tcp_wrappers
   etc.
@


1.1
log
@Initial revision
@
text
@d81 2
@


1.1.1.1
log
@Repository for CS 261 stuff
@
text
@@
