head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	98.09.18.20.46.44;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.09.18.20.36.06;	author daw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@high-level flow:
  vulnerabilities in Internet *protocols* now
  then firewalls
  then vulnerabilities in network services & applications
  then secure coding practices
  we're climbing up the protocol stack
    actually, better metaphor: think of the layers as a wedding cake;
    then we're like some crazy termite gone horribly bad, blissfully
    eating its way up the cake :-)

where we were:
  how to spoof initial authentication on connections, so you can make
  new connections with forged credentials

where we're going with TCP wrappers:
  how to take over pre-existing connections

high-level view of TCP foo:
  "threat amplification"
  modification of TCP data streams without being able to modify IP packets

list real incidents (Alternic, Mitnick/Shimomura, Panix)

TCP hijack
 ian's variant
    why it works: duplicates discarded (even if they have different data),
    ack flow lets you predict sequence numbers of next packet, etc.
    (what happens if you send the fake packet too early, so that one end
    gets an ack for a packet it hasn't yet sent?)
 de-synchronization tricks
    why it works: packets outside of window are discarded
    ack storms

variant for DNS

UDP, ease of spoofing

routing games
  interpose yourself as a router into the path of interest

source routing
  how do you fix it? [check for gateway = ip_src; but that doesn't work,
    if there's collusion; today, it's fixed by dropping all source-routed
    packets, which is sorta pessimal but sadly necessary]

routing protocols
  e.g. bgp uses tcp
  florida incident with mit getting blackholed
  how do you fix it? [crypto]
    what's wrong with the simple fix? [routers may be compromised or deceived
      by upstream neighbors]
    what's a better fix? [maybe signing each record that you flood;
      but this is very hard; open research problem]
  psst: by the way, this allows for all the tcp denial of service attacks
    to be mounted against backbone routers

icmp redirects

ARP spoofing
  ARP: broadcast a request for an IP addr -> ethernet addr lookup;
    wait for response
  response can be spoofed by anyone on the same subnet (have to win a race)
ftp bounce
ftp port stealing
stealth scanning?
krsh port bouncing, web browser port bouncing, ...
denial of service: RSTs, smurf, ping o' death, echo attacks, land, etc.
  ping of death:
    if (data.length > 65536)
       drop;
    so send fragments so packet has total length 65537, say
    works with any IP/ICMP packet, not just ping
  smurf:
    target->x.y.z.255: icmp request [or anything else]
  echo attack:
    target->target: udp source 7 dst 7: foo
    or worse:
    x.y.z.255->x.y.z.255: udp source 7 dst 7: foo
  land:
    127.0.0.1->target: SYN(s)
    target->127.0.0.1: SYN(t)|ACK(s)
    127.0.0.1->target: ACK(s) [because seq # t was outside the window]
    127.0.0.1->target: ACK(s)
    ...

lessons
  theme of "threat amplification"
  address-based authentication BAD
  denial of service really hard to stop: if attacker can generate packets
    more cheaply than you can handle them, you lose
  in Internet security, network protocols provide very little security;
    you really desperately need crypto
@


1.1
log
@*** empty log message ***
@
text
@d6 4
d87 1
@
