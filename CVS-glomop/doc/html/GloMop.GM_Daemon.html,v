head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 dgourley:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     95.08.06.23.07.18;  author dgourley;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     95.08.06.23.07.19;  author dgourley;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<head>
<a name="_top_"></a>
<title>
Class GloMop.GM_Daemon
</title>
</head>
<body>
<a name="_top_"></a>
<pre>
<a href="packages.html">All Packages</a>    <a href="GloMop.html">This Package</a>    <a href="GloMop.html">Previous</a>    <a href="GloMop.GM_DocChunk.html#_top_">Next</a></pre>
<hr>
<h1>
Class GloMop.GM_Daemon
</h1>
<pre>
<a href="java.lang.Object.html#_top_">java.lang.Object</a>
   |
   +----GloMop.GM_Daemon
</pre>
<hr>
<dl>
<dt>
public class <b>
GM_Daemon</b>
<dt>
extends <a href="java.lang.Object.html#_top_">Object</a>
</dl>
The Daemon class provides the interface to the Proxy and provides the means
to fetch documents.
<hr>
<a name="index"></a>
<h2>
<img src="images/constructor-index.gif" width=275 height=38>
</h2>
<dl>
<dt>
<img src="images/yellow-ball-small.gif" width=6 height=6>
<a href="#GM_Daemon()"><b>GM_Daemon</b></a>()
<dd>
The class constructor.
</dl>
<h2>
<img src="images/method-index.gif" width=207 height=38>
</h2>
<dl>
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#Auth()"><b>Auth</b></a>()
<dd>
Authentication.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#ConnectProxy(java.lang.String, java.lang.String, java.lang.String)"><b>ConnectProxy</b></a>(String, String, String)
<dd>
Establish connection to proxy.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#DisconnectProxy(int)"><b>DisconnectProxy</b></a>(int)
<dd>
Disconnect from proxy.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#DisposeDoc(int)"><b>DisposeDoc</b></a>(int)
<dd>
 Close an open document connection.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#GetChunk(int, int)"><b>GetChunk</b></a>(int, int)
<dd>
 Get a chunk from an open document connection.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#GetDoc(GloMop.GM_DocLocator, GloMop.GM_TypeList, GloMop.GM_QosPrefs, java.lang.String, int, int, byte[])"><b>GetDoc</b></a>(GM_DocLocator, GM_TypeList, GM_QosPrefs, String, int, int, byte[])
<dd>
 Initiate a "get document" request.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#RegisterTypes(GloMop.GM_TypeList)"><b>RegisterTypes</b></a>(GM_TypeList)
<dd>
 Register the list of types known.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#SetCallback(int, int, int, int, byte[])"><b>SetCallback</b></a>(int, int, int, int, byte[])
<dd>
 This method is really no longer valid since the callback proc has 
 been moved to the chunk class.
<dt>
<img src="images/red-ball-small.gif" width=6 height=6>
<a href="#eventCallback(int, java.lang.Object)"><b>eventCallback</b></a>(int, Object)
<dd>
Callback procedure for when a network property of interest changes.
</dl>
<a name="constructors"></a>
<h2>
<img src="images/constructors.gif" width=231 height=38>
</h2>
<a name="GM_Daemon"></a>
<a name="GM_Daemon()">
<img src="images/yellow-ball.gif" width=12 height=12>
</a>
<b>
GM_Daemon
</b>
<pre>
  public GM_Daemon()
</pre>
<dl>
<dd>
The class constructor. Currently does nothing, but if member fields are added
they should be initialized here.
</dl>
<p>
<a name="methods"></a>
<h2>
<img src="images/methods.gif" width=151 height=38>
</h2>
<a name="ConnectProxy(java.lang.String, java.lang.String, java.lang.String)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="ConnectProxy">
<b>
ConnectProxy
</b>
</a>
<pre>
  public int ConnectProxy(<a href="java.lang.String.html#_top_">String</a> proxyAddr,
                          <a href="java.lang.String.html#_top_">String</a> returnPath,
                          <a href="java.lang.String.html#_top_">String</a> idString)
</pre>
<dl>
<dd>
Establish connection to proxy.
</dl>
<p>
<a name="DisconnectProxy(int)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="DisconnectProxy">
<b>
DisconnectProxy
</b>
</a>
<pre>
  public <a href="GloMop.GM_Error.html#_top_">GM_Error</a> DisconnectProxy(int connId)
</pre>
<dl>
<dd>
Disconnect from proxy.
</dl>
<p>
<a name="Auth()">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="Auth">
<b>
Auth
</b>
</a>
<pre>
  public <a href="GloMop.GM_Error.html#_top_">GM_Error</a> Auth()
</pre>
<dl>
<dd>
Authentication.
</dl>
<p>
<a name="RegisterTypes(GloMop.GM_TypeList)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="RegisterTypes">
<b>
RegisterTypes
</b>
</a>
<pre>
  public void RegisterTypes(<a href="GloMop.GM_TypeList.html#_top_">GM_TypeList</a> t)
</pre>
<dl>
<dd>
 Register the list of types known.  Called once after connection, may
 be called again later to update the list.
</dl>
<p>
<a name="GetDoc(GloMop.GM_DocLocator, GloMop.GM_TypeList, GloMop.GM_QosPrefs, java.lang.String, int, int, byte[])">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="GetDoc">
<b>
GetDoc
</b>
</a>
<pre>
  public int GetDoc(<a href="GloMop.GM_DocLocator.html#_top_">GM_DocLocator</a> loc,
                    <a href="GloMop.GM_TypeList.html#_top_">GM_TypeList</a> types,
                    <a href="GloMop.GM_QosPrefs.html#_top_">GM_QosPrefs</a> qos,
                    <a href="java.lang.String.html#_top_">String</a> annotation,
                    int callbackThreshold,
                    int maxChunks,
                    byte buffer[])
</pre>
<dl>
<dd>
 Initiate a "get document" request.
<p>
 Args:
<p>
 DocLocator structure: tells proxy how to locate the document in a
 protocol-dependent way.  E.g. for HTTP, DocLocator may contain a
 URL; for GMail, it may contain the name of the mailspool directory
 and host; etc.
<p>
 QosPrefs structure: specifies desired QOS params for this document,
 details TBD.
<p>
 AcceptTypes list: a list specifying which types are acceptable as
 return.  If null, any type previously registered with proxy is OK.
<p>
 annotation: a descriptive comment about the request, stored locally
 so client can review what requests are outstanding.  not used by the
 proxy. 
<p>
 callbackThresh: the number of document "chunks" that must arrive
 before the callback procedure that receives the document is able to
 do anything useful.  "Chunks" are defined relative to each datatype.
<p>
 callbackProc: the procedure that should be called as soon as
 CallbackThresh "chunks" of the document have arrived.  The
 CallbackProc will continue to be called as new chunks arrive.  The
 callback procedure and chunk threshold between calls can be changed
 after the first  callback.
<p>
 maxChunks: the maximum number of chunks to prefetch initially.  By
 convention the first chunk is the document table of contents.  Some
 symbolic constants are available to specify things like "all
 chunks", "as many as will fit in some existing buffer", etc.
<p>
 buffer: if non-NULL, specifies where to store incoming chunks; if
 NULL, GM will allocate the buffer space.  User-supplied buffer space
 should be large enough to hold maxChunks.
<p>
 Returns request ID that will be passed to the callback proc later to
 identify the document.  If the request ID is null, an error
 occurred.  (TBD: an "errno"-like mechanism in which information
 about the error is stored.)
</dl>
<p>
<a name="GetChunk(int, int)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="GetChunk">
<b>
GetChunk
</b>
</a>
<pre>
  public <a href="GloMop.GM_DocChunk.html#_top_">GM_DocChunk</a> GetChunk(int reqid,
                              int chunkIndex)
</pre>
<dl>
<dd>
 Get a chunk from an open document connection.  This may require
 fetching the chunk from the proxy if the chunk isn't already there.
 (ISSUE: If chunk isn't available, the call should return
 asynchronously & perform a callback when the chunk arrives.  Is
 it redundant to implement that behavior both here and in CGetDoc?
 Maybe CGetDoc should only return the TOC (though it may prefetch up
 to maxChunks chunks)?
</dl>
<p>
<a name="DisposeDoc(int)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="DisposeDoc">
<b>
DisposeDoc
</b>
</a>
<pre>
  public <a href="GloMop.GM_Error.html#_top_">GM_Error</a> DisposeDoc(int reqid)
</pre>
<dl>
<dd>
 Close an open document connection.  All client-allocated buffers for
 this document are freed, and the document is "forgotten about"; any
 prefetches in progress for this document are cancelled; etc.
</dl>
<p>
<a name="SetCallback(int, int, int, int, byte[])">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="SetCallback">
<b>
SetCallback
</b>
</a>
<pre>
  public int SetCallback(int reqid,
                         int newProc,
                         int newMaxChunks,
                         int newThreshold,
                         byte buffer[])
</pre>
<dl>
<dd>
 This method is really no longer valid since the callback proc has 
 been moved to the chunk class. However, it could be used to update
 the reference point that the chunk's callback method will use to
 reach the app. I have not added any code that allow the chunk to
 no how to notify the app since that seems implementation dependent
 and it is not clear how we are going to implement this interface.
<p>
 Set/change the callback proc for an existing request; any future
 notifications on the request will go to the new proc.  Returns the
 pointer to the old callback procedure (like signal(1)).
 newThreshold and threshRelative have similar semantics as the
 parameters to lseek().
</dl>
<p>
<a name="eventCallback(int, java.lang.Object)">
<img src="images/red-ball.gif" width=12 height=12>
</a>
<a name="eventCallback">
<b>
eventCallback
</b>
</a>
<pre>
  public void eventCallback(int eventCode,
                            <a href="java.lang.Object.html#_top_">Object</a> data)
</pre>
<dl>
<dd>
Callback procedure for when a network property of interest changes. Args
are an event code and any associated data. The data is currently typed as
Object this is done since all objects inherit from Object and whatever the
form of the client data we can just use a cast. 
</dl>
<p>
<hr>
<pre>
<a href="packages.html">All Packages</a>    <a href="GloMop.html">This Package</a>    <a href="GloMop.html">Previous</a>    <a href="GloMop.GM_DocChunk.html#_top_">Next</a></pre>
</body>
</html>
@


1.1.1.1
log
@initial import of docs dir

@
text
@@
