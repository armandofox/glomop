head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 dgourley:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     95.08.06.23.07.17;  author dgourley;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     95.08.06.23.07.18;  author dgourley;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
GloMop.txt
------------------------

I have gone thru your header files and tried to come up with a fairly
close mapping to the C code. In doing this I ended up not having to 
change a lot of the code and it seemed the best solution as Eric wanted
code with a clear mapping to C for the magic cap version.

The main differences:

1. There is no preprocessor in java so I had to get rid of most of your
typedefs. Also since there is no unsigned type in java I just converted
most of the shorts to ints. Here are the mappings so far:
	C version			Java version
	------------			-------------
	GM_ConnectId			int
	GM_PProto			int
	GM_ReqId			int
	GM_Priority			int

2. I had to change some of your types just because there was no mapping
from C to java.
	C version			Java version
	------------			-------------
	void * (BlobPtr)		byte []
		-- This mapping may allow us to actually pass in a
		pre-allocated byte array and type cast what is returned.
		I will have to look into it more closely but we can at
		least get the bytes this way instead of having to pass
		null to CGetDoc.

	char *, []			Strin
		-- This was done merely for convenience. Java has the char
		type and supports char arrays, but java String are much
		easier to work for and java provides C code for String to
		char * conversion anyway.

	GM_Error (cErrno)		class GM_Error
		-- In this class we should statically enumerate known
		possible errors. In functions returning a GM_Error, null
		is returned if no error occured.

3. Function pts to callbacks no longer exist. Since the callbacks are
mainly associated with notification, it seemed to make sense that there 
was no need to associate a callback with each object type. To deal with
the lack of callbacks methods were added to the GM_DocChunk class and
the GM_EventType class to deal with them. The prototypes are almost the
same, however, additional args may need to be added to the methods to 
instruct them how they should go about notifying the app. This seems 
somewhat implementation dependent so for now I left them out.


4. I created a place holder GM_DocType. It currently does nothing, but
we will probably want to add some base methods and an interface of some
kind to it in the future.


---------------

Each file is a class by the same name and I have written a simple makefile
to get the package to compile. It compiles fine, but I have not ran any
tests on it at all so I could easily have made mistakes.

As far as access, I have made everything publicly accessible for now, but
we should probably think that through a bit. I have left some accessor
functions lying around and we should probably use them whereever possible.
I was just somewhat unsure as to how much control we wanted.

One last note is that in java it is possible to tell whether an object is
a sub type of a given class or is that class via the "instanceOf" modifier.
Therefore if we assume that the type that we have acquired is a type that
is present in the type list then we can figure out what type it is. This
should make resolving what method to call a lot simpler.

Well if anything does not look right let me know what it is and I will 
take care of it.

		
	@


1.1.1.1
log
@initial import of docs dir

@
text
@@
