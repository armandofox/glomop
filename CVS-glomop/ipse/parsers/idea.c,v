head     1.1;
branch   1.1.1;
access   ;
symbols  ipse-pcap:1.1.1.1 ipse-pcap:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.06.17.01.09.04;  author gribble;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.06.17.01.09.04;  author gribble;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
  IDEA.C   v2.2
	c source code for IDEA block cipher. IDEA (International Data
	Encryption Algorithm), formerly known as IPES (Improved Proposed
	Encryption Standard). Algorithm developed by Xuejia Lai and James L.
	Massey, of ETH Zurich. This implementation modified and derived from
	original C code developed by Xuejia Lai. Zero-based indexing added,
	names changed from IPES to IDEA. CFB functions added. Random Number
	routines added. Optimized for speed 21 Oct 92 by Colin Plumb
	<colin@@nsq.gts.org>  This code assumes that each pair of 8-bit bytes
	comprising a 16-bit word in the key and in the cipher block are
	externally represented with the Most Significant Byte (MSB) first,
	regardless of internal native byte order of the target cpu.
	modified for use with PC files by Colin Maroney 4/1/94

	6/19/96 [NJL] Hacked away at this to get it plug into the kernel
	    I had to do something terrible here. First let me apologize
	    for not knowing my way around encryption. Anyway, apparently
	    IDEA "fills-out" a block of cipher data. So if you pass something
	    7 bytes in length, it fills it out to IDEABLOCKSIZE (8). That remain
	    byte is needed for decryption. In other words, if you pass a buffer
	    with 11 bytes, the return buffer is 16 bytes in length AND NEEDS TO
	    STAY that way. You need to pass back the full 16 bytes to get the
	    correct results.
	    So what I did was if at the end of a buffer of data, less than 8 bytes
	    remains, I just do a bit-inversion on the remaining data.
	    I know, dirty. And probably entirely unsafe. But I couldn't think
	    of another way of doing it.


	*/

#undef TESTIDEA

#include "idea.h"

static uint16 inv(uint16 x)
{
  uint16 t0,t1;
  uint16 q,y;
  if (x<=1)
    return x;
  t1=(uint16)(0x10001l/x);
  y=(uint16)(0x10001l%x);
  if (y==1)
    return low16(1-t1);
  t0=1;
  do
    {
      q=x/y;
      x=x%y;
      t0+=q*t1;
      if (x==1)
	return t0;
      q=y/x;
      y=y%x;
      t1+=q*t0;
    } while (y!=1);
  return low16(1-t1);
}

void en_key_idea(uint16 *userkey, uint16 *Z)
{
  int i,j;
  /* shifts */
  for (j=0;j<8;j++)
    Z[j]=*userkey++;
  for (i=0;j<IDEAKEYLEN;j++)
    {
      i++;
      Z[i+7]=((Z[i&7] << 9) | (Z[(i+1) & 7] >> 7));
      Z+=i&8;
      i&=7;
    }
}

void de_key_idea(idea_key Z,idea_key DK)
{
  int j;
  uint16 t1,t2,t3;
  idea_key T;
  uint16 *p=T+IDEAKEYLEN;
  t1=inv(*Z++);
  t2=-*Z++;
  t3=-*Z++;
  *--p=inv(*Z++);
  *--p=t3;
  *--p=t2;
  *--p=t1;
  for (j=1;j<ROUNDS;j++)
    {
      t1=*Z++;
      *--p=*Z++;
      *--p=t1;
      t1=inv(*Z++);
      t2=-*Z++;
      t3=-*Z++;
      *--p=inv(*Z++);
      *--p=t2;
      *--p=t3;
      *--p=t1;
    }
  t1=*Z++;
  *--p=*Z++;
  *--p=t1;
  t1=inv(*Z++);
  t2=-*Z++;
  t3=-*Z++;
  *--p=inv(*Z++);
  *--p=t3;
  *--p=t2;
  *--p=t1;
  /*copy and destroy temp copy*/
  for(j=0,p=T;j<IDEAKEYLEN;j++)
    {
      *DK++=*p;
      *p++=0;
    }
}


static uint16 mul(uint16 a, uint16 b)
{
  word32 p;

  if (a)
    {
      if (b)
	{
	  p=(word32)a*b;
	  b=(uint16)(low16(p));
	  a=(uint16)(p>>16);
	  return b-a+(b<a);
	}
      else
	{
	  return 1-a;
	}
    }
  else
    return 1-b;
}

static void cipher_idea(uint16 in[4],uint16 out[4],idea_key Z)
{
  register uint16 x1,x2,x3,x4,t1,t2;
  int r=ROUNDS;
  x1=*in++; x2=*in++;
  x3=*in++; x4=*in;
  do
    {
      MUL(x1,*Z++);
      x2+=*Z++;
      x3+=*Z++;
      MUL(x4,*Z++);
      t2=x1^x3;
      MUL(t2,*Z++);
      t1=t2+(x2^x4);
      MUL(t1,*Z++);
      t2=t1+t2;
      x1^=t1;
      x4^=t2;
      t2^=x2;
      x2=x3^t1;
      x3=t2;
    } while (--r);
  MUL(x1,*Z++);
  *out++=x1;
  *out++=(x3+*Z++);
  *out++=(x2+*Z++);
  MUL(x4,*Z);
  *out=x4;
}

void idea_encrypt_block(idea_key K,char * in,char * out,int size) {
  uint16 input[4],output[4];
  unsigned int j=0,i;

  while (j<size) {

    /*
    memset(input,0,IDEABLOCKSIZE);
    memset(output,0,IDEABLOCKSIZE);
    */
    /* number o' bytes to copy */
    i=size-j;
    i=i>IDEABLOCKSIZE?IDEABLOCKSIZE:i;

    /* copy into input */
    memcpy(input,in+j,i);

    if (i==8) {
      cipher_idea(input,output,K);
    }
    else {
      int k;

      for (k=0;k<i;k++)
	output[k]=~(input[k]);
      /*      memcpy(output,input,i); */
    }

    /* save results */
    memcpy(out+j,output,i);

    /* inc j */
    j+=i;
  }
}
@


1.1.1.1
log
@Wohoo--ipse over pcap!
@
text
@@
