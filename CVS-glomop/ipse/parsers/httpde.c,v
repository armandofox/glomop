head     1.1;
branch   1.1.1;
access   ;
symbols  ipse-pcap:1.1.1.1 ipse-pcap:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     97.06.17.01.09.04;  author gribble;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     97.06.17.01.09.04;  author gribble;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <unistd.h>
#include "md5.h"
#include "idea.h"

typedef unsigned long long u64;
typedef unsigned long u32;

#define MD5SALT     "p6s|U_p@@83s"
#define MD5SALTLEN   11
uint16   ideakey[8] = {0x4526, 0x8743, 0x3341, 0x9932,
		       0x7865, 0x2093, 0x1996, 0x2321};
u64      iv = 0x41334938;
idea_key en_key, de_key;
unsigned long size;

static char asc[256][20];
static int asclen[256];

char *stream_ntoa(unsigned long addr);
void  md5_plus_salt_text(char *text, char *buf);
int   do_idea_encrypt(unsigned char *text, unsigned char *buf, int inlen);
void  do_idea_decrypt(unsigned char *text, unsigned char *buf, int inlen);
void  do_read_or_die(int fd, char *buf, size_t length);
void  asc_init(void);

void do_encrypt_stuff(void);
void do_decrypt_stuff(void);

int main(int argc, char **argv)
{

  if (argc != 1) {
    fprintf(stderr, "Usage: http < stdin > stdout\n", argv[0]);
    exit(1);
  }

  asc_init();

  if (strcmp(argv[0] + (strlen(argv[0]) - 4), "http") == 0)
    do_encrypt_stuff();
  else if (strcmp(argv[0] + (strlen(argv[0]) - 6) , "httpde") == 0)
    do_decrypt_stuff();
  else {
    fprintf(stderr, "Usage: http < stdin > stdout\n", argv[0]);
    exit(1);
  }

  exit(0);
}

void do_encrypt_stuff(void)
{
  fprintf(stderr, "Encryption not available.\n");
}

void do_decrypt_stuff(void)
{
  unsigned char inbuf[8192], cryptbuf[8192], cbuf2[8192], outbuf[4096];
  unsigned char  lenbuf[30];
  unsigned char  *nexttok;
  unsigned long  addr;
  unsigned short port;
  int urllen, paddedurllen, i;

  while(1) {

    if (fgets(inbuf, 8191, stdin) == NULL)
      break;
    if (inbuf[strlen(inbuf)-1] == '\n')
      inbuf[strlen(inbuf)-1] = '\0';

    /* Time of client request (seconds) */
    nexttok = strtok(inbuf, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, ":", 1);

    /* Time of client request (microseconds) */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Source address */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    sscanf(nexttok, "%16Lx", (u64 *) cbuf2);
    do_idea_decrypt(cbuf2, cryptbuf, 8);
    addr = *((unsigned long *) cryptbuf);
    sprintf(outbuf, "%s:", stream_ntoa(addr));
    write(1, outbuf, strlen(outbuf));

    /* Source port */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Destination address */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    sscanf(nexttok, "%16Lx", (u64 *) cbuf2);
    do_idea_decrypt(cbuf2, cryptbuf, 8);
    addr = *((unsigned long *) cryptbuf);
    sprintf(outbuf, "%s:", stream_ntoa(addr));
    write(1, outbuf, strlen(outbuf));

    /* Destination port */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Time of server response (seconds) */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, ":", 1);

    /* Time of server response (microseconds) */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Response headerlength */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Response datalength */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Time of server response end (seconds) */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, ":", 1);

    /* Time of server response end (microseconds) */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Client pragmas */
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* Server pragmas */
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);

    /* URL len */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    sscanf(nexttok, "%d", &urllen);

    paddedurllen = urllen+1;
    if (paddedurllen % 8 != 0) {
      paddedurllen += 8 - (paddedurllen % 8);
    }

    /* URL itself */
    nexttok = strtok(NULL, " :");
    if (nexttok == NULL)
      break;
    
    /* convert URL text to binary and decrypt*/
    for (i=0; i<2*paddedurllen; i+=2) {
      sscanf(nexttok+(unsigned long) i,
	     "%02x",
	     &(cryptbuf[i/2]));
    }
    do_idea_decrypt(cryptbuf, cbuf2, paddedurllen);
    
    /* write out url */
    sprintf(lenbuf, "%d", strlen(cbuf2));
    write(1, lenbuf, strlen(lenbuf));
    write(1, " ", 1);
    write(1, cbuf2, strlen(cbuf2));
    write(1, " ", 1);

    /* Now the mimetype len and URL */
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, " ", 1);
    nexttok = strtok(NULL, " ");
    if (nexttok == NULL)
      break;
    write(1, nexttok, strlen(nexttok));
    write(1, "\n", 1);
  }
   
}

char *stream_ntoa(unsigned long addr)
{
    static char buf[100];
    sprintf(buf, "%lu.%lu.%lu.%lu",
        (addr >> 24),
        (addr >> 16) % 256,
        (addr >> 8) % 256,
        (addr) % 256);
    return buf;
}

void  do_read_or_die(int fd, char *buf, size_t length)
{
  int sofar = 0, next;

  while (1) {
    next = read(fd, buf + (unsigned long int) sofar, length-sofar);
    if (next <= 0) {
      exit(1);
    }
    sofar += next;
    if (sofar >= length)
      break;
  }
}

void  md5_plus_salt_text(char *text, char *buf)
{
  MD5_CTX mdcontext;

  MD5Init(&mdcontext);
  MD5Update(&mdcontext, MD5SALT, MD5SALTLEN);
  MD5Update(&mdcontext, text, strlen(text));
  MD5Final(&mdcontext);
  
  memcpy((void *) buf, (const void *) &(mdcontext.buf[0]), 
	 4*sizeof(unsigned int));
}

void  asc_init(void)
{
    int i;

    for(i=128;i<=255;++i)
    {
        sprintf(asc[i], "\x03%02x", i);
        asclen[i] = 3;
    }
    for(i=0;i<=31;++i)
    {
        sprintf(asc[i], "\x03^%c", i+64);
        asclen[i] = 3;
    }
    for(i=32;i<=126;++i)
    {
        sprintf(asc[i], "%c", i);
        asclen[i] = 1;
    }
    strcpy(asc[10], "\n"); asclen[10] = 1;
    strcpy(asc[13], "\x03\\r");
    strcpy(asc[27], "\x03\\e");
    strcpy(asc[8], "\x03\\b");
    strcpy(asc[7], "\x03\\a");
    strcpy(asc[9], "\x03\\t");
    strcpy(asc[12], "\x03\\f");
    strcpy(asc[127], "\x03^?");
}

int do_idea_encrypt(unsigned char *text, unsigned char *buf, int inlen)
{
    int      padded_url_len, i;
    unsigned char  *tmpo;

    iv = 0x12345678;
    en_key_idea(ideakey, en_key);
    de_key_idea(en_key, de_key);

    memcpy(buf, text, inlen);
    tmpo = buf;

    /* Now encrypt the URL */
    if (inlen % 8 != 0) {
      padded_url_len = 8 - (inlen % 8);
      tmpo = &(buf[inlen]);
      for (i=0; i<padded_url_len; i++) {
	*tmpo = '\0';
	tmpo++;
      }
      padded_url_len = inlen+padded_url_len;
    } else {
      padded_url_len = inlen;
    }

    size = padded_url_len / 8;
    tmpo = buf;
    while (size) {
      *(u64 *)tmpo ^= iv;
      idea_encrypt_block(en_key, tmpo, tmpo, 8);
      iv = *(u64 *) tmpo;
      tmpo += 8;
      size--;
    }
    tmpo = buf;
    return padded_url_len;
}

void  do_idea_decrypt(unsigned char *text, unsigned char *buf, int inlen)
{
    int      padded_url_len, i;
    unsigned char  *tmpo;

    iv = 0x12345678;
    en_key_idea(ideakey, en_key);
    de_key_idea(en_key, de_key);

    memcpy(buf, text, inlen);

    /* Now decrypt the URL */
    size = inlen / 8;
    tmpo = buf;
    while (size) {
      u64 tmp = *(u64 *)tmpo;
      idea_encrypt_block(de_key, tmpo, tmpo, 8);
      *(u64 *)tmpo ^= iv;
      iv = tmp;
      tmpo += 8;
      size--;
    }
    tmpo = buf;
}
@


1.1.1.1
log
@Wohoo--ipse over pcap!
@
text
@@
