head	1.5;
access;
symbols
	ipse-pcap:1.1.1.1
	ipse-pcap:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	97.06.19.00.28.37;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.06.18.01.07.16;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.06.17.18.14.59;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.06.17.01.31.55;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.06.17.01.09.03;	author gribble;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.06.17.01.09.03;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Made some changes - ipse now seems to work with my new parser.
@
text
@#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include "stream.h"
#include "uifile.h"
#include "module.h"

static char asc[256][20];
static int asclen[256];

/* This will get called multiple times */
void ui_file_init(void)
{
    int i;

    for(i=128;i<=255;++i)
    {
        sprintf(asc[i], "\x03%02x", i);
        asclen[i] = 3;
    }
    for(i=0;i<=31;++i)
    {
        sprintf(asc[i], "\x03^%c", i+64);
        asclen[i] = 3;
    }
    for(i=32;i<=126;++i)
    {
        sprintf(asc[i], "%c", i);
        asclen[i] = 1;
    }
    strcpy(asc[10], "\n"); asclen[10] = 1;
    strcpy(asc[13], "\x03\\r");
    strcpy(asc[27], "\x03\\e");
    strcpy(asc[8], "\x03\\b");
    strcpy(asc[7], "\x03\\a");
    strcpy(asc[9], "\x03\\t");
    strcpy(asc[12], "\x03\\f");
    strcpy(asc[127], "\x03^?");
}

static const char *file_dir_ind[3] = { "\x01", "\x02", "\x04" };
static const int file_dir_indlen[3] = {1,1,1};

typedef struct {
    char *filename;
    int fd;
    streamdir lastdir;
    int asciiescape;
    unsigned limitlen[2];
} ui_file_data;

void *ui_file_state(stream_t *stream, int asciiesc, int limitlen)
{
    ui_file_data *res = malloc(sizeof(ui_file_data));
    char *h1, *h2;

    res->fd = -1;
    h1 = strdup(stream_ntoa(htonl(stream->id.laddr)));
    h2 = strdup(stream_ntoa(htonl(stream->id.haddr)));
    res->filename = malloc(strlen(h1)+strlen(h2)+40);
    res->lastdir = STREAM_DIR_NONE;
    res->asciiescape = asciiesc;
    sprintf(res->filename, "%s:%d-%s:%d-%d", h1, htons(stream->id.lport),
    	h2, htons(stream->id.hport), stream->id.protocol);
    res->limitlen[0] = res->limitlen[1] = limitlen;
    free(h1);
    free(h2);
    return res;
}

static void ui_file_open(stream_t *stream)
{
    ui_file_data *state = (ui_file_data *)stream->uistate;
    if (state->fd < 0) {
	/* Open the file and make it unreadable if TCP */
	state->fd = open(state->filename, O_WRONLY|O_CREAT|O_APPEND, 0600);
	fchmod(state->fd, stream->id.protocol == IPPROTO_TCP ? 0600 : 0644);
    }
}

static int ui_file_write(stream_t *stream, streamdir thisdir,
    unsigned char *data, int datalen)
{
    ui_file_data *state = (ui_file_data *)stream->uistate;
    int res;

    if (state->fd >= 0 && datalen > 0) {
	if ((state->limitlen[thisdir] > 0) &&
	    ((stream->seq[thisdir] - stream->syn_seq[thisdir])
		> state->limitlen[thisdir])) {
	    /* Don't output this far; in fact, close the data stream */
	    stream->ui->uiclose(stream);
	    return 0;
	}

	if (state->asciiescape)
	{
	    int i;
	    if (state->lastdir == STREAM_DIR_NONE) {
		if ((res = write(state->fd, file_dir_ind[STREAM_DIR_NONE],
		    file_dir_indlen[STREAM_DIR_NONE])) < 0) return res;
	    }
	    if (thisdir != state->lastdir)
	    {
		if ((res = write(state->fd, file_dir_ind[thisdir],
		    file_dir_indlen[thisdir])) < 0) return res;
		state->lastdir = thisdir;
	    }
	    for(i=0;i<datalen;++i,++data)
	    {
		if ((res = write(state->fd, asc[*data], asclen[*data])) < 0)
		    return res;
	    }
	}
	else
	{
	    int netlen = htonl((thisdir == STREAM_DIR_LTOH) ?
		    datalen : -datalen);
	    if ((res = write(state->fd, (char *)&netlen, sizeof(netlen))) < 0)
		return res;
	    if ((res = write(state->fd, data, datalen)) < 0) return res;
	}
    }
    return 0;
}

static void ui_file_close(stream_t *stream)
{
    ui_file_data *state = (ui_file_data *)stream->uistate;
   
    if (state) {
      if (state->fd >= 0) {
	/* Close the file and make it readable */
	fchmod(state->fd, 0644);
	close(state->fd);
	state->fd = -1;
      }
    }
}

uifuncs_t ui_file_funcs =
    { ui_file_open, ui_file_write, ui_file_close };

void *ui_proc_state(stream_t *stream, char *progname, int asciiesc,
    int limitlen)
{
    ui_file_data *res = malloc(sizeof(ui_file_data));
    char *h1, *h2;

    res->fd = -1;
    h1 = strdup(stream_ntoa(htonl(stream->id.laddr)));
    h2 = strdup(stream_ntoa(htonl(stream->id.haddr)));
    res->filename = malloc(strlen(progname)+strlen(h1)+strlen(h2)+40);
    res->lastdir = STREAM_DIR_NONE;
    res->asciiescape = asciiesc;
    sprintf(res->filename, "%s%c=%s:%d-%s:%d-%d",
        progname, 0, h1, htons(stream->id.lport),
        h2, htons(stream->id.hport), stream->id.protocol);
    res->limitlen[0] = res->limitlen[1] = limitlen;
    free(h1);
    free(h2);
    return res;
}

static void ui_proc_open(stream_t *stream)
{
    ui_file_data *state = (ui_file_data *)stream->uistate;
    if (state->fd < 0) {
        /* Open a pipe to a program */
        int fd[2];
        pid_t child;

        pipe(fd);
        child = fork();
        if (child == -1) { perror("fork"); return; }
        if (child == 0) {
            /* Child */
            int i;
            char *arg;

            /* Set up the file descriptors */
            setsid();
            dup2(fd[0], 0);
            for(i=3;i<getdtablesize();++i) close(i);

            /* Now fork, so our parent can waitpid() for us, and we can
                continue as our own child */
            if (fork()) exit(0);

            /* exec() the program */
            arg = state->filename + strlen(state->filename) + 1;
            execlp(state->filename, state->filename, arg, NULL);
            perror("execlp");
            exit(1);
        } else {
            /* Parent */
            close(fd[0]);
            state->fd = fd[1];

            /* Wait for our child, who should exit immediately */
            waitpid(child, NULL, 0);
        }
    }
}

static void ui_proc_close(stream_t *stream)
{
    ui_file_data *state = (ui_file_data *)stream->uistate;

    if (state) {
      if (state->fd >= 0) {
        /* Close the file and wait for the child */
        close(state->fd);
        state->fd = -1;
      }
    }
}

uifuncs_t ui_proc_funcs =
    { ui_proc_open, ui_file_write, ui_proc_close };


/*
 * A dynaparser UI accepts data, does parsing on the fly, and
 * potentially writes out some log data.
 */

void *ui_dynaparse_state(stream_t *stream, dynaparse_ops *dp_ops)
{
    ui_dynaparse_data *res = malloc(sizeof(ui_dynaparse_data));

    res->dp_ops = dp_ops;
    res->addr[STREAM_DIR_LTOH] = ntohl(stream->id.laddr);
    res->port[STREAM_DIR_LTOH] = ntohs(stream->id.lport);
    res->addr[STREAM_DIR_HTOL] = ntohl(stream->id.haddr);
    res->port[STREAM_DIR_HTOL] = ntohs(stream->id.hport);
    res->data[STREAM_DIR_LTOH] = res->data[STREAM_DIR_HTOL] = NULL;
    res->len[STREAM_DIR_LTOH] =  res->len[STREAM_DIR_HTOL] = res->netlen = 0;
    res->dpdata = NULL;   /* dp specific state */
    return res;
}

static void ui_dynaparse_open(stream_t *stream)
{
    ui_dynaparse_data *state = (ui_dynaparse_data *)stream->uistate;

    /* We have a new TCP connection happening.  Call the correct parser
       open function */
    state->dpdata = state->dp_ops->open(state, stream);
}

static int ui_dynaparse_write(stream_t *stream, streamdir thisdir,
    unsigned char *data, int datalen)
{
    ui_dynaparse_data *state;

    state = (ui_dynaparse_data *) (stream->uistate);
    if (!state)
      return 0;
    state->netlen = (thisdir == STREAM_DIR_LTOH) ? datalen : -datalen;

    /* Append data into the buffers in the UI dynaparse state */
    if (thisdir == STREAM_DIR_LTOH) {
      char *tmpbuf;

      /* Hmm.  Now I know all about realloc.  (sigh) */
      tmpbuf = (char *) realloc(state->data[STREAM_DIR_LTOH],
				state->len[STREAM_DIR_LTOH] + datalen + 1);
      if (tmpbuf == NULL) {
	fprintf(stderr, "out of memory in dynaparse_write (1)\n");
	exit(1);
      }
      state->data[STREAM_DIR_LTOH] = tmpbuf;
      memcpy((void *) 
	     &( (state->data[STREAM_DIR_LTOH])[state->len[STREAM_DIR_LTOH]]),
	     data, datalen+1);  /* +1 to get the NULL term */
      state->len[STREAM_DIR_LTOH] += datalen;
    } else {
      char *tmpbuf;

      tmpbuf = realloc(state->data[STREAM_DIR_HTOL],
		       state->len[STREAM_DIR_HTOL] + datalen + 1);
      if (tmpbuf == NULL) {
	fprintf(stderr, "out of memory in dynaparse_write (2)\n");
	exit(1);
      }
      state->data[STREAM_DIR_HTOL] = tmpbuf;
      memcpy((void *)
	     &( (state->data[STREAM_DIR_HTOL])[state->len[STREAM_DIR_HTOL]]),
	     data, datalen+1);  /* +1 to get the NULL term */
      state->len[STREAM_DIR_HTOL] += datalen;
    }
    /* Pass off the state to the dynaparse write function */
    state->dp_ops->write(state, stream);
    return 0;
}

static void ui_dynaparse_close(stream_t *stream)
{
    ui_dynaparse_data *state;

    /* We are now done parsing, since the stream has closed from under
       us - call the appropriate dynaparse close function */
    if (!stream)
      return;
    state = (ui_dynaparse_data *) stream->uistate;
    if (!state)
      return;

    if (state->dp_ops)
      state->dp_ops->close(state, stream);

    if (state->data[STREAM_DIR_HTOL]) {
      free(state->data[STREAM_DIR_HTOL]);
      state->data[STREAM_DIR_HTOL] = NULL;
      state->len[STREAM_DIR_HTOL] = 0;
    }

    if (state->data[STREAM_DIR_LTOH]) {
      free(state->data[STREAM_DIR_LTOH]);
      state->data[STREAM_DIR_LTOH] = NULL;
      state->len[STREAM_DIR_LTOH] = 0;
    }

    if (state->dpdata) {
      free(state->dpdata);
      state->dpdata = NULL;
    }
}

uifuncs_t ui_dynaparse_funcs =
    { ui_dynaparse_open, ui_dynaparse_write, ui_dynaparse_close };


@


1.4
log
@Made many changes..
@
text
@a261 1
    fprintf(stderr, "datalen is %d\n", datalen);
a269 1
      int   i;
a270 1
      fprintf(stderr, "In uiwrite with len %d\n", datalen);
a282 5
      for (i=0; i<state->len[STREAM_DIR_LTOH]; i++) {
	fprintf(stderr, "char %d, char %c, val %d\n",
		i, *(state->data[STREAM_DIR_LTOH] + i),
		*(state->data[STREAM_DIR_LTOH] + i));
      }
@


1.3
log
@OK...getting there...
@
text
@d262 1
d271 1
d273 1
d286 5
@


1.2
log
@changed an IP_TCP to IPPROTO_TCP
@
text
@a8 1
/*#include <netinet/protocols.h>*/
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#include <netinet/protocols.h>
d83 1
a83 1
	fchmod(state->fd, stream->id.protocol == IP_TCP ? 0600 : 0644);
@


1.1.1.1
log
@Wohoo--ipse over pcap!
@
text
@@
