head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     98.08.03.23.33.22;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.08.03.23.33.22;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Proposed Mobility and Adaptation Architecture</title>
</head>

<body>

<h1 align="center"><img src="glomo.gif" width="92" height="92"
alt="glomo.gif (6805 bytes)" align="left"><img src="darpa.gif" width="121" height="71"
align="right">A Unified Architecture For Deploying Adaptive Mobile Applications</h1>

<p align="center"><em>Prof. Leonard Kleinrock &amp; Armando Fox, co-chairs<br>
Adaptation Architecture Working Group, DARPA GloMo Program</em></p>

<h1><br clear="all">
Introduction</h1>

<p>This document describes the proceedings of the GloMo Mobility/Adaptation Architecture
Working Group, up to and including its meeting on 20 July 1998 at UCLA.&nbsp; The document
is a companion to the <a href="GloMoAdaptArch.ppt">presentation viewgraphs</a>, a subset
of which was presented during the Architecture Workshop at the <a
href="http://www.dyncorp-is.com/darpa/meetings/glo98jul/">DARPA GloMo PI Meeting</a>, July
30, 1998.</p>

<p>Attendees/working group members, in no particular order: 

<ul>
  <li>Co-chair: Prof. <a href="mailto:lk@@cs.ucla.edu">Leonard Kleinrock</a>, UCLA</li>
  <li>Co-chair &amp; Scribe: <a href="mailto:fox@@cs.berkeley.edu">Armando Fox</a>, UC Berkeley
    [or Prof. Armando Fox, Stanford; whichever you prefer]</li>
  <li>Prof. <a href="mailto:popek@@cs.ucla.edu">Gerald Popek</a>, Platinum Systems/UCLA</li>
  <li>Prof. <a href="mailto:satya@@cs.cmu.edu">M. Satyanarayanan</a>, CMU</li>
  <li>Dr. <a href="mailto:saurav@@sfo.erg.sri.com">Saurav Chatterjee</a>, SRI</li>
  <li>Prof. <a href="mailto:reiher@@cs.ucla.edu">Peter Reiher</a>, UCLA</li>
  <li>Prof. <a href="mailto:badri@@cs.rutgers.edu">B.R. Badrinath</a>, Rutgers [visiting UC
    Berkeley]</li>
  <li>Working group appointed by <a href="mailto:rruth@@darpa.mil">Robert Ruth</a>, DARPA</li>
</ul>

<h1>Goals &amp; Concepts</h1>

<p>The main goal was to propose an architecture for <em>mobile, adaptive</em> (with
respect to heterogeneous networks and clients) applications satisfying the following
criteria: 

<ol>
  <li>Agree on architecture for integrating existing diverse GloMo research, including
    specifying the API's between the components.</li>
  <li>Admits of incremental deployment.</li>
  <li>Is scalable and robust.&nbsp; Although it is impossible to guarantee scalability and
    robustness for any arbitrary application, there should be nothing inherent in the <em>architecture</em>
    that limits scalability or robustness.</li>
  <li>Specifies critical QoS/resource management parameters &amp; interfaces.</li>
  <li>Describes what is missing/where additional research is needed.</li>
  <li>Outlines the security implications of applications running on the architecture.</li>
  <li>Describe interoperability (or lack thereof) with existing standards, or where new
    standards development is needed.</li>
</ol>

<p>The proposed architecture embodies three main concepts.&nbsp; First we describe each
separately, then describe how existing GloMo research fits into this model and where
additional work (or coordination with other working groups) is needed.&nbsp; It will be
helpful to refer to the <a href="archpix.ppt">slides</a> while reading this description.<font
SIZE="2"></p>

<h2></font>1. Application = Client+Server+Adaptation Agents</h2>

<p>An &quot;adaptation agent&quot; is the core mechanism by which adaptive applications
are realized. Simply put, an AA is a source of computation that is logically between
client and server. note that the <em>physical</em> location of an AA could be on the
client, on the server, or on an infrastructural node or cluster someplace in between, but <em>logically</em>
it is a separate entity. Later we describe how any of the GloMo adaptation components
built so far can be characterized as AA's.&nbsp; An AA is more than just a piece of code
that performs adaptation: it is an <em>agency</em> consisting of such code <em>plus</em>
event notification and resource management, the other two functionalities required for
dynamically adaptive applications.</p>

<p>A complete adaptive application therefore consists of a client part, a server part, and
zero or more AA's in between. Note that this subsumes the &quot;degenerate case&quot; of
client-server-only (pre-adaptation model), as well as a proxy architecture
(client+server+single AA), an application that exploits chained or hierarchical proxies
(client+server+multiple AA's), and applications that rely on additional intelligence in
the client or server nodes to support adaptation, such as Odyssey (the Odyssey filesystem
API and viceroy act as client-side and server-side AA's respectively).</p>

<p>An AA is composed of <em>application-specific adapters</em> (ASA's) that do the actual
computation associated with adaptive behavior, and an <em>environment-aware event manager</em>
that works together with a <em>resource manager </em>to modulat the &quot;adaptation
envelope&quot;.</p>

<h2>2. Application-specific adaptation modules</h2>

<p>An <em>application-specific adapter</em> (ASA) does the actual work of adapting the
content or behavior of an application, given a description of the constraints (network
parameters, computing resources available, client's hardware/software capabilities,
etc.)&nbsp; The internal structure of an ASA is left unspecified, although we make a
specific recommendation below with respect to how ASA's should be architected and deployed
to get the maximum benefit with respect to incremental deployment, software reuse, and
robustness/scalability.&nbsp; Examples of ASA's would include: 

<ul>
  <li>Video transcoding modules that adapt video streams for lower bandwidth connections</li>
  <li>Image or richtext transformers that adapt rich content for small devices</li>
  <li>Disconnected-filesystem mediators that allow legacy programs to continue operating in
    the presence of network disconnection</li>
</ul>

<p>Note that ASA's are responsible for <em>reacting</em> to events that would trigger
changes in adaptive behavior (such as a network-quality change), but not for <em>detecting</em>
those events: that responsibility belongs to the Event Manager (EM).&nbsp;&nbsp; ASA's can
also <em>request</em> additional resources (computation, bigger share of the network,
etc.) in attempting to improve end user performance; those requests are mediated by the
Resource Manager (RM).&nbsp; The EM and RM are now described together, since they
interoperate closely.&nbsp; </p>

<h2>3. Environment-aware event manager &amp; resource manager</h2>

<p>The <em>event manager (EM) </em>is responsible for delivering to the ASA's all events
that might trigger changes in the ASA's adaptation behavior.&nbsp; There are two classes
of such events: 

<ul>
  <li>External events: Something in the world changes (network quality change, disconnection,
    etc.), is detected by EM, and relayed to ASA's.</li>
  <li>Internal events: because of a resource-allocation decision made by the RM, some ASA may
    perceive a change in its share of resources.&nbsp; For example, if a new ASA starts and
    requires some network bandwidth, existing ASA's may be notified that their share of the
    network bandwidth is about to be reduced.</li>
</ul>

<p>Note that <em>all events, internal or external, </em>are delivered to ASA's exclusively
via the EM.&nbsp; This means ASA's need understand only a single API for receiving and
reacting to any condition that might cause a change in their behavior.</p>

<p>The <em>resource manager (RM)</em> monitors and makes allocation decisions regarding
the resources available to all ASA's running on a single AA.&nbsp; (Later we describe how
this same mechanism extends cleanly to handle the case where multiple, distinct AA's may
have to compete for physical resources, as in the case when a single network
infrastructure point-of-presence must host multiple distinct applications.)&nbsp; The RM
can receive requests from ASA's (&quot;I want more bandwidth&quot;) as well as relaying
events to them from either the outside world (&quot;You're losing bandwidth because the
network connection has suffered a loss of bandwidth&quot;) or the internals of the AA
(&quot;You're losing bandwidth because a higher-priority AA needs it&quot;).&nbsp; The RM
has a resource-description API that ASA's must understand in order to make requests of it.
&nbsp; The RM's policy for allocation is configurable; when a policy-driven change is
made, the RM must generate an <em>event</em> (using the existing EM API) which will
eventually be used to inform the ASA's.</p>

<h2>End-to-End QoS and Hierarchical Resource Management</h2>

<p>Applications with multiple AA hops may want to perform end-to-end resource management.
&nbsp; This is accomplished by having the EM's at each AA communicate with each other
(recall that <em>all</em> control communication in and out of AA's occurs via the EM).
&nbsp; This does not violate scalability: it is possible to use mechanisms such as
Scalable Reliable Multicast (SRM) to effect inter-EM communication, and that EM's can
communicate is a property of the architecture, not a requirement on any particular
application.&nbsp; The &quot;Inter-app Resource Management/QoS&quot; slide illustrates the
case where two such applications exist.&nbsp; Each application has three AA's that
communicate (via EM's) to control end-to-end QoS, but it happens that the middle AA's of
each application have to share a network infrastructure point-of-presence (PoP) and
therefore compete for its resources.&nbsp; To accommodate this case, the competing AA's
can be &quot;wrapped&quot; in an outer RM/EM combination that manages resources and
delivers environmental events <em>for the PoP, rather than for the AA's.</em> &nbsp;
Exactly the same resource management structure and event delivery structure applies; from
the point of view of the AA EM's, the PoP RM is just another source of events from
&quot;the outside world&quot; (outside the boundary of each AA).&nbsp; This hierarchical
arrangement, which can be recursively extended to perform hierarchical resource management
of the type exemplified by (e.g.) Class Based Queueing (CBQ), allows us to cleanly reuse a
single set of mechanisms and API's for both controlling resource management at the
application level and at the physical infrastructure level.&nbsp; A similar arrangement
would obtain for the case where a single CPU hosts multiple AA's: an outer hierarchical
RM/EM could be placed in charge of dividing up the CPU cycles according to an
appropriately chosen policy.</p>

<h1>Meeting the Grand Challenges</h1>

<ol>
  <li>Specify main architectural components and the API's among them: the main abstractions
    are the EM with an event delivery API; the RM with a resource description API; and the AA
    that wraps them together.</li>
  <li>Admits of incremental deployment: ASA's have already been identified as an incremental
    deployment mechanism.&nbsp; Furthermore, with respect to the architecture, <em>any
    component can be omitted</em> and the remaining ones will still work (albeit possibly with
    degraded performance).&nbsp; For example, in the absence of an EM, the ASA's can continue
    to operate performing the same type of adaptation.&nbsp; In the absence of an RM,
    applications can still be informed of events that may cause adaptation-behavior changes,
    even though they may not be able to ask the RM for additional resources to assist in
    adaptation.&nbsp; With respect to legacy clients, the architecture can interoperate with
    legacy and COTS clients</li>
  <li>Is scalable and robust: Nothing in the architecture limits scalability or robustness.
    &nbsp; THe Berkeley SNS/TACC proxy work has demonstrated how specific applications (ASA's)
    can be made scalable and robust, by instantiating the AA as a cluster of workstations and
    employing appropriate software fault tolerance techniques such as are used in the SNS
    server.</li>
  <li>Specifies critical QoS/resource management parameters &amp; interfaces: the relevant
    interfaces are the EM and RM interfaces, current examples of which can be found in Badri's
    environment-aware event API and SRI's resource management framework, respectively.</li>
  <li>Describes what is missing/where additional research is needed: a unified abstraction for
    &quot;the network&quot; should be made available to applications.&nbsp; Applications may
    want to know about the <em>scope</em> of the network (unicast, multicast, broadcast, and
    geocast were identified as the four main classes here) but should not need to know network
    details beyond that.&nbsp; The EM and RM API's are solely responsible for conveying
    network-properties information to the application level in such a way that the information
    can be used for adaptation.</li>
  <li>Describe interoperability (or lack thereof) with existing standards, or where new
    standards development is needed: as Berkeley TACC demonstrated, we can either interoperate
    with existing&nbsp; composable protocols such as HTTP, or craft new ones where appropriate
    (as was done for efficiency in Top Gun Wingman, the PalmPilot graphical web browser).
    &nbsp; This is important because a secondary goal of some of the architects in the Working
    Group was to provide control API's that could either be <em>integrated</em> (as they are
    with filesystem API's such as Odyssey) or <em>standalone</em> <em>and composable</em> (as
    in remote-object API's such as Rover).</li>
</ol>

<p>The last few slides give examples of specific GloMo technologies that can be plugged
into the architecture.&nbsp; Since the components are independent and incrementally
deployable, it is not necessary for all of the GloMo technologies to be integrated
simultaneously; they can be added one at a time.</p>

<h2>Security</h2>

<p>As the Security slide shows, there are basically three approaches to security for
&quot;intermediated&quot; adaptive applications: 

<ol>
  <li>Complete end-to-end security.&nbsp; This prevents adaptation machinery from doing any
    adaptation at all; it's simply a tunnel for data between the endpoints.</li>
  <li>Trust the infrastructure: if AA's can be secured (both physically and
    cryptographically), it may be reasonable to trust them, i.e. provide them with the keys
    necessary to decrypt data, perform adaptation computation, and re-encrypt before passing
    it to the next hop.&nbsp; Note that this approach presents key distribution issues which
    were beyond the scope of the present Working Group to address.</li>
  <li>Limited trust: the AA's can, for example, adapt by adding and dropping layers in a
    layered encoding, but the layered data itself is encrypted and opaque to the AA's. &nbsp;
    This largely eliminates the key distribution problem but severely limits the flexibility
    of the adaptation that AA's can perform (compared with option #2).</li>
</ol>

<p>We believe the above three points along the spectrum are <em>fundamental</em> for
intermediated applications.&nbsp; Manipulation of encrypted layered video has been
demonstrated by Lincoln Labs' secure video gateway, and &quot;proxied security&quot; was
demonstrated in the Charon prototype in the UCB BARWAN project.&nbsp; API's for <em>orthogonal
application security</em> would make option #2 easier to implement, but this is a topic
for future work.</p>

<hr>

<p><a href="mailto:fox@@cs.berkeley.edu">fox@@cs.berkeley.edu</a>, <a
href="mailto:lk@@cs.ucla.edu">lk@@cs.ucla.edu</a></p>
</body>
</html>
@


1.1.1.1
log
@
@
text
@@
