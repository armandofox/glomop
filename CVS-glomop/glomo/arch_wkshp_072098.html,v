head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     98.08.03.23.33.23;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.08.03.23.33.23;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@<html>

<head>
<title>GloMo Proxy Workshop 7</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>

<h1>GloMo Proxy Workshop @@ UCLA, 7/20/98</h1>

<p>Major topics &amp; philosophy from last time, featuring AF's editorial bias: 

<ul>
  <li>Is <font color="#FF0000">IP layered model </font>correct/appropriate? (LK)<br>
    AF: Not necessarily, we should be abstracting the apps <em>away</em> from this model.
    &nbsp; Many apps do just fine (or prefer) datagram-like, possibly unordered delivery.
    &nbsp; In fact some existing cellular network proxies (&quot;evil twins&quot;) such as
    Bellcore's AirBoss and Mowgli (?) essentially take datagram protocols that run over
    streams, and repackage them as datagrams!</li>
  <li><font color="#FF0000">Infrastructure computing</font>, thin vs thick clients &amp; <font
    color="#FF0000">FS vs. app-specific API's</font> (AF, Satya)<br>
    AF: Give me a reason to make the client thick.&nbsp; Java clients aren't thick, but do
    clients really need a filesystem and FS interface?&nbsp; Also, a non-FS interface may
    allow <font color="#FF0000">disconnected operation</font> to become orthogonal to the
    mobility architecture, since API can express consistency constraints (as in Bayou or
    Rover, but not Odyssey)<br>
    <strong>Satya sez: </strong>Historical reasons motivate FS naming and API's.&nbsp; Also:
    Win &amp; Unix allow FS to be cleanly extended with type-specific code.&nbsp; Also be sure
    you can talk about consistency of <em>collections of things</em> (like directory
    subtrees), not just individual objects (as on the Web).<br>
    <strong>Gerry:</strong> can we define a consistency API that can be applied either to FS's
    or as a separate application-level API.</li>
  <li>Event <font color="#FF0000">notification</font> (&amp; georouting?) (Badri)</li>
  <li><font color="#FF0000">QoS at app &amp; network level</font> (Saurav, Satya):
    app-specific, but each layer should have a way of talking about QoS meaningful at that
    layer.<br>
    <strong>Satya:</strong> Not just about network bandwidth; policy API must be able to talk
    about client resources (cache, CPU, etc) since these things play roles in QoS reaction
    decisions.<br>
    AF: but how to reconcile different layers' views of QoS? <strong>one crazy idea:</strong>
    &quot;Active QoS&quot;.&nbsp; Since we can't agree on parameterized data representations
    to pass around, pass around pieces of code instead.&nbsp; Use Exokernel-filter-like
    techniques to prove them safe.&nbsp; The pieces of code are essentially callbacks that
    cause an application-level action to happen when a network-level QoS change takes place.
    &nbsp; This way, each layer codifies its QoS parameters into an API (not a data structure)
    and the higher layers provide upcalls as the policy implementation.&nbsp;&nbsp; Fits
    nicely with <font color="#FF0000">agent</font> paradigm: with each agent, you ship over
    the agent's upcall (or it specifies one when it starts running) &amp; presumably the same
    code framework can be used for both.<br>
    <strong>Saurav: </strong>this is similar to how the SRI mechanism works now: each resource
    used by an app (CPU nodes, network in between, etc) is represented by an agent that acts
    on behalf of the app, each of which is responsible for doing QoS changes as they apply to
    that resource.&nbsp; Armando: yes, this is only slightly more general since the
    &quot;adaptation part&quot; of the code can be sent to remote sites, which preserves one
    mechanism for multi-hop and single-point applications.</li>
  <li>Simplicity == composability == <font color="#FF0000">incremental deployment</font>.
    &nbsp; Composability comes not only from layers, but from <em>orthogonality</em>. &nbsp;
    E.g. MASH and TACC.</li>
</ul>

<h2>Notes from the Meeting</h2>

<p>Driving concepts for arch proposal: 

<ul>
  <li>Composability &amp; scalability</li>
  <li>Incremental deployment</li>
  <li>Cross-layer communication</li>
  <li>QoS</li>
</ul>

<h2>Individual Views</h2>

<h4>Len</h4>

<ul>
  <li>Len: Need app aware layers, content aware layers, must reach across, must deal
    w/adaptation via environment notification (both directions: user adapts to app, and app
    adapts to user)</li>
  <li>Dynamic adaptation needed: mobile, agile</li>
  <li>Need theoretical framework for predicting/managing information flows</li>
  <li>QoS concepts must address user policy constraints</li>
  <li>There are now two &quot;hourglasses&quot;: IP, and our architecture, are the two
    &quot;standard interfaces&quot;.</li>
</ul>

<h4>Satya</h4>

<p>On any given node, a single entity is the governor (like the viceroy in Odyssey).
&nbsp; Coalesces requests and passes them down to next level.&nbsp; Either low/high water
marks, or sophisticated upcalls, can be used to decide whether to send an event upwards to
the viceroy.&nbsp; This is necessary to get <em>enforcement</em> across applications,
which would otherwise be greedy.</p>

<h4>Saurav</h4>

<p>Need (possibly region-constrained) QoS guarantees to apps.&nbsp; System must arbitrate
since apps will try to be greedy.</p>

<h2>Some Possible Deliverables (All Separable?)</h2>

<ul>
  <li>Sensing &amp; Adaptation to heterogeneous/legacy clients &amp; networks<ul>
      <li>Subscribing to a channel</li>
      <li>App structure for adaptation; mediate </li>
      <li>QoS vocabulary &amp; parameters; crosslayer communication</li>
      <li>Enforcement of resource constraints</li>
    </ul>
  </li>
  <li>Mobile-specific issues<ul>
      <li>Proximity/location-aware apps [subset of environment-aware?]</li>
      <li>Disconnected operation has become the norm, not the exception [subset of adaptation?
        consistency control?]</li>
    </ul>
  </li>
  <li>Incremental deployment<ul>
      <li>Interoperability w/COTS for each of these components</li>
      <li>Extensibility at least as important as getting it right the first time</li>
    </ul>
  </li>
  <li>Scalability<ul>
      <li>Failure tolerance/robustness</li>
      <li>Impact on programming model</li>
    </ul>
  </li>
  <li>Transparency <em>as well as</em> explicitly available adaptation mechanisms<ul>
      <li>eg Coda vs Rover/Bayou: really want a <em>separate and composable</em> consistency API</li>
      <li>eg end-to-end HTTP content negotiation vs proxies: this example works because <em>HTTP
        is composable</em></li>
      <li>Meta-description languages such as XML, that enable composition</li>
    </ul>
  </li>
  <li>Security story: end-to-end vs split, trust model, how to authenticate intermediate
    nodes, layer-encodings </li>
</ul>
</body>
</html>
@


1.1.1.1
log
@
@
text
@@
