head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	97.05.05.21.26.22;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.04.25.21.52.45;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.04.25.21.50.00;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.04.25.19.56.27;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.04.25.17.47.20;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.04.25.02.51.38;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.04.24.01.33.21;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.04.22.01.08.55;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.04.03.08.00.47;	author fox;	state Exp;
branches;
next	;


desc
@@


1.9
log
@*** empty log message ***
@
text
@<html> <head>
<title>Part 3: Finite State Machine</title>
</head>

<body>

<h1>Part 2: Intro to Finite State Machines</h1>

<a href="fsm.html">Back to top page of assignment</a><br>

In this section you'll design a circuit for a gum vending machine, which
dispenses gum when you insert coins adding up to 15 cents.  In so doing,
you'll learn what a <i>finite state machine</i> is, why they are your
friends, and how to build one.<p>

<b>Note:</b>  You're strongly encouraged to work in a small group for
this part, so you can split up the work at the end.<p>

You may submit this homework either by email, or in class on 5/1.

<h2>Real Logic Gates</h2>

Recall that in the last part of the assignment, you did various things
with schematic representations of Boolean logic gates (AND, OR, etc.)
Also recall that in class, I described how you could build logic gates
out of transistors (using the "water valves" model to explain).
In this section, we'll make things a little more real: we'll assume that
we can buy logic gates (for example, at Radio Shack).<p>

The lines in the diagrams you drew for last time now become actual
wires.  An input (or output) of a gate is "1" or "true" when the
electrical voltage (amount of electrical charge) on the wire is 5 volts;
it is "0" or "false" when the voltage is 0 volts.  (This is how most
gates actually work, by the way.)  And now here's why you should care...

<h3>The Gumball Machine</h3>

You've been asked to design the logic for a gumball machine that
dispenses gum when coins totaling 15 cents are inserted.  The dispenser
mechanism itself is being designed and built in a different part of the
factory, by mechanical engineers.  Here's what you know about the
gumball dispenser:

<img align="right" src="gifs/gumball_sch.gif">
<ul>
  <li>  The coin slot
       only accepts nickels and dimes.
  <li> The coin sensor mechanism provides two electrical signals
       (basically wires coming out of the mechanism) called
       NICKEL and DIME.  When the customer inserts a dime, the DIME
       signal is <i>asserted</i> by the coin sensor (that is, the DIME
       wire attains 5 volts, which the gates would
       recognize as 1.)   When the customer inserts a nickel, the NICKEL
       signal is asserted by the coin sensor.  At all other times, both
       DIME and NICKEL are zero volts.
  <li> There is a wire leading into the mechanism called DISPENSE.  When
       5 volts is applied to this wire (i.e. when this wire is the
       output of a logic gate that is generating "1" or "true"), the
       dispenser will dispense a gumball.  If this wire is zero volts, no gum
       is dispensed.
  <li> There is another wire leading into the mechanism called
       RETURN_5c.  When this wire gets 5 volts, the machine returns a
       nickel in change to the customer.

</ul>

<br clear="left">
The thing to remember here is that the wires leading in and out of the
mechanism can be used as inputs or outputs for logic gates.  For
example, if we could concoct a combination of logic gates whose output
is "1" whenever a gumball should be dispensed, we would connect that
output directly to the DISPENSE wire so the machine would dispense a
product.  Similarly, we could detect when a nickel is inserted by
watching to see when the NICKEL wire changes from 0 to 5 volts (for
"logically false" to "logically true").<p>

Initially, the dispenser is idle, waiting for a potential gum-chewer to
walk up and insert money.  When money is inserted, it could be either a
nickel or a dime, and of course we don't want to dispense gum until the
whole 15 cents has been inserted.  Furthermore, if the customer inserts
two dimes, we need to return a nickel change along with the gumball.<p>

So the dispenser basically must keep track of how much money has been
inserted so far.  We can think of the dispenser as being in one of five
<i>states</i> during a transaction with a customer:

<ul>
  <li> No money has been inserted (i.e. dispenser is idle) -- it always
       starts out in this state;
  <li> a total of 5 cents has been inserted;
  <li> a total of 10 cents has been inserted;
  <li> a total of 15 cents has been inserted, in which case gum should
       be dispensed and we should go back to being idle;
  <li> a total of 20 cents has been inserted, in which case gum should
       be dispensed, a nickel should be returned, and we should go back
       to being idle.
</ul>

The separate states serve to "remember" how much money has been
inserted.  Every time a coin is inserted, a <i>transition</i> to a new
state occurs, depending on the type of the coin.  Note that since only
nickels and dimes are allowed, the above are the <i>only</i> four states
the dispenser can be in, because the only amounts you can make using
only nickels and dimes (until gum is dispensed) are 5, 10, and 15 cents.
(OK, you can make 20 cents, but for now, we'll assume exact change is
always used.)<p>

This is all illustrated in the
<i>state diagram</i> below: If there's a state transition arrow from one
state to another, it means that the system can move directly from the
first state to the second.  For example, if the system is in the ".10
INSERTED" state, and the customer puts in a nickel, the system moves
directly to the ".15 INSERTED" state.<p>

<br clear="left"><img src="gifs/gumball_fsm.gif"><br>

<ul>
  <li type="square">  Suppose the machine accepted only nickels, no
  dimes.  Argue that we would still need separate states for ".05
  INSERTED" and ".10 INSERTED" and ".15 INSERTED".  (<b>Hint:</b> begin
  by assuming you <i>don't</i> have separate states for these cases, and
  describe what happens after you insert the first nickel, second
  nickel, etc.)
</ul>

Note that the ".15 INSERTED" state in the state diagram also has the
word DISPENSE; this indicates that, while in the ".15 INSERTED" state,
the system should <i>assert</i> (raise to 5 volts) the DISPENSE signal.
This makes sense, because when 15 cents has been received, we want to
dispense gum.  Similarly, the ".20 INSERTED" state has both DISPENSE and
RETURN_5c, indicating that if 20 cents has been inserted, we should both
dispense gum and return a nickel in change.

<ul>
  <li type="square">Why isn't there a state transition arrow from the
  "IDLE" state to the ".15 INSERTED" or ".20 INSERTED" states?
</ul>

The diagram above is called a <i>finite state diagram</i>; a <i>finite
state machine</i> is an abstract description of a mechanism that could
realize that state diagram.  Note that although we're going to implement
the state machine using electronic Boolean logic gates, you could also
implement it using Tinkertoys, mechanical valves and switches, etc.  The
FSM itself is just an abstract description --- not a "blueprint" for any
particular implementation.<p>

We'll now generalize from this one example: A Finite State Machine (FSM)
can be used to describe a computation in a style similar to that of a
Turing machine.  An FSM is characterized by:

<ul>
  <li> a fixed finite number of possible <i>states</i> (five, in the gumball
       example above).  The machine is said to <i>transition</i> from one
       state to another.
  <li> a number of binary-valued <i>inputs</i> (two, in the gumball
       example: the NICKEL and DIME detectors).  An input is said to be 
       <i>active</i> if the
       condition it represents is true.  For example, in the above
       diagram, a transition from the "IDLE" to the ".05 INSERTED" state
       occurs if the 
       "nickel detected" input is active.
  <li> a number of <i>outputs</i> (two, in the gumball example: the
       "dispense gum" trigger for the gumball mechanism, and the "return
       5 cents" trigger).  An output is
       said to be <i>asserted</i> when
       it's made active.
       For example, in the above diagram, if we reach the ".20 INSERTED"
       state, we assert both the DISPENSE and RETURN_5c outputs.
</ul>

<ul>
  <li type="square">  (Optional, extra credit)  What is the biggest
  conceptual difference between a Finite State Machine and a Turing
  Machine?  (<B>Hint:</b> can you figure it out just from the name
  "Finite State Machine"?)
</ul>

The key concept is (pay attention, and convince yourself that this is
true): <b>The next state is a function of the inputs <i>and the current
state</i></b>.<p>

To see this, consider the NICKEL input.  If a nickel is seen
while the machine is in the IDLE state, it will cause the machine to go to
the .05 INSERTED state.  But if seen when the machine is in the .05
INSERTED state, it causes the machine to go to the .10 INSERTED state,
and so on.<p>

So you can build a <i>state transition table</i> that describes the
behavior of the machine.  Each line of this table has the form: "If you
are in state X, and input Y is seen, then you should go to state Z."
For example:
<ul>
  <li> If the current state is IDLE, and a NICKEL is seen, go to the
       .05&nbsp;INSERTED state. 
  <li> If the current state is IDLE, and a DIME is seen, go to the
       .10&nbsp;INSERTED state.
  <li> If the current state is .10&nbsp;INSERTED and a NICKEL is seen,
       go to the .15&nbsp;INSERTED state.
  <li> etc.
</ul>


So what's the message?  The message is that in order to know what the
next state is going to be, you need to know what state you're in now
<i>and</i> what the values of the inputs are.


In addition, some states cause <i>outputs</i> to be asserted, which
causes the machine to do something.  For example, in the
.15&nbsp;INSERTED state, we DISPENSE gum.
Similarly, in the .20&nbsp;INSERTED state, we DISPENSE gum and also
RETURN_5c.<p>

<ul>
  <li type="square"> Complete the following <i>state transition table</i>
  for the 
  gumball dispenser.  The rows of the table don't have to appear in any
  particular order.  Assume that only one of Nickel, Dime, or
  Gumball_Removed can be  
  active at once (i.e. you can't put in a nickel and dime at the
  same time, or put in a nickel and remove the gum at the same
  time).  We've done three of the rows to start you off.   (Don't worry
  about computing the Next State after the .15 INSERTED or .20 INSERTED
  state.) 
</ul>
<table border="1">
<tr><td>Current State</td><td>Nickel</td><td>Dime</td>
<td>Next State</td> <td>Assert Outputs</td></tr>
<tr>
<td>IDLE</td> <td>1</td> <td>0</td>  <td>.05 INSERTED</td> <td></td>
</tr>
<tr>
<td>IDLE</td> <td>0</td> <td>1</td>  <td>.10 INSERTED</td> <td></td>
</tr>
<tr>
<td>.10 INSERTED</td> <td>0</td> <td>1</td> <td>.20 INSERTED</td>
<td>DISPENSE, RETURN_5c</td>
</tr>
</table>

<ul>
  <li type="square"> How many rows, total, are in your table?  Can you
  relate this number to the diagram?
</ul>

<ul>
  <li type="square">   Since our machine has two inputs, and each
  input can be one of two values (0 or 1), there are a total of 2*2=4
  possible combinations of the input values.  Furthermore, if the next
  state is supposed to depend on the current state and the input values,
  then each state should theoretically have to consider all 4
  combinations.  (For example, the first row in the table above
  considers the case where current state is IDLE and the input values
  are NICKEL=1, DIME=0; but there is no entry in the
  table that considers the case where current state is IDLE and the
  input values are <i>both</i> zero.)  How many rows would the complete table
  have if we made every state consider every possible value of the
  inputs?
  <li type="square"> Why does our "simplified" table have fewer than
  this many rows?  I.e. what constraints allowed us to omit some rows?
  (<B>Hint:</b> Go back and re-read the description of the mechanical
  part of the machine.)
</ul>

<h3>From State Table to Combinational Logic</h3>

Now we'll merge the state machine stuff with the combinational logic
stuff from last week.  In particular, we'll show how to implement the
state transition table using combinational logic.<p>

The first thing we need to do, though, is recode the state table in a
way that makes it amenable to Boolean logic.  We'll number the states
(in no particular order) using binary numbers, as follows:

<pre>
        000  IDLE
        001  .05 INSERTED
        010  .10 INSERTED
        011  .15 INSERTED
        100  .20 INSERTED
</pre>

<ul>
  <li type="square">  Rewrite the state transition table you made above, but 
  replace the Current State column with three columns C0,C1,C2, and
  replace the Next State column with three columns N0,N1,N2.  Use the
  three columns for the binary numbered representation of the current
  and next state respectively.  For example, if the Current State is
  ".15 INSERTED", then (from the list above) that corresponds to
  C0=0,C1=1,C2=1.  If the Next State is ".20 INSERTED", that corresponds
  to N0=1,N1=0,N2=0.  We've done three rows to start you off (the same
  three that we gave you for the first table).
</ul>

<table border="1">
<tr><td>Current State:<br><tt>C0 C1 C2</tt></td><td>Nickel</td><td>Dime</td>
<td>Next State:<br><tt>N0 N1 N2</tt></td> <td>Assert
Outputs</td></tr> 
<tr>
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>1</td> <td><br>0</td> 
<td>.05 INSERTED:<br><tt>0 0
1</tt></td> <td></td>  
</tr>
<tr>
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>0</td> <td><br>1</td> 
<td>.10 INSERTED:<br><tt>0 1 0</tt></td> <td></td>
</tr>
<tr>
<td>.10 INSERTED:<br><tt>0 1 0</tt></td> <td><br>0</td> <td><br>1</td>
<td>.20 INSERTED:<br><tt>1 0 0</tt></td>
<td>DISPENSE, RETURN_5c</td>
</tr>
</table>

<ul>
  <li type="square">  Looking through the table, under what conditions
  does N0=1?  State the answer in the following form: "N0 is 1 when the
  Current State is ???, NICKEL is ???, and DIME is ???."
  <li type="square">  Using the symbols N and D for NICKEL and DIME, and
  the symbols C0,C1,C2 to represent the three binary 
  bits that make up the Current State, verify that the following logic
  equation holds for N0: (Recall that the notation "A ~B" means "A and
  not B"<br>
  <pre>
        N0 = ~C0 C1 ~C2 ~N D
  </pre>
  <li type="square"> Similarly, state the conditions under which N1 can
  be 1, and write the corresponding logic equation.  (<B>Hint:</b>
  whereas the equation for N0 consisted of a single term that is the AND
  of a number of things, the equation for N1 should end up with
  <i>four</i> terms OR'd together, where each term is the AND of a
  number of things.)
  <li type="square">  Finally, write the equation for N2.
</ul>

If you'd like to check your equations before continuing, you can <a
href="mailto:fox@@cs.berkeley.edu">email them to me</a> and I'll get
right back to you.<p>

<h3>Simplify</h3>

<ul>
  <li type="square">  So now you have a set of three equations for N0,
  N1, N2.  Using the techniques from the previous part of this
  assignment, simplify them as much as possible.  (If you have multiple
  people in your group, this is a good time to split up the labor!)
</ul>

In the last installment, we'll see how the logic gates can be combined
with <i>latches</i> to actually implement the state machine.

<hr>
<address><a href="mailto:fox@@cs.berkeley.edu">fox@@cs.berkeley.edu</a></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.8
log
@*** empty log message ***
@
text
@d9 1
a9 1
<a href="fsm.html">Back to top page of assignment</a>
@


1.7
log
@*** empty log message ***
@
text
@d19 1
a19 3
You may submit this homework either by email, or by dropping it off at
the Computer Science desk (390 Soda Hall) and asking them to put it in
my mailbox.
@


1.6
log
@*** empty log message ***
@
text
@d16 7
d46 1
a46 1
<img align="right" src="gumball_sch.gif">
a66 6
  <li> Finally, there is another wire coming out of the mechanism called
       GUM_REMOVED.  When the customer removes the gumball and the
       little trapdoor closes, this wire becomes 5 volts.  (After gum
       has been dispensed, the coin slot doesn't accept any more coins
       until after the gumball has been removed.)
       
d157 2
a158 3
  <li> a number of binary-valued <i>inputs</i> (three, in the gumball
       example: the NICKEL and DIME detectors, and the GUM_REMOVED
       sensor).  An input is said to be 
a203 7
In addition, some states cause <i>outputs</i> to be asserted, which
causes the machine to do something.  For example, in the
.15&nbsp;INSERTED state, we DISPENSE gum; and in addition, if
GUM_REMOVED occurs while in that state, we go to IDLE state.
Similarly, in the .20&nbsp;INSERTED state, we DISPENSE gum and also
RETURN_5c; and in addition, if GUM_REMOVED occurs while in that state,
we go to IDLE state.<p>
d209 7
d224 3
a226 1
  time).  We've done three of the rows to start you off.  
d230 1
a230 1
<td>Gum_Removed</td> <td>Next State</td> <td>Assert Outputs</td></tr>
d232 1
a232 1
<td>IDLE</td> <td>1</td> <td>0</td> <td>0</td> <td>.05 INSERTED</td> <td></td>
d235 1
a235 1
<td>IDLE</td> <td>0</td> <td>1</td> <td>0</td> <td>.10 INSERTED</td> <td></td>
d238 1
a238 1
<td>.10 INSERTED</td> <td>0</td> <td>1</td> <td>0</td> <td>.20 INSERTED</td>
d248 3
a250 7
<b>The following 2 questions are optional, but highly recommended that you
give them a try, because we have glossed over some aspects of FSM design
in order to keep things simple.</b>

<ol>
  <li type="square">   Since our machine has three inputs, and each
  input can be one of two values (0 or 1), there are a total of 2*2*2=8
d253 1
a253 1
  then each state should theoretically have to consider all 8
d256 1
a256 1
  are NICKEL=1, DIME=0, GUM_REMOVED=0; but there is no entry in the
d258 1
a258 1
  input values are all zero.)  How many rows would the complete table
d265 1
a265 1
</ol>
d299 1
a299 1
<td>Gum_Removed</td> <td>Next State:<br><tt>N0 N1 N2</tt></td> <td>Assert
d302 1
a302 1
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>1</td> <td><br>0</td> <td><br>0</td>
d307 1
a307 1
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>0</td> <td><br>1</td> <td><br>0</td>
d312 1
a312 1
<td><br>0</td> <td>.20 INSERTED:<br><tt>1 0 0</tt></td>
d320 3
a322 4
  Current State is ???, NICKEL is ???, DIME is ???, and GUM_REMOVED is
  ????".
  <li type="square">  Using the symbols N, D, G for NICKEL, DIME, and
  GUM_REMOVED, and the symbols C0,C1,C2 to represent the three binary
d324 25
a348 3
  equation holds for N0:<br>
  <tt>
        N0 = ~C0 C1 ~C2 ~N D ~G
d351 3
d355 1
a355 1
<address></address>
@


1.5
log
@*** empty log message ***
@
text
@d59 1
d65 1
d116 1
a116 1
<br clear="left"><img src="gumball_fsm.gif"><br>
d184 31
a214 6
To see this, consider the "nickel detected" input.  If this input is active
while the machine is in state 0, it will cause the machine to go to
state 1.  If this input is active while in state 1, it will cause the
machine to go to state 0 (and assert the "dispense gum" output).  Thus,
to know what the next state is, you must know both the inputs and the
current state.
d217 5
a221 4
  <li type="square"> Fill in a <i>state transition table</i> for the
  gumball example 
  that has the following 
  columns.  Assume that only one of Nickel, Dime, or  Gumball_Removed can be
d224 1
a224 1
  time).  We've done two of the rows to start you off.
d230 5
a234 2
<td>0</td> <td>Active</td> <td>no</td> <td>no</td>
<td>1</td> <td>(none)</td></tr>
d236 3
a238 2
<td>1</td> <td>no</td> <td>Active</td> <td>no</td>
<td>1</td> <td>Return Coin</td></tr>
d242 55
a296 9
  <li type="square"> What should the machine do if, for example, the
  Coin Return 
       button is detected while in state 0?  Do the diagram or the table
       explicitly show this case?  Modify the diagram and the table to
       account for all of the "implicit" cases.  (<b>Hint:</b>
       "self-loops" from a state back to itself are involved.)
  <li type="square"> How many rows does your table now contain?  Can you
  explain this 
       number? 
d299 32
@


1.4
log
@*** empty log message ***
@
text
@d7 1
a7 1
<h1>Part 2: A Simple Fixed-Program Computer</h1>
a10 2
<h2>Real Logic Gates</h2>

d16 2
d31 1
a31 1
<h2>Introduction: Finite State Machines</h2>
d39 1
a39 1
<img align="right">
d114 10
a123 7
Note that the ".15 INSERTED" state also has the word DISPENSE; this
indicates that, while in the ".15 INSERTED" state, the system should
<i>assert</i> (raise to 5 volts) the DISPENSE signal.  This makes sense,
because when 15 cents has been received, we want to dispense gum.
Similarly, the ".20 INSERTED" state has both DISPENSE and RETURN_5c,
indicating that if 20 cents has been inserted, we should both dispense
gum and return a nickel in change.
d125 7
a131 1
<br clear="left"><img src="gumball_fsm.gif"><br>
d139 6
a144 7
state machine</i> is an
abstract description of a mechanism that could realize that state
diagram.  Note that although we're going to implement the state machine
using electronic Boolean logic gates, you could also implement it
using Tinkertoys, 
mechanical valves and switches, etc.  The FSM itself is just an abstract
description --- not a "blueprint" for any particular implementation.<p>
d147 2
a148 4
can
be used to describe a computation in a 
style similar to that of a Turing machine.  An FSM is characterized
by:
d171 7
d193 1
a193 1
  columns.  Assume that only one of Nickel, Dime, or  Return Coin can be
d195 1
a195 1
  same time, or put in a nickel and press Coin Return at the same
d198 10
a207 10
       <table border="1">
       <tr><td>Current State</td><td>Nickel</td><td>Dime</td><td>Coin
       Return</td> <td>Next State</td> <td>Assert Outputs</td></tr>
       <tr>
       <td>0</td> <td>Active</td> <td>no</td> <td>no</td>
       <td>1</td> <td>(none)</td></tr>
       <tr>
       <td>1</td> <td>no</td> <td>Active</td> <td>no</td>
       <td>1</td> <td>Return Coin</td></tr>
       </table>
a219 39

<h2>Designing an Electronic Combination Lock</h2>

<img src="doorlock.gif" align="right">
Now you'll design an FSM to control an electronic door lock.  The lock
you're designing for has four buttons with digits 0-3.  To open the
door, the user must enter a three-digit combination (each digit can be
from 0-3).  Any error while entering the combination will cause the lock
to reset; successfully entering the three correct digits will cause the
lock to open.<p>

In this section, you'll design and build a version of this circuit that
has a fixed combination that you choose in advance.  In the next
section, you'll make it programmable, so that the combination can be
changed easily.<p>

Here's a diagram for the proposed 

<h3>Questions</h3>

<ul>
  <li> How many states will the FSM for this combination lock have?
       Why?
  <li> How many inputs will it have?  What are they?
  <li> Assuming that at most one numbered button can be pressed at a
       time, how many rows do you expect the state transition table to
       have?  (<b>Hint:</b> Use the same reasoning as for the
       gumball-machine state transition table.)
  <li> Pick a three-digit combination, and draw the complete
       finite-state diagram for your lock.  Use binary numbers to number
       the states (0=00, 1=01, 2=10, 3=11).
  <li> Write down the state transition table for your FSM.
</ul>

Notice

<h2>Implementation</h2>


@


1.3
log
@*** empty log message ***
@
text
@d11 19
a29 5
In this section you'll build a circuit for an electronic door
lock (like the ones you see in Cory Hall, where you have to enter a
multi-digit code to open the door).  In so doing, you'll  learn what a
<i>finite state machine</i> is, why 
they are your friends, and how to build one.
d33 32
a64 2
The easiest way to describe a  <i>finite state machine</i> is by
motivating it. <p>
d66 15
a80 5
<img align="right" src="gumball.gif"> Consider a gumball dispenser that
dispenses gum when 15 cents are inserted.  Initially, the dispenser is
idle, waiting for a potential gum-chewer to insert money.  When money is
inserted, it could be either a nickel or a dime, and of course we don't
want to dispense gum until the whole 15 cents has been inserted.<p>
d83 2
a84 3
inserted so far.  Let's assume (to keep things simple) that the dispenser
only takes nickels and dimes.  Then there are four <i>states</i> the
dispenser could be in:
d89 7
a95 3
  <li> 5 cents have been inserted;
  <li> 10 cents have been inserted;
  <li> 15 cents have been inserted, in which case gum should be dispensed.
d98 23
a120 9
Note that since only nickels and dimes are allowed, these are the
<i>only</i> four states.  The separate states serve to "remember"  how
much money has been inserted.  Every time a coin is inserted, a
<i>transition</i> to a new state occurs, depending on the type of the
coin.  This is illustrated in the <i>state diagram</i> below: If there's
a state transition arrow from one state to another, it means that the
system can move directly from the first state to the second.  For
example, if the system is in the ".10 INSERTED" state, and the customer
puts in a nickel, the system moves directly to the ".15 INSERTED" state.
d126 1
a126 1
  "IDLE" state to the ".15 INSERTED" state?
d132 5
a136 5
diagram.  You could build an implementation of a finite state machine
using electronic logic gates, but you could also use Tinkertoys,
mechanical valves and switches, etc.  Of particular interest to us is
the implementation consisting of electronic Boolean-logic gates, such as
those we dealt with in the previous part of this assignment.<p>
d138 2
a139 3


We'll now generalize from this one example: A Finite State Machine can
d141 1
a141 1
style similar to that of a Turing machine.  The machine is characterized
d145 1
a145 1
  <li> a fixed number of possible <i>states</i> (four, in the gumball
d148 4
a151 4
  <li> a number of binary-valued <i>inputs</i> (two, in the gumball
       example: the coin inserted, which can either be a nickel or a
       dime, and the "coin return" lever, which can either be depressed
       or not depressed).  An input is said to be <i>active</i> if the
d153 2
a154 1
       diagram, a transition from state 0 to state 1 occurs if the
d156 3
a158 2
  <li> a number of <i>outputs</i> (one, in the gumball example: the
       "dispense gum" trigger for the gumball mechanism).  An output is
d161 2
a162 5
       For example, in the above diagram, the
       transition from state 1 to state 0 on "coin return" causes the
       "return nickel" output to be asserted; the transition from state
       1 to state 0 on "nickel inserted" causes the "dispense gum"
       output to be asserted.
d222 2
@


1.2
log
@*** empty log message ***
@
text
@d22 2
a23 2
<img align="right" src="gumball.gif"> Consider a gumball machine that
dispenses gum when 15 cents are inserted.  Initially, the machine is
d28 2
a29 2
So the machine basically must keep track of how much money has been
inserted so far.  Let's assume (to keep things simple) that the machine
d31 1
a31 1
machine could be in:
d34 1
a34 1
  <li> No money has been inserted (i.e. machine is idle) -- it always
d45 7
a51 1
coin.
d58 9
a66 25
<ul>
  <li> If a dime is
       inserted, the machine should dispense gum, and go back to being idle.
  <li> If a nickel is inserted, the machine should wait for either two more another
       nickel, <i>then</i> dispense gum and go back to being idle.
  <li> If a nickel
       is inserted, and then the customer presses the "coin return" button, the
       coin should be returned but no gum should be dispensed, then the 
       machine should go back to being idle.
  <li> If a nickel is inserted, and then a dime is inserted, the machine
       should just return the dime and continue waiting until another
       nickel is inserted.
</ul>
(For the
moment, we'll ignore the case where a nickel is inserted and then the
customer walks away, as well as the cases where the customer inserts a
quarter or some other non-recognized coin.)<p> 

The key thing is that once a nickel has been inserted, the machine must
"remember" this fact so that when the <i>second</i> nickel is inserted,
gum will be dispensed (or, when the "coin return" button is pressed, the
nickel can be returned).  That is, the machine is <i>in a particular
state</i> characterized by the fact that exactly one nickel has been
inserted.  Below is a simple diagram that describes the operation of the
machine.
a67 1
<br clear="left"><img src="gumball_fsm.gif">
d75 2
a76 2
  <li> a fixed number of possible <i>states</i> (two, in the gumball
       example).  The machine is said to <i>transition</i> from one
d85 5
a89 4
  <li> a number of <i>outputs</i> (two, in the gumball example: the
       "dispense gum" trigger for the gumball mechanism, and the "return
       coin" trigger).  An output is said to be <i>asserted</i> when
       it's made active.  For example, in the above diagram, the
a106 2
<h3>Questions</h3>

d108 8
a115 3
  <li> Fill in a <i>state transition table</i> for the gumball example
       that has the following 
       columns.  We've done two of the rows to start you off.
d126 4
a129 5
       Assume that only one of Nickel, Dime, or  Return Coin can be
       active at once (i.e. you can't put in a nickel and dime at the
       same time, or put in a nickel and press Coin Return at the same
       time).
  <li> What should the machine do if, for example, the Coin Return
d134 2
a135 1
  <li> How many rows does your table now contain?  Can you explain this
a137 1

@


1.1
log
@added FSM assignment
@
text
@d22 2
a23 3
<img align="right" src="gumball.gif"> Consider a gumball
machine that dispenses gum when 10 cents are inserted.  What would an
FSM look like that controlled the dispenser?  Initially, the machine is
d25 27
a51 1
inserted, it could be either a nickel or a dime.
d55 1
a55 1
  <li> If a nickel is inserted, though, the machine should wait for another
d67 2
a68 1
customer walks away.)<p> 
@
