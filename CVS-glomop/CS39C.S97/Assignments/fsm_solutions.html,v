head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.05.08.08.29.22;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.05.01.10.14.19;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<html> <head>
<title>Solutions to FSM Questions</title>
</head>

<body>
<h1>Part 1</h1>

<ol>
  <li> To make A AND B AND C, use two AND gates.  The first one has A
       and B as inputs; the second one has C and the output of the first
       one as inputs.
  <li> You need 5 gates for a 6-input AND.
  <li> You need <i>k</i>-1 gates for a
       <i>k</i>-input AND.
  <li> In words: "A XOR B means either A OR B can be true, but not
       both."  The definition is obviously true from looking at the
       truth table.
  <li> <img src="gifs/xor_soln.gif">
  <li>
<pre>

  A  B    A+B   S=~(A+B)       A  B    ~A  ~B   S=~A~B
________________________      _________________________
  0  0  | 0   |   1            0  0  |  1 | 1  |   1
  0  1  | 1   |   0            0  1  |  1 | 0  |   0
  1  0  | 1   |   0            1  0  |  0 | 1  |   0
  1  1  | 1   |   0            1  1  |  0 | 0  |   0


  A  B    AB    S=~(AB)        A  B    ~A  ~B   S=~A+~B
________________________      _________________________
  0  0  |  0  |   1            0  0  | 1  | 1  |   1
  0  1  |  0  |   1            0  1  | 1  | 0  |   1
  1  0  |  0  |   1            1  0  | 0  | 1  |   1
  1  1  |  1  |   0            1  1  | 0  | 0  |   0

</pre>
  <li> Hope you convinced yourself....
  <li> Segment S1 should be illuminated for the numbers 1,2,3,4.
       (Recall we assume the number to be displayed is always between 1
       and 6.  If this wasn't true, we'd also illuminate S1 for the
       digits 7,8,9.)  Converting those numbers to binary we get 0001,
       0010, 0011, 0100.  This corresponds to the equation:<br>
       S1 = (~W~X~YZ) + (~W~XY~Z) + (~W~XYZ) + (~WX~Y~Z)
  <li> Since the AND's output is zero unless <i>both</i> inputs are 1,
       we know that B will be zero, without having to know X.
  <li> As soon as X and A both become 1, B becomes 1.  But because B is
       fed back through an inverter, that makes X 0, which makes B go to
       0 again, and so on.  B will continue to flip back and forth
       between 0 and 1.
  <li> The only difference is that B would start at 1 rather than 0, but
       the same flipping behavior would be observed.
</ol>

<h1>Part 2</h1>


<ul>
  <li> We still need separate states because otherwise there would be
       no way to keep track of how many nickels had been inserted.
       Without separate states, the machine would see each nickel as a
       new customer, so to speak.
  <li> You can't go from IDLE to .15 INSERTED or .20 INSERTED because
       only nickels and dimes are allowed, and the nickel or dime
       which causes the first state transition can't result in .15 or
       .20 being inserted.
  <li> The biggest conceptual difference between FSM's and Turing
       Machines is that the TM has an infinitely long tape (on which to
       record state), whereas an FSM has only a finite number of states.
  <li> State transition table:<br>

<table border="1">
<tr><td>Current State:<br><tt>C0 C1 C2</tt></td><td>Nickel</td><td>Dime</td>
<td>Next State:<br><tt>N0 N1 N2</tt></td> <td>Assert
Outputs</td></tr>
<tr>
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>1</td> <td><br>0</td>
<td>.05 INSERTED:<br><tt>0 0
1</tt></td> <td></td>
</tr>

<tr>
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>0</td> <td><br>1</td>
<td>.10 INSERTED:<br><tt>0 1 0</tt></td> <td></td>
</tr>

<tr>
<td>.10 INSERTED:<br><tt>0 1 0</tt></td> <td><br>0</td> <td><br>1</td>
<td>.20 INSERTED:<br><tt>1 0 0</tt></td>
<td>DISPENSE, RETURN_5c</td>
</tr>

<tr>
<td>.10 INSERTED:<br><tt>0 1 0</tt></td> <td><br>1</td> <td><br>0</td>
<td>.15 INSERTED:<br><tt>0 1 1</tt></td>
<td>DISPENSE</td>
</tr>

<tr>
<td>.05 INSERTED:<br><tt>0 0 1</tt></td> <td><br>1</td> <td><br>0</td>
<td>.10 INSERTED:<br><tt>0 1 0</tt></td>
<td></td>
</tr>

<tr>
<td>.05 INSERTED:<br><tt>0 0 1</tt></td> <td><br>0</td> <td><br>1</td>
<td>.15 INSERTED:<br><tt>0 1 1</tt></td>
<td>DISPENSE</td>
</tr>

</table>

  <li> There are 6 rows; each corresponds to one state transition
       (i.e. one arrow in the state transition diagram).
  <li> The number of rows in the complete  state transition table would
       be the number of states times the number of possible combinations
       of the inputs: in this case, (5 states)&nbsp;x&nbsp;(4
       combinations)&nbsp;=&nbsp;20 rows.
  <li> Since we stipulated that you can only insert one coin at a time,
       any row that would have both N=1 and D=1 is omitted.  Since
       inserting no coin should cause the machine to just stay in the
       same state, any row that would have both N=0 and D=0 is omitted.
       Finally, we don't consider the rows that would describe state
       transitions from the final states  (.15 INSERTED and .20
       INSERTED) back to the IDLE state; I glossed over this detail to
       keep the presentation simple.  
  <li> (New state transition table goes here)
  <li> N0 is 1 when current state is .10 INSERTED, NICKEL is 0, and DIME
       is 1.
  <li> You can verify the equation by evaluating the terms by hand.
  <li> Boolean logic equations for N1:
       <pre>
       N1 = (~C0 ~C1 ~C2 ~N D) + (~C0 C1 ~C2 N ~D) + (~C0 ~C1 C2 N ~D) + (~C0 ~C1 C2 ~N D)
       </pre>
  <li> For N2:
       <pre>
       N2 = (~C0 ~C1 ~C2 N ~D) + (~C0 C1 ~C2 N ~D) + (~C0 ~C1 C2 ~N D)
       </pre>
  <li> There's usually more than one way to simplify logic equations.
       Here's one possible set of answers:<br>
       <pre>
       N0 = ~C0 C1 ~C2 ~N D
       N1 = ~C0 (~C1 (~N D + C2 N ~D) + C1~C2)
       N2 = ~C0 (~C1 (~C2 N ~D + C2 ~N D) + C1 ~C2)
       </pre>
</ul>

<h1>Part 3</h1>

<ol>
  <li> We said that the next <i>state</i> depends on the current
       <i>state</i> and inputs.  The next state is represented by
       N0,N1,N2, so <i>each</i> of those must depend on all of
       C0,C1,C2.  You can also prove this to yourself by writing the
       state transition equations and verifying that in general,  you
       can't write a 
       correct equation for N0, N1 or N2 (i.e. an equation that correctly
       describes the state transitions) without having them depend on
       all three current-state bits.
  <li> The self-loop equations have to cover all of the cases not
       covered by the transition-to-a-different-state equations.  For
       example, the transition from IDLE to .05 INSERTED happens when N
       is 1 and D is 0, that is, on N~D; and the transition to .10
       INSERTED happens on ~ND.  That means the self-loop equation must
       account for the remaining possibilities: ND&nbsp;+&nbsp;~N~D.  In
       general, in each state, <i>all 4</i> possible combinations of the
       inputs must be accounted for; whichever combinations don't cause
       a transition to another state must cause a self-loop.  The
       self-loops tend to have more terms since they absorb all
       remaining possibilities not covered by one of the 
       transitions out of this state.
  <li> If we make the coin detector be the ENABLE strobe as well as the
       nickel/dime input generator, we might have a <i>race
       condition</i>: if ENABLE is strobed at "the same time" as Nickel
       or Dime is asserted, will the combinational logic blocks
       (F0,F1,F2) have enough 
       time to propagate the change in the Nickel or Dime signal through
       to figure out the correct value of the next-state bits presented
       at the D inputs?  Digital designers express this
       constraint by saying that the input D must be <i>stable</i> for
       some time period before the ENABLE is strobed.  One workaround
       would be to let the coin detector assert NICKEL or DIME according
       to what it senses, and then delay the generation of the strobe
       signal to allow for the <i>propagation delay</i> (remember?) of
       the NICKEL and DIME signals through the combinational logic blocks.
</ol>

<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.1
log
@*** empty log message ***
@
text
@d6 51
a56 1
<h1></h1>
d59 12
a70 2
  <li> State transition table from part 2:
</ul>
d75 1
a75 1
Outputs</td></tr> 
d77 1
a77 1
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>1</td> <td><br>0</td> 
d79 1
a79 1
1</tt></td> <td></td>  
d83 1
a83 1
<td>IDLE:<br><tt>0 0 0</tt></td> <td><br>0</td> <td><br>1</td> 
d113 19
a131 2
<ul>
  <li> Boolean logic equations for N1 and N2:
d134 3
d138 8
d148 39
@
