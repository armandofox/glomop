head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	97.04.22.03.50.22;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.04.22.03.45.54;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.04.18.01.55.56;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.04.17.04.08.16;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.04.03.08.00.47;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@<html> <head>
<title>Combinational Logic Design</title>
</head>

<body>
<h1>Combinational Logic Design</h1>

<a href="fsm.html">Back to top page of assignment</a><p>


This phase of the assignment is an overview of <i>combinational
logic</i>-- the Boolean logic used by gates.  There are five
subsections, each of which has some background information, and some
exercises to be handed in.

<ul>
  <li type="square"> Everything marked with this kind of bullet
  indicates a question to be answered as part of the written turn-in.
  There are a total of 12 of these in this part, but each of them 
  should take at most a couple of minutes to do.
</ul>

If you prefer online submission, you can
email your homework to Armando (only in PDF, Microsoft Word, or HTML
format, please--if you can't generate any of those, I prefer a paper
hand-in). <p>

The five sections are:

<ol>
  <li> <a href="#gates">Logic gates</a>
  <li> <a href="#eqns">Logic equations</a>
  <li> <a href="#reduce">Equation reduction</a>
  <li> <a href="#seven">Putting it all together: Seven-segment Display
       Decoder</a>
  <li> <a href="#state">Preview of next phase</a>
</ol>

<a name="gates">
<h2>Logic Gates</h2>

In class you were introduced to some basic gate types.  Recall that each
gate type has associated with it a <i>truth table</i>, which tells you
what <i>output</i> the gate will produce given the values of the
<i>inputs</i>.  <p>

Here are the truth tables for some gates you saw; we generically label
inputs as A and B (or just A when there's only one), and the output as S.

<PRE>
AND gate:           NAND gate:

  A  B    S         A  B    S
_____________     _____________
  0  0  | 0         0  0  | 1
  0  1  | 0         0  1  | 1
  1  0  | 0         1  0  | 1
  1  1  | 1         1  1  | 0

  OR gate:          NOR gate:

  A  B    S         A  B    S
_____________     _____________
  0  0  | 0         0  0  | 1
  0  1  | 1         0  1  | 0
  1  0  | 1         1  0  | 0
  1  1  | 1         1  1  | 0

  XOR gate:        NOT gate (inverter):

  A  B    S         A   S
_____________     _________
  0  0  | 0         0 | 1
  0  1  | 1         1 | 0
  1  0  | 1
  1  1  | 0

</PRE>

Recall that the notation for "A <I>AND</i> B" is "AB", and the notation
for "A <I>OR</I> B" is "A+B".  The standard notation for inversion is to
put a bar over the letters, but since we can't do that in HTML, we'll
use the notation "~A" to mean "<i>NOT</i> A".  Similarly, "~(AB)" is
"<i>NOT</i> (A <i>AND</i> B)", i.e., what you'd get from the NAND gate.<p>


All of the gates above, except for the inverter, are called
<i>2-input</i> gates, for the obvious reason.  <tt>:)</tt><p>

<ul>
  <li type="square"> Suppose we want to make the function
  S=(A&nbsp;<i>AND</i>&nbsp; B&nbsp;<i>AND</i>&nbsp;C), i.e. S should be
  1 only if <i>all</i> of A, B, C are 1.  In other words, we want to
  make a <i>3-input</i> AND.  Show how to do this using a
  pair of 2-input <i>AND</i> gates.

  <li type="square"> What is the minimum number of AND gates you would
  need for a 6-input AND?

  <li type="square">(Optional, extra credit) How many would you need for
  a <i>k</i>-input AND, where <i>k</i> is an arbitrary integer?

</ul>

<a name="eqns">
<h2>Simple Logic Equations and Circuits</h2>

We can combine the above gates to form more complicated equations.  For
example, recall that the XOR gate can really be expressed as a
combination of other gates:<p>

<center>
A&nbsp;<i>XOR</i>&nbsp;B&nbsp;=&nbsp;(A&nbsp;~B)&nbsp;+&nbsp;(~A&nbsp;B)
</center>

(Remember we're using "~A" to mean "<i>NOT</i>&nbsp;A".)<p>

As we saw in class, each kind of gate also has a symbol associated with
it, which we can use to draw simple <i>combinational logic
circuits</i> depicting
various logic functions.  For example, here is the circuit diagram that
expresses the above equation for <i>XOR</i>:  (Remember that
that a solid dot where two wires cross means the wires are connected,
but wires that cross <i>without</i> a dot are just separate wires.)
<p>

<img src="gifs/xor1.gif"><p>

<ul>
  <li type="square"> Write out in words the following equation, and
  argue that it is also a valid
  expression for <i>XOR</i>:<br>
  A&nbsp;<i>XOR</i>&nbsp;B&nbsp;=&nbsp;(A+B)&nbsp;~(AB)
  <li type="square"> Using the gate symbols as in the example diagram
  above, draw the logic circuit diagram for this equation.  (Note: There
  may be more than one correct answer.  Try to minimize the number of
  gates you use.)
</ul>

<a name="reduce">
<h2>Equation Reduction and Espresso</h2>

Just as you can simplify regular algebraic equations to get them to
their "simplest form", you can also reduce logic equations.  Some
properties of logic equations that are useful for reduction include the
following:

<ol>
  <li> <b>Commutative:</b> <br>
       A+B&nbsp;=&nbsp;B+A<br>
       AB&nbsp;=&nbsp;BA
  <li> <b>Distributive:</b> <br>
       AB+AC&nbsp;=&nbsp;A(B+C)<br>
       (A+B)(A+C)&nbsp;=&nbsp;A+(BC)
  <li> <b>Associative:</b>  <br>
       A(BC)&nbsp;=&nbsp;(AB)C<br>
       A+(B+C)&nbsp;=&nbsp;(A+B)+C<br>
  <li> <b>Reflexive and identities:</b> <br>
       ~(~A)&nbsp;=&nbsp;A<br>
       A~A&nbsp;=&nbsp;0 <br>
       A+~A&nbsp;=&nbsp;1 <br>
  <li> <b>Constant terms:</b><br>
       A+1&nbsp;=&nbsp;1 <br>
       A+0&nbsp;=&nbsp;A <br>
       A1&nbsp;=&nbsp;A <br>
       A0&nbsp;=&nbsp;0
  <li> <b>DeMorgan's Laws:</b><br>
       ~(A+B)&nbsp;=&nbsp;~A~B<br>
       ~(AB)&nbsp;=&nbsp;~A+~B
</ol>

<ul>
  <li type="square"> Prove both of DeMorgan's Laws by filling in the
  missing entries in the following truth  tables, and verifying that the
  "S" columns (i.e. outputs) of the truth tables match.
</ul>
<pre>

  A  B    A+B   S=~(A+B)       A  B    ~A  ~B   S=~A~B
________________________      _________________________
  0  0  | 0   |                0  0  |  1 | 1  |
  0  1  | 1   |                0  1  |  1 | 0  |
  1  0  | 1   |                1  0  |  0 | 1  |
  1  1  | 1   |                1  1  |  0 | 0  |


  A  B    AB    S=~(AB)        A  B    ~A  ~B   S=~A+~B
________________________      _________________________
  0  0  |     |                0  0  |    |    |
  0  1  |     |                0  1  |    |    |
  1  0  |     |                1  0  |    |    |
  1  1  |     |                1  1  |    |    |

</pre>

Let's say we have four inputs (A,B,C,D), and we define the following
combinational function of the inputs: (We'll discuss below just why we'd
want to define this function to begin with)<p>

S&nbsp;=&nbsp;~A~BC~D&nbsp;+&nbsp;~ABC~D&nbsp;+&nbsp;A~B~C~D<p>

We could reduce it to a simpler form with the following sequence of
steps:

<ol>
  <li> ~AC~D(~B+B)&nbsp;+&nbsp;A~B~C~D (combine first two terms using
       Distributive property in list above)
  <li> ~AC~D(1)&nbsp;+&nbsp;A~B~C~D (replace ~B+B with 1, from Identity
       property)
  <li> ~AC~D&nbsp;+&nbsp;A~B~C~D (from Constant Terms property: since A
       <i>AND</i> 1 is just A, we can drop the (1) and just leave ~AC~D)
</ol>

<ul>
  <li type="square"> Convince yourself that you understand the above
  derivation and believe it's correct.  If you don't understand
  something, <a href="mailto:fox@@cs.berkeley.edu">send me email</a> or
  come visit me in 445 Soda.
  You don't have to write anything up for this, but if you don't
  understand this stuff you will regret it later, so spend a few minutes
  grokking the above.
</ul>

So, we succeeded in reducing the equation to a substantially simpler
form (<i>logic minimization</i>).  Of course, this process is error
prone and boring, so in the next section, we enlist the help of the
computer to solve a harder minimization.

<a name="seven">
<h2>Putting it All Together: Seven-Segment Display Decoder</h2>

In this section we'll explore the combinational logic needed to light up
a <i>7-segment display</i>.  Each digit of a calculator is a 7-segment
display; they look something like this (I've numbered each segment for
reference):<p>

<img src="gifs/7sd.gif"><br>

Basically, you light up segments depending on which digit you want to
display.  For example, to display the digit 1, only segments 1 and 2 are
lit; to display digit 4, segments 1, 2, 5, 6 are lit; to display digit
8, all segments are lit; and so on.<p>

Now, most circuits that compute arithmetic functions output their result
as a binary number.  Suppose we want to use a 7-segment display to show
the output of such a circuit.  The circuit has four output wires, call
them W,X,Y,Z, which form a 4-bit binary number which is the result;
let's assume the result is always between 1 and 6.  To
jog your memory, here's a binary-to-decimal translation table for those
numbers:

<PRE>
        WXYZ    Digit
        ______________
        0001     1
        0010     2
        0011     3
        0100     4
        0101     5
        0110     6
</PRE>

Our goal here is to design the combinational logic that turns on the
various segments for each digit.  The idea is that we will come up with
seven equations for outputs we'll refer to as S0 through S6.  Each
equation will state under what conditions the corresponding segment
should be lit.<p>

This is easiest to illustrate by example, so we'll walk through the
equation for S4 (segment 4, which is the bottom-left vertical segment in
the figure above).  Under what conditions should segment 4 be lit?  We
make a list of all the digits that require segment 4 to be turned on in
order to display them:  2 and 6 are the only ones.  Digit 2 is
represented by the result pattern ~W~XY~Z (from the table above), and
digit 6 is represented by ~WXY~Z.

When <i>either</i> of those digits are the result, we need to illuminate
segment 4.  This leads us to the following equation for S4:

<blockquote>
S4&nbsp;=&nbsp;(~W~XY~Z)&nbsp;+&nbsp;(~WXY~Z)
</blockquote>

As you can see, this equation is an "OR of AND's": each term separated
by + is an AND, and the terms are all OR'd together.  We call this
<i>disjunctive normal form</i>, in case you care.

<ul>
  <li type="square"> Using similar reasoning, write down the equation
  S1, for segment 1.  (<b>Hint:</b> Whereas the equation for S4 above
  had two AND terms, the equation for S1 will have four.)
</ul>

This technique of creating an "OR of AND's" will be useful in the next
phase of the project, when you design the logic to control a simple
Finite State Machine.  Clearly, it would be painful to write the
equations for all the segments, and even more painful to simplify each
one as we did in the example in the previous section; so in real life,
we use various computer programs to help simplify the equations.  Next
time, we'll explore a program called <i>espresso</i> (developed at
Berkeley in the late 80's) to help us do this.  Espresso takes an entire table
of "OR of AND's" equations, simplifies them, and gives you
back the simplified result. 

<a name="state">
<h2>Preview of Next Phase</h2>

Finally, a quick preview of what's coming next....<p>

So far we've only talked about combinational logic gates: you present
some values at each input, and that makes the output assume some other
value.  So far we've assumed this happens "instantaneously", but of
course, in real life it takes a (very short) amount of time.  Suppose
you have an AND gate and currently both of the inputs have 0's on them.
(This implies that the output also has a 0 on it.)  At the exact same
time, you change both of the inputs to 1.  As you know, this means a 1
should appear on the output.  But how long does it take for the change
at the inputs to "propagate" to the output?   (Water pipe analogy: when
you open the water valve, it takes some small amount of time before the
pent-up water actually starts coming out of the faucet.)<p>

In real life, the amount of time is on the order of nanoseconds
(billionths of a second).  But the important thing is, it's <i>not
instantaneous</i>. <p>

So, consider the following somewhat unusual circuit diagram...<p>

<img src="gifs/feedback.gif"><br>

<ul>
  <li type="square"> Suppose A is initially zero.  What value would be
  seen at B?  Why can you answer this without knowing the initial value
  of X?
  <li type="square"> Now suppose you know that X is initially 1.  Now
  you change A to be 1, and keep it at 
  that value.  Describe what behavior you see at B.
  <li type="square"> Are things any different if X is initially 0?
</ul>

Next time we'll learn about a component called a <i>latch</i>, which
solves the problem you saw in this last set of questions.

<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.4
log
@*** empty log message ***
@
text
@d36 1
a36 1
  <li> <a href="#state">Using Latches to Remember State</a>
@


1.3
log
@added FSM assignment files phase 2
@
text
@d150 1
a150 1
       A+B&nbsp;=&nbsp;B+A
d162 1
a162 1
  <li> <b>Constant terms:</b>
d167 1
a167 1
  <li> <b>DeMorgan's Laws:</b>
@


1.2
log
@*** empty log message ***
@
text
@d8 2
a9 1
<a href="fsm.html">Back to top page of assignment</a>
d19 2
d52 8
a59 8
                                    
  A  B    S         A  B    S            
_____________     _____________          
  0  0  | 0         0  0  | 1            
  0  1  | 0         0  1  | 1            
  1  0  | 0         1  0  | 1            
  1  1  | 1         1  1  | 0            
                                    
d61 6
a66 6
                                    
  A  B    S         A  B    S       
_____________     _____________     
  0  0  | 0         0  0  | 1       
  0  1  | 1         0  1  | 0       
  1  0  | 1         1  0  | 0       
d75 2
a76 2
  1  0  | 1       
  1  1  | 0       
d83 1
a83 1
use the notation "/A" to mean "<i>NOT</i> A".  Similarly, "/(AB)" is
d102 1
a102 1
  
d113 1
a113 1
A&nbsp;<i>XOR</i>&nbsp;B&nbsp;=&nbsp;(A&nbsp;/B)&nbsp;+&nbsp;(/A&nbsp;B)
d116 1
a116 1
(Remember we're using "/A" to mean "<i>NOT</i>&nbsp;A".)<p>
d119 20
a138 1
it, which we can use 
d141 87
a227 1
<h2>Equation Reduction</h2>
d232 73
d306 33
a338 1
<h2>Remembering State: Latches</h2>
d340 2
@


1.1
log
@added FSM assignment
@
text
@d2 1
a2 1
<title>Combinational Logic</title>
d6 1
a6 1
<h1>Part 1: Combinational Logic</h1>
d10 27
d39 87
a125 1
<h2>Logic Equations and Equation Reduction</h2>
a126 1
<h2>Build a Seven-Segment Display Decoder</h2>
@
