head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	97.05.08.08.29.19;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.05.05.21.33.42;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.05.05.21.26.23;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.04.25.17.47.21;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@<html> <head>
<title>FSM's Part 3</title>
</head>

<body>
<h1>Part 3: Latches</h1>

<a href="fsm.html">Back to top page of assignment</a><br>

Here's a quick recap of the last two sections:
<ul>
  <li> In section 1, you learned about building combinational logic
       circuits out of collections of gates.
  <li> You also saw the weird oscillation behavior you can get if you
       connect the output of a gate back to its input.
  <li> Then in section 2, you learned how a Finite State Machine can
       represent a sequence of steps to go through.  You saw that if you
       know the current state of the machine and the values of the
       inputs it recognizes, you can compute what the next state will be.
  <li> You also saw that if the input values and state numbers are
       encoded as binary numbers, the next-state function can be written
       as a <i>Boolean logic function</i>.
</ul>

And now the thrilling conclusion...

<h2>Realizing an FSM With Logic Gates</h2>

Recall that in the last part of section 2, you wrote out the next-state
equations for N0, N1, N2.    Three bits
actually give us 2<sup>3</sup>=8 representable states, but our machine
only used 5.  Recall that even though the "next state" is only
meaningful if you look at three bits together (i.e. a particular set of
values for N0,N1,N2), the logic equations can be written for each bit
individually.<p>

In other words, if we write the correct equations for each of N0,N1,N2,
the net effect will be that we correctly express the transition from one
<i>set</i> of values for N0,N1,N2 to a different <i>set</i> of
values--for example, from state 1 (binary 001) to state 3 (binary 011).
<p>

Let us agree for the moment to refer to the three next-state equations
as F0,F1,F2.  That is, since each state bit is a function of the current
state and the inputs, we have:
<pre>
        N0=F0(C0,C1,C2,N,D)
        N1=F1(C0,C1,C2,N,D)
        N2=F2(C0,C1,C2,N,D)
</pre>

<ul>
  <li type="square"> Explain qualitatively (don't worry about getting
  into details) why N0 depends on C0,C1, and C2, instead of depending
  only on C0.  (Similarly N1 and N2.)
</ul>

Say we could build a combinational circuit (out of logic gates, of
course) that expressed the F0,F1,F2 functions.  We could then draw a
schematic diagram that looked like this:

<br><img src="gifs/comblogic.gif" align="left"><br clear="both">

<h3>Latches</h3>

A <i>latch</i> is a special kind of component that can <i>remember
state</i>.  (Can you see where we're going with this?)  For our
purposes, latches have two inputs, called D and ENABLE, and one output,
called Q.  (The names D and Q are historical, so don't worry about what
the letters stand for.)<p>

Recall that with traditional combinational logic gates, we were always
able to make 
a <i>truth table</i> that expressed the value of the output(s) given the
values of the input(s).  A latch is a little different.  Its truth table
looks like this:

<table border="1">
<tr><td>D</td><td>ENABLE</td><td>Q</td></tr>
<tr><td>0</td><td>Rising Edge</td><td>0</td></tr>
<tr><td>1</td><td>Rising Edge</td><td>1</td></tr>
<tr><td>0 or 1</td><td>Anything Except<br> Rising
Edge</td><td>Unchanged</td></tr>
</table>

So, what's a <i>rising edge</i>?<p>

Recall that real logic gates have no notion of "true" or "false", only
of voltages.  I stated in class that, approximately, "true" or binary
"1" is +5 volts, and "false" or binary "0" is zero volts.  Say we have
an inverter (call the input X and the output Y), and as shown on the
graph below, at time <i>t0</i> we change X from 0 to 1 (that is, from
zero volts to five volts).  Since we have an inverter, we expect Y to
change from five volts to zero volts as a result, but because we are
dealing with physical circuits, none of these events happen infinitely
fast:

<br><img src="gifs/chart.gif" align="left"><br  clear="both">

(This kind of figure is called a <i>timing chart.</i>) As you can see,
even though X starts changing from +5 to 0 volts at time t0, three
things are true:

<ul>
  <li> X does not change to zero "instantaneously": it "slides" to zero
       along a <i>falling edge</i>.
       (If the change were instantaneous, the
       slope of the falling edge would be infinitely steep,
       i.e. perpendicular to the Time axis.)
  <li> Once X starts to change to zero, it takes a small amount of time
       for the output Y to "realize what has happened" and start
       changing to +5.  This delay is  due to the fact that transistors
       are switching on and off inside the gate, and electrons slowly
       start to flow to the output.  (Recall the water pipe example:
       after you turn the valve, it takes a finite amount of time for
       water to start coming out of the faucet.)  This delay is called
       the <i>propagation delay.</i>
  <li> Finally, just as X takes a finite time to change from +5 to zero,
       Y takes a finite time to change from zero to +5.  This delay is
       called the <i>rise time</i>, and the transition period between 0
       and +5 is called the <i>rising edge</i>.
</ul>

For modern gate implementations, the
rise time and propagation delay are on the order of a nanosecond (one
billionth of a second).  Nonetheless, they are not infinitely fast.<p>

Now we can talk about what it means for the latch to be <i>triggered on
the rising edge</i>:

<blockquote align="center">
<b>The value of the D (input) on the latch is copied to the Q (output)
of the latch when the ENABLE input has a rising edge.  At all other
times, the output Q remains unchanged.</b>
</blockquote>

This is a subtle point but it's very important.  The fact that latches
are <i>edge-triggered</i> gives them an important property relative to
the other gates we've seen:  <i>they remember state.</i>  Here's how you
make them do it:
<ul>
  <li> Place the value you want remembered at the D input.
  <li> Cause a rising edge to occur on the ENABLE input.  This results
       in D being copied to Q <i>and "stored" in the latch.</i>
  <li> Now you can twiddle D to your heart's content, but Q will not
       change.  Q only changes on rising edges.
</ul>

Here's a timing chart that illustrates this behavior.  It's traditional
in such charts to use dashed-line arrows to indicate that one transition
causes another. For example, the first dashed-line arrow indicates that
the rising edge of ENABLE causes the transition (marked "1") from 0 to
+5 of Q.)  In 
particular, notice that the transitions of D marked 2, 3, and 4 do
<i>not</i> cause a change in the value of Q.  Why not?  Because Q only
changes on the <i>rising edge</i> of ENABLE.

<br><img src="gifs/latch.gif" align="left"><br  clear="both">

<h3>Putting It All Together</h3>

What we'd like to do, then, is use latches to remember the <i>current
state</i>; that is, C0,C1,C2.  It works like this:

<ul>
  <li> The Q outputs of three
       latches will represent the current-state values C0,C1,C2.
  <li> These are fed into the combinational logic blocks F0,F1,F2.
  <li> The output of the blocks are the next-state values, N0,N1,N2.
  <li> We connect those to the D inputs of the three state latches.
       Since the Q output of a latch only copies the D value on a rising
       edge of ENABLE, the machine will stay in its current state
       (C0,C1,C2) until the next rising edge of ENABLE, at which time it
       will copy the next-state values (N0,N1,N2) to C0,C1,C2.
</ul>

Conceptually it looks like this:

<br><img src="gifs/complete.gif"><br clear="both">

Notice that the current state, as remembered by the Q outputs, is also
the input to the combinational logic that computes the next state.  The
only question, then, is: How do we know when to cause a rising edge on
ENABLE, to make the machine go to the next state?<p>

It's sort of a trick question.  In real systems, Enable is a
<i>clock</i>: all it does is switch between 0 and 1 (zero volts and +5
volts) with a perfectly regular period.  It looks like this:

<br><img src="gifs/clock.gif"><br clear="both">

However, we can't do this in our system without a little extra work.
Specifically, what happens if you're in some state, and the inputs
indicate that you should just stay in that state?  As far as ENABLE is
concerned, it can cause a state transition <i>every time</i> it has a
rising edge.  So what we must do is define "self loops" that say: "If
the current state is X, and the inputs are Y, then the next state is
also X (i.e. stay in this same state)".  The F0,F1,F2 blocks would have
to be modified to accommodate those functions.

<ul>
  <li type="square"> (Hard) Argue that these "self loop" equations will
  probably have more terms OR'd together than the equations you wrote
  out in part 2.  (You don't have to write out the self-loop equations
  to answer this question, though you may find it easier to answer the
  question if you do this.)
</ul>

What we can do in our system, instead, is assume that the coin detector
circuit also triggers Enable.  In other words, when a coin is inserted,
the appropriate input (N or D, for Nickel or Dime) is asserted,
<i>and</i> the Enable input is <i>strobed</i> (transitioned from low to
high to cause a rising edge, and then back to low again in preparation
for the next time).

<ul>
  <li type="square">  (Hard) Why might it be difficult to implement it
  this way?  (<b>Hint:</b> remember that when Enable has a rising edge,
  whatever the <i>current value</i> of the D input is gets copied to Q.
  Consider the case when a nickel is inserted, but the previous coin was
  a dime.  What is the value of the N input at the time Enable is strobed?)
</ul>

<h3>How To Build It</h3>

Building it is actually pretty simple, though you will have to run some
wires.  The latches we used (called, appropriately, D-latches) are
available in plastic IC packaging, just like NAND gates; typically 2 D
latches come in a chip with 8 pins.  (Remember you need 3 pins for each
latch: D, Q, Enable.  That leaves 2 pins left over, and those are used
to connect the chip to power and ground, so that electrical current can
flow.)  The F0,F1,F2 boxes would have to be built from actual gates,
using the equations you wrote in part 2.  Finally, you'd need a way to
cause rising edges on Enable; most "breadboarding" kits provide some
toggle switches that you could use for this.<p>


I'm working on getting the materials together and maybe scheduling a
special lab session where we build this puppy.  Stay tuned for details.<p>

<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@


1.3
log
@*** empty log message ***
@
text
@d190 1
a190 1
<br><img src="clock.gif"><br clear="both">
@


1.2
log
@*** empty log message ***
@
text
@d62 1
a62 1
<br><img src="comblogic.gif" align="left"><br>
d98 1
a98 1
<br><img src="chart.gif" align="left"><br>
d158 1
a158 1
<br><img src="latch.gif" align="left"><br>
d179 1
a179 1
<br><img src="complete.gif"><br>
d190 1
a190 1
<br><img src="clock.gif"><br>
@


1.1
log
@*** empty log message ***
@
text
@d2 1
a2 1
<title></title>
d6 1
a6 1
<h1></h1>
d8 1
a8 1
<h3>Questions</h3>
d10 1
d12 11
a22 11
  <li> How many states will the FSM for this combination lock have?
       Why?
  <li> How many inputs will it have?  What are they?
  <li> Assuming that at most one numbered button can be pressed at a
       time, how many rows do you expect the state transition table to
       have?  (<b>Hint:</b> Use the same reasoning as for the
       gumball-machine state transition table.)
  <li> Pick a three-digit combination, and draw the complete
       finite-state diagram for your lock.  Use binary numbers to number
       the states (0=00, 1=01, 2=10, 3=11).
  <li> Write down the state transition table for your FSM.
d25 1
a25 1
Notice
d27 1
a27 1
<h2>Implementation</h2>
d29 22
d52 184
d238 2
@
