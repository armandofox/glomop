head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.04.10.22.08.50;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@      SUBROUTINE DRM(vec,rm)
C
C     DOUBLE PRECISION VERSION.
C
C     Compute the 3x3 rotation maxtrix needed to align the
C     z-hat axis with the unit direction vector, vec.
C     Rotation is performed about the y-hat axis CCW, then
C     CCW about the z-hat axis.
C
C     For the degenerate case when vec(3)=1, the x and
C     y axis are not rotated.
C
C     CODE DEPENDENCIES: N/A
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      DOUBLE PRECISION vec(*),rm(3,3)
      DOUBLE PRECISION yn,yni
      DOUBLE PRECISION one,zero
      PARAMETER (one=1.0D+00,zero=0.0D+00)
      INTEGER i

      IF ((ABS(vec(3)).LT.one)) THEN
C       Peform calculations for non-degenerate case.
        yn = DSQRT(vec(1)*vec(1) + vec(2)*vec(2))
        yni = one/yn
        DO i=1,3
          rm(i,3) = vec(i)
        ENDDO

C       Direction of new y-hat axis
        rm(1,2) = -vec(2)*yni
        rm(2,2) = vec(1)*yni
        rm(3,2) = zero

C       Direction of new x-hat axis
        rm(1,1) = vec(1)*yni*vec(3)
        rm(2,1) = vec(2)*yni*vec(3)
        rm(3,1) = -yn

      ELSE
C       Peform calculations for degenerate case.

C       Array Elements Associated with z-hat axis.
        rm(3,1) = zero
        rm(3,2) = zero
        rm(1,3) = zero
        rm(2,3) = zero
        rm(3,3) = vec(3)

C       Array Elements Associated with the x-hat axis
        rm(1,1) = vec(3)
        rm(2,1) = zero

C       Array Elements Associated with the y-hat axis
        rm(1,2) = zero
        rm(2,2) = one
      ENDIF

      RETURN
      END

      SUBROUTINE SRM(vec,rm)
C
C     SINGLE PRECISION VERSION.
C
C     Compute the 3x3 rotation maxtrix needed to align the
C     z-hat axis with the unit direction vector, vec.
C     Rotation is performed about the y-hat axis CCW, then
C     CCW about the z-hat axis.
C
C     For the degenerate case when vec(3)=1, the x and
C     y axis are not rotated.
C
C     CODE DEPENDENCIES: N/A
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      REAL vec(*),rm(3,3)
      REAL yn,yni
      REAL one,zero
      PARAMETER (one=1.0,zero=0.0)
      INTEGER i

      IF ((ABS(vec(3)).LT.one)) THEN
C       Peform calculations for non-degenerate case.
        yn = SQRT(vec(1)*vec(1) + vec(2)*vec(2))
        yni = one/yn
        DO i=1,3
          rm(i,3) = vec(i)
        ENDDO

C       Direction of new y-hat axis
        rm(1,2) = -vec(2)*yni
        rm(2,2) = vec(1)*yni
        rm(3,2) = zero

C       Direction of new x-hat axis
        rm(1,1) = vec(1)*yni*vec(3)
        rm(2,1) = vec(2)*yni*vec(3)
        rm(3,1) = -yn

      ELSE
C       Peform calculations for degenerate case.

C       Array Elements Associated with z-hat axis.
        rm(3,1) = zero
        rm(3,2) = zero
        rm(1,3) = zero
        rm(2,3) = zero
        rm(3,3) = vec(3)

C       Array Elements Associated with the x-hat axis
        rm(1,1) = vec(3)
        rm(2,1) = zero

C       Array Elements Associated with the y-hat axis
        rm(1,2) = zero
        rm(2,2) = one
      ENDIF

      RETURN
      END
      SUBROUTINE DROTM(theta,phi,rm,vec)
C
C     DOUBLE PRECISION VERSION.
C
C     Compute the 3x3 rotation maxtrix associated with CCW
C     rotation of the z-hat axis through theta radians
C     about the y-hat axis and CCW rotation about the z-hat
C     axis by phi radians.  vec is returned as the new
C     direction vector associated with the new z-hat
C     basis vector.
C
C     CODE DEPENDENCIES:
C      Routine Name                  File
C        DRM                    geompak.for
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      DOUBLE PRECISION theta,phi,vec(*),rm(3,3)
      DOUBLE PRECISION cost,sinp,cosp,sint
      DOUBLE PRECISION one,zero,pi,hpi
      PARAMETER (one=1.0D+00,zero=0.0D+00)
      PARAMETER (PI=3.141592653589793238D+00)
      PARAMETER (HPI=0.5D+00*PI)

C     Compute direction cosines.
      cost = DCOS(theta)
      sinp = DSIN(phi)
      cosp = DCOS(phi)

      IF (ABS(cost).LT.one) THEN
C       Perform calculations for non-degenerate case.
        sint = DSIN(theta)
        vec(1) = sint*cosp
        vec(2) = sint*sinp
        vec(3) = cost
        CALL DRM(vec,rm)
      ELSE
C       z-axis is rotated 180 degrees  The x and
C       y-axises are rotated CW by an angle phi.
        vec(1) = zero
        vec(2) = zero
        vec(3) = cost

C       Array Elements Associated with z-hat axis.
        rm(3,1) = zero
        rm(3,2) = zero
        rm(1,3) = zero
        rm(2,3) = zero
        rm(3,3) = cost

C       Array Elements Associated with the x-hat axis
        rm(1,1) = cost*cosp
        rm(2,1) = cost*sinp

C       Array Elements Associated with the y-hat axis
        rm(1,2) = -sinp
        rm(2,2) = cosp
      ENDIF

      RETURN
      END

      SUBROUTINE DRMinv(theta,phi,rmi)
C
C     DOUBLE PRECISION VERSION.
C
C     Compute the inverse rotation matrix and store it
C     in rmi.  This routine is merely provided for convenience
C     and initial code development purposes.
C     For serious calculations, it is more efficient to
C     store the rotation matrix and compute the inverse (i.e.,
C     the transpose) on the fly.
C
C     CODE DEPENDENCIES:
C      Routine Name                  File
C        DROTM                  geompak.for
C        DRM                    geompak.for
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      DOUBLE PRECISION rm(3,3),rmi(3,3),vec(3)
      DOUBLE PRECISION theta,phi
      INTEGER i,j

C     Compute the rotation matrix, rm, for theta and phi.
C
      CALL DROTM(theta,phi,rm,vec)

C
C     Compute Transpose of rm and store it in rmi.
C     The tranpose of rm is equal to the inverse because
C     the rotation matrix is a unitary matrix, i.e., the
C     columns of rm form a orthonormal set of vectors.
C
      DO i=1,3
        DO j=1,3
          rmi(i,j) = rm(j,i)
        ENDDO
      ENDDO

      RETURN
      END

      SUBROUTINE SROTM(theta,phi,rm,vec)
C
C     SINGLE PRECISION VERSION.
C
C     Compute the 3x3 rotation maxtrix associated with CCW
C     rotation of the z-hat axis through theta radians
C     about the y-hat axis and CCW rotation about the z-hat
C     axis by phi radians.  vec is returned as the new
C     direction vector associated with the new z-hat
C     basis vector.
C
C     CODE DEPENDENCIES:
C      Routine Name                  File
C        SRM                    geompak.for
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      REAL theta,phi,vec(*),rm(3,3)
      REAL cost,sinp,cosp,sint
      REAL one,zero,pi,hpi
      PARAMETER (one=1.0,zero=0.0)
      PARAMETER (PI=3.141592653589793238E+00)
      PARAMETER (HPI=0.5*PI)

C     Compute direction cosines.
      cost = cos(theta)
      sinp = sin(phi)
      cosp = cos(phi)

      IF (ABS(cost).LT.one) THEN
C       Perform calculations for non-degenerate case.
        sint = sin(theta)
        vec(1) = sint*cosp
        vec(2) = sint*sinp
        vec(3) = cost
        CALL SRM(vec,rm)
      ELSE
C       z-axis is rotated 180 degrees  The x and
C       y-axises are rotated CW by an angle phi.
        vec(1) = zero
        vec(2) = zero
        vec(3) = cost

C       Array Elements Associated with z-hat axis.
        rm(3,1) = zero
        rm(3,2) = zero
        rm(1,3) = zero
        rm(2,3) = zero
        rm(3,3) = cost

C       Array Elements Associated with the x-hat axis
        rm(1,1) = cost*cosp
        rm(2,1) = cost*sinp

C       Array Elements Associated with the y-hat axis
        rm(1,2) = -sinp
        rm(2,2) = cosp
      ENDIF

      RETURN
      END

      SUBROUTINE SRMinv(theta,phi,rmi)
C
C     SINGLE PRECISION VERSION.
C
C     Compute the inverse rotation matrix and store it
C     in rmi.  This routine is merely provided for convenience
C     and initial code development purposes.
C     For serious calculations, it is more efficient to
C     store the rotation matrix and compute the inverse (i.e.,
C     the transpose) on the fly.
C
C     CODE DEPENDENCIES:
C      Routine Name                  File
C        SROTM                  geompak.for
C        SRM                    geompak.for
C
C     DATE: DEC. 4, 1994
C     AUTHOR: R.D. STEWART
C
      REAL rm(3,3),rmi(3,3),vec(3)
      REAL theta,phi
      INTEGER i,j

C     Compute the rotation matrix, rm, for theta and phi.
C
      CALL SROTM(theta,phi,rm,vec)

C
C     Compute Transpose of rm and store it in rmi.
C     The tranpose of rm is equal to the inverse because
C     the rotation matrix is a unitary matrix, i.e., the
C     columns of rm form a orthonormal set of vectors.
C
      DO i=1,3
        DO j=1,3
          rmi(i,j) = rm(j,i)
        ENDDO
      ENDDO

      RETURN
      END
@
