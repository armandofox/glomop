head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.03.08.02.21;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@"how to get decision-making gates starting from raw hardware"
 -  make gates using transistors (demo using project kit)

"how to perform conditional actions" - combinational logic
 - make hexdigit-to-7-segment decoder


"how to make almost-raw hardware realize a fixed algorithm"
build an fsm for something simple
  - door controller

intro material:
  - turing machine review
  - comparison to fsm
  - 



milestones:
  - describe fsm (all)
  - describe implementation using truth tables (all)
  - breadboard safety etc (all)
  - build and verify comb. logic (1/2)
  - build and verify i/o (1/2)

"how to make semi-cooked hardware realize a programmable algorithm"
how to extend to make combo programmable
  - need comparators and control logic
  - need DIP switches to set combo

milestones:
  - describe control logic (all)
  - build and verify control logic

last milestones:
  - writeup/demo
 
suggested extra credit:
  - add "cancel/reset" button
  - 

discussion:
  - correspondence to basic stored program computer
  

questions for discuss:
  - how would you add feature so that if 3 bad attempts, alarm sounds?
  - if "one button at a time" assumption wasn't allowed, how many
  states would fsm have?  why?
  - is a combination lock an FSM or "ISM"?
  - why do we use NAND rather than AND, etc


@
