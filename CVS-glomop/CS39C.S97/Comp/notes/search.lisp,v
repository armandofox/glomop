head	1.1;
access;
symbols;
locks; strict;
comment	@;;; @;


1.1
date	97.04.10.22.08.51;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@;;; LISP graph search example, 2/3/92, A. Fox

;;; set up representations of graph with various nodes.
(in-package 'search)

(setf (get 'a 'neighbors) '(b c))
(setf (get 'b 'neighbors) '(a d))
(setf (get 'c 'neighbors) '(a d))
(setf (get 'd 'neighbors) '(b c e))
(setf (get 'e 'neighbors) '(d f))
(setf (get 'f 'neighbors) '(e))

;;; function to extend a path by returning a list of those extensions of
;;; the path which do not visit a node already seen.

(defun extend-path (path)
  (setf possible-next-nodes (get (first (last path)) 'neighbors))
  (setf possible-next-nodes
	(remove-if #'(lambda (node) (member node path)) possible-next-nodes))
  (mapcar #'(lambda (new-element)
	      (append path (list new-element)))
	  possible-next-nodes))

;;; the depth-first search procedure

(defun depth-first-search (start end queue)
  (setf path-to-consider (first queue))
  (cond ((null queue) nil)
	((eq end (first (last path-to-consider)))
	 path-to-consider)
	(t (depth-first-search start
			       end
			       (append (extend-path path-to-consider)
				       (rest queue))))))

  
  
				
@
