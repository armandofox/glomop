head	1.6;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.6
date	98.05.15.00.25.11;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	98.03.02.01.49.09;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	98.03.01.02.27.43;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	98.03.01.00.52.05;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	98.02.19.23.33.43;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches;
next	;


desc
@@


1.6
log
@eric anderson comments
@
text
@\textsl{
Today's Internet clients  vary widely with respect to both hardware and
software properties:
screen size, color depth, effective bandwidth, processing power, and the
ability to handle different data formats.  
The order-of-magnitude span of this variation is too large to hide at the
network level, making application-level techniques necessary.  We 
show that on-the-fly adaptation by {\em transformational
proxies} is a widely applicable, cost-effective, and flexible technique for
addressing all these types of variation.  To support this claim, we
describe our experience with datatype-specific distillation (lossy
compression) in a variety of applications.  We also argue that 
placing adaptation machinery in the network
infrastructure, rather than inserting it into end servers, 
enables incremental deployment and amortization of
operating costs.  To this end, we describe
a programming model for large-scale interactive Internet services and a
scalable cluster-based framework that has been in production use at UC
Berkeley since April 1997.  We present a detailed examination of TranSend,
a scalable transformational Web proxy deployed on our cluster framework,
and give descriptions of several handheld-device applications 
that demonstrate the wide applicability of the proxy-adaptation philosophy.
}
@


1.5
log
@first draft sent to Richard LaMaire
@
text
@d7 2
a8 2
network level, making application-level techniques necessary.  We present
evidence that on-the-fly adaptation by active {\em transformational
d12 5
a16 4
compression) in a variety of applications.  We also argue that there are
important advantages (such as incremental deployment and amortization of
cost) to  placing adaptation machinery in the network
infrastructure rather than inserting it into end servers.  To this end, we describe
d22 1
a22 1
that push the proxy-adaptation philosophy to its limits.
@


1.4
log
@More tersification.
@
text
@d1 6
a6 4
\textit{ The current Internet infrastructure includes an extensive range
and number of clients and servers.  Clients vary along many axes, including
screen size, color depth, effective bandwidth, and processing power, and
the order-of-magnitude span of this variation is too large to hide at the
d14 2
a15 2
cost) to being able to place adaptation machinery in the network
infrastructure rather than inserting it into end servers.  We next describe
d20 3
a22 2
and give descriptions of several other of our applications for handheld
devices that push the proxy-adaptation philosophy to its limits.  }
@


1.3
log
@*** empty log message ***
@
text
@d1 2
a2 3
\textit{
The current Internet infrastructure includes an extensive range and
number of clients and servers.  Clients vary along many axes, including
d4 16
a19 21
the order-of-magnitude span of this variation is too large to hide at
the network 
level, making application-level techniques necessary.
We present evidence that on-the-fly adaptation by active {\em
transformational proxies} is a widely applicable, cost-effective, and
flexible technique for addressing all these types of variation.  To support
this claim, we describe our experience with datatype-specific
distillation (lossy compression) in a variety of applications.  We also
argue that there are important advantages to being able to place adaptation
machinery in the network infrastructure (e.g. at Internet
points-of-presence) rather than inserting it into end servers, including
incremental deployment and amortization of operational costs.  To this
end, we describe a programming model for large-scale interactive
Internet services and a scalable cluster-based framework that
instantiates the model and has been in production use at UC Berkeley
since April 1997 with minimal downtime.  We present a detailed
examination of TranSend, a scalable transformational Web proxy deployed
on our cluster architecture, and descriptions of several other
applications we have written for handheld devices that push the
proxy-adaptation philosophy to its limits.
}
@


1.2
log
@*** empty log message ***
@
text
@d1 25
a25 32
% abstract; currently contains material from previous papers suitable
% for weaving into an abstract.

We identify three fundamental requirements for scalable net
work services: incremental scalability and overflow growth provi
sioning, 24x7 availability through fault masking, and cost-
effectiveness.  We argue that clusters of commodity workstations 
interconnected by a high-speed SAN are exceptionally well-suited 
to meeting these challenges for Internet-server workloads, pro
vided the software infrastructure for managing partial failures and 
administering a large cluster does not have to be reinvented for 
each new service.  To this end, we propose a general, layered archi
tecture for building cluster-based scalable network services that 
encapsulates the above requirements for reuse, and a service-pro
gramming model based on composable workers that perform trans
formation, aggregation, caching, and customization (TACC) of 
Internet content.  For both performance and implementation sim
plicity, the architecture and TACC programming model exploit 
BASE, a weaker-than-ACID data semantics that results from trad
ing consistency for availability and relying on soft state for robust
ness in failure management.  Our architecture can be used as an 
"off the shelf" infrastructural platform for creating new network 
services, allowing authors to focus on the "content" of the service 
(by composing TACC building blocks) rather than its implementa
tion.  We discuss two real implementations of services based on this 
architecture: TranSend, a Web distillation proxy deployed to the 
UC Berkeley dialup IP population, and HotBot, the commercial 
implementation of the Inktomi search engine.  We present detailed 
measurements of TranSend's performance based on substantial cli
ent traces, as well as anecdotal evidence from the TranSend and 
HotBot experience, to support the claims made for the architecture.

@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
effectiveness. We argue that clusters of commodity workstations 
d12 1
a12 1
each new service. To this end, we propose a general, layered archi
d21 1
a21 1
ness in failure management. Our architecture can be used as an 
d25 1
a25 1
tion. We discuss two real implementations of services based on this 
d28 1
a28 1
implementation of the Inktomi search engine. We present detailed 
@


1.1.1.1
log
@Client and Network Adaptation paper for IEEE Pers Comms special issue,
to be submitted 2/98
@
text
@@
