head	1.7;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.7
date	98.08.03.18.01.57;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	98.03.02.01.49.14;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	98.02.28.04.46.46;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	98.02.26.18.06.55;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	98.02.19.23.33.46;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	98.02.18.09.15.42;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@\section{Related Work}
\label{related}

At the network level, various approaches have been used to shield clients
from the effects of poor (especially wireless) networks
\cite{tcp_imp}.
At the application level, data transformation by proxy interposition has
become particularly popular for HTTP,
whose proxy mechanism was originally intended for users behind 
security firewalls.  
The mechanism has been harnessed for anonymization \cite{anonymizer}, 
Kanji transcoding \cite{delegate,ping}, application-specific stream transformation
\cite{stream-transducers}, and personalized ``associates'' for
Web browsing \cite{wbi,waiba}.
Some projects provide an integrated solution with both network-level and
application-level mechanisms \cite{mowgli_tr,wap,proxyfilter}, though
none propose a uniform application-development model analogous to TACC.

Rover \cite{Jos95}, Coda \cite{KISTLER_SATYANARAYANAN92}, and Wit
\cite{wit} 
differ in their respective approaches to partitioning applications
between a thin or poorly-connected client and more powerful server.  In
particular, Rover and Coda provide explicit support for disconnected
operation, unlike our TACC work.  We find that Rover's
application-specific, toolkit-based approach is a particularly good
complement to our own; although the TACC model provides a reasonable set
of guidelines for thinking about partitioning (leave the client to do
what it does well, and move as much as possible of the remaining
functionality to the back end), we are working on integrating Rover into
TACC to provide a rich abstraction for dealing with disconnection in
TACC applications.

SmartClients \cite{smartclients} and SWEB++ \cite{sweb++}
have exploited the extensibility of client browsers via Java and
JavaScript to enhance scalability of network-based services by dividing
labor between the client and server.  We note that our system does not
preclude, and in fact benefits from, exploiting intelligence and
computational resources at the client; we discuss various approaches we
have tried in \cite{uist97}.

@


1.6
log
@first draft sent to Richard LaMaire
@
text
@d6 1
a6 1
\cite{tcp_wireless_comparison,wireless_tcp_survey}.
@


1.5
log
@*** empty log message ***
@
text
@d19 13
a31 11
Rover \cite{Jos95}, Coda \cite{KISTLER_SATYANARAYANAN92}, and Wit \cite{wit} all provide
quite different mechanisms for partitioning applications between a thin
or poorly-connected client and more powerful server.  Rover and Coda in
particular provide explicit support for disconnected operation, unlike
our TACC work.  We find that Rover's toolkit-based approach is a
particularly good complement to our own; although the TACC model
provides a reasonable set of guidelines for thinking about partitioning
(leave the client to do what it does well, and move as much as possible
of the remaining functionality to the back end), we are working on
integrating Rover into TACC to provide a rich abstraction for dealing
with disconnection in TACC applications.
@


1.4
log
@*** empty log message ***
@
text
@d4 1
a4 8
TBD: Add related work from ASPLOS paper

\subsection{Shielding Clients From the Effects of Slow Networks}

Filtering and on-the-fly 
compression have become particularly popular for HTTP [31], 
whose proxy mechanism was originally intended for users behind 
security firewalls.  The mechanism has been used to shield clients 
a6 17

The Odyssey system \cite{odyssey}, on the other hand, supports a form of
end-to-end bandwidth management by providing a fixed number of
representations of data objects on a server, and specifying an API by
which clients track their ``environment'' (including, e.g., network
characteristics) and negotiate for a representation that is appropriate
for their current connectivity.  The approach as described requires
substantial changes (content, filesystem organization, control logic,
and kernel modifications) to the server, and does not accommodate
clients whose configurations suggest a data representation some where in
between those available at the server.  Nonetheless, a distillation proxy
could negotiate with an Odyssey server for a representation that would
minimize the additional work the proxy would need to do on behalf of its
client.

\subsection{Hybrid Network- and Application-Level Approaches}

d8 22
a29 84
also been used to perform anonymization, 
Kanji transcoding \cite{delegate},
Kanji-to-GIF conversion \cite{ping}, application-level stream transduction
\cite{stream-transducers}, and personalized agent services for
Web browsing \cite{wbi}.
We also know of at least two projects that combine network-level 
optimizations with at least some application-level content filtering.  
MOWGLI \cite{mowgli_tr} provides both a proxy and a client-side agent, which 
cooperate to manage the wireless link using an efficient datagram 
protocol, hide disconnection from higher network layers, and 
tokenize application level protocols and data formats such as HTTP 
and HTML to reduce bandwidth requirements.  The recent Wireless
Applications Protocol (WAP) proposal \cite{wap} also contains elements
of both network and application level adaptation.

Zenel's ``dual proxy'' architecture \cite{proxyfilter} also features sepa
rate low-level and high-level filters, which can be demand-loaded 
by applications.  The low-level filters operate at the socket API level 
and require modifications to the mobile device's network stack.  The 
high-level filters can use application-specific semantics to filter data 
before it is sent to a client, but the filter is part of the application 
rather than a middleware component, which complicates its reuse 
by other applications and makes it awkward to support legacy 
applications.

\subsection{Partitioning of Application Complexity}

Rover \cite{Jos95} provides a rich distributed-object system that gives a 
uniform view of objects at the OS level, and a queued RPC system 
that provides the substrate for invoking on objects.  Together these 
abstractions allow disconnection and object migration (including 
code) to be handled largely implicitly by the OS.  For example, sim
ple GUI code can be migrated to the mobile, where it will use 
queued RPC to communicate with the rest of the application run
ning on a server.  Rover's goals and functionality are complemen
tary to our own, and nothing precludes the composition of queued 
RPC and RDO's with the functionality of our proxy architecture.
Wit [36] partitions mobile applications between a client run
ning threaded Tcl on an HP palmtop, and a workstation-based 
proxy process.  However, Wit 1 did not emphasize bandwidth man
agement (though nothing in the Wit architecture precludes its use 
on a per-application basis), nor did it specify a uniform architecture 
for application partitioning.  Wit version 2 [37] adds a uniform 
architecture in which client data is treated as a graph of objects con
structed by the proxy, where graph edges connect "related" data 
objects (e.g., sequential or threaded messages in a mail queue).  
Bandwidth management can be achieved by explicitly pruning the 
graph, e.g., lazily fetching subsequent messages in a mail thread, 
rather than prefetching them in the initial communication with the 
proxy.  


% \subsection{Consistency vs.  Availability}

% Grapevine \cite{grapevine} was an important early example of trading
% consistency for simplicity; Bayou [21] later explored trading
% consistency for availability in application-specific ways, providing an
% operational spectrum between ACID and BASE for a distributed
% database.  The use of soft state to provide improved performance and
% increase fault tolerance robustness has been well explored in the
% wide-area Internet, in the context of IP packet routing [39], multicast
% routing [20], and wireless TCP optimizations such as TCP Snoop [5]; the
% lessons learned in those areas strongly influenced our design philosophy
% for the TACC server architecture.

\subsection{Fault Tolerance, Load Balancing and Scaling}

\subsection{Fault Tolerance and Availability}

TBD: the legacy of the database world

The Worm programs 
[55] are an early example of process-peer fault tolerance.  Tandem 
Computer and others explored a related mechanism, process-pair 
fault tolerance, [6] in which a secondary (backup) process ran in 
parallel with the primary and maintained a mirror of the primary's 
internal state by processing the same message traffic as the pri
mary, allowing it to immediately replace the primary in the event of 
failure.  Tandem also advocated the use of simple "building blocks" 
to ensure high availability.  The Open Group SHAWS project [49] 
plans to build scalable highly available web servers using a fault 
tolerance toolkit called CORDS, but that project is still in progress.

TBD: what's the status of CORDS?
a37 5

\subsection{Adaptive Middleware}

TBD:  Talk about CORBA, DCOM, Wolfpack

@


1.3
log
@*** empty log message ***
@
text
@d83 16
a113 1
%% TBD: what's the status of CORDS?
d115 1
a115 14
\subsection{Consistency vs.  Availability}

Grapevine \cite{grapevine} was an important early example of trading
consistency for simplicity; Bayou [21] later explored trading
consistency for availability in application-specific ways, providing an
operational spectrum between ACID and BASE for a distributed
database.  The use of soft state to provide improved performance and
increase fault tolerance robustness has been well explored in the
wide-area Internet, in the context of IP packet routing [39], multicast
routing [20], and wireless TCP optimizations such as TCP Snoop [5]; the
lessons learned in those areas strongly influenced our design philosophy
for the TACC server architecture.

\subsection{Load Balancing and Scaling}
d125 1
a125 8
, as we do for the TranSend user
interface and coarse-grained load balancing.  However, as discussed in
the Introduction, we expect the utility of centralized,
highly-available services to continue to increase, and this cannot occur
without the growth path provided by linear incremental scalability in
the SNS sense.  

\subsection{Application Middleware}
@


1.2
log
@*** empty log message ***
@
text
@d2 1
d6 1
a6 1
\subsection{Content Transformation By Proxy}
d11 25
a35 6
security firewalls. The mechanism has been used to shield clients 
from the effects of poor (especially wireless) networks [22,37], 
perform filtering [67] and anonymization, and perform value-added 
transformations on content, including Kanji transcoding [56], 
Kanji-to-GIF conversion [65], application-level stream transducing 
\cite{stream-transducers} [13,59], and personalized agent services for
d37 45
d88 1
a88 1
[55] are an early example of process-peer fault tolerance. Tandem 
d94 2
a95 2
failure. Tandem also advocated the use of simple "building blocks" 
to ensure high availability. The Open Group SHAWS project [49] 
d100 1
a100 1
\subsection{Consistency vs. Availability}
d106 1
a106 1
database. The use of soft state to provide improved performance and
d115 4
a118 4
WebOS [66] and SWEB++ [3]
have exploited the extensibility of client browsers via Java and Jav
aScript to enhance scalability of network-based services by divid ing
labor between the client and server. We note that our system does not
d120 5
a124 2
computational resources at the client, as we do for the TranSend user
interface and coarse-grained load balancing. However, as discussed in
d127 1
a127 1
without the growth path provided by linear incremen tal scalability in
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
% currently contains related work from SOSP; should add refs from ASPLOS
% etc
d5 1
a5 1
\section{Related Work}
d7 1
a7 1
Content transformation by proxy: Filtering and on-the-fly 
d11 2
a12 2
from the effects of poor (especially wireless) networks [22,37], per
form filtering [67] and anonymization, and perform value-added 
d15 8
a22 2
[13,59], and personalized agent services for Web browsing [7].
Fault tolerance and high availability: The Worm programs 
d33 18
a50 11
BASE: Grapevine [9] was an important early example of trad
ing consistency for simplicity; Bayou [21] later explored trading 
consistency for availability in application-specific ways, providing 
an operational spectrum between ACID and BASE for a distributed 
database. The use of soft state to provide improved performance 
and increase fault tolerance robustness has been well explored in 
the wide-area Internet, in the context of IP packet routing [39], mul
ticast routing [20], and wireless TCP optimizations such as TCP 
Snoop [5]; the lessons learned in those areas strongly influenced 
our design philosophy for the TACC server architecture.
Load balancing and scaling: WebOS [66] and SWEB++ [3] 
d52 15
a66 33
aScript to enhance scalability of network-based services by divid
ing labor between the client and server. We note that our system 
does not preclude, and in fact benefits from, exploiting intelligence 
and computational resources at the client, as we do for the 
TranSend user interface and coarse-grained load balancing. How
ever, as discussed in the Introduction, we expect the utility of cen
tralized, highly-available services to continue to increase, and this 
cannot occur without the growth path provided by linear incremen
tal scalability in the SNS sense.
Future Work
Our past work on adaptation via distillation [23,22] described 
how distillation could be dynamically tuned to match the behavior 
of the user's network connection, and we have successfully demon
strated adaptation to network changes by combining our original 
WWW proxy prototype with the Event Notification mechanisms 
developed by Welling and Badrinath [4], and plan to leverage these 
mechanisms to provide an adaptive solution for Web access from 
wireless clients.
We have not investigated how well our proposed architecture 
works outside the Internet-server domain. In particular, we do not 
believe it will work well for write-intensive services where the 
writes carry hard state or where strong consistency is desired, such 
as commerce servers, file systems, or online voting systems.
The programming model for TACC services is still embryonic. 
We plan to develop it into a well-defined programming environ
ment with an SDK, and we will encourage our colleagues to author 
services of their own using our system.
Previous research into operating systems support for busy 
Internet servers [32, 42] has identified inadequacies in OS imple
mentations and the set of abstractions available to applications. We 
plan to investigate similar issues related specifically to cluster-
based middleware services, as motivated by our observations in 
Section 4.4.
@


1.1.1.1
log
@Client and Network Adaptation paper for IEEE Pers Comms special issue,
to be submitted 2/98
@
text
@@
