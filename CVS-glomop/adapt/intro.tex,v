head	1.14;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.14
date	98.05.15.00.44.55;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	98.05.15.00.25.14;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	98.05.08.22.22.33;	author gribble;	state Exp;
branches;
next	1.11;

1.11
date	98.05.08.17.47.50;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	98.03.02.01.49.13;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	98.03.01.00.52.07;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	98.02.28.22.29.55;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	98.02.28.04.46.45;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	98.02.28.02.22.19;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	98.02.26.18.06.54;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	98.02.19.23.33.46;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	98.02.18.21.00.10;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	98.02.18.09.15.41;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches;
next	;


desc
@@


1.14
log
@*** empty log message ***
@
text
@\section{Infrastructural On-the-Fly Adaptation Services}

\subsection{Heterogeneity: Thin Clients and Slow Networks}

The current Internet infrastructure includes an extensive range and
number of clients and servers.  Clients vary along many axes, including
screen size, color depth, effective bandwidth, processing power, and
ability to handle specific data encodings, e.g., GIF, PostScript, or
MPEG.  As shown in tables \ref{phys_var_tab} and \ref{net_var_tab}, each
type of variation often spans orders of magnitude.
High-volume devices such as smart phones \cite{nokia9000} and smart two-way
pagers will soon constitute an increasing fraction of Internet clients,
making the variation even more pronounced.  

These conditions make it
difficult for servers to provide a level of service that is appropriate
for every client.  Application-level adaptation
is required to 
provide a {\em  meaningful} Internet experience across the range of
client capabilities.  
Despite continuing improvements in client computing power and connectivity,
we expect the high end to advance roughly in parallel with the low end, effectively
maintaining a gap between the two and therefore the need for
application-level adaptation.

\begin{table}[htp]
\centering
\begin{tabular}{|c||c|c|c|} \hline

{\bf Platform} & {\bf SPEC92/} & {\bf Screen} & {\bf Bits/} \\
               & {\bf Memory}    & {\bf Size} & {\bf pixel} \\ \hline
High-end PC    & 200/64M      & 1280x1024         & 24 \\ \hline
Midrange PC    & 160/32M          & 1024x768          & 16 \\ \hline
Typ. Laptop    & 110/16M        & 800x600           & 8 \\ \hline
Typical PDA     & low/2M         & 320x200           & 2 \\ \hline
\end{tabular}
\caption{\bf Physical variation among clients}\label{phys_var_tab}
\end{table}

\begin{table}[htbp]
\centering
\begin{tabular}{|c||c|c|} \hline

{\bf Network}  & {\bf Bandwidth} & {\bf Round-Trip} \\
               & {\bf (bits/s)} & {\bf Time} \\ \hline
Local Ethernet & 10-100 M  & 0.5 - 2.0 ms \\ \hline
ISDN & 128 K & 10-20 ms \\ \hline
Wireline Modem & 14.4 - 56 K & 350 ms \\ \hline
Cellular/CDPD & 9.6 - 19.2 K & 0.1 - 0.5 s \\ \hline
\end{tabular}
\caption{\bf Typical Network Variation}\label{net_var_tab}
\end{table}

\subsection{Approach: Infrastructural Proxy Services}
\label{approach}

We argue for a {\em proxy-based approach} to adaptation, in which proxy
agents placed between clients and servers perform aggressive computation
and storage on behalf of clients.  The proxy approach stands in contrast
to the {\em client-based approach}, which attempts to bring all clients
up to a least-common-denominator level of functionality (e.g. text-only,
HTML-subset compatibility for thin-client Web browsers), and the {\em
server-based approach}, which attempts to insert adaptation machinery at
each end server.  We believe the proxy approach directly confers three
advantages over the client and server approaches.

\begin{itemize}
\item \textbf{Leveraging the installed infrastructure 
through incremental deployment.}  The enormous installed infrastructure,
and its attendant base of existing content, is too valuable to waste;
yet some clients cannot handle certain data types effectively.  A
compelling solution to the problem of client and network heterogeneity
should allow interoperability with existing servers, thus enabling
incremental deployment while evolving content formats and protocols are
tuned and standardized for different target platforms.  A proxy-based
approach lends itself naturally to transparent incremental
deployment, since an application-level proxy appears as a server to
existing clients and as a client to existing servers.

\item \textbf{Rapid prototyping during turbulent standardization
  cycles.}
Software
development on ``Internet time'' 
does not allow for long deployment cycles.  Proxy-based adaptation
provides a smooth path for rapid prototyping of new services, formats,
and protocols, which can 
be deployed to servers (or clients) later if the prototypes succeed.

\item \textbf{Economy of scale.}  Basic queueing theory shows that a
large central (virtual) server is more efficient in both cost and
utilization (though less predictable in per-request performance) 
than a collection of smaller servers; standalone desktop
systems represent the degenerate case of one ``server'' per user. This
supports the argument for Network Computers \cite{Hal96} and
suggests that collocating proxy services with infrastructural elements such as
Internet points-of-presence (POPs) is one way to achieve effective
economies of scale.

\end{itemize}

Large-scale network services remain difficult to deploy 
because of three fundamental challenges: scalability, availability and
cost effectiveness.  By scalability, we mean that when the load offered
to the service increases, an incremental and linear increase in hardware
can maintain the same per-user level of service.  By availability, we
mean that the service as a whole must be available $24\times 7$, despite
transient partial hardware or software failures.  By cost effectiveness,
we mean that the service must be economical to administer and expand,
even though it potentially comprises many workstation nodes operating as
a centralized cluster or ``server farm''.  In section
\ref{scaling} we describe how we have addressed these challenges in our
cluster-based proxy application server architecture.

\subsection{Contributions and Map of Paper}

In section \ref{distill} we describe our measurements and experience
with {\em datatype-specific distillation and refinement}, a mechanism
that has been central to our proxy-based approach to network and client
adaptation.  In section \ref{scaling} we introduce a generalized
``building block'' programming model for designing and implementing
adaptive applications, describe our implemented cluster-based
application server that instantiates the model, and present detailed
measurements of a particular production application: TranSend, a transformational
Web proxy service.  In section \ref{taccapps}
we present case studies of other services we have built using our
programming model, some of
which are in daily use by thousands of users, including the Top Gun
Wingman graphical Web browser for the 3Com PalmPilot handheld device.  We
discuss related work in section \ref{related}, and attempt to draw some
lessons from our experience and guidelines for future research in
section \ref{concl}.

@


1.13
log
@eric anderson comments
@
text
@d55 1
@


1.12
log
@reviewer B changes
@
text
@d19 1
a19 1
provide a {\em meaningful} Internet experience across the range of
d21 4
a24 5
Although we expect clients to improve over time, there will always be older
systems still in use that represent relatively obsolete clients, and the
high end will advance roughly in parallel with the low end, effectively
maintaining a gap between the two:  there will always be a large difference
between the very best laptop and the very best smart phone.
d32 2
a33 2
High-end PC    & 200/48M      & 1280x1024         & 24 \\ \hline
Midrange PC    & 160/8M          & 1024x768          & 16 \\ \hline
d67 4
a70 3
\item \textbf{Leveraging the installed infrastructure.}
The enormous installed infrastructure, and its attendant base of
existing content, is too valuable to waste.  A
d72 6
a77 6
should allow interoperability with existing
servers, thus enabling incremental deployment while content formats and
protocols are tuned and standardized for different target platforms.  A
proxy-based approach lends itself naturally to the goal of transparent
incremental deployment, since an application-level proxy appears as a
server to existing clients and as a client to existing servers.
d86 1
a86 1
be standardized later if the prototypes succeed. 
d90 2
a91 1
utilization than a collection of smaller servers; standalone desktop
d108 2
a109 1
even though it potentially comprises many workstation nodes.  In section
@


1.11
log
@*** empty log message ***
@
text
@d35 1
a35 1
Laptop & 110/16M        & 800x600           & 8 \\ \hline
d49 1
a49 1
Wireline Modem & 14.4 - 28.8 K & 350 ms \\ \hline
d125 1
a125 1
Wingman graphical Web browser for the USR PalmPilot handheld device.  We
@


1.10
log
@first draft sent to Richard LaMaire
@
text
@d93 1
a93 1
suggest that collocating proxy services with infrastructural elements such as
@


1.9
log
@*** empty log message ***
@
text
@d17 1
a17 3
for every client is too large to hide at the
network level (see Tables
\ref{phys_var_tab} and \ref{net_var_tab}).  Application-level adaptation
d83 1
a83 1
does not allow for long deployment cycles.  On-the-fly adaptation
d120 4
a123 3
measurements of a particular application (TranSend, a transformational
Web proxy service) in daily production use.  In section \ref{taccapps}
we present case studies of other TACC services we have built, some of
@


1.8
log
@*** empty log message ***
@
text
@d6 1
a6 1
number of clients and servers. Clients vary along many axes, including
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
\section{Motivation: Infrastructural On-the-Fly Adaptation Services}
a4 19
% The explosive growth of the Internet and the proliferation of 
% smart cellular phones and handheld wireless devices is widening 
% an already large gap between Internet clients. Clients vary in their 
% hardware resources, software sophistication, and quality of con
% nectivity, yet server support for client variation ranges from rela
% tively poor to none at all. In this paper we introduce some design 
% principles that we believe are fundamental to providing ``meaningful''
% Internet access for the entire range of clients. In particular, we 
% show how to perform on-demand datatype-specific lossy compression
% on semantically typed data, tailoring content to the specific 
% constraints of the client. We instantiate our design principles in a 
% proxy architecture that further exploits typed data to enable appli
% cation-level management of scarce network resources. Our proxy 
% architecture generalizes previous work addressing all three aspects 
% of client variation by applying well-understood techniques in a 
% novel way, resulting in quantitatively better end-to-end perfor
% mance, higher quality display output, and new capabilities for low-
% end clients.

d9 3
a11 1
MPEG. High-volume devices such as smart phones \cite{nokia9000} and smart two-way
d13 3
a15 1
making the variation even more pronounced.  These conditions make it
d17 1
a17 10
for every client.  For example, PDA's with wireless LAN adapters enjoy
reasonable bandwidth but have low-quality displays.  Full-featured
laptops may connect to the Internet via low bandwidth wide-area wireless
or wireline modems.  Network computers and set-top boxes may not be able
to keep up with the entire proliferation of data formats found on the
Web.

Even the existing disparities in bandwidth, computation power, and
display quality between high-end and low-end Internet clients span
several orders of magnitude, making them too large to hide at the
d19 2
a20 1
\ref{phys_var_tab} and \ref{net_var_tab}).  Application-level adaptation is required to
d29 1
a29 26

% \begin{table*}
% \begin{tabular}{|p{2.25in}|c|p{.5in}|c|}\hline
% \label{table:hetero}
% {\textbf Device} & {\textbf CPU, RAM} & {\textbf Bits/sec} & {\textbf Display}  \\ \hline
% Nokia 9000 Smart Cellular Phone
% & 80186/25Mhz, 2--4 MB & 9600
% & $640 \times 240 \times 2$ \\
% \hline
% USR PalmPilot w/wireless connection
% & M68K $\mu$c 25MHz, 2MB & 9600-19200
% & $160 \times 160 \times 2$ \\
% \hline
% Midrange Laptop, Wireline or Wireless  Modem  
% &  Pentium 100MHz, 16--32 MB & 9600-56K
% & $800 \times 600 \times 8$ \\
% \hline
% Desktop/server on LAN
% &  Pentium II 266MHz, 128 MB & 100M
% & $1280 \times 1024 \times 16$ \\
% \hline
% \end{tabular}
% \end{table*}


\begin{table}[htbp]
d57 1
a57 1
\subsection{Incremental Deployment and Rapid Prototyping}
d59 12
d72 7
a78 12
existing content, is too valuable to waste.  ``Solutions'' to the
adaptation problem that require
re-authoring content or that do not interoperate with existing servers
and protocols fail to leverage this infrastructure.  Just as IPv6 is
designed for a gradual cutover from IPv4 (rather than a ``flag day'' on
which everyone switches over), a compelling solution to the problem of
client and network heterogeneity should allow at least some degree of
interoperability with existing servers, thus enabling incremental
deployment while content formats and protocols are tuned and
standardized for different target platforms.  A proxy-based approach
lends itself naturally to the goal of transparent incremental
deployment, since an application-level proxy appears as a
d81 4
a84 1
Similarly, software development on ``Internet time''
d90 8
a97 1
\subsection{Centralized Scalable Services}
d99 1
a99 11
Basic queueing theory shows that a large central (virtual) server
is more efficient in both cost and utilization than a collection of
smaller servers; standalone desktop systems represent the degenerate
case of one ``server'' per user. All of these support the argument for
Network Computers \cite{Hal96} and suggest that collocating services with
infrastructural elements such as Internet points-of-presence (POPs) is
one way to achieve effective economies of scale.

% Is ``mass customization'' an implementation challenge, or more
% generally, is it something that should be brought out in the intro?
% or later?
d101 1
a101 1
However, network services remain difficult to deploy on large scales
d109 3
a111 16
even though it potentially comprises many workstation nodes.  We observe
that clusters of workstations have some fundamental properties that can
be exploited to meet these requirements: using commodity PCs as the unit
of scaling allows the service to ride the leading edge of the
cost/performance curve, the inherent redundancy of clusters can be used
to mask transient failures, and ``embarrassingly parallel'' network
service workloads map well onto networks of workstations.

However, developing cluster software and administering a running cluster
remain complex.  Primary contributions of our work include the design,
analysis, and implementation of a layered framework for building
adaptive network services that addresses this complexity while realizing
the sought-after economies of scale.  New services can use this
framework as an off-the-shelf solution to scalability, availability, and
several other problems, and focus instead on the content of the service
being developed. 
d113 1
a113 1
\subsection{Map of Paper}
d116 13
a128 19
with adaptive services in general, with quantitative data on specific
examples of adapting to network and client variation.  In section
\ref{taccapps} we discuss a generalized ``building block'' programming
model, called TACC (Transformation, Aggregation, Caching,
Customization), for designing such adaptive applications.  We show how
existing applications map onto the TACC model, justify the TACC elements
as a minimal set of orthogonal behaviors that circumscribes a
large class of adaptive services, and discuss the class of services that
TACC enables.  We also present case studies of specific TACC services we
have built, some of which are in daily use by thousands of users,
including the TranSend web accelerator and the Top Gun Wingman graphical
Web browser for the USR PalmPilot handheld device.
In section \ref{scaling}, we present the architecture and
performance of our implemented prototype TACC server, a scalable,
highly-available, cluster-based platform for running TACC applications.  This
prototype is in production service running several
applications at UC Berkeley, including TranSend and Top Gun Wingman.
We discuss related work in section \ref{related}, and attempt to draw
some lessons from our experience and guidelines for future research in
a129 9

% The lower layer handles scalability, availability, load
% balancing, support for bursty offered load, and system monitoring and
% visualization, while the middle layer provides extensible support for
% caching, transformation among MIME types, aggregation of information
% from multiple sources, and personalization of the service for each of a
% large number of users (mass customization). The top layer allows
% composition of transformation and aggregation into a specific service,
% such as accelerated Web browsing or a search engine.
@


1.6
log
@*** empty log message ***
@
text
@d45 7
a51 1
client capabilities.
@


1.5
log
@*** empty log message ***
@
text
@d27 4
a30 4
ability to handle specific data encodings, e.g., GIF, Post Script, or
MPEG. High-volume devices such as smart phones [30] and smart two-way
pagers will soon constitute an increasing frac tion of Internet clients,
making the variation even more pro nounced.  These conditions make it
d32 2
a33 2
for every client. For example, PDA's with wireless LAN adapters enjoy
reasonable bandwidth but have low-quality displays. Full-featured
d39 5
a43 5
The disparities in bandwidth, computation power, and display quality between
high-end and low-end Internet clients span several orders of magnitude,
making them
too large to hide at the network level (see
\ref{table:hetero}).  Application-level adaptation is required to
d47 37
a83 35
\begin{tabular}{||c||c|c|c|c||}\hline
\label{table:hetero}
{\textbf Device} & {\textbf CPU} & {\textbf RAM} & {\textbf
Typ. bandwidth (bits/s)} & {\textbf Display}  \\ \hline

Nokia 9000 Smart Cellular Phone
& Intel 80186-class
& 2-4 MB
& 9600
& $640 \times 240 \times 2$ \\
\hline

USR PalmPilot w/wireless connection
& Motorola 68000 microcontroller 25MHz
& 2MB 
& 9600-19200
& $160 \times 160 \times 2$ \\
\hline


Midrange Laptop, Wireline or Wireless  Modem  
&  Intel Pentium 100 
&  16-32 MB
&  9600-56K
& $800 \times 600 \times 8$ \\
\hline


Desktop/server on LAN
&  Intel Pentium II 200-266
&  64-128 MB
&  10-100 Mb
& $1280 \times 1024 \times 16$ \\
\hline

d85 10
d96 2
d102 2
a103 1
existing content, is too valuable to waste.  ``Solutions'' that require
d128 1
a128 1
Network Computers [28] and suggest that collocating services with
d136 1
a136 1
However, network services remain difficult to deploy on such a scale
d175 1
a175 1
Web browser for the USR PalmPilot PDA.
d178 2
a179 2
highly-available cluster-based platform for running TACC services.  Our
prototype TACC server is in production service running several
d185 8
a192 8
The lower layer handles scalability, availability, load
balancing, support for bursty offered load, and system monitoring and
visualization, while the middle layer provides extensible support for
caching, transformation among MIME types, aggregation of information
from multiple sources, and personalization of the service for each of a
large number of users (mass customization). The top layer allows
composition of transformation and aggregation into a specific service,
such as accelerated Web browsing or a search engine.
@


1.4
log
@*** empty log message ***
@
text
@d47 1
a47 1
\begin{table}{||c||c|c|c|c||}
d50 1
a50 1
Typ. bandwidth (bits/s)} & {\textbf Display}  \\
d57 1
d64 2
d72 2
d80 2
d83 1
a83 1
\end{table}
@


1.3
log
@*** empty log message ***
@
text
@a23 2
\subsection{Heterogeneity}

d39 40
a78 1
\subsection{Rapid Prototyping and Incremental Deployment}
d94 5
a98 3
TBD: Rapid prototyping

\subsection{Application vs. Network Level Adaptation}
d100 1
a100 33
TBD:
Gap is too big to hide; examples of past attemps and current failures;
compression ratios of lossy vs lossless (semantic vs opaque)


\subsection{Economies of Centralized Services}

\begin{quotation}
One of the overall design goals is to create a computing 
system which is capable of meeting almost all of the 
requirements of a large computer utility. Such systems must 
run continuously and reliably 7 days a week, 24 hours a 
day\ldots and must be capable of meeting wide service 
demands.

Because the system must ultimately be comprehensive 
and able to adapt to unknown future requirements, its 
framework must be general, and capable of evolving over 
time.

\flushright{---Corbat\'o and Vyssotsky on Multics, 1965 [17]}
\end{quotation}

Although it is normally viewed as an operating system, Multics 
(Multiplexed Information and Computer Service) was originally 
conceived as an infrastructural computing service.  The
primary obstacle to deploying Multics was the absence of the net
work infrastructure, which is now in place.  Network applications 
have exploded in popularity in part because they are easier to manage
and evolve than their desktop application counterparts: they 
eliminate the need for software distribution, and simplify customer 
service and bug tracking by avoiding the difficulty of dealing with 
multiple platforms and versions. 
d102 1
a102 1
Also, basic queueing theory shows that a large central (virtual) server
a109 2
\subsection{Implementation Challenges}

d114 4
a117 4
However, network services remain difficult to deploy because of three
fundamental challenges: scalability, availability and cost
effectiveness.  By scalability, we mean that when the load offered to
the service increases, an incremental and linear increase in hardware
d132 3
a134 2
analysis, and implementation of a layered framework for building network
services that addresses this complexity.  New services can use this
d137 30
a166 4
being developed. The lower layer handles scalability, availability,
load balancing, support for bursty offered load, and system monitoring
and visualization, while the middle layer provides extensible support
for caching, transformation among MIME types, aggregation of information
@


1.2
log
@*** empty log message ***
@
text
@d68 1
a68 1
\begin{blockquote}
d82 1
a82 1
\end{blockquote}
@


1.1
log
@Initial revision
@
text
@d1 138
a138 2
% intro, motivation, etc; currently contains suitable material from the
% various existing papers and TACC stuff, to be woven into a nice intro
a139 36
The explosive growth of the Internet and the proliferation of 
smart cellular phones and handheld wireless devices is widening 
an already large gap between Internet clients. Clients vary in their 
hardware resources, software sophistication, and quality of con
nectivity, yet server support for client variation ranges from rela
tively poor to none at all. In this paper we introduce some design 
principles that we believe are fundamental to providing "meaning
ful" Internet access for the entire range of clients. In particular, we 
show how to perform on-demand datatype-specific lossy compres
sion on semantically typed data, tailoring content to the specific 
constraints of the client. We instantiate our design principles in a 
proxy architecture that further exploits typed data to enable appli
cation-level management of scarce network resources. Our proxy 
architecture generalizes previous work addressing all three aspects 
of client variation by applying well-understood techniques in a 
novel way, resulting in quantitatively better end-to-end perfor
mance, higher quality display output, and new capabilities for low-
end clients.

Introduction

The current Internet infrastructure includes an extensive range 
and number of clients and servers. Clients vary along many axes, 
including screen size, color depth, effective ba

1.1.1.1
log
@Client and Network Adaptation paper for IEEE Pers Comms special issue,
to be submitted 2/98
@
text
@@
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           mbryonic. 
We plan to develop it into a well-d