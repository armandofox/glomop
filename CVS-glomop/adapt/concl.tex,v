head	1.12;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.12
date	98.03.02.01.49.11;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	98.03.01.02.27.44;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	98.03.01.00.52.06;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	98.02.28.22.29.53;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	98.02.28.04.46.43;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	98.02.28.03.24.28;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	98.02.28.02.22.17;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	98.02.26.18.06.52;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	98.02.19.23.33.44;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	98.02.18.09.15.40;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	98.02.18.03.05.13;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.02.15.24;	author fox;	state Exp;
branches;
next	;


desc
@@


1.12
log
@first draft sent to Richard LaMaire
@
text
@\section{Lessons and Conclusions}
\label{concl}

We proposed three design principles for adapting to network and client
variation and delivering a meaningful Internet experience to
impoverished clients:  datatype-specific distillation and refinement,
adaptation on demand, and moving complexity into the infrastructure.  
We also offered a high-level description of the TACC programming model
(transformation, aggregation, caching, customization) that we have
evolved for building adaptive applications, and presented measurements
of our scalable, highly-available, cluster-based TACC server
architecture, focusing on the TranSend web accelerator application.
Finally, we described other applications we have built that are in daily
use, including some that push the limits of client adaptation (such as
Top Gun Wingman and Top Gun Mediaboard).
In this section we try to draw some lessons from what we have learned
from building these and similar applications and experimenting with our
framework.

Aggressively pushing the adaptation-by-proxy model to its limits, as we
have tried to do with Top Gun Wingman and Top Gun Mediaboard, has helped
us validate the proxy-interposition approach for serving thin clients.
Our variation on the theme of application partitioning has been to split
the application between the client and the proxy, rather than between
the client and the server.  This has allowed our clients to access
existing content with no server modifications.  Our guideline for
partitioning applications has been to allow the client to perform those
tasks it does well in native code, and move as much as possible of the
remaining work to the proxy.  For example, since most thin clients
support some form of toolkit for building graphical interfaces, sending
HTML markup is too cumbersome for the client, but sending screen-sized bitmaps is
unnecessarily cumbersome for the proxy.

A frequent objection raised against our  partitioning approach is that
it requires that the proxy service be available at all times, which is
more difficult than simply maintaining the reliability of a bank of
modems and routers.  This observation motivated our work on the
cluster-based scalable and highly-available server platform described in
section \ref{scaling}, and in fact the
TranSend and Wingman proxy services have been running for several months
at UC Berkeley with high stability, except for a two-week period in
February 1998 when the cluster was affected by an OS upgrade.
Other than one part-time undergraduate
assistant, the cluster manages itself, yet
thousands of users have come to rely on its stability for using Top Gun
Wingman, validating the efficacy of our cluster platform.  This
observation, combined with the current trends toward massive
cluster-based applications such as HotBot \cite{hotbot}, suggests to us
that the adaptive proxy style of adaptation will be of major importance
in serving convergent ``smart phone''-like devices.

%\subsection{User Interfaces}

%The proxy-based approach for thin clients introduces at least two sets
%of UI challenges.  First, as is well known, thin-client UI's tend to be
%much more limited than those of their desktop counterparts, and desktop
%idioms often do not translate well.  (On a pen-based device, there is no
%equivalent of ``click the right-hand mouse button.'')  Second, proxy
%services are unique in that they are {\em orthogonal} to the content
%being viewed, rather than being integrated into it.  For example, the
%ability to refine images should be available on {\em any} page being viewed.
%This requires a set of orthogonal UI extensions for interaction with the
%proxy, distinct from those UI behaviors that interact with origin
%servers (such as clicking on a link to follow it).  We describe our
%experience with orthogonal UI extensions on the desktop in \cite{uist97}
%and on handheld devices such as the PalmPilot in \cite{topgunwingman}.

%  
%  i feel like the foll. section is important but i can't get it to say
%  something i'm really happy with.
%

% \subsubsection{Incremental Deployment and Narrow API's}

% Because TranSend requires neither client changes nor server
% changes for Web acceleration and Wingman interoperates seamlessly with
% existing servers, both have been adopted enthusiastically and enjoyed
% magnified impact.  Internally, the TACC API's for building applications
% are simple enough to encourage packaging off-the-shelf code into TACC
% workers, and our TACC platform's fast prototyping ability (C, Perl,
% Java, and Tcl are all supported as prototyping languages) has encouraged
% rapid creation of a variety of simple but useful services \cite{cs294}.


% talk about badri stuff here
% narrow API's, extensibility, modularity

% \subsubsection{Future Issues}

% caching with alternates
% xml, hdml, etc

\section{Acknowledgments}
 
This project has benefited from the detailed and perceptive comments of
countless anonymous reviewers, users, and collaborators.  Ken Lutz and
Eric Fraser configured and administered the test network on which the
TranSend scaling experiments were performed.  Cliff Frost of the UC
Berkeley Data Communications and Networks Services group allowed us to
collect traces on the Berkeley dialup IP network and has worked with us
to deploy and promote TranSend within UC Berkeley.  Undergraduate
researchers Anthony Polito, Benjamin Ling, Andrew Huang, David Lee, and
Tim Kimball
helped implement
various parts of TranSend and Top Gun Wingman.
Ian Goldberg and David Wagner helped us debug TranSend, especially
through their implementation of the Anonymous Rewebber \cite{TAZ_97}, and Ian
implemented major parts of the client side of Top Gun Wingman, especially
the 2-bit-per-pixel hacks.  Paul
Haeberli of Silicon Graphics contributed image processing code for
Top Gun Wingman.  Murray Mazer at the Open Group Research Institute
has provided much useful insight on the
structure of Internet applications and future extensions of this work.
We also thank the patient students of UCB Computer Science 294--6, {\em
Internet Services}, Fall 97, for being the first real outside developers
on our TACC platform and greatly improving the quality of the software
and documentation.

We have received much valuable feedback from our UC Berkeley colleagues, 
especially David Culler, Eric Anderson, Trevor Pering, Hari
Balakrishnan, Mark Stemm, and 
Randy Katz.  This research is supported by DARPA contracts 
\#DAAB07-95-C-D154 and \#J-FBI-93-153, the California MICRO 
program, the UC Berkeley Chancellor's Opportunity Fellowship, 
the NSERC PGS-A fellowship, Hughes Aircraft Corp., and Metricom Inc.

@


1.11
log
@More tersification.
@
text
@a19 2
\subsection{Proxy-Based Application Partitioning}

d31 2
a32 2
HTML markup is too cumbersome for the client, but sending bitmaps is
unnecessarily inefficient for the proxy.
d34 1
a34 1
A frequent objection raised against our approach to partitioning is that
d39 1
a39 1
section \ref{scaling} (and in detail in \cite{sosp16}), and in fact the
d93 1
a93 1
\subsection{Acknowledgments}
d111 2
a112 1
Top Gun Wingman.  Murray Mazer has provided much useful insight on the
@


1.10
log
@*** empty log message ***
@
text
@d54 1
a54 1
\subsection{User Interfaces}
d56 13
a68 13
The proxy-based approach for thin clients introduces at least two sets
of UI challenges.  First, as is well known, thin-client UI's tend to be
much more limited than those of their desktop counterparts, and desktop
idioms often do not translate well.  (On a pen-based device, there is no
equivalent of ``click the right-hand mouse button.'')  Second, proxy
services are unique in that they are {\em orthogonal} to the content
being viewed, rather than being integrated into it.  For example, the
ability to refine images should be available on {\em any} page being viewed.
This requires a set of orthogonal UI extensions for interaction with the
proxy, distinct from those UI behaviors that interact with origin
servers (such as clicking on a link to follow it).  We describe our
experience with orthogonal UI extensions on the desktop in \cite{uist97}
and on handheld devices such as the PalmPilot in \cite{topgunwingman}.
@


1.9
log
@*** empty log message ***
@
text
@d20 1
a20 1
\subsection{Lessons}
d22 63
a84 1
\subsubsection{Thin Client Adaptation Validated}
d87 2
a88 1
caching with alternates
d90 1
a90 17
\subsubsection{Application Partitioning}

thin clients are tricky, partitioning is good, TACC provides a good
guideline (exploit good stuff on client, everything else to proxy)
concept/motivation; guidelines provided by adaptation (from my rsch
stmt); UI extensions/orthogonalization; effect on performance;
comparison to ``naive'' schemes such as X

\subsubsection{Incremental Deployment and Narrow API's}

talk about badri stuff here
narrow API's, extensibility, modularity

\subsubsection{Future Issues}

caching with alternates
xml, hdml, etc
d92 2
d104 2
a105 1
researchers Anthony Polito, Benjamin Ling, Andrew Huang, and David Lee
@


1.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
\section{Conclusions (from SOSP-16)}
d4 15
a18 26
We proposed a layered architecture for cluster-based scalable 
network services.  We identified challenges of cluster-based com
puting, and showed how our architecture addresses these chal
lenges.  The architecture is reusable: authors of new network 
services write and compose stateless workers that transform, aggre
gate, cache, and customize (TACC) Internet content, but are 
shielded from the software complexity of automatic scaling, high 
availability, and failure management.  We argued that a large class 
of network services can get by with BASE, a weaker-than-ACID 
data semantics that results from the combination of trading consis
tency for availability and exploiting soft state for performance and 
failure management.
We discussed in depth the design and implementation of two 
cluster-based scalable network services: the TranSend distillation 
Web proxy and the HotBot search engine.  Using extensive client 
traces, we conducted detailed performance measurements of 
TranSend.  While gathering these measurements, we scaled 
TranSend up to 10 Ultra-1 workstations serving 159 web requests 
per second, and demonstrated that a single such workstation is suf
ficient to serve the needs of the entire 600 modem UC Berkeley 
dialup IP bank.  
Since the class of cluster-based scalable network services we 
have identified can substantially increase the value of Internet 
access to end users while remaining cost-efficient to deploy and 
administer, we believe that cluster-based value-added network ser
vices will become an important Internet-service paradigm.  
d22 3
d27 2
d35 3
d40 6
d47 22
a68 21

This paper, and the GloMop research project in general, have benefited
from the detailed and perceptive comments of anonymous reviewers, users, and
collaborators.  Ken Lutz and Eric Fraser
configured and administered the test network on which the TranSend
scaling experiments were performed.  Cliff Frost of the UC Berkeley Data
Communications and Networks Services group allowed us to collect traces
on the Berkeley dialup IP network and has worked with us to deploy and
promote TranSend within Berkeley.  Undergraduate researchers Anthony
Polito, Benjamin Ling, and Andrew Huang implemented various parts of
TranSend's user profile database and user interface.  Ian Goldberg and
David Wagner helped us debug TranSend, especially through their
implementation of the Anonymous 
Rewebber, and Ian implemented major parts of the
client side of Top Gun Wingman.  Paul Haeberli from Silicon Graphics
contributed image processing code for Top Gun Wingman.  Murray Mazer has
provided much useful insight on the structure of Internet applications
and future extensions of this work.  We also thank the patient students
of UCB Computer Science 294--6, {\em Internet Services}, Fall 97, for
being the first real outside developers on our TACC platform and 
greatly improving the quality of the software and documentation.
d71 2
a72 1
especially David Culler, Eric Anderson, Trevor Pering, Hari Balakrishnan, and 
@


1.7
log
@*** empty log message ***
@
text
@a42 27
\subsection{Documentation and Software Availability}

\subsection{Future Work}

TBD: fix all this, bring up to date with ProActive stuff or similar

Our past work on adaptation via distillation
[23,22] described how distillation could be dynamically tuned to match
the behavior of the user's network connection, and we have successfully
demon strated adaptation to network changes by combining our original
WWW proxy prototype with the Event Notification mechanisms developed by
Welling and Badrinath [4], and plan to leverage these mechanisms to
provide an adaptive solution for Web access from wireless clients.  We
have not investigated how well our proposed architecture works outside
the Internet-server domain.  In particular, we do not believe it will
work well for write-intensive services where the writes carry hard state
or where strong consistency is desired, such as commerce servers, file
systems, or online voting systems.  The programming model for TACC
services is still embryonic.  We plan to develop it into a well-defined
programming environ ment with an SDK, and we will encourage our
colleagues to author services of their own using our system.  Previous
research into operating systems support for busy Internet servers [32,
42] has identified inadequacies in OS imple mentations and the set of
abstractions available to applications.  We plan to investigate similar
issues related specifically to cluster- based middleware services, as
motivated by our observations in Section 4.4.

@


1.6
log
@*** empty log message ***
@
text
@d37 3
@


1.5
log
@*** empty log message ***
@
text
@d31 11
@


1.4
log
@*** empty log message ***
@
text
@d60 1
a60 2
collaborators.  David Culler provided interesting ideas on TACC's
potential as a model for cluster programming.  Ken Lutz and Eric Fraser
d69 2
a70 1
implementation of the rewebber, and Ian implemented major parts of the
d80 1
a80 1
especially Eric Anderson, Trevor Pering, Hari Balakrishnan, and 
@


1.3
log
@*** empty log message ***
@
text
@d2 1
d11 1
a11 1
availability, and failure management. We argued that a large class 
d20 1
a20 1
TranSend. While gathering these measurements, we scaled 
d29 1
a29 1
vices will become an important Internet-service paradigm. 
d43 1
a43 1
the Internet-server domain. In particular, we do not believe it will
d52 1
a52 1
abstractions available to applications. We plan to investigate similar
d59 1
a59 1
from the detailed and perceptive comments of our reviewers, users, and
d71 7
a77 1
client side of Top Gun Wingman.
d80 2
a81 2
especially Eric Anderson,Trevor Pering, Hari Balakrishnan, and 
Randy Katz. This research is supported by DARPA contracts 
a85 1
TBD: ack Murray Mazer, students of CS294-6, others?
@


1.2
log
@First pass over distill.tex - extracted out useful subsections, started
reformatting.  No images or tables or references yet.
@
text
@a0 1

d30 25
d60 1
a60 1
potential as a model for cluster programming. Ken Lutz and Eric Fraser
d62 1
a62 1
scaling experiments were performed. Cliff Frost of the UC Berkeley Data
d65 1
a65 1
promote TranSend within Berke ley. Undergraduate researchers Anthony
d67 1
a67 1
TranSend's user profile database and user interface. Ian Goldberg and
d69 2
a70 2
implemen tation of the rewebber.

d72 1
a72 1
We received valuable comments from our UC Berkeley colleagues, 
d79 1
a79 1
% need to ack Murray Mazer, students of CS294-6, others?
@


1.1
log
@Initial revision
@
text
@d51 1
a51 1
#DAAB07-95-C-D154 and #J-FBI-93-153, the California MICRO 
@


1.1.1.1
log
@Client and Network Adaptation paper for IEEE Pers Comms special issue,
to be submitted 2/98
@
text
@@
