head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     95.09.12.01.49.06;  author gribble;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     95.09.12.01.49.07;  author gribble;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*------------------------------------------------------------------------------
#
#	MailViewBox.c
#
#	 - MailViewBox is simply a box with a variable number of STFs and a couple of
#	   scroll arrows inside it - it implements a scrolling email message.
#
#	Version:	1						August 6th, 1995
#
------------------------------------------------------------------------------*/

/* Magic Cap System Software includes */
#include "Magic.h"
#include "Debug.h"
#include "Package.h"  

#include "MCindexicals.h"

/*** Note no main defined - is defined in MailClient.c  ***/

#undef CURRENTCLASS
#define CURRENTCLASS MailViewBox

Method void
MailViewBox_addMVBHeader(ObjectID self, ObjectID header_field, StringPtr header_label)
{
   Unsigned hfContH, selfContH, hfContW;
   Unsigned newH, newV, lowestV;
   Unsigned hf_H, hf_V;
   Dot      newCenter, soffS;
   ObjectID eleList;
   
   /* remember about MakeStorable if not using singlefield accessors */
   hfContH = ContentHeight(header_field);
   selfContH = ContentHeight(self);
   
   lowestV = Lowestbottom(self);
   lowestV += hfContH;
   lowestV += 8.0*256.0;
   SetLowestbottom(self, lowestV);
   ScrollOffset(self, &soffS);
   
   /* figure out new vertical center point of field to be added */
   selfContH = selfContH / 2.0;
   hfContH = hfContH / 2.0;
   hf_V = lowestV - selfContH - hfContH;
   
   /* and new horizontal center point */
   hfContW = ContentWidth(header_field);
   hfContW = hfContW / 2.0;
   hf_H = -139.5*256.0;
   hf_H = hf_H + hfContW;
   newCenter.h = hf_H;
   newCenter.v = hf_V;
      
   /* Add it, twiddle the label as needed */
   SwitchContainer(header_field, self);
   SetRelativeOrigin(header_field, &newCenter);
   showSTFlabel(header_field);
   setSTFlabel(header_field, header_label);

   /* Add the header_field to the elementList objectlist */
   eleList = ElementList(self);
   AddLast(eleList, header_field);
   
   DirtyContent(self);
}

Method void
MailViewBox_addMVBBody(ObjectID self, ObjectID body_field)
{
   Unsigned hfContH, selfContH, hfContW, selfContW;
   Unsigned newH, newV, lowestV;
   Unsigned hf_H, hf_V;
   Dot      newCenter, soffS;
   ObjectID eleList;
   
   /* remember about MakeStorable if not using singlefield accessors */
   hfContH = ContentHeight(body_field);
   hfContW = ContentWidth(body_field);
   selfContH = ContentHeight(self);
   selfContW = ContentWidth(self);
   
   lowestV = Lowestbottom(self);
   lowestV += hfContH;
   lowestV += 8.0*256.0;
   SetLowestbottom(self, lowestV);
   ScrollOffset(self, &soffS);
   
   /* figure out new vertical center point of field to be added */
   selfContH = selfContH / 2.0;
   hfContH = hfContH / 2.0;
   hf_V = lowestV - selfContH - hfContH;
   
   /* and new horizontal center point */
   hfContW = hfContW / 2.0;
   selfContW = selfContW / 2.0;
   hf_H = -selfContW + 5.0*256.0 + hfContW;
   newCenter.h = hf_H;
   newCenter.v = hf_V;
   
   /* Add it, twiddle the label as needed */
   SwitchContainer(body_field, self);
   SetRelativeOrigin(body_field, &newCenter);
   hideSTFlabel(body_field);
   setSTFlabel(body_field, "\pBody");
   
   /* Add the body_field to the elementList objectlist */
   eleList = ElementList(self);
   AddLast(eleList, body_field);
   
   DirtyContent(self);
}

Method void
MailViewBox_addMVBMime(ObjectID self, ObjectID mime_field)
{
   Unsigned selfContH, selfContW, hfContH, hfContW;
   Unsigned newH, newV, lowestV;
   Unsigned hf_H, hf_V;
   Dot      newCenter, soffS, contentSize;
   Box      theThickness;
   ObjectID eleList, newStamp;
   
   newStamp = NewNear(MVBstamp_, self, nil);
   SetImage(newStamp, mime_field);

   /* remember about MakeStorable if not using singlefield accessors */
   selfContH = ContentHeight(self);
   selfContW = ContentWidth(self);
   /*Thickness(mime_field, &theThickness);*/
   ContentSize(newStamp, &contentSize);
   hfContH = contentSize.h;
   hfContW = contentSize.v;
   
   Log(("Content size; %d by %d", contentSize.h, contentSize.v));
   
   /*hfContH = theThickness.bottom - theThickness.top;
   hfContW = theThickness.right - theThickness.left;*/
   lowestV = Lowestbottom(self);
   lowestV += hfContH;
   lowestV += 8.0*256.0;
   SetLowestbottom(self, lowestV);
   ScrollOffset(self, &soffS);
   
   /* figure out new vertical center point of field to be added */
   selfContH = selfContH / 2.0;
   hfContH = hfContH / 2.0;
   hf_V = lowestV - selfContH - hfContH;
   
   /* and new horizontal center point */
   /*hfContW = hfContW / 2.0;
   selfContW = selfContW / 2.0;
   hf_H = -selfContW + 5.0*256.0 + hfContW;
   newCenter.h = hf_H;*/
   newCenter.h = 0.0;
   newCenter.v = hf_V;
      
   /* Add it, twiddle the label as needed */
   SwitchContainer(newStamp, self);
   SetRelativeOrigin(newStamp, &newCenter);
   SetShowLabel(newStamp, false);
   
   DirtyContent(self);   
}

Method Unsigned
MailViewBox_getMVBNumHeaders(ObjectID self)
{
   /* Return number of headers (not including body field)    */
   /* For now, assume that MIME stuff is put in another list */
   
   ObjectID eleList, anElement;
   Unsigned numInList;
   int      i, res;
   char     elementName[256];
   
   eleList = ElementList(self);
   numInList = Length(eleList);
   
   if (numInList == 0)
      return 0;
   
   for (i = 1; i <= (int) numInList; i++)
   {
      anElement = At(eleList, (Unsigned) i);
	  GetName(anElement, (StringPtr) elementName);
	  res = StringCompare("\pBody", (StringPtr) elementName);
	  if (res == 0)
	  {
	     numInList = numInList - ( (Unsigned) 1.0 );
		 return numInList;
	  }
   }
   
   return numInList;
}

Method ObjectID
MailViewBox_getMVBHeader(ObjectID self, StringPtr header_label)
{
   ObjectID eleList, anElement;
   Unsigned numInList;
   int      i, res;
   char     elementName[256];
   
   eleList = ElementList(self);
   numInList = Length(eleList);
   
   if (numInList == 0)
      return nilObject;
   
   for (i = 1; i <= (int) numInList; i++)
   {
      anElement = At(eleList, (Unsigned) i);
	  GetName(anElement, (StringPtr) elementName);
	  res = StringCompare(header_label, (StringPtr) elementName);
	  if (res == 0)
	  {
         return anElement;
      }
   }
   
   return nilObject;
}

Method ObjectID
MailViewBox_getMVBHeaderNum(ObjectID self, Unsigned head_offset)
{
   ObjectID eleList, anElement;
   Unsigned numInList;
   
   eleList = ElementList(self);
   numInList = Length(eleList);
   
   if (numInList == 0)
      return nilObject;
   
   if (head_offset > numInList)
      return nilObject;

   if (head_offset < 0)
      return nilObject;
   
   anElement = At(eleList, head_offset);
   return anElement;
}

#undef CURRENTCLASS  /* this goes at the end of the file */
#define CURRENTCLASS MVBstamp

/** This class exists only to prevent the stamp's image from getting destroyed along with the stamp **/
Method void
MVBstamp_Finalize(ObjectID self)
{
   InheritedFinalize(self);
   SetImage(self, nilObject);
}

#undef CURRENTCLASS
@


1.1.1.1
log
@This directory contains source code for Magic Cap based programs, including
proxy aware clients.

@
text
@@
