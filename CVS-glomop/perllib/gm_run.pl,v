head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	96.03.20.23.38.27;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.03.09.23.49.04;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.03.06.04.44.23;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#
#  run.pl - run something through a distiller
#

require "/disks/barad-dur/now/pythia/release/perllib/gm_sock.pl";

package run;

$gListenport = 0;
$gHost = '';

sub init {
    srand(time);
    my $prog = shift ||
        '/disks/barad-dur/now/pythia/fox/work/gifmunch/gifmunch';
    my $port = shift || 32767+rand(32000);
    my $lis;
    
    my $arch = `uname` || `/bin/uname` || `/usr/ucb/uname` ||
        die "can't get archtype from uname";

    $lis = listensock gm_sock $port;
    $gListenport = $port+1;

    $gHost = `hostname` || `/usr/ucb/hostname` || `/bin/hostname` ||
        die "can't get hostname";

    warn "Spawning muncher...\n";

    chop $gHost;
    chop $arch;
    unless (fork()) {
        exec "${prog}.${arch} $gListenport $gHost $port";
        die "Exec failed: $!";
    }
    $SIG{INT} = "run::kill_muncher";
    warn "Waiting for birth...\n";
    my $l2 = $lis->acceptsock();
    my $birth;
    $birth .= $_ while $_=$l2->readsock();
    die "Bad msg: $birth\n"
        unless $birth =~ /svcadd\s+\S+\s+(\d+)/;
    $gListenport = $1;
    $gHost = ($l2->endpoints)[0];
    warn("Connected $gHost at $gListenport\n");
    $l2->closesock();
    return 1;
}


sub slurp {
    my $filename = shift;
    my $data;
    
    warn ("open file: $!"), return 0
        unless open(FH, $filename);
    $data .= $_ while ($_ = <FH>);
    close FH;
    warn ("Data is null!") unless $data;
    return ($data);
}

sub run {
    my ($params,$data) = @@_;
    my $output;
    
    my $nsock = connectsock gm_sock $gHost,$gListenport;

    warn ("connect: $!"), return undef unless $nsock;

    $nsock->writesock("d $params $data");
    return undef unless ($nsock->readsock());     # discard content-type line
    $output .= $_ while ($_ = $nsock->readsock_raw());
    $nsock->closesock();
    return $output;
}

sub kill_muncher {
    my $nsock = connectsock gm_sock $gHost,$gListenport;
    warn ("connect: $!"), return undef unless $nsock;
    $nsock->writesock("k k");
    $nsock->closesock();
    wait;
}

%gif = ();
sub gifattribs {
    my $f = shift;                          # gif data blob
    %gif = ();

    open(F, ">/tmp/attr$$"); print F $f; close F;
    my $z = `giftopnm /tmp/attr$$ | ppmtogif 2>&1`;
    unlink "/tmp/attr$$";
    $gif{colors} = $1 if $z =~ /(\d+)\s+colors/;
    $gif{size} = length($f);
    $gif{x} = ord(substr($f,6,1))+(ord(substr($f,7,1))<<8);
    $gif{y} = ord(substr($f,8,1))+(ord(substr($f,9,1))<<8);
    $gif{bpp} = 1+(ord(substr($f,10,1)) & 7);
    $gif{cr} = 1+(((ord(substr($f,10,1))) >> 4) & 7);
    $gif{h_0} = (-.08363 + 0.1841 * $gif{bpp});
    $gif{h} = $gif{size} / ($gif{x} * $gif{y});
    $gif{h_eff} = $gif{h} / $gif{h_0};
    return %gif;
}


1;

  
    
    
    
@


1.2
log
@bug fixes
@
text
@d13 1
a13 1
    my $port = 9000;
d16 1
d22 1
a22 4
    # find an unused port
    srand(time);
    #$port = 32767+rand(32000);
    $port++ until $lis = listensock gm_sock $port;
@


1.1
log
@added gm_run.pl, interface for talking to gifmuncher and getting gif stats
@
text
@d13 1
a13 1
    my $port = 8888;
d38 1
d80 8
d93 4
@
