head	1.4;
access;
symbols
	Yatin-final:1.4
	Yatin:1.4.0.2
	pre-yatin-merge:1.4
	transend-beta2:1.2
	fox-dev:1.2;
locks; strict;
comment	@# @;


1.4
date	97.09.12.03.13.50;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.09.06.01.08.56;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.06.23.10.24.21;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.06.23.04.06.48;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Optimizations to Pilot distiller:
- 'wx' and 'string_width' optimized, since profiler indicated a lot of
time was being spent there.
- postprocessed images are now cached during processing of the same
page, so addditional instances of an inline image are free.
- Clib_Async_Fetch is now used in the distiller to prefetch images, so
they'll be in the cache when we're ready to distill them.
Also: added 'canonicalize' routine (to TACCutils) for canonicalizing
relative urls, fixed some perl warnings in PilotFonts and SimpleFont.
@
text
@#  -*- perl -*-
#
#  Simple font metrics for Pilot
#

package PilotFonts;
require Exporter;
require SimpleFont;

@@ISA = qw(Exporter SimpleFont);

%fontID = ('stdFont' =>  0x2328,
           'boldFont' => 0x2329,
           'largeFont' => 0x232a,
           'symbolFont' => 0x232b,
           'symbol11Font' => 0x232c,
           'symbol7Font' => 0x232d,
           'ledFont' => 0x232e,
           );
              
@@EXPORT = (keys (%fontID));

sub init_fonts {
    my $fontDir = shift;

    die "Cannot locate Pilot fonts in directory '$fontDir'\n"
        unless -d $fontDir && -r $fontDir;

    foreach $fnt (@@EXPORT) {
        my ($buf,$i);
        my @@wx;
        for (0..255) { undef $wx[$_]};
        $buf = '';
        open(F, sprintf("$fontDir/NFNT%04x.bin", $fontID{$fnt}))
            or die $!;
        while(<F>) { $buf .= $_ };
        close F;

        #  font header
        my ($type, $first, $last, $maxwidth, $kernmax, $descent, 
            $fwidth, $fheight, $offset, $ascender, $descender,
            $leading, $rowwords) = unpack("n13", $buf);
        $buf = substr($buf, 26);

        $last++;   

        # skip font data
        $buf = substr($buf, $rowwords*2*$fheight);

        # offset table
        for $i ($first..$last+1) {
            $pos[$i] = unpack("n", $buf);
            $buf = substr($buf, 2);
            #  pint "$i $pos[$i]\n";
        }

        # width table
        for $i ($first..$last+1) {
            ($offset[$i], $wid) = unpack("cc", $buf);
            $wx[$i] = $wid unless $wid==-1;
            $buf = substr($buf, 2);
            #  print "$i $offset[$i] $width[$i]\n";
        }

        # set remaining width table entries for ISO-8859-1 to width of slug
        for (0..255) {
            $wx[$_] = $wx[$last+1] unless defined $wx[$_];
        }
        $#wx = 255;
        $$fnt = new SimpleFont ($type, $first, $last, $maxwidth, $kernmax, $descent, 
                                $fwidth, $fheight, $offset, $ascender, $descender,
                                $leading, $rowwords, \@@wx);
    }
    1;
}

1;

@


1.3
log
@Removed compile time dependencies: proxy.home and proxy.perlmod are now
config file options, so perl_stub doesn't need to know them at compile
time (it constructs the -I path at runtime from the options file
values).  Options_Find() has been exported to Perl (in
clib.xs) and is emulated for the harness (in clib.pm).  pilotFonts
directory was added for wingman distiller.  PilotFonts module now has an
explicit init_fonts() call that supplies the dir name containing the
pilot fonts.  Added documentation to clib.pm, TACCutils.pm,
PilotFonts.pm and SimpleFont.pm.  removed all path-related dependencies
in existing distillers and unpack_tstr.pl, and added font path error
checking to layout.tcl
@
text
@d30 1
a30 1
        my ($buf,$last,$i);
@


1.2
log
@*** empty log message ***
@
text
@a11 2
$fontDir = '/home/fox/pilot/font';          # BUG::

d23 2
a24 27
foreach $fnt (@@EXPORT) {
    my ($buf,$last,$i);
    my @@wx;
    for (0..255) { undef $wx[$_]};
    $buf = '';
    open(F, sprintf("$fontDir/NFNT%04x.bin", $fontID{$fnt}))
        or die $!;
    while(<F>) { $buf .= $_ };
    close F;

    #  font header
    my ($type, $first, $last, $maxwidth, $kernmax, $descent, 
        $fwidth, $fheight, $offset, $ascender, $descender,
        $leading, $rowwords) = unpack("n13", $buf);
    $buf = substr($buf, 26);

    $last++;   

    # skip font data
    $buf = substr($buf, $rowwords*2*$fheight);

    # offset table
    for $i ($first..$last+1) {
        $pos[$i] = unpack("n", $buf);
        $buf = substr($buf, 2);
        #  pint "$i $pos[$i]\n";
    }
d26 2
a27 7
    # width table
    for $i ($first..$last+1) {
        ($offset[$i], $wid) = unpack("cc", $buf);
        $wx[$i] = $wid unless $wid==-1;
        $buf = substr($buf, 2);
        #  print "$i $offset[$i] $width[$i]\n";
    }
d29 44
a72 3
    # set remaining width table entries for ISO-8859-1 to width of slug
    for (0..255) {
        $wx[$_] = $wx[$last+1] unless defined $wx[$_];
d74 1
a74 4
    $#wx = 255;
    $$fnt = new SimpleFont ($type, $first, $last, $maxwidth, $kernmax, $descent, 
                            $fwidth, $fheight, $offset, $ascender, $descender,
                            $leading, $rowwords, \@@wx);
d76 1
a76 1
    
@


1.1
log
@*** empty log message ***
@
text
@d7 2
a8 1
use SimpleFont;
@
