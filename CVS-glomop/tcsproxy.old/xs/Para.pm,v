head	1.9;
access;
symbols
	Yatin-final:1.9
	Yatin:1.9.0.2
	pre-yatin-merge:1.9
	transend-beta2:1.7
	fox-dev:1.7;
locks; strict;
comment	@# @;


1.9
date	97.11.09.22.16.24;	author iang;	state Exp;
branches;
next	1.8;

1.8
date	97.08.27.19.52.02;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.07.10.23.52.02;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	97.06.23.10.24.20;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.06.23.08.48.57;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.06.23.04.06.07;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	97.06.23.01.59.01;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.06.22.18.31.07;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.06.19.00.27.17;	author fox;	state Exp;
branches;
next	;


desc
@@


1.9
log
@server-side imagemaps
@
text
@# -*- perl -*-

require "util.pl";
        
package Para;
require Exporter;
@@ISA = qw(Exporter);

&util::instvars('Para', qw(font otext flags text width height x y
                           link link_alt serv_x serv_y));

@@EXPORT = qw($F_BOLD
             $F_ITALIC
             $F_UNDERLINE
             $F_SIZE0
             $F_SIZE1
             $F_SIZE2
             $F_SIZE3
             $F_IMAGE
	     $F_IMAGE_2BIT
	     $F_IMAGE_HAS_SERV_SIZE
	     $F_IMAGE_ISMAP
             $F_LINK
             $F_LINE
             $F_LINK_ALT
             $F_NEWLINE
             );

# font attributes
$F_BOLD =       0x0001;
$F_ITALIC =     0x0002;
$F_UNDERLINE =  0x0004;
$F_SIZE0 =      0x0000;
$F_SIZE1 =      0x0008;
$F_SIZE2 =      0x0010;
$F_SIZE3 =      0x0018;
$F_IMAGE =      0x0020;
$F_IMAGE_2BIT = 0x0001;
$F_IMAGE_HAS_SERV_SIZE = 0x0002;
$F_IMAGE_ISMAP = 0x0004;
$F_LINK  =      0x0040;
$F_LINE  =      0x0080;
$F_LINK_ALT =   0x0100;
$F_NEWLINE =    0x8000;

sub numlines {
    my $para = shift;
    my $t= $para->text;
    return scalar grep(/\n/s, $t);
}

sub flags_set {
    my($self,$newflag) = @@_;
    return ($self->{'flags'} |= 0+$newflag);
}

sub flags_clear {
    my($self,$newflag) = @@_;
    return ($self->{'flags'} &= ~(0+$newflag));
}    

sub new {
    my($class,$fontmetrix) = @@_;
    bless  {
        "font" => $fontmetrix,
        "otext" => '',
        "flags" => 0,
        "text" => '',
        "width" => 0,
        "height" => 0,
        "x" => 0,
        "y" => 0,
        "link" => undef,
        "link_alt" => undef,
	"serv_x" => 0,
	"serv_y" => 0,
    }, $class;
}

sub clone {
    my %newself = %{shift @@_};
    bless(\%newself, 'Para');
    return \%newself;
}

sub len {
    return length(shift->otext);
}

sub lastlinewidth {
    my $self = shift;
    my $lastline = $self->text;
    $lastline =~ m/[^\n]*$/;
    return length($&);
}

sub add {
    my ($self,$str) = @@_;
    $self->{'otext'} .= $str;
}

sub close {
    my ($self) = shift;
    #my @@lines = $self->split_string;
    #return ($self->{'text'} = join("\n", @@lines));
}

@


1.8
log
@Added refinement ("get original") functionality to transend.text.piml;
the ALT_LINK field is now filled in with a magic URL which, when
retrieved, should cause the refined image to be delivered at the maximum
screen width.  Also, the LINK flag is turned off for imagemaps so that
users can't click thru the imagemap, at least until we have imagemaps
working.  Flag definitions in Para.pm are now consistent with new LINE
and ALT_LINK fields; the NEWLINE flag (used internally by the distiller)
was redefined since it was colliding with a client-specific flag called
LINE.  Changed unpack_tstr.pl to understand ALT_LINK in the data
format.  Added the magic-URL-manipulation function to TACCutils.pm since
several distillers will be using it.
@
text
@d10 1
a10 1
                           link link_alt));
d19 4
a22 1
             $F_BITMAP
d37 4
a40 1
$F_BITMAP =     0x0020;
d75 2
@


1.7
log
@*** empty log message ***
@
text
@d9 2
a10 1
&util::instvars('Para', qw(font otext flags text width height x y link));
d21 2
d36 3
a38 1
$F_NEWLINE =    0x0080;
d68 1
@


1.6
log
@*** empty log message ***
@
text
@d9 1
a9 1
&util::instvars('Para', qw(font otext flags text width height x y));
d62 1
@


1.5
log
@*** empty log message ***
@
text
@d6 1
d20 1
a20 1
             $F_NEWPAR
d33 1
a33 1
$F_NEWPAR =     0x0080;
d52 1
a52 1
    my($class,$fontmetrix,$width,$x,$y) = @@_;
d58 1
a58 1
        "width" => 0+$width,
d60 2
a61 2
        "x" => $x,
        "y" => $y,
@


1.4
log
@*** empty log message ***
@
text
@d8 1
a8 1
&util::instvars('Para', qw(font otext flags text width x y));
@


1.3
log
@*** empty log message ***
@
text
@d19 1
d32 1
a32 20

sub split_string {
    my ($para) = shift;
    my $str = $para->otext;
    my $fontmetrics = $para->font;
    my $boxwidth = $para->width;

    # if this is a Font object, get the char widths hashtable.
    # Otherwise, if it's a hash reference, this *is* that hashtable.
    # Otherwise, it's a number: the width of each char in the fixed width font.
    my $charwidths;
    if (ref($fontmetrics) eq 'Font::AFM') {
        $charwidths = $fontmetrics->Wx;
    } elsif (ref($fontmetrics) eq 'HASH') {
        $charwidths = $fontmetrics;
    } else {
        return ($para->split_string_fixedfont);
    }
    die;
}
d65 3
a67 2
    my $self = shift;
    return new Para ($self->font, $self->width, $self->x, $self->y);
a78 4
}

sub origtext {
    return shift->{'otext'};
@


1.2
log
@*** empty log message ***
@
text
@d16 4
a19 1
             $F_SIZE3);
d29 2
a57 26
sub split_string_fixedfont {
    my ($para) = shift;
    my $str = $para->otext;
    my $width = $para->font;
    my $boxwidth = $para->width;

    my @@lines = ();
    
    my $nchars = int($boxwidth/$width) - 1 - length($LINEBEGIN);
    if ($nchars < 1) {
        return ();
    }
    my $regex1 = ".{1,$nchars}";
    my $regex2 = ".{1,$nchars}[-\\s]+";
    my $match;
    my $newstr = '';
    
    while(length($str) > $nchars
          && (($str =~ s/$regex2//s)
              || ($str =~ s/$regex1//s))) {
        push(@@lines, $LINEBEGIN . $&);
    }
    push(@@lines, $LINEBEGIN . $str) if (length($str) > 0);
    return @@lines;
}

d109 2
a110 2
    my @@lines = $self->split_string;
    return ($self->{'text'} = join("\n", @@lines));
@


1.1
log
@changes and additions to transend.text.piml (pilot markup language html
distiller).  commented the ARGS.h file for distillers.  distillers now
only observe Quality arg if it has a reasonable value.  Changes to main
prefs to make values of FRONT_SHOW_ICON arg agree with perl html distiller.
@
text
@d8 1
a8 1
&util::instvars('Para', qw(font otext flags text width));
d47 6
d90 1
a90 1
    my($class,$fontmetrix,$width) = @@_;
d97 3
d101 16
@
