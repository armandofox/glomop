head	1.18;
access;
symbols
	Yatin-final:1.17.2.1
	Yatin:1.17.0.2
	pre-yatin-merge:1.17
	transend-beta2:1.9
	fox-dev:1.9
	transend-beta-latest:1.4
	Aggregators:1.4
	NoAggregators:1.4
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.18
date	98.01.16.22.16.36;	author yatin;	state Exp;
branches;
next	1.17;

1.17
date	97.10.25.22.57.02;	author gribble;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	97.10.18.00.26.51;	author iang;	state Exp;
branches;
next	1.15;

1.15
date	97.09.26.01.43.52;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	97.09.24.02.06.26;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	97.09.24.00.14.47;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	97.09.22.20.33.41;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	97.09.12.01.57.40;	author gribble;	state Exp;
branches;
next	1.10;

1.10
date	97.09.06.01.08.59;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.07.24.03.19.09;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	97.07.11.22.15.11;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	97.07.02.01.46.33;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.06.23.10.24.23;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	97.06.12.18.31.56;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	97.05.15.06.11.29;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.05.11.10.25.35;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	97.05.11.03.04.00;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.05.10.07.17.21;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.10.07.17.21;	author fox;	state Exp;
branches;
next	;

1.17.2.1
date	97.12.01.22.19.40;	author iang;	state Exp;
branches;
next	;


desc
@@


1.18
log
@- new wingman frontend
- new wingman aggregators mechanism
- DistillAsync

(merged from branch Yatin-final)
@
text
@/* hey emacs, this is a -C- file */
#include "clib.h"
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "proxyinterface.h"

static MonitorClientID mon = NULL;

/* Re-ifdef the following lines to allow "standalone" testing with perl -de 0 */
#if 0
gMon = NULL; 
const char *Options_Find(Options w,const char *x) { return NULL; } 
#endif

static int
not_here(s)
char *s;
{
    croak("%s not implemented on this architecture", s);
    return -1;
}

static double
constant(name, arg)
char *name;
int arg;
{
    errno = 0;
    switch (*name) {
    case 'A':
	break;
    case 'B':
	break;
    case 'C':
	if (strEQ(name, "CLIB_ACCESS_DENIED"))
#ifdef CLIB_ACCESS_DENIED
	    return CLIB_ACCESS_DENIED;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_BAD_URL"))
#ifdef CLIB_BAD_URL
	    return CLIB_BAD_URL;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_BAD_VERSION"))
#ifdef CLIB_BAD_VERSION
	    return CLIB_BAD_VERSION;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_CACHE_HIT"))
#ifdef CLIB_CACHE_HIT
	    return CLIB_CACHE_HIT;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_CACHE_MISS"))
#ifdef CLIB_CACHE_MISS
	    return CLIB_CACHE_MISS;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_CONFIG_ERROR"))
#ifdef CLIB_CONFIG_ERROR
	    return CLIB_CONFIG_ERROR;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_H"))
#ifdef CLIB_H
	    return CLIB_H;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_NO_CONFIGFILE"))
#ifdef CLIB_NO_CONFIGFILE
	    return CLIB_NO_CONFIGFILE;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_NO_FD"))
#ifdef CLIB_NO_FD
	    return CLIB_NO_FD;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_NO_SERVERS"))
#ifdef CLIB_NO_SERVERS
	    return CLIB_NO_SERVERS;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_NO_SUCH_PART"))
#ifdef CLIB_NO_SUCH_PART
	    return CLIB_NO_SUCH_PART;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_OK"))
#ifdef CLIB_OK
	    return CLIB_OK;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_PTHREAD_FAIL"))
#ifdef CLIB_PTHREAD_FAIL
	    return CLIB_PTHREAD_FAIL;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_SERVER_DOWN"))
#ifdef CLIB_SERVER_DOWN
	    return CLIB_SERVER_DOWN;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_SERVER_INTERNAL"))
#ifdef CLIB_SERVER_INTERNAL
	    return CLIB_SERVER_INTERNAL;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_SERVER_TIMEOUT"))
#ifdef CLIB_SERVER_TIMEOUT
	    return CLIB_SERVER_TIMEOUT;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_SERVICE_UNAVAIL"))
#ifdef CLIB_SERVICE_UNAVAIL
	    return CLIB_SERVICE_UNAVAIL;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_SOCKETOP_FAIL"))
#ifdef CLIB_SOCKETOP_FAIL
	    return CLIB_SOCKETOP_FAIL;
#else
	    goto not_there;
#endif
	if (strEQ(name, "CLIB_TIMEOUT"))
#ifdef CLIB_TIMEOUT
	    return CLIB_TIMEOUT;
#else
	    goto not_there;
#endif
	break;
    case 'D':
	break;
    case 'E':
	break;
    case 'F':
	break;
    case 'G':
	break;
    case 'H':
	break;
    case 'I':
	break;
    case 'J':
	break;
    case 'K':
	break;
    case 'L':
	break;
    case 'M':
	break;
    case 'N':
	break;
    case 'O':
	break;
    case 'P':
	break;
    case 'Q':
	break;
    case 'R':
	break;
    case 'S':
	break;
    case 'T':
	break;
    case 'U':
	break;
    case 'V':
	break;
    case 'W':
	break;
    case 'X':
	break;
    case 'Y':
	break;
    case 'Z':
	break;
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}



MODULE = clib       PACKAGE = clib

double
constant(name,arg)
	char *		name
	int		arg

Argument
make_argument(type,id,val)
        char            type
        unsigned long   id
        SV*             val
        CODE:
        Zero(&RETVAL,1,Argument);
        RETVAL.id = id;
        if (type == 's' || type == 'S') {
          RETVAL.type = typeString;
          SET_ARG_STRING(RETVAL, SvPV(val,na));
        } else if (type == 'i' || type == 'I') {
          RETVAL.type = typeInt;
          SET_ARG_INT(RETVAL, SvIV(val));
        } else if (type == 'f' || type == 'F') {
          RETVAL.type = typeDouble;
          SET_ARG_DOUBLE(RETVAL, SvNV(val));
        } else {
          /* bleah! */
          croak("make_argument: Legal argument types are s,i,f (you said: '%c')",
                type);
        }
        OUTPUT:
        RETVAL

int
InitializeDistillerCache()
        CODE:
        RETVAL = (int)InitializeDistillerCache(Options_DefaultDb(),
                                               MonitorClientUnitID(DistillerGetMonitorClientID()));
        if (RETVAL == gm_True) {
          RETVAL = 1;
          WaitForPTM();
        } else {
          RETVAL = 0;
        }
        OUTPUT:
        RETVAL
        
int
Distill(mimeType,distType,inputHdrs,inputData,...)
	char *	mimeType
	char *	distType
	SV *	inputHdrs
	SV *	inputData
	PROTOTYPE: $$$$@@
        PREINIT:
        Argument arglist[MAX_ARGS];
        const int REQUIRED_ARGS = 4; /* must match #of args in XS decl above */
        int nargs = 0;
        C_DistillerType dType;
        DistillerInput din;
        DistillerOutput dout;
        DistillerStatus result;
        int len;
        PPCODE:
        Zero(&din,1,DistillerInput);
        Zero(&dout,1,DistillerOutput);
        Zero(&dType,1,C_DistillerType);
        Zero(arglist,MAX_ARGS,Argument);
        /* grab all the arguments */
        while (items > REQUIRED_ARGS  &&  nargs < MAX_ARGS) {
          items--;
          arglist[nargs] = *((Argument *)SvPV(ST(items), na));
          /*
          fprintf(stderr, "Arg type=%c id=%d\n",
                  (ARG_TYPE(arglist[nargs]) == typeInt? 'i'
                   : ARG_TYPE(arglist[nargs]) == typeDouble? 'f'
                   : ARG_TYPE(arglist[nargs]) == typeString? 's'
                   : 'x'), ARG_ID(arglist[nargs]));
           */
          nargs++;
        }
        /*  fprintf(stderr,"nargs is %d\n",nargs); */
        /* set distiller type */
        SET_DISTILLER_TYPE(dType,distType);
        /* pack input mime type, metadata and data */
        SetMimeType(&din,mimeType);
        SetData(&din, SvPV(inputData,len));
        SetDataLength(&din, len);
        SetMetadata(&din, SvPV(inputHdrs,len));
        SetMetadataLength(&din, len);
        /* do distillation... */
        result = Distill(&dType, arglist, nargs, &din, &dout);
        /* if success: push result code, metadata, data */
        if (result == distOk) {
          EXTEND(sp,3);
          PUSHs(sv_2mortal(newSViv(result)));
          if (DataLength(&dout) && DataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(DataPtr(&dout),DataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
          if (MetadataLength(&dout) && MetadataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(MetadataPtr(&dout),MetadataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
        } else {
          EXTEND(sp,1);
          PUSHs(sv_2mortal(newSViv(result)));
        }
        /* free output buffers?  */
        if (dout.data.freeMe == gm_True) {
          DistillerBufferFree(&dout.data);
        }
        if (dout.metadata.freeMe == gm_True) {
          DistillerBufferFree(&dout.metadata);
        }
        XSRETURN(result == distOk? 3 : 1);

int
DistillAsync(mimeType,distType,inputHdrs,inputData,...)
	char *	mimeType
	char *	distType
	SV *	inputHdrs
	SV *	inputData
	PROTOTYPE: $$$$@@
        PREINIT:
        Argument arglist[MAX_ARGS];
        const int REQUIRED_ARGS = 4; /* must match #of args in XS decl above */
        int nargs = 0;
        C_DistillerType dType;
        DistillerInput din;
        DistillerStatus result;
	DistillerRequestType newrequest;
        int len;
        PPCODE:
        Zero(&din,1,DistillerInput);
        Zero(&dType,1,C_DistillerType);
        Zero(arglist,MAX_ARGS,Argument);
        /* grab all the arguments */
        while (items > REQUIRED_ARGS  &&  nargs < MAX_ARGS) {
          items--;
          arglist[nargs] = *((Argument *)SvPV(ST(items), na));
          nargs++;
        }
        /* set distiller type */
        SET_DISTILLER_TYPE(dType,distType);
        /* pack input mime type, metadata and data */
        SetMimeType(&din,mimeType);
        SetData(&din, SvPV(inputData,len));
        SetDataLength(&din, len);
        SetMetadata(&din, SvPV(inputHdrs,len));
        SetMetadataLength(&din, len);
        /* do distillation... */
	newrequest = NULL;
        result = DistillAsync(&dType, arglist, nargs, &din, &newrequest);
	if (newrequest) {
	  SV *svp = sv_newmortal();
	  EXTEND(sp,2);
	  PUSHs(sv_2mortal(newSViv(result)));
	  sv_setref_pv(svp, "DistillerRequestType", (void*)newrequest);
	  PUSHs(svp);
	} else {
          EXTEND(sp,1);
          PUSHs(sv_2mortal(newSViv(result)));
	}
	XSRETURN(newrequest ? 2 : 1);

int
DistillRendezvous(request, tvd)
	DistillerRequestType request
	double tvd
	PREINIT:
	struct timeval tv;
	DistillerOutput dout;
        DistillerStatus result;
	PPCODE:
	/* convert the tvd to a tv */
	tv.tv_sec = floor(tvd);
	tv.tv_usec = floor((tvd-(double)tv.tv_sec)*(double)1000000.0);
        Zero(&dout,1,DistillerOutput);
	result = DistillRendezvous(&request, &dout,
	    ST(1) == &sv_undef ? NULL : &tv);
	tvd = (double)tv.tv_sec + (double)tv.tv_usec / (double)1000000.0;
	/* Update the passed parameters */
	sv_setref_pv(ST(0), "DistillerRequestType", (void*)request);
	/* the timeout may not have been a variable */
	if (ST(1) != &sv_undef && !SvREADONLY(ST(1))) sv_setnv(ST(1), tvd);
        /* if success: push result code, metadata, data */
        if (result == distOk) {
          EXTEND(sp,3);
          PUSHs(sv_2mortal(newSViv(result)));
          if (DataLength(&dout) && DataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(DataPtr(&dout),DataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
          if (MetadataLength(&dout) && MetadataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(MetadataPtr(&dout),MetadataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
        } else {
          EXTEND(sp,1);
          PUSHs(sv_2mortal(newSViv(result)));
        }
        /* free output buffers?  */
        if (dout.data.freeMe == gm_True) {
          DistillerBufferFree(&dout.data);
        }
        if (dout.metadata.freeMe == gm_True) {
          DistillerBufferFree(&dout.metadata);
        }
        XSRETURN(result == distOk? 3 : 1);

void
DistillDestroy(request)
	DistillerRequestType &request
	PREINIT:
	if (!SvTRUE(ST(0))) XSRETURN_EMPTY;
	OUTPUT:
	request

char*
Options_Find(key)
	char*   key
        CODE:
        RETVAL = (char *)Options_Find(NULL,key);
        if (RETVAL == NULL) {
           RETVAL = "";
        }
        OUTPUT:
        RETVAL

int
MonitorClient_Send(s1,s2,s3)
	char*   s1
	char*   s2
	char*   s3
        PPCODE:
        if (mon == NULL) {
           mon = DistillerGetMonitorClientID();
        }
        if (mon) {
          MonitorClientSend(mon, s1, s2, s3);
        } else {
          fprintf(stderr, "%s: %s: %s\n", s1,s2,s3);
        }


int
Clib_Query(url)
	char*   url

int
Clib_Push(url,server_headers,data)
	char*	url
	char*	server_headers
	char*	data
        PREINIT:
        clib_data dat;
        clib_response ret;
        int mimesize,datasize;
        PPCODE:
        dat.mime_headers = (char *)SvPV(ST(1),mimesize);
        dat.mime_size = mimesize;
        dat.data = (char *)SvPV(ST(2),datasize);
        dat.data_size = datasize;
        RETVAL = Clib_Push(url,dat);
	RETVAL = 1;
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSViv(RETVAL)));
        XSRETURN(1);

int
Clib_Fetch(url,headers)
        char*  url
        char*  headers
        PREINIT:
        clib_data  dat;
        PPCODE:
        RETVAL = Clib_Fetch(url,headers,&dat);
        if (RETVAL == CLIB_OK) {
           EXTEND(sp,3);
           PUSHs(sv_2mortal(newSViv(RETVAL)));
           PUSHs(sv_2mortal(newSVpv(dat.mime_headers, dat.mime_size)));
           PUSHs(sv_2mortal(newSVpv(dat.data, dat.data_size)));
           Clib_Free(&dat);
           XSRETURN(3);
        } else {
           EXTEND(sp,1);
           PUSHs(sv_2mortal(newSViv(RETVAL)));
           XSRETURN(1);
        }

int
Clib_Redir_Fetch(url,headers,max_redirs)
        char*  url
        char*  headers
	int    max_redirs
        PREINIT:
        clib_data  dat;
        PPCODE:
        RETVAL = Clib_Redir_Fetch(url,headers,&dat,max_redirs);
        if (RETVAL == CLIB_OK) {
           EXTEND(sp,3);
           PUSHs(sv_2mortal(newSViv(RETVAL)));
           PUSHs(sv_2mortal(newSVpv(dat.mime_headers, dat.mime_size)));
           PUSHs(sv_2mortal(newSVpv(dat.data, dat.data_size)));
           Clib_Free(&dat);
           XSRETURN(3);
        } else {
           EXTEND(sp,1);
           PUSHs(sv_2mortal(newSViv(RETVAL)));
           XSRETURN(1);
        }

int
Clib_Async_Fetch(url,headers)
        char*  url
        char*  headers
        PREINIT:
        PPCODE:
        RETVAL = Clib_Async_Fetch(url,headers);
	EXTEND(sp,1);
        PUSHs(sv_2mortal(newSViv(RETVAL)));
        XSRETURN(1);

int
Clib_Post(url,headers,data,data_len)
	char *url
	char *headers
	char *data
	unsigned data_len
	PREINIT:
	clib_data dat;
	PPCODE:
	RETVAL = Clib_Post(url,headers,data,data_len,&dat);
	if (RETVAL == CLIB_OK) {
	   EXTEND(sp,3);
	   PUSHs(sv_2mortal(newSViv(RETVAL)));
           PUSHs(sv_2mortal(newSVpv(dat.mime_headers, dat.mime_size)));
           PUSHs(sv_2mortal(newSVpv(dat.data, dat.data_size)));
           Clib_Free(&dat);
           XSRETURN(3);
        } else {
           EXTEND(sp,1);
           PUSHs(sv_2mortal(newSViv(RETVAL)));
           XSRETURN(1);
        }
@


1.17
log
@Clib_Push from PERL works - was XS lossage.
@
text
@d2 1
a6 1
#include "clib.h"
d261 1
d327 95
d423 7
a557 1

@


1.17.2.1
log
@Added DistillAsync and friends
@
text
@a1 1
#include "clib.h"
d6 1
a260 1
	PROTOTYPE: $$$$@@
a325 95
int
DistillAsync(mimeType,distType,inputHdrs,inputData,...)
	char *	mimeType
	char *	distType
	SV *	inputHdrs
	SV *	inputData
	PROTOTYPE: $$$$@@
        PREINIT:
        Argument arglist[MAX_ARGS];
        const int REQUIRED_ARGS = 4; /* must match #of args in XS decl above */
        int nargs = 0;
        C_DistillerType dType;
        DistillerInput din;
        DistillerStatus result;
	DistillerRequestType newrequest;
        int len;
        PPCODE:
        Zero(&din,1,DistillerInput);
        Zero(&dType,1,C_DistillerType);
        Zero(arglist,MAX_ARGS,Argument);
        /* grab all the arguments */
        while (items > REQUIRED_ARGS  &&  nargs < MAX_ARGS) {
          items--;
          arglist[nargs] = *((Argument *)SvPV(ST(items), na));
          nargs++;
        }
        /* set distiller type */
        SET_DISTILLER_TYPE(dType,distType);
        /* pack input mime type, metadata and data */
        SetMimeType(&din,mimeType);
        SetData(&din, SvPV(inputData,len));
        SetDataLength(&din, len);
        SetMetadata(&din, SvPV(inputHdrs,len));
        SetMetadataLength(&din, len);
        /* do distillation... */
	newrequest = NULL;
        result = DistillAsync(&dType, arglist, nargs, &din, &newrequest);
	if (newrequest) {
	  SV *svp = sv_newmortal();
	  EXTEND(sp,2);
	  PUSHs(sv_2mortal(newSViv(result)));
	  sv_setref_pv(svp, "DistillerRequestType", (void*)newrequest);
	  PUSHs(svp);
	} else {
          EXTEND(sp,1);
          PUSHs(sv_2mortal(newSViv(result)));
	}
	XSRETURN(newrequest ? 2 : 1);

int
DistillRendezvous(request, tvd)
	DistillerRequestType request
	double tvd
	PREINIT:
	struct timeval tv;
	DistillerOutput dout;
        DistillerStatus result;
	PPCODE:
	/* convert the tvd to a tv */
	tv.tv_sec = floor(tvd);
	tv.tv_usec = floor((tvd-(double)tv.tv_sec)*(double)1000000.0);
        Zero(&dout,1,DistillerOutput);
	result = DistillRendezvous(&request, &dout,
	    ST(1) == &sv_undef ? NULL : &tv);
	tvd = (double)tv.tv_sec + (double)tv.tv_usec / (double)1000000.0;
	/* Update the passed parameters */
	sv_setref_pv(ST(0), "DistillerRequestType", (void*)request);
	/* the timeout may not have been a variable */
	if (ST(1) != &sv_undef && !SvREADONLY(ST(1))) sv_setnv(ST(1), tvd);
        /* if success: push result code, metadata, data */
        if (result == distOk) {
          EXTEND(sp,3);
          PUSHs(sv_2mortal(newSViv(result)));
          if (DataLength(&dout) && DataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(DataPtr(&dout),DataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
          if (MetadataLength(&dout) && MetadataPtr(&dout)) {
            PUSHs(sv_2mortal(newSVpv(MetadataPtr(&dout),MetadataLength(&dout))));
          } else {
            PUSHs(sv_2mortal(newSVpv("",0)));
          }
        } else {
          EXTEND(sp,1);
          PUSHs(sv_2mortal(newSViv(result)));
        }
        /* free output buffers?  */
        if (dout.data.freeMe == gm_True) {
          DistillerBufferFree(&dout.data);
        }
        if (dout.metadata.freeMe == gm_True) {
          DistillerBufferFree(&dout.metadata);
        }
        XSRETURN(result == distOk? 3 : 1);
a326 7
void
DistillDestroy(request)
	DistillerRequestType &request
	PREINIT:
	if (!SvTRUE(ST(0))) XSRETURN_EMPTY;
	OUTPUT:
	request
d455 1
@


1.16
log
@Added Clib_Redir_Fetch
@
text
@d360 4
a363 1
Clib_Push()
a364 1
        char *url;
d369 1
a369 2
        url = SvPV(ST(0),na);
        dat.mime_headers = SvPV(ST(1),mimesize);
d371 1
a371 1
        dat.data = SvPV(ST(2),datasize);
d373 2
a374 1
        ret = Clib_Push(url,dat);
d376 1
a376 1
        PUSHs(sv_2mortal(newSViv(ret)));
@


1.15
log
@inter distiller calling seems to work in context of pilot perl distiller
@
text
@d399 22
@


1.14
log
@most bugs fixed (null ptr checking) for inter worker distillers
@
text
@d246 6
a251 5
        if (RETVAL == gm_True)
           RETVAL = 1;
        else
           RETVAL = 0;

d274 1
a276 1
          nargs++;
d279 8
d288 1
@


1.13
log
@kwhilite* files modified for in-class examples. Distill() functionality
in clib.xs still not quite working - this commit will allow me to move
it to purify.  Added stuff to perl_stub makefile so that libperl.so's
directory is added to runtime dynamic lib path.
@
text
@d1 1
a287 1
        fprintf(stderr,"nargs=%d  arglist ptr=%p\n", nargs, arglist);
a288 1
        fprintf(stderr,"Distill Result = %d\n",(int)result);
d293 10
a302 2
          PUSHs(sv_2mortal(newSVpv(DataPtr(&dout),DataLength(&dout))));
          PUSHs(sv_2mortal(newSVpv(MetadataPtr(&dout),MetadataLength(&dout))));
a306 1
        fprintf(stderr,"After distill\n");
a310 1
        fprintf(stderr,"After free1\n");
a313 1
        fprintf(stderr,"returning status %d\n",(int)result);
a314 1
          
@


1.12
log
@still testing Distill() perl calls; minor fixes to TACCutils
@
text
@d240 9
d250 3
d260 1
a260 1
        Argument *arglist = NULL;
d269 3
d273 4
a276 6
        if (items >= REQUIRED_ARGS) {
          arglist = (Argument *)malloc((items-REQUIRED_ARGS-1) * sizeof(Argument));
          while (items >= REQUIRED_ARGS) {
            items--;
            arglist[nargs++] = *((Argument *)SvPV(ST(items), na));
          }
d287 1
d289 1
d300 1
d305 1
d309 1
@


1.11
log
@Added Clib_Async_fetch to clib.c, clib.h, and to the xs glue.
@
text
@d6 1
a6 1
#include "distinterface.h"
d10 6
d206 2
d215 82
d299 1
a299 1
char*   key
d310 3
a312 3
char*   s1
char*   s2
char*   s3
d326 1
a326 1
char*   url
@


1.10
log
@Removed compile time dependencies: proxy.home and proxy.perlmod are now
config file options, so perl_stub doesn't need to know them at compile
time (it constructs the -I path at runtime from the options file
values).  Options_Find() has been exported to Perl (in
clib.xs) and is emulated for the harness (in clib.pm).  pilotFonts
directory was added for wingman distiller.  PilotFonts module now has an
explicit init_fonts() call that supplies the dir name containing the
pilot fonts.  Added documentation to clib.pm, TACCutils.pm,
PilotFonts.pm and SimpleFont.pm.  removed all path-related dependencies
in existing distillers and unpack_tstr.pl, and added font path error
checking to layout.tcl
@
text
@d278 11
@


1.9
log
@Changed the enum in clib.h to a series of #defines, so that the perl
extension builder automatically makes the values available to perl.
Much work on the perl html munger (using the new lexer): <img> attribute
GMMAGIC is now converted to URL magic in the SRC attribute by the
munger.  MonitorClient_Send and GetOptions are now available to perl
distillers; this required changes to perl_stub and clib.xs.  Bug fix to
tag_from_attribs routine in TACCutils.pm.  Tcl/tk simulator now supports
"reload" and "open", and canvas is resized correctly.  Perl harness now
turns on  perl -w by default.
@
text
@d207 11
@


1.8
log
@*** empty log message ***
@
text
@d6 1
d8 191
d202 20
d288 1
@


1.7
log
@Fixed.
@
text
@a10 42
char*
SERVER_NAME()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_server_name,0)));
        XSRETURN(1);

char*
SET_PREFS_URL()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_set_prefs_url,0)));
        XSRETURN(1);

char*
GET_PREFS_URL()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_get_prefs_url,0)));
        XSRETURN(1);

char*
PREFS_CHANGE_URL_STRING()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_prefs_change_url_string,0)));
        XSRETURN(1);

char*
PREFS_SET_URL_STRING()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_prefs_set_url_string,0)));
        XSRETURN(1);

char*
AGG_STRING()
        PPCODE:
        EXTEND(sp,1);
        PUSHs(sv_2mortal(newSVpv((char*)fe_agg_string,0)));
        XSRETURN(1);

@


1.6
log
@*** empty log message ***
@
text
@a10 2
#if 0

a51 2

#endif
@


1.5
log
@various changes to makefiles to support auto-installation into sbin and bin directories.  perl HTML distiller no longer inserts UI in pages with frames.  PREFS_URL and similar strings are now static char* instead of #defines, but still need them to be initialized in PTM stub so distillers can get at them.  "run" targets are better now, they run stuff from the sbin and bin directories.
@
text
@d10 3
d54 2
@


1.4
log
@Clib_Post now works.
@
text
@d14 36
a49 1
        PUSHs(sv_2mortal(newSVpv(SERVER_NAME,0)));
@


1.3
log
@various goodies for perl distillers
@
text
@d60 22
@


1.2
log
@*** empty log message ***
@
text
@d10 7
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
MODULE = clib		PACKAGE = clib
d11 5
a15 4
Clib_Push(url,headers,data)
        char*   url
        char*   headers
        char*   data
d17 1
d19 12
a30 8
        CODE:
        (void)SvPV(headers,dat.mime_size);
        (void)SvPV(data,dat.data_size)
        dat.data = data;
        dat.mime_headers = headers;
        RETVAL = Clib_Push(url,data);
        OUTPUT:
        RETVAL
d34 2
a35 2
        char *  url
        char *  hdrs
@


1.1.1.1
log
@perl extensions to go with transend distiller library
@
text
@@
