head	1.10;
access;
symbols
	Yatin-final:1.10
	Yatin:1.10.0.2
	pre-yatin-merge:1.10
	transend-beta2:1.10
	fox-dev:1.10
	tcp_redirect-ng:1.9
	transend-beta-latest:1.9
	Aggregators:1.9
	NoAggregators:1.9
	iang:1.9.0.4
	transend-beta:1.9.0.2;
locks; strict;
comment	@ * @;


1.10
date	97.06.06.00.08.07;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	97.04.27.05.39.43;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	97.04.27.03.14.47;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	97.04.26.01.47.36;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	97.04.26.01.19.17;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	97.04.25.20.08.08;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	97.04.25.19.03.58;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	97.04.25.02.37.21;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	97.04.25.02.10.10;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	97.04.25.01.53.18;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Many changes to support SDK, including bin and sbin directories,
and modified make targets and names of some binary targets.  Calling
convention changed for perl distillers, so fixed html distiller and
added it as transend.text.html.  monitor.multicast property is now
Monitor.listen; all relevant code was changed.  Monitor can now parse
this from the options file.  Updated all UI changes from branch head.
@
text
@#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <sys/time.h>
#include <pthread.h>

#include "config_tr.h"
#include "optdb.h"
#include "monitor.h"
#include "utils.h"
#include "tcp_redirect.h"
#include "connections.h"
#include "proxies.h"

/* Local (private) functions */
static void init(int ac, char *av[]);
static void usage(void);
static void missing_field_error(const char *fld);
static int  build_fe_list(const char *frontends);

/* Ickky nastie global variables */
static Options         runtime_options;
MonitorClientID        monID;
int                    listen_fd = -1, errno;
fd_set                 read_fds, write_fds, exception_fds;

int main(int ac, char *av[])
{
  char monbuf[2048];

  /* Parse command line options, open up a connection to the monitor,
     and create a non-blocking accept port. */
  init(ac,av);

  FD_ZERO(&read_fds);
  FD_ZERO(&write_fds);
  FD_ZERO(&exception_fds);

  /* Add the accept fd to the sets */
  FD_SET(listen_fd, &read_fds);
/*  FD_SET(listen_fd, &exception_fds); */

  /* Main event loop! */
  while(1) {
    fd_set rfd, wfd, efd;
    int    res, i;

    /* Copy in descriptor sets */
    rfd = read_fds;
    wfd = write_fds;
    efd = exception_fds;

    /* Do select */
    res = select(FD_SETSIZE, &rfd, &wfd, &efd, NULL);

    if (res == -1) {
      sprintf(monbuf, "select error: %s\n", strerror(errno));
      MonitorClientSend(monID, "Messages", monbuf, "Log");
    } else if (res > 0) {
      
      /* Incoming connections? */
      handle_incoming(listen_fd, &rfd, &efd);

      /* Deal with others - check to see if local and global are both
         set, as functions may close sockets and mark it off on global */
      for (i=0; i<FD_SETSIZE; i++) {
	if (FD_ISSET(i, &rfd) && FD_ISSET(i, &read_fds)) {
	  conn_read(i);
	}
	if (FD_ISSET(i, &wfd) && FD_ISSET(i, &write_fds)) {
	  conn_write(i);
	}
/*	if (FD_ISSET(i, &efd) && FD_ISSET(i, &exception_fds)) {
	  conn_except(i);
	}*/
      }
    }
    try_enable();
  }
  
  exit(0);
}


/* Initialize all of the state of tcp_redirect */
static void init(int ac, char *av[])
{
  char *portptr;
  const char *monaddr, *frontends;
  char monaddr_copy[256];
  int result;
  
  if (ac < 2)
    usage();
  
  if ((result = Options_New(&runtime_options, av[1])) != 0) {
    fprintf(stderr, "Error %d opening configuration file '%s', bye bye!\n",
            result, av[1]);
    exit(1);
  }

  /*
   *  Initialize monitor client if possible
   */

  if ((monaddr = Options_Find(runtime_options, "Monitor.listen"))
      == NULL) {
    missing_field_error("Monitor.listen");
    /* NOTREACHED */
  }
  strncpy(monaddr_copy, monaddr, sizeof(monaddr_copy)-1);
  if ((portptr = strchr(monaddr_copy, '/')) == NULL) {
    usage();
    /* NOTREACHED */
  }
  *portptr = 0;

   /* BUG:: should parse out TTL, not assume it's 16! */
   if ((monID = MonitorClientCreate("TCP Multiplexor",
                                    monaddr_copy, /* monitor IP addr */
                                    strtoul(portptr+1, NULL, 0), /*  port */
                                    16)) /* ttl */
       == NULL) {
     fprintf(stderr, "Warning: couldn't create monitor client\n");
   } 

   refresh_listen_port();

  /* Build the list of known front ends */
  MonitorClientSend(monID, "Messages", "Initializing tcp_redirect\n", "Log");
  if ((frontends = Options_Find(runtime_options, "tcp_redirect.fe_hosts"))
      == NULL) {
    missing_field_error("tcp_redirect.fe_hosts");
    /* NOTREACHED */
  }
  build_fe_list(frontends);

  /* All done! */
}

static void usage(void)
{
    fprintf(stderr,
            "Usage: tcp_redirect configfilename\n");
    exit(1);
}

static void missing_field_error(const char *fld)
{
  fprintf(stderr,
          "Reading config file: property '%s' missing or illegal value\n",
	  fld);
  exit(1);
}

static int  build_fe_list(const char *frontends)
{
  char       *next_tok;
  char       *frontends_bup;
  int         num = 0;
  char        mon_msg[2048];

  frontends_bup = (char *) calloc(sizeof(char), strlen(frontends)+1);
  if (frontends_bup == NULL) {
    fprintf(stderr, "Out of memory in build_fe_list.\n");
    exit(1);
  }
  strcpy(frontends_bup, frontends);
  next_tok = strtok(frontends_bup, " ");

  while (next_tok != NULL) {
    char *colon;

    colon = strrchr(next_tok, (int) ':');
    if ((colon == NULL) || (colon - next_tok >= strlen(next_tok)-1)) { 
      sprintf(mon_msg, "Bogus FE entry in config file %s - ignoring\n",
	      next_tok);
      fprintf(stderr, mon_msg);
      MonitorClientSend(monID, "Messages", mon_msg, "Log");
      next_tok = strtok(NULL, " ");
      continue;
    }
    *colon = '\0';
    colon++;
    add_proxy(next_tok, colon);
    next_tok = strtok(NULL, " ");
    num++;
  }

  free(frontends_bup);
  sprintf(mon_msg, "Found %d hosts in total.\n", num);
  MonitorClientSend(monID, "Messages", mon_msg, "Log");
  return num;
}

void refresh_listen_port(void)
{
  char *lport;

  if (listen_fd != -1) {
    close(listen_fd);
    listen_fd = -1;
  }

   lport = (char *) Options_Find(runtime_options, "tcp_redirect.listen_port");
   if (lport == NULL) {
     missing_field_error("tcp_redirect.listen_port");
     /* NOTREACHED */
   }

  /* Create the accept/listen port */
  listen_fd = slisten(lport);
  if (listen_fd == -1) {
    fprintf(stderr, "Couldn't open listening port.\n");
    exit(1);
  }
  if (make_nonblocking(listen_fd) != 1) {
    fprintf(stderr, "Couldn't make listen port non-blocking.\n");
    exit(1);
  }
}
@


1.9
log
@Yet more changes...
@
text
@d115 1
a115 1
  if ((monaddr = Options_Find(runtime_options, "monitor.multicast"))
d117 1
a117 1
    missing_field_error("monitor.multicast");
@


1.8
log
@Aaaugh.
@
text
@d33 1
a33 1
int                    listen_fd, errno;
d50 1
a50 1
  FD_SET(listen_fd, &exception_fds);
d82 1
a82 1
	if (FD_ISSET(i, &efd) && FD_ISSET(i, &exception_fds)) {
d84 1
a84 1
	}
d97 1
a97 1
  char *portptr, *lport;
d136 1
a136 16
   lport = (char *) Options_Find(runtime_options, "tcp_redirect.listen_port");
   if (lport == NULL) {
     missing_field_error("tcp_redirect.listen_port");
     /* NOTREACHED */
   }

  /* Create the accept/listen port */
  listen_fd = slisten(lport);
  if (listen_fd == -1) {
    fprintf(stderr, "Couldn't open listening port.\n");
    exit(1);
  }
  if (make_nonblocking(listen_fd) != 1) {
    fprintf(stderr, "Couldn't make listen port non-blocking.\n");
    exit(1);
  }
d203 27
@


1.7
log
@yay!  minimal functionality.
@
text
@d22 1
d28 1
a28 1
static int  build_fe_list(ll *fe_list, const char *frontends);
d33 1
a33 2
ll                     fe_list = NULL;
int                    num_fe = 0, listen_fd, errno;
a60 3
    memcpy((void *) &rfd, (void *) &read_fds, sizeof(fd_set));
    memcpy((void *) &wfd, (void *) &write_fds, sizeof(fd_set));
    memcpy((void *) &efd, (void *) &exception_fds, sizeof(fd_set));
d73 2
a74 1
      /* Deal with others */
d76 1
a76 1
	if (FD_ISSET(i, &rfd)) {
d79 1
a79 1
	if (FD_ISSET(i, &wfd)) {
d82 1
a82 1
	if (FD_ISSET(i, &efd)) {
d87 1
d127 14
a140 14
  /* BUG:: should parse out TTL, not assume it's 16! */
  if ((monID = MonitorClientCreate("TCP Multiplexor",
                                   monaddr_copy, /* monitor IP addr */
                                   strtoul(portptr+1, NULL, 0), /*  port */
                                   16)) /* ttl */
      == NULL) {
    fprintf(stderr, "Warning: couldn't create monitor client\n");
  } 

  lport = (char *) Options_Find(runtime_options, "tcp_redirect.listen_port");
  if (lport == NULL) {
    missing_field_error("tcp_redirect.listen_port");
    /* NOTREACHED */
  }
d153 1
d160 3
a162 1
  num_fe = build_fe_list(&fe_list, frontends);
d180 1
a180 1
static int  build_fe_list(ll *fe_list, const char *frontends)
d196 1
a196 5
    char               *colon;
    int                 res;
    struct sockaddr_in  naddr;
    fe_host            *nexthost;

a206 2
      
    /* Pull out hostname and port */
d209 2
a210 34

    /* Do the DNS dance */
    res = make_inetaddr(next_tok, colon, &naddr);
    if (res == -1) {
      sprintf(mon_msg, "Couldn't resolve host/port %s:%s - ignoring\n",
	      next_tok, colon);
      fprintf(stderr, mon_msg);
      MonitorClientSend(monID, "Messages", mon_msg, "Log");
      next_tok = strtok(NULL, " ");
      continue;
    }

    /* Build the appropriate fe_host entry */
    nexthost = (fe_host *) calloc(sizeof(fe_host), 1);
    if (nexthost == NULL) {
      fprintf(stderr, "Out of memory in build_fe_list(2)\n");
      exit(1);
    }
    strncpy(nexthost->hostname, next_tok, HOST_MAXLEN-1);
    memcpy((void *) &(nexthost->host_addr), 
	   (void *) &naddr,
	   sizeof(struct sockaddr_in));
    nexthost->available = 1;   /* Assume up until find out otherwise */

    /* Add to list of fe_hosts */
    if (ll_add_to_end(fe_list, (void *) nexthost) != 1) {
      sprintf(mon_msg, "Couldn't add %s:%s to linked list (!?) - ignoring\n",
	      next_tok, colon);
      fprintf(stderr, mon_msg);
      MonitorClientSend(monID, "Messages", mon_msg, "Log");
      free(nexthost);
      next_tok = strtok(NULL, " ");
      continue;      
    }
a211 5

    sprintf(mon_msg, "Added FE host/port %s:%s\n", next_tok, colon);
    MonitorClientSend(monID, "Messages", mon_msg, "Log");
    
    next_tok = strtok(NULL, " ");
@


1.6
log
@Foo!
@
text
@a67 1
    fprintf(stderr, "select returned %d\n", res); 
a78 1
	  fprintf(stderr, "rset %d\n", i);
a81 1
	  fprintf(stderr, "wset %d\n", i);
a84 1
	  fprintf(stderr, "eset %d\n", i);
@


1.5
log
@More tweaks.  Bug was bug in linux.
@
text
@d3 1
d58 3
d66 1
a66 3
    res = select(50, &rfd, &wfd, &efd, NULL);
    
    exit(0);
d68 1
d79 2
a80 1
	if (FD_ISSET(i, &rfd))
d82 3
a84 1
	if (FD_ISSET(i, &wfd))
d86 3
a88 1
	if (FD_ISSET(i, &efd))
d90 1
@


1.4
log
@More changes..
@
text
@d12 2
d57 3
a59 3
    rfd = read_fds;
    wfd = write_fds;
    efd = exception_fds;
d62 1
a62 1
    res = select(FD_SETSIZE, &rfd, &wfd, &efd, NULL);
d64 2
@


1.3
log
@More stuff.
@
text
@d18 1
d52 1
a52 1
    int    res;
d67 2
a68 9
      /* Special case the listen descriptor */
      if (FD_ISSET(listen_fd, &rfd)) {
/*	handle_read_listen(); */
	FD_CLR(listen_fd, &rfd);
      }
      if (FD_ISSET(listen_fd, &efd)) {
/*	handle_exception_listen(); */
	FD_CLR(listen_fd, &efd);
      }
d71 8
a78 1
      
@


1.2
log
@Getting closer..
@
text
@d11 1
d29 2
a30 1
int                    num_fe = 0, listen_fd;
d34 1
a34 1
  fd_set read_fds, write_fds, exception_fds;
a45 1
  FD_SET(listen_fd, &write_fds);
d50 2
d53 7
d61 18
@


1.1
log
@OK - more added.
@
text
@d32 2
d37 15
a51 2
  
  /* Now let's initialize our select set */
@
