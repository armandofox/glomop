head	1.3;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.3
date	98.11.16.00.33.04;	author daw;	state dead;
branches;
next	1.2;

1.2
date	98.11.14.10.34.46;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.11.08.11.11.55;	author daw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.08.11.11.55;	author daw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@\section{Related work}
\label{related}

Due to the % fast and
accelerated development of communication technology,
the security and protection problems inherent in
an open and free communication environment, such as the Internet,
are relatively new ones to solve.
Consequently, much of
the work addressing security for this environment
is still being developed.

To achieve security,
we use the concept of sandboxing,
first introduced by Wahbe et al.\ in 
the context of software fault isolation
\cite{sfi}.
However, they were actually solving a different problem.
What they achieved was memory safety for untrusted modules running in
the same address space as trusted modules.
They ignored the problem of system-level security;
conversely, we do not attempt to provide safety.
They also use binary-rewriting technology
to accomplish their goals,
which prevents them from running arbitrarily general
pre-existing applications.

Java \cite{java} is an comprehensive system
that addresses, among other things, both
safety and security,
although it achieves security by a different approach from ours.
Java cannot secure pre-existing programs,
because it requires use of a new language.
We do not have this problem;
our design will run any application, and so is more
versatile in this respect.
However, Java offers many other advantages that we do not address;
for instance, Java provides architecture-independence,
while Janus only applies to native code and provides no help
with portability.

OmniWare \cite{omni} takes advantage of software fault
isolation techniques and compiler support
to safely execute untrusted code.
Like Java, it also has architecture-independence,
extensibility, and efficiency as important goals.

We note two important differences between the Java approach
and the Janus philosophy.
The Java protection mechanism is much more complex,
and is closely intertwined with the rest of Java's other functionality.
In contrast, we have more limited goals,
explicitly aim for extreme simplicity,
and keep the security mechanism orthogonal from
the non-security-critical functionality.

{\tt securelib} is a shared library that replaces
the C {\tt accept}, {\tt recvfrom}, and {\tt recvmsg} library calls
by a version that performs address-based authentication;
it is intended to protect security-critical Unix system daemons
\cite{securelib}.
Other research that also takes advantage of shared libraries
can be found in \cite{3d-1,3d-2}.
We note that simple replacement of dangerous C library calls
with a safe wrapper is insufficient in our extended context of
untrusted and possibly hostile applications;
a hostile application could bypass this access control
by simply issuing the dangerous system call directly
without invoking any library calls.

Fernandez and Allen \cite{fernandez-allen} extend the
filesystem protection mechanism
with per-user access control lists.
Lai and Gray \cite{lai-gray} describe an approach that protects against
Trojan horses and viruses by limiting filesystem access:
their OS extension confines user processes to the
minimal filesystem privileges needed, relying on hints from
the command line and (when necessary) run-time user input.
TRON \cite{tron} discourages Trojan horses
by adding per-process capabilities support to the filesystem
discretionary access controls.
These works all suffer from two major limitations:
they require kernel modifications, and they do not address
issues such as control over process and network resources.

Domain and Type Enforcement (DTE) is a way to extend
the OS protection mechanisms to let system administrators
specify fine-grained mandatory access controls
over the interaction between security-relevant subjects and objects.
% Objects are assigned types and subjects are given domains;
% then the security policy is specified in a tabular format,
% with access limited based on the relevant (domain,type) table entry.
A research group at TIS has amassed considerable experience
with DTE and its practical application to Unix systems
\cite{dte-1,dte-2,dte-3,dte-4}.
DTE is an attractive and broadly applicable
approach to mandatory access control,
but its main disadvantage is that it requires kernel modifications;
we aimed instead for user-level protection.



\section{Future work}
\label{futurework}



A possibility for future enhancement of our implementation is
to offer extensive auditing.
It would be conceptually simple to add logging and
accounting capabilities to our prototype,
and we plan to do so in the near future.
 

We believe proxies are a promising approach for improving
control over network accesses.
By taking advantage of earlier work in firewalls,
we were able to easily integrate a safe X proxy into our prototype.
% We have shown that one can
% guard access to system calls with a reference monitor
% constructed from process-tracing facilities;
We suspect that one can achieve enhanced control over
many other network communications of interest by leveraging existing
application-level proxies developed by the firewall community.
This would enable our techniques to be used in broader contexts.
The overlap with research into firewalls
lends hope that these problems can be solved satisfactorily.

One issue is how to interpose proxies forcibly upon
untrusted and uncooperative applications.
We currently use environment variables as hints---for
instance, we change the {\tt DISPLAY} variable to point
to a proxy X server, and disallow access to any other
X display---but this only works for well-behaved
applications that consult environment variables consistently.
One might consider implementing the hints also
with a shared library that replaces network
library calls with a safe call to a secure proxy.


\marginpar{smb's automounter idea}
@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@Initial revision
@
text
@d74 1
a74 1
Lai and Gray \cite{lai-gray} describe an approach which protects against
@


1.1.1.1
log
@Adding in my master's to CVS control.
This version reflects the draft that I gave to Eric (I think).

@
text
@@
