head	1.11;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.11
date	99.08.05.23.53.47;	author daw;	state Exp;
branches;
next	1.10;

1.10
date	99.08.05.23.18.23;	author daw;	state Exp;
branches;
next	1.9;

1.9
date	99.08.03.00.45.12;	author daw;	state Exp;
branches;
next	1.8;

1.8
date	98.11.16.07.47.33;	author daw;	state Exp;
branches;
next	1.7;

1.7
date	98.11.16.05.23.13;	author daw;	state Exp;
branches;
next	1.6;

1.6
date	98.11.16.01.30.04;	author daw;	state Exp;
branches;
next	1.5;

1.5
date	98.11.16.00.48.51;	author daw;	state Exp;
branches;
next	1.4;

1.4
date	98.11.14.12.38.25;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	98.11.14.12.04.41;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	98.11.14.10.34.44;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.11.08.11.11.55;	author daw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.08.11.11.55;	author daw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@\chapter{Other work}
\label{otherwork}

This chapter describes some other work relevant to Janus.
First we survey some related work and how it influenced our design;
next we discuss some limitations of our tool, and how they might be fixed;
and then we list some possible areas for future work.

\section{Related work}
\label{related}

% Due to the % fast and
% accelerated development of communication technology,
% the security and protection problems inherent in
% an open and free communication environment, such as the Internet,
% are relatively new ones to solve.
% Consequently, much of
% the work addressing security for this environment
% is still being developed.

There is a significant body of work in the OS community on
interposition.
SLIC \cite{slic} considers interposition as a technique for low-cost
extensibility for commodity operating systems; it allows users to
interpose on selected OS interfaces by downloading code into the kernel.
The SLIC work studies a number of sample applications, with
our work on restricted environments for helper applications \cite{janus-usenix}
motivating one of them.

Also, Jones studied interposition in the Mach kernel as a tool for
implementing user-level extensions
\cite{jones-sosp,jones-thesis}.
His work demonstrated that OS support for interposition on the
system-call interface can enable significant new functionality.
However, his toolkit as presented
is not particularly useful for confinement, as Mach's support for
interposition does not allow one to protect the enforcer (the
interposed code) from the enforcee (the untrusted application).

After our initial work on secure environments for helper applications
\cite{janus-usenix} was published, Alexandrov {\em et al.} \cite{ufo}
showed how to implement a user-level filesystem extension with
system-call interposition.
Like Janus, their implementation used the Solaris {\tt /proc}
system-call
tracing facility to intercept system calls and simulate the semantics
of the extended interface.
Their work provides further evidence for our assertion that OS support
for user-level system-call interposition would enable many other
potential applications as well as help improve site security.

Other recent work on using system call interposition for
security wrappers has built on the approach we described 
in \cite{janus-usenix}.
One paper \cite{hypervisors} provides an implementation of system
call interposition using Linux kernel modules.
They build a tool to limit the file accesses an untrusted process may make
and demonstrate their approach by using it to protect the Netscape
web browser.
(They do not consider access control for other resources, such as
the network.)
A more recent paper \cite{hardening} proposes a wrapper definition
language to reduce the development cost of building wrappers that use
system call interposition.
One key contribution of their work is the notion of tagging related
system calls, so that the wrapper developer can specify policy at
a high level; the wrapper compiler translates this into a platform-dependent
form.
They validate their approach with implementations for FreeBSD and
Solaris using loadable kernel modules, and they build several applications,
including confinement of untrusted applications and 
intrusion detection based on recognizing sequences of system calls.

Other researchers have previously advocated the use of interposition
to improve system security.
Bump-in-the-stack implementations of {\sc ipsec} interpose on
the interface between the TCP/IP stack and the network driver
to add encryption and authentication to the IP protocol \cite{WB96}.
{\tt securelib} is a shared library that replaces
the C {\tt accept}, {\tt recvfrom}, and {\tt recvmsg} library calls
by a version that performs address-based authentication;
it is intended to protect security-critical Unix system daemons
\cite{securelib}.
Also, \cite{races} briefly describes an implementation of dynamic
detection and prevention of security-relevant race conditions that
works by interposing on dynamically-linked libraries.
Other research that also takes advantage of custom shared libraries
for non-security purposes can be found in \cite{3d-1,3d-2}.
However, interposition on the library interface is not
usable for confinement,
since a hostile application could bypass this access control
by simply issuing the dangerous system call directly
without invoking any library calls.
Therefore, we consider simple replacement of dangerous C library calls
with a safe wrapper insufficient in our extended context of
untrusted and possibly hostile applications.

Fernandez and Allen \cite{fernandez-allen} extend the
filesystem protection mechanism
with per-user access control lists.
Lai and Gray \cite{lai-gray} describe an approach that protects against
Trojan horses and viruses by limiting filesystem access:
their OS extension confines user processes to the
minimal filesystem privileges needed, relying on hints from
the command line and (when necessary) run-time user input.
TRON \cite{tron} discourages Trojan horses
by adding per-process capabilities support to the filesystem
discretionary access controls.
These works all suffer from two major limitations:
they require kernel modifications, and they do not address
issues such as control over process and network resources.

Domain and Type Enforcement (DTE) is a way to extend
the OS protection mechanisms to let system administrators
specify fine-grained mandatory access controls
over the interaction between security-relevant subjects and objects.
% Objects are assigned types and subjects are given domains;
% then the security policy is specified in a tabular format,
% with access limited based on the relevant (domain,type) table entry.
A research group at TIS has amassed considerable experience
with DTE and its practical application to Unix systems
\cite{dte-1,dte-2,dte-3,dte-4}.
DTE is an attractive and broadly applicable
approach to mandatory access control,
but its main disadvantage is that it requires kernel modifications;
we aimed instead for user-level protection.

More recently, Schneieder has given an automata-theoretic
treatment of interposition as a implementation technique for
security, yielding a theory of implementable enforcement mechanisms
\cite{agentry,schneider-tr}.
His work suggests that interposition is a very powerful
technique for implementing a large class of security policies.

The confinement problem was first identified by Lampson
in \cite{lampson-confinement}.
His formulation dealt primarily with confidentiality protection,
but modern versions of the confinement problem are typically
concerned with system integrity and availability as well as
the confidentiality of secret information.
His work spawned a small subfield of research on covert channels
and information leakage;
in this thesis, we have sidestepped the theoretical difficulties posed
by covert channels by ensuring that confined programs never get
access to confidential information in the first place.
The Orange Book \cite{orange-book} tried to address a number of
the problems with discretionary access control schemes as solutions
to the confinement problem by introducing mandatory access control,
but this effort failed in commercial systems because its confidentiality
protections were too strong and its integrity protections too weak.
For an example of a more modern treatment of the confinement problem
and its theory, see \cite{bk-confinement}.

Also, \cite{berferd,ches-smb-book} gives practical experience on
the benefits of confining untrusted processes to a sandboxed ``jail''.
The authors used {\tt chroot()} for confinement, which worked well
for their purposes.
Today, the rising importance of network security
means that {\tt chroot()}'s inability to handle resources other than
the filesystem is a serious limitation; this motivates our work
on more general mechanisms for confining untrusted applications.

To achieve security,
we relied heavily on the concept of sandboxing,
first introduced by Wahbe {\em et al.} in 
the context of software fault isolation
\cite{sfi}.
However, those authors were actually solving a somewhat different problem.
What they achieved was memory safety for untrusted modules running in
the same address space as trusted modules.
They ignored the problem of system-level security;
conversely, we do not attempt to provide safety.
They also use binary-rewriting technology
to accomplish their goals,
which makes it very challenging to run arbitrarily general
pre-existing applications robustly and efficiently\footnote{Consider,
e.g., self-modifying code,
indirect jumps, variable-length instructions, dynamic linking, trampolines,
instruction atomicity, exception handlers, and the complex addressing
modes found in today's CISC architectures
to get some idea of the implementation challenges \cite{LB94,SCK+93}.}.

The same basic idea---isolating certain operations for extra scrutiny---may
be found in both software fault isolation and Janus.
Thus, we could probably have used software fault isolation
instead of process tracing
to isolate system calls and interpose on them, at least for those binaries
which software fault isolation can be applied to.
However, such an approach has a serious disadvantage:
memory safety must also be guaranteed to protect the enforcement mechanism
from the untrusted application, whereas in our implementation
the enforcement mechanism uses a separate address space and thus gains
dependable protection for free.
In any case, no matter which mechanism is used for system call
interposition (process tracing, software fault isolation, {\sc slic}
\cite{slic}, or something else entirely), our work on Janus
will still be relevant for what it says about how to check the
system calls issued by untrusted code.

In a more recent approach, proof-carrying code
\cite{pcc,pcc-onepage,pcc-compiler,pcc-kernel,pcc-mobile,pcc-agents},
the compiler embeds security checks at each unsafe operation and emits
a proof that the resulting code satisfies the security policy; at runtime,
a verifier can quickly check the safety proof.
Proof-carrying code allows one to check very sophisticated and fine-grained
security policies, and thus can be much more flexible than Janus.
(The only challenge is to formalize the security policy in the logical
framework used by the prover and verifier.)
In particular, it would presumably be possible to build a compiler
that embeds Janus security-checking code in the application and can
prove to a verifier that the application would pass all checks Janus
would make, thereby avoiding the need for a separate Janus process.
However, Janus does provide some extra benefits because it is
{\em orthogonal} to the protected application:
we can specify the security policy at runtime rather than
at compile time, and we can protect pre-existing, pre-compiled legacy code.

Java \cite{java} is a comprehensive system
that addresses, among other things, both
safety and security,
although it achieves security by a different approach from ours.
Java cannot secure pre-existing programs,
because it requires use of a new language.
We do not have this problem;
our design will run any application, and so is more
versatile in this respect.
However, Java offers many other advantages that we do not address;
for instance, Java provides architecture independence,
while Janus only applies to native code and provides no help
with portability.
Another important difference is that Java provides support
for high-level and fine-grained security policies, while we
focus on low-level, coarse-grained (system call based) policies
that are less expressive but simpler to get right.

OmniWare \cite{omni} takes advantage of software fault
isolation techniques and compiler support
to guarantee memory safety for untrusted code.
However, as we show in this work, security for untrusted code
requires much more than just memory safety: access to all
resources must be mediated, and \cite{omni} says nothing
about mediation for other resources.
Like Java, OmniWare offers architecture-independence,
extensibility, and efficiency as important goals; Janus ignores
these issues.
Another major difference between Janus and OmniWare is that
OmniWare cannot provide security for legacy code, while Janus
takes this on as a primary goal.

We note two important differences between the Java approach
and the Janus philosophy.
The Java protection mechanism is much more complex,
and is closely intertwined with the rest of Java's other functionality.
In contrast, we have more limited goals,
we explicitly aim for extreme simplicity,
and we keep the security mechanism orthogonal from
the primary functionality.




\section{Limitations}
\label{limit}

One inherent limitation of the Janus implementation
is that we can only successfully run
applications that do not legitimately need many privileges.
Our approach will easily accommodate any program that only requires
simple privileges, such as access to a preferences file.
Application developers may want to keep this in mind and not assume,
for example, that their applications will be able to access the whole
filesystem\footnote{The Athena X file open widget is a good example
of what not to do: it assumes that it has access to the whole filesystem
so that it can identify the absolute pathname of all files, and it
doesn't handle failure well at all.}.

We have followed one simple direction in our
prototype implementation, but others are possible as well.
One could consider using specialized Unix system calls
to revoke certain privileges.
The two major contenders are {\tt chroot()}, to
confine the application within a safe directory structure,
and {\tt setuid()}, to change to a limited-privilege
account such as {\tt nobody}.
Unfortunately, programs need superuser privileges
to use these features;
since we were committed to a user-level implementation,
we decided to ignore them.
In retrospect it may be prudent to reconsider
this design choice, especially when using Janus to confine
system daemons (e.g. {\tt sendmail}) that already
require superuser privilege to execute.
(But note that this shortcoming is easy to remedy, thanks
to the Unix tool philosophy, by {\tt exec}ing Janus
from a tiny setuid program that simply performs a {\tt chroot()}
and {\tt setuid()}.)
Other security policies (such as mandatory audit logs)
may also be more appropriate in some environments.

% Parts of the Solaris operating system, including TCP and UDP,
% are accessed through a message-passing
% interface; we have not yet implemented a proxy to handle this, but intend
% to do so.

% Another area not yet finished is the configuration
% control problem for system administrators.
% Some sysadmins will probably like to install
% central default configurations for several popular
% applications;
% we have attempted to make this multiplexing easy,
% without actually trying it out on a large system.

% A possibility for future enhancement of our implementation is
% to offer extensive auditing.
% It would be conceptually simple to add logging and
% accounting capabilities to our prototype,
% and we plan to do so in the near future.


The most fundamental limitation of our implementation,
however, stems from its specialization for a single operating system.
Each OS to which Janus might be ported
requires a separate security analysis of its system-call interface.
Also, a basic assumption of Janus is that the operating system
provides multiple address spaces,
allows trapping of system calls,
and makes it feasible to interpose proxies where necessary.
Solaris 2.4 has the most convenient support for these mechanisms;
we believe our approach may also apply to
some other Unix systems.
On the other hand, platforms without support for
these services cannot directly benefit from our techniques.
In particular, our approach cannot be applied to
PCs running MS-DOS or Microsoft Windows.
The utility of these confinement techniques, then, will be determined
by the underlying operating system's
support for user-level security primitives.

\section{Future work}
\label{futurework}



A possibility for future enhancement of our implementation is
to offer extensive auditing.
It would be conceptually simple to add logging and
accounting capabilities to our prototype.
The difficult task is figuring out what to do with the
audit logs after you have them; this seems to require
some significant work on developing an intrusion detection back-end,
and so we do not currently have any plans to implement auditing extensions.

We believe that interposition of filtering proxies
is a promising approach for improving control over network accesses.
By taking advantage of earlier work in application proxying firewalls,
we were able to integrate a safe X proxy into our prototype easily.
% We have shown that one can
% guard access to system calls with a reference monitor
% constructed from process-tracing facilities;
We suspect that one can achieve enhanced control over
many other network communications of interest by leveraging existing
application-level proxies developed by the firewall community.
This would enable our techniques to be used in broader contexts.
The overlap with research into firewalls
lends hope that these problems can be solved satisfactorily.

One issue is how to interpose proxies forcibly upon
untrusted and uncooperative applications.
We currently use environment variables as hints---for
instance, we change the {\tt DISPLAY} variable to point
to a proxy X server, and disallow access to any other
X display---but this only works for well-behaved
applications that consult environment variables consistently.
One might consider implementing the hints also
with a shared library that replaces network
library calls with a safe call to a secure proxy.
Other tricks are also possible.

A more aggressive area for future work lies in shedding code
from the Janus implementation to increase its assurance level.
One particularly troubling aspect of Janus is that, though we
have tried to keep duplication to a minimum, Janus ends up
duplicating a number of privilege checks already found in the
kernel, which leaves room for inconsistencies and potential bugs.
We suspect that this would probably require increased support
from the operating system to access internal data structures;
a mechanism like SLIC might help substantially in this regard.

Finally, more experience with some of the applications suggested
in Chapter~\ref{applications} (or other applications as appropriate)
would help to better understand the advantages and limitations
of the Janus approach.

% \marginpar{smb's automounter idea}
% Steve Bellovin has suggested one especially intriguing idea
% for reducing 

\chapter{Conclusions}
\label{conc}

We have showed how confinement can be used to secure
systems that include untrusted and untrustworthy code.
%Furthermore, we have demonstrated that interposition on the
%OS interface, and in particular using tracing primitives
%to mediate the system call interface,
%is a powerful technique for implementing high-performance,
%user-level, general-purpose confinement tools.
We have demonstrated that interposition on the
OS interface is a powerful technique to achieve this goal,
and furthermore we have shown that existing process tracing
primitives can enable the construction of high-performance,
user-level, general-purpose confinement tools.
Our prototype, Janus, proved to be well-suited to a number
of compelling applications,
including security for mobile code and mobile agents as well as
security for potentially vulnerable daemons like {\tt sendmail}.
This shows that Janus is a powerful tool with broad applicability.
Finally, we analyzed the implications for OS designers,
noting that Janus requires only minimal support from the
operating system and arguing that OS designers ought to include
this support.
@


1.10
log
@*** empty log message ***
@
text
@d74 60
a258 60
Some other previous work has advocated the use of interposition
to improve system security.
Bump-in-the-stack implementations of {\sc ipsec} interpose on
the interface between the TCP/IP stack and the network driver
to add encryption and authentication to the IP protocol \cite{WB96}.
{\tt securelib} is a shared library that replaces
the C {\tt accept}, {\tt recvfrom}, and {\tt recvmsg} library calls
by a version that performs address-based authentication;
it is intended to protect security-critical Unix system daemons
\cite{securelib}.
Also, \cite{races} briefly describes an implementation of dynamic
detection and prevention of security-relevant race conditions that
works by interposing on dynamically-linked libraries.
Other research that also takes advantage of custom shared libraries
for non-security purposes can be found in \cite{3d-1,3d-2}.
However, interposition on the library interface is not
usable for confinement,
since a hostile application could bypass this access control
by simply issuing the dangerous system call directly
without invoking any library calls.
Therefore, we consider simple replacement of dangerous C library calls
with a safe wrapper insufficient in our extended context of
untrusted and possibly hostile applications.

Fernandez and Allen \cite{fernandez-allen} extend the
filesystem protection mechanism
with per-user access control lists.
Lai and Gray \cite{lai-gray} describe an approach that protects against
Trojan horses and viruses by limiting filesystem access:
their OS extension confines user processes to the
minimal filesystem privileges needed, relying on hints from
the command line and (when necessary) run-time user input.
TRON \cite{tron} discourages Trojan horses
by adding per-process capabilities support to the filesystem
discretionary access controls.
These works all suffer from two major limitations:
they require kernel modifications, and they do not address
issues such as control over process and network resources.

Domain and Type Enforcement (DTE) is a way to extend
the OS protection mechanisms to let system administrators
specify fine-grained mandatory access controls
over the interaction between security-relevant subjects and objects.
% Objects are assigned types and subjects are given domains;
% then the security policy is specified in a tabular format,
% with access limited based on the relevant (domain,type) table entry.
A research group at TIS has amassed considerable experience
with DTE and its practical application to Unix systems
\cite{dte-1,dte-2,dte-3,dte-4}.
DTE is an attractive and broadly applicable
approach to mandatory access control,
but its main disadvantage is that it requires kernel modifications;
we aimed instead for user-level protection.

More recently, Schneieder has given an automata-theoretic
treatment of interposition as a implementation technique for
security, yielding a theory of implementable enforcement mechanisms
\cite{agentry,schneider-tr}.
His work suggests that interposition is a very powerful
technique for implementing a large class of security policies.
@


1.9
log
@*** empty log message ***
@
text
@d52 23
d91 11
a101 2
For an example of a more modern treatment of the confinement problem,
see \cite{bk-confinement}.
d115 3
a117 2
which prevents them from running arbitrarily general
pre-existing applications (consider, e.g., self-modifying code,
d119 1
a119 1
intsruction atomicity, exception handlers, and the complex addressing
d121 1
a121 1
to get some idea of the implementation challenges \cite{LB94,SCK+93}).
d124 1
a124 1
found in both software fault isolation and Janus.
d140 18
d171 4
d209 3
d252 7
@


1.8
log
@*** empty log message ***
@
text
@d84 22
a105 1
pre-existing applications.
d123 11
a133 3
to execute untrusted code safely.
Like Java, it also has architecture-independence,
extensibility, and efficiency as important goals.
d140 2
a141 2
explicitly aim for extreme simplicity,
and keep the security mechanism orthogonal from
@


1.7
log
@*** empty log message ***
@
text
@d256 1
a256 1
some significant work on developing an intrusion detection backend,
@


1.6
log
@*** empty log message ***
@
text
@d1 8
d60 1
a60 1
in this paper, we have sidestepped the theoretical difficulties posed
d296 1
a296 1
in Section~\ref{apps} (or other applications as appropriate)
d304 1
a304 1
\section{Conclusions}
@


1.5
log
@*** empty log message ***
@
text
@d109 3
@


1.4
log
@*** empty log message ***
@
text
@d33 6
a38 5
\cite{janus-usenix} was published, Alexandrov et. al \cite{ufo}
showed how to implement a user-level filesystem extension with system
call interposition.
Like Janus, their implementation used the Solaris 2 {\tt /proc} system
call tracing facility to intercept system calls and simulate the semantics
d61 1
a61 1
see e.g. \cite{bk-confinement}.
d65 1
a65 1
first introduced by Wahbe et al.\ in 
d78 1
a78 1
Java \cite{java} is an comprehensive system
d88 1
a88 1
for instance, Java provides architecture-independence,
d94 1
a94 1
to safely execute untrusted code.
d105 1
a105 1
the non-security-critical functionality.
d244 1
a244 1
audit logs after you've got them; this seems to require
d251 1
a251 1
we were able to easily integrate a safe X proxy into our prototype.
@


1.3
log
@*** empty log message ***
@
text
@d310 1
a310 1
security for potentially-vulnerable daemons like {\tt sendmail}.
@


1.2
log
@*** empty log message ***
@
text
@d26 1
a26 1
system call interface can enable significant new functionality.
d40 1
a40 1
for user-level system call interposition would enable many other
d217 1
a217 1
requires a separate security analysis of its system call interface.
@


1.1
log
@Initial revision
@
text
@d17 1
a17 2
download code into the kernel which may interpose on selected OS
interfaces.
d127 1
a127 1
Lai and Gray \cite{lai-gray} describe an approach which protects against
d161 1
a161 1
applications which do not legitimately need many privileges.
d185 2
a186 2
system daemons (e.g. {\tt sendmail}) which already
require superuser privilege to execute anyhow.
d225 1
a225 1
On the other hand, platforms that do not support
d243 1
a243 1
audit logs after you've got them; that seems to require
d296 1
a296 1
systems which include untrusted and untrustworthy code.
@


1.1.1.1
log
@Adding in my master's to CVS control.
This version reflects the draft that I gave to Eric (I think).

@
text
@@
