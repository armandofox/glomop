head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	95.09.30.00.00.47;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	95.09.29.23.58.13;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	95.09.29.22.26.56;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@steve's ilp
@
text
@Your Name:

   Steven Gribble

Abstract Title:

   Document Centric Application Development in the GloMop layer

Is this a Microlab Project?

   No.

What chapter should this abstract be in?

   17.os           Operating Systems

Any graphics?  If so, how many?  Note caption title here.

Research Advisor:

   Prof. Eric Brewer
   brewer@@cs.berkeley.edu

Advisor's Affiliated Depts?
   
   EECS

Your outside affiliations if any:



Funding (for example: (NSF) EMC-84-19744):



Contact person: name, email, and phone number

   Steven Gribble
   gribble@@cs.berkeley.edu
   (510) 643-9435


Applications running in a mobile environment are faced with more
challenging issues than their wired counterparts.  For example,
network conditions may suddenly change (such as in the case of a
vertical handoff), affecting the quality of service that applications
can provide to their users.  The summary "GloMop: Global Mobile
Computing by Proxy" describes how a proxy can perform real-time
distillation to adaptively and transparently reduce document sizes.
The GloMop API insulates applications from the mechanics of these
tasks by providing a high-level, document centric communication layer.

A GloMop client application is presented with a model of the world in
which communication is in the form of document exchange.  Documents are
well-structured into semantically meaningful chunks, but the contents of
those chunks may be transparently distilled before being delivered to
the client; users of client applications may interactively request
refinements of these chunks.  Network management tasks are also
abstracted away from client applications.  The handling of minor network
events (such as handoffs between wireless networks of similar
characteristics) are delegated to the GloMop layer.  Client applications
are notified of major network events (such as handoffs between an
in-building wired ATM network and a city-wide wireless network), and are
given the opportunity to reevaluate their quality of service
preferences.

The GloMop layer is currently being implemented on a number of different
platforms, including Magic Cap and the Java language.  Testbed client
applications include an implemented workstation-synchronized MIME
capable mail client and a  WWW browser for the Magic Cap PDA, as well as
a Java-based generic document retrieval client.  Since code is a
valid data type in the Java language, Java-based client applications can
retrieve documents as well as the applets required to present
those documents.

@


1.2
log
@More updates...
@
text
@d54 12
a65 12
which communication is in the form of document exchange.  Documents
are well-structured into semantically meaningful chunks, but the
contents of those chunks may be transparently distilled before being
delivered to the client;  users of client applications may
interactively request refinements of these chunks (or portions of
chunks).  Network management tasks are also abstracted away from
client applications.  The handling of minor network events (such as
handoffs between wireless networks of similar characteristics) are
delegated to the GloMop layer.  Client applications are notified of
major network events (such as handoffs between an in-building wired
ATM network and a city-wide wireless network), and are given the
opportunity to reevaluate their quality of service preferences.
d67 8
a74 11
The GloMop layer is currently being implemented on a number of
different platforms, including Magic Cap and the Java language.
Testbed client applications include a workstation-synchronized MIME
capable mail client and a web-browser for the Magic Cap PDA, as well
as a Java-based generic document retrieval client.  Note that code is
a valid data type in the Java language; Java-based client applications
may therefore retrieve documents as well as the applets required to
present those documents.

A demonstration HTTP proxy can be seen at the following URL:
    http://www.cs.berkeley.edu/~fox/glomop/
@


1.1
log
@bummer
@
text
@d43 9
a51 9
Applications running in a mobile environment face more challenging
issues than their wired counterparts.  For example, network conditions
may suddenly change (such as in the case of a vertical handoff),
affecting the quality of service that applications can provide to their
users.  The summary "GloMop: Global Mobile Computing by Proxy" describes
how a proxy can perform real-time distillation to adaptively and
transparently reduce document sizes.  The GloMop API insulates
applications from the mechanics of these tasks by providing a
high-level, document centric communication layer.
d53 9
a61 2
The handling of minor network events (such
as handoffs between wireless networks of similar characteristics) are
d71 4
a74 2
as a Java-based generic document retrieval client (for which code is a
valid data type).
@
