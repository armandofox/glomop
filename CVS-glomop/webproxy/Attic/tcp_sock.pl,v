head	1.5;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.5
date	95.11.10.08.27.54;	author fox;	state dead;
branches;
next	1.4;

1.4
date	95.10.24.01.16.33;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	95.09.17.23.02.22;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	95.09.07.18.06.35;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	95.08.29.21.44.11;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.08.29.21.44.12;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remapping your prefs from different IP addrs now works. spurious
pythia.prefs removed once and for all.  tcp_sock.pl and
unregistered.html are gone (obsolete).  prefs are now read from
pythia.cf instead of being hardwired in prefs.pl.
@
text
@#
#  TCP socket support
#

use Socket;

chop($Myhostname = `hostname`);
$Myaddr = (gethostbyname($Myhostname))[4];

sub open_tcp_socket {
    local($fh, $host, $port) = @@_;
    local($name, $aliases, $proto) = getprotobyname('tcp');
    local($addr) = (gethostbyname($host))[4];
    local($me) = pack($Const{Sockaddr}, &AF_INET, 0, $Myaddr);
    local($them) = pack($Const{Sockaddr}, &AF_INET, $port, $addr);

    unless (socket($fh, &PF_INET, &SOCK_STREAM, $proto)) {
        $Err = "open_tcp_socket: socket: $!";
        return 0;
    }
    
    setsockopt($fh, &SOL_SOCKET, &SO_REUSEADDR, 1)
        || warn("Warning: setsockopt: $!");

    setsockopt($fh, &SOL_SOCKET, &SO_LINGER, pack("ii",1, 1000));

    # $Socks{$fh}++;

    unless (bind($fh, $me)) {
        $Err = "open_tcp_socket: bind: $!";
        return 0;
    }
    unless (connect($fh, $them)) {
        $Err = "open_tcp_socket: connect $host:$port: $!";
        return 0;
    }
    select($fh); $| = 1; select(STDOUT);
    return 1;
}

sub open_for_listening {
    local($fh, $port, $qsize) = @@_;
    $qsize = 10 unless $qsize;
    local($name,$aliases,$proto) = getprotobyname('tcp');
    local($bind) = pack($Const{Sockaddr}, &AF_INET, $port, "\0\0\0\0");

    unless (socket($fh, &PF_INET, &SOCK_STREAM, $proto)) {
        $Err = "socket: $!";
        return 0;
    }
    setsockopt($fh, &SOL_SOCKET, &SO_REUSEADDR, 1)
        || warn("Warning: setsockopt reuseaddr: $!");

    setsockopt($fh, &SOL_SOCKET, &SO_LINGER, pack('II', 1, 5))
        || warn("Warning: setsockopt linger: $!");
    unless (bind($fh, $bind)) {
        $Err = "bind: $!";
        return 0;
    }
    unless (listen($fh, $qsize)) {
        $Err = "listen: $!";
        return 0;
    }
    select($fh); $| = 1; select(STDOUT);
    return 1;
}
        
1;
@


1.4
log
@Added SO_LINGER option to tcp_sock.pl; proxy seems to work with gifmuncher.
@
text
@@


1.3
log
@registration mostly works.  email and name info is currently dropped on
the floor, but the mechanism for recording prefs info is sound.  prefs
info is not yet used in distillation decisions though.
@
text
@d24 3
a26 1
    
@


1.2
log
@added http error reporting and robustness
@
text
@a6 1
$Sockaddr= 'S n a4 x8';
d14 2
a15 2
    local($me) = pack($Sockaddr, &AF_INET, 0, $Myaddr);
    local($them) = pack($Sockaddr, &AF_INET, $port, $addr);
d43 1
a43 1
    local($bind) = pack($Sockaddr, &AF_INET, $port, "\0\0\0\0");
@


1.1
log
@Initial revision
@
text
@d7 1
d18 9
a26 8
    socket($fh, &PF_INET, &SOCK_STREAM, $proto) ||
        &Die( "open_tcp_socket: socket: $!");
    setsockopt($fh, &SOL_SOCKET, &SO_REUSEADDR, 1);
    $Socks{$fh}++;

    bind($fh, $me) || &Die( "open_tcp_socket: bind: $!");
    connect($fh, $them) || &Die( "open_tcp_socket: connect $host:$port: $!");
    select($fh); $| = 1; select(stdout);
d28 10
d40 27
@


1.1.1.1
log
@initial
@
text
@@
