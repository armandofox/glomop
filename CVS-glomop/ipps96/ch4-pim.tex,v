head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.2
date	96.01.19.03.21.28;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first round edits for IPPS96 camera-ready
@
text
@\subsection{Parallel Iterative Matching}

Dynamic scheduling is inspired by the parallel iterative matching algorithm
\cite{pim} implemented for crossbar switches of the AN2 ATM
network. During each
scheduling round, each input holds a list of packets each destined for some 
output. The PIM algorithm finds a 1-on-1 pairing between inputs and outputs
that leaves few idle ports.

PIM works by liberal use of messages that travel over a simple
hardware signalling network in the ATM switch. Inputs broadcast in
parallel to all outputs for which they have traffic, and each output
randomly selects one of the requesting inputs.
The selected input chooses an output from among all the
acceptances it receives, and this input--output pair does not
participate in future rounds of the protocol.  The AN2 hardware
timings are such that four iterations of the protocol can ``fit'' into
a communication round; any senders or receivers unpaired after four
iterations simply wait until the next communication phase.

A direct adaptation of PIM fails on an MPP for a number of reasons. The
dedicated hardware signalling network found inside the AN2 is generally
not available in
MPPs. All of the pairing communication must be performed using active
messages.
The cost of injecting large numbers of such messages
to achieve the broadcast from senders to receivers is prohibitive, and
 outweighs the benefit of the resulting 1-on-1 pairings.

Another problem is that PIM proceeds through a series of {\it
synchronized} iterations.  Outputs must be able to identify when all
signals from inputs have arrived before they select a candidate input,
and inputs must be able to identify when all acceptance messages have
arrived so they can select an output to form a pairing.  In a
message-passing MPP,
this synchronization carries  extra expense in the form of additional
synchronizing messages or global barriers between each of the
iterations of the pairing protocol.

@


1.1
log
@Initial revision
@
text
@d4 5
a8 4
\cite{pim} implemented for crossbar switches of the AN2 ATM network. At each
scheduling round, inputs hold a list of packets destined for some set of
outputs. The PIM algorithm finds a pairing between inputs and outputs which is
1-on-1 and leaves few idle ports.
d12 3
a14 3
parallel to all outputs for which they have traffic, and the outputs
randomly notify one of the requesting inputs that it has been
selected. The selected input chooses an output from among all the
d22 2
a23 1
dedicated hardware signalling network found inside the AN2 is not available in
d26 1
a26 1
The cost associated with injecting large numbers of such messages
d28 1
a28 1
outweighs the benefit of the resulting 1-on-1 pairings.
@


1.1.1.1
log
@initial import matches original submission to IPPS 96.
@
text
@@
