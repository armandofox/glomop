head	1.4;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.4
date	96.01.25.01.59.34;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.01.19.18.38.09;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.01.19.03.21.25;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@final edits for ipps96
@
text
@\subsection{Dynamic Scheduling Implementation}

Instead of statistically matching senders and receivers,
we construct pairings between senders and receivers 
by means of a {\em booking} transaction.
A booking from node $a$ to node $b$ for (future) round $r$ gives $a$ the
exclusive right to send data to $b$ in round $r$.

The DS algorithm is illustrated by figure \ref{ds}.  
Solid arrows are data transfer, dashed arrows are booking request/reply
messages.
At the
beginning of the communication phase, each sender has a list of
receivers to which it must send data (the ``S'' lists in the figure).
Within each round of the DS 
protocol, a sender that still has data to send, and is not completely
booked for the next few rounds, requests a booking from one of its
receivers for a future round.  Each receiver maintains a list indicating
which senders have been granted the right to send in each future
round (the ``R'' list).  This list is compared with the requesting
sender's list
(transmitted as a bitmap with 1's indicating free rounds) to determine
the earliest future round for
which a booking can be granted.  If there are no mutually-free
rounds within the  {\em lookahead window} used by the
receiver, the booking may be denied.  In the figure, node 2 receives a
booking request from node 3, and books node 3 into the next round, which
is shown as free in both node 2's ``R'' list and node 3's transmitted bitmap
of available rounds.
  Booking transactions are
handled using active messages.

Because bookings carry a bitmap of future available rounds,
a sender may only have a single outstanding booking request message at
any time. 
After the
current round's transfers are complete and the barrier passes, the
lists are shifted over and all the booked communications for the new
round begin.


\begin{figure}
\centerline{\psfig{figure=./graphs/ds.eps,height=\dsheight}}
\caption{The dynamic scheduling mechanism}
\label{ds}
\end{figure}


%  If two booking requests were
% outstanding to different receivers, both receivers might book the
% sender into the same round, violating the 1-on-1 pairing.

Rounds of the protocol are separated by barriers in order to give
every node in the system a consistent notion of time, so they can
negotiate about future rounds.  Scheduling proceeds concurrently with
data transfer; when a sender's lookahead window of upcoming rounds is
fully booked, that sender temporarily stops requesting bookings, in 
order to allow other senders to make
successful bookings.

Because DS avoids broadcasts, it uses far fewer messages per
successful pairing than PIM.  The observed rate of denials is less
than 1 percent per booking request message sent, i.e. 99
percent of the time, the cost of attempting the booking will be
amortized over a real data transfer resulting from the booking grant.

\subsection{Performance}

Figures
\ref{dscm5} and \ref{dsparagon}
illustrate the performance of DS on the Paragon
and CM-5.  
We were unable to take measurements on the Alewife machine,
partially due to the instability of its hardware and kernel. In
addition, porting of DS to the Alewife was complicated by that
machine's interrupt driven message reception and different atomicity
model (both the Paragon, on which the
DS code was originally developed, and the CM-5, to which it
was easily ported, use a polling model of message reception).
% Porting of DS to the Alewife is still in progress.

These graphs should be interpreted as follows.  The random
interleaving curve represents the best method from \cite{bk94}
for dealing
with irregular traffic; DS must perform at least this well
to justify its additional complexity. The
CSHIFT+barriers curve represents an upper bound on the
performance that DS could ever achieve; it corresponds to the case
where no denials occur, there is no booking overhead,
 and a full set of 1-to-1 pairings is produced.
The graphs clearly show that for sufficiently large block sizes the
extra efficiency afforded by near-permutation traffic outweighs
the overhead of performing bookings.

The next two graphs show how effective dynamic scheduling is at keeping
all nodes highly utilized. Figure \ref{ds-transpose} shows the behavior
of DS when the traffic is all-pairs communication (sequence of
permutations). DS is able to dynamically pair senders and receivers with
high network utilization. Figure \ref{ds-random} demonstrates the
effectiveness of DS on a random traffic pattern. In this case nodes
send data to randomly selected destinations.  DS is able to achieve very
high network utilization (few idle nodes) while preserving 1-on-1
communication.

\begin{figure}
\centerline{\psfig{figure=./graphs/ds.cm5.eps,height=\gheight}}
\caption{Dynamic scheduling on the 64-node CM-5.}
\label{dscm5}
\end{figure}

\begin{figure}
\centerline{\psfig{figure=./graphs/ds.paragon.eps,height=\gheight}}
\caption{Dynamic scheduling  on the 8-node Paragon.}
\label{dsparagon}
\end{figure}


\begin{figure}
\centerline{\psfig{figure=./graphs/DS-transpose.eps,height=\gheight}}
\caption{Dynamic scheduling keeps most senders busy for the duration
        of a communication phase when a transpose communication pattern
        is being used.}        
\label{ds-transpose}
\end{figure}


\begin{figure}
\centerline{\psfig{figure=./graphs/DS-random.eps,height=\gheight}}
\caption{Dynamic scheduling keeps most senders busy for the duration
        of a communication phase when a random communication pattern
        is being used.}        
\label{ds-random}
\end{figure}


 
@


1.3
log
@more minor edits for ipps
@
text
@d9 4
a12 1
The DS algorithm is illustrated by figure \ref{ds}.  At the
d14 2
a15 1
receivers to which it must send data.  Within each round of the DS
d18 1
a18 1
receivers for a future round.  Receivers maintain a table listing
d20 4
a23 2
round.  This table is compared with the requesting sender's table
(transmitted as a bitmap) to determine the earliest future round for
d26 5
a30 1
receiver, the booking may be denied.  Booking transactions are
d32 1
d36 4
d44 1
a44 12
\caption{{\bf The dynamic scheduling mechanism.}
Solid arrows are data transfer, dashed arrows are booking request/reply
messages. The ``S'' and ``R'' lists represent node-local send and
receive bookings for upcoming rounds; a number represents a booking for
that round, and ``F'' indicates an unbooked round.  Node 3 has no
booking for the upcoming round, so it transmits a booking request to 2
with a bit vector (1 signals an available round). Node 2 finds that it
is available to receive in the upcoming round, and that 3 is unbooked
at that time, so 2 returns the booking for the next round.  After the
current round's transfers are complete and the barrier passes, the
lists are shifted over and all the booked communications for the new
round begin.}
d107 1
a107 1
\caption{Dynamic scheduling measured on the 64-node CM-5.}
d113 1
a113 1
\caption{Dynamic scheduling measured on the 8-node Paragon.}
@


1.2
log
@first round edits for IPPS96 camera-ready
@
text
@d22 3
d29 12
a40 16
\caption{\def\baselinestretch{1.0}{\bf The dynamic scheduling mechanism.}
Four nodes of an MPP are represented by circles, solid arrows are
data transfer and dashed arrows represent booking request/reply
messages. The ``S'' and ``R'' lists represent send and receive booking tables
local to each node. In the tables a number represents a booking and `F' shows
that the round is still free. The leftmost entries represent the
current round, the next entry the upcoming round, etc.
Node 3 has not made a booking for the upcoming round, so transmits
an booking request to 2 with a bit vector (1 signals an available
round). Node 2 finds that it is available to receive in the upcoming round,
and that 3 is willing to send at that time, so returns the booking
for the next round.
After the current round's transfers are complete and the barrier
passes, the tables are shifted over and all the booked
communications for the new round begin.
}
d45 3
a47 6
Because bookings carry a bitmap of future available rounds,
a sender may only have a single outstanding booking request message at
any time. 
 If two booking requests were
outstanding to different receivers, both receivers might book the
sender into the same round, violating the 1-on-1 pairing.
d51 2
a52 4
negotiate sensibly about future rounds.  Scheduling proceeds at the
same time data transfer is occurring, and senders actively attempt to
obtain bookings as long as they have not fully booked the next few
rounds.  When a sender's ``eagerness window'' of upcoming rounds is
d59 1
a59 1
than 1 percent per booking request message sent. In other words, 99
@


1.1
log
@Initial revision
@
text
@d4 4
a7 4
pairing between senders and receivers in dynamic scheduling is
accomplished by means of a {\em booking} transaction.
A booking from node $a$ to node $b$ for round $r$ gives $a$ the
exclusive right to send data to $b$ in (future) round $r$.
d16 1
a16 1
rounds.  This table is compared with the requesting sender's table
d29 2
a30 2
messages. The two lists represent send and receive booking tables
local to the nodes. In the tables a number represents a booking and `F' shows
d50 1
a50 1
outstanding to different receivers, both receivers could book the
d82 1
a82 1
Porting of DS to the Alewife is still in progress.
d84 1
a84 1
The way to interpret these graphs is as follows.  The random
d88 2
a89 2
to be worth considering. The
CSHIFT+barriers line represents an upper bound on the
d138 1
@


1.1.1.1
log
@initial import matches original submission to IPPS 96.
@
text
@@
