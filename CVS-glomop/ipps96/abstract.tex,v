head	1.4;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.4
date	96.01.25.01.59.29;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.01.19.18.38.07;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.01.19.03.21.18;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.01.19.02.01.10;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.19.02.01.10;	author fox;	state Exp;
branches;
next	;


desc
@@


1.4
log
@final edits for ipps96
@
text
@\begin{abstract}

Brewer and Kuszmaul \cite{bk94} demonstrated how barriers and traffic
interleaving can alleviate the problem of bulk-transfer performance
degradation on the Thinking Machines CM-5, by exploiting the observation
that 1-on-1 communication avoids network congestion.
We apply and extend these techniques on the Intel Paragon and MIT
Alewife machines.  Because these machines lack the CM-5's fast hardware
support for barriers, we introduce a token-passing scheme that avoids
barriers while maintaining 1-on-1  communication.  We also introduce
a new algorithm, {\em distributed dynamic scheduling}, that brings
Brewer and Kuszmaul's
observations to bear on irregular traffic patterns by massaging traffic
into a sequence of near-permutations at runtime, without requiring any
preprocessing or global state.  The measured performance of
our algorithm exceeds that of traffic interleaving (the most effective
technique proposed in
\cite{bk94}) on all three platforms, and is comparable to the
performance of static scheduling, which requires preprocessing and
global state \cite{syr-bk94}.

\end{abstract}
@


1.3
log
@more minor edits for ipps
@
text
@d6 1
a6 1
that 1-on-1 communication (permutations) avoids network congestion.
d11 2
a12 1
a new algorithm, {\em distributed dynamic scheduling}, that brings their
@


1.2
log
@first round edits for IPPS96 camera-ready
@
text
@d5 1
a5 1
degradation on the Thinking Machines CM-5 by exploiting the observation
@


1.1
log
@Initial revision
@
text
@d3 17
a19 17
Brewer and Kuszmaul \cite{bk94} analyzed the
causes of bulk-transfer performance degradation on the Thinking Machines
CM-5, and demonstrated how barriers and traffic interleaving can 
alleviate the problem by exploiting the observation that one-on-one
communication (permutations) avoids network congestion.
In this paper we apply these techniques
to the Intel Paragon and MIT Alewife machines.
Because these machines lack the CM-5's
fast hardware support for barriers, we introduce a token-passing  scheme 
that avoids barriers while maintaining
one-on-one communication.  
We also introduce a new algorithm, {\em dynamic scheduling}, that brings their
observations to bear on irregular traffic patterns by massaging traffic into a
sequence of permutations at runtime.  The measured
performance of our algorithm exceeds that of the interleaving technique
proposed in
\cite{bk94} on all three platforms.
@


1.1.1.1
log
@initial import matches original submission to IPPS 96.
@
text
@@
