head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.2
date	96.01.19.03.21.21;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first round edits for IPPS96 camera-ready
@
text
@
\subsection{Goals and Map of Paper}

%Building on the work from the Brewer and Kuszmaul paper our goals were
%to evaluate the effectiveness of interleaving and permutations with
%barriers on two other MPPs. We implemented and measured their performance
%on an 8 node Intel Paragon and 4 node MIT Alewife machine \cite{alewife}.

%The performance increase obtained by using permutations with barriers
%was quite dramatic on the CM-5 (up to 390\%). We wanted to investigate how
%much of this benefit was due to the hardware support for fast
%barriers available on the CM-5.  Barriers synthesized by message
%passing are far less efficient and scale at best logarithmically. One
%of our goals was to explore alternative, less-expensive methods for ensuring 
%1-on-1 communication.

%Many applications cannot benefit from the permutations plus barriers
%technique if their communications pattern can not be forced into a
%sequence of uniform permutations. The next best technique introduced
%by \cite{bk94}, interleaving, is not nearly as effective. Our second
%goal was therefore to explore techniques which could bring the
%benefits of 1-on-1  communication to programs with irregular
%traffic patterns.  

The remainder of the paper is organized as follows. Chapter 2 presents
and discusses the results of directly implementing the Strata
techniques on the Paragon and Alewife machines. Chapter 3 discusses
the use of {\em token passing} as an alternative to using barriers to
separate permutations.  In chapter 4 we present an algorithm called
{\em dynamic scheduling}, which builds ``near permutations'' from
irregular traffic at run time.  Our algorithm is inspired by previous
work on parallel iterative matching \cite{pim}.  Finally, in chapter 5
we summarize the effectiveness of all these techniques, and discuss
implications for migration of existing applications and communication
library and coprocessor support.
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
%one-on-one communication.
d22 1
a22 1
%benefits of one-on-one communication to programs with irregular
@


1.1.1.1
log
@initial import matches original submission to IPPS 96.
@
text
@@
