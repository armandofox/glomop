head	1.3;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@% @;


1.3
date	96.01.25.01.59.32;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.01.19.03.21.22;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.19.02.01.11;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@final edits for ipps96
@
text
@

%\subsection{Problems With Barriers}

Unlike the CM-5, most MPPs do not offer hardware barrier support.
One software alternative is a tree barrier, whose latency grows
logarithmically with the number of nodes and whose per-node overhead is
proportional to the tree's arity.
%  approach to synthesizing barriers is a tree barrier. The nodes of
% the MPP are arranged into a $k$-ary tree structure.  
%         %Each processor notifies
%         %its parent after it enters the barrier and its children have entered the
%         %barrier.  When the root node receives notification from all its children, it
%         %initiates a wave of messages back down the tree.  As each node receives the
%         %downward messages, it can proceed past the barrier.  
% Clearly there is a
% tradeoff between barrier latency (depth of the tree) and overhead incurred at
% each node (arity of the tree).  The latency of a tree barrier grows
%logarithmically with the number of nodes.

Besides the latency and overhead, though, an inherent disadvantage of
using barriers to enforce 1-on-1 communication
is that any given node must wait at the barrier
until all nodes arrive, even if its communication peer for the next
round has already reached the barrier.
% (plus any latency for the barrier completion to
%propagate).  Consider three nodes (among many others) $n_{s1}, n_{s2}, n_r$, where
%$n_{s1}$ is sending to $n_r$ in the current round, and $n_{s2}$ will
% be sending to $n_r$ in the next round. 
%         %As each node finishes sending
%         %the data for the current round it enters the barrier.  The goal of
%         %separating the rounds with barriers is to preserve 1-on-1 
%         %communication (in this case, to prevent $n_{s2}$ from starting to send
%         %to $n_r$ until $n_{s1}$ is done).  
% If $n_{s1}$ and $n_{s2}$ both
% finish their sending for the current round there is
% no reason why $n_{s2}$ should be prevented from sending to $n_r$. Yet
% it must still wait at the barrier for all other nodes to complete
% their sending.
@


1.2
log
@first round edits for IPPS96 camera-ready
@
text
@d3 1
a3 1
\subsection{Problems With Barriers}
d8 1
a8 1
proportional to the arity of the tree.
d28 1
a28 1
$n_{s1}$ is sending to $n_r$ in the current round, and $n_{s2}$ will
@


1.1
log
@Initial revision
@
text
@d5 15
a19 12
Most MPPs do not offer hardware barrier support such as is found in the CM-5.
One software approach to synthesizing barriers is a tree barrier. The nodes of
the MPP are arranged into a $k$-ary tree structure.  
        %Each processor notifies
        %its parent after it enters the barrier and its children have entered the
        %barrier.  When the root node receives notification from all its children, it
        %initiates a wave of messages back down the tree.  As each node receives the
        %downward messages, it can proceed past the barrier.  
Clearly there is a
tradeoff between barrier latency (depth of the tree) and overhead incurred at
each node (arity of the tree).  The latency of a tree barrier grows
logarithmically with the number of nodes.
d21 7
a27 4
Another inherent disadvantage of barriers, when they are used to keep
permutations separate, is that every node must wait at the barrier
until all nodes arrive (plus any latency for the barrier completion to
propagate).  Consider three nodes (among many others) $n_{s1}, n_{s2}, n_r$, where
d29 11
a39 11
be sending to $n_r$ in the next round. 
        %As each node finishes sending
        %the data for the current round it enters the barrier.  The goal of
        %separating the rounds with barriers is to preserve 1-on-1
        %communication (in this case, to prevent $n_{s2}$ from starting to send
        %to $n_r$ until $n_{s1}$ is done).  
If $n_{s1}$ and $n_{s2}$ both
finish their sending for the current round there is
no reason why $n_{s2}$ should be prevented from sending to $n_r$. Yet
it must still wait at the barrier for all other nodes to complete
their sending.
@


1.1.1.1
log
@initial import matches original submission to IPPS 96.
@
text
@@
