head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.04.26.10.10.58;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.04.08.23.00.45;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.04.08.23.00.45;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@TYPEMAP
u_short				T_IV
# basic C types with 'const'
const int			T_IV
const unsigned		T_IV
const unsigned int		T_IV
const long			T_IV
const unsigned long		T_IV
const short			T_IV
const unsigned short		T_IV
const char			T_CHAR
const unsigned char		T_U_CHAR
const char *			T_PV
const unsigned char *		T_PV
const caddr_t			T_PV
const wchar_t *			T_PV
const wchar_t			T_IV
const bool_t			T_IV
const size_t			T_IV
const ssize_t			T_IV
const time_t			T_NV
const unsigned long *		T_OPAQUEPTR
const char **			T_PACKED
const void *			T_PTR
const Time_t *			T_PV
# socket stuff....i should be able to get this from typemap for Socket,
# but can't find it?
struct sockaddr_in *		T_PTROBJ
const struct sockaddr_in *	T_PTROBJ
# kerberos structures (from krb.h)
KTEXT		T_PTROBJ
KTEXT_ST *	T_PTROBJ
AUTH_DAT *	T_PTROBJ
CREDENTIALS *	T_PTROBJ
MSG_DAT *	T_PTROBJ
C_Block		T_KRB_DES_CBLOCK
Key_schedule	T_KRB_DES_KEY_SCHEDULE
# 32-bit-things.  These are typedef'd in bit32.h (part of Des library) 
# to be whatever a 32-bit int is on the host machine.  Fortunately perl's 
# "IV" type does this for us.
S_BIT32		T_IV
BIT32		T_IV
CREDENTIALS	T_KRB_CRED
KTEXT_ST	T_KRB_KTEXT_ST
MSG_DAT		T_KRB_MSG_DAT
struct sockaddr_in	T_OPAQUE
######################################################################
INPUT
T_KRB_CRED
	${var}_p = (CREDENTIALS *)vfy($arg,\"CREDENTIALS\",sizeof(CREDENTIALS))
T_KRB_KTEXT_ST
	${var}_p = (KTEXT)vfy($arg, \"KTEXT_ST\", sizeof(KTEXT_ST))
T_KRB_MSG_DAT
	${var}_p = (MSG_DAT *)vfy($arg, \"MSG_DAT\", sizeof(MSG_DAT))
T_KRB_DES_CBLOCK
	if (SvTRUE($arg)) { 
	   ${var}_p = (C_Block *)SvPV($arg, na);
        } else {
	   ${var}_p = (C_Block *)NULL;
	}
T_KRB_DES_KEY_SCHEDULE
	if (SvTRUE($arg)) {
	   int len;
	   (void)SvPV($arg,len);
	   memcpy((void*)${var}, (void*)(SvPV($arg,na)), len);
	}
######################################################################
OUTPUT
T_KRB_CRED
	if (&$var) {
	   sv_setpvn($arg, (char *)&$var, sizeof(CREDENTIALS));
	} else {
	   sv_setsv($arg, &sv_undef);
	   debug_warn("Setting CREDENTIALS to undef");
	}
T_KRB_KTEXT_ST
	if (&$var) {
   	   sv_setpvn($arg, (char *)&$var, sizeof(KTEXT_ST));
	} else {
	   sv_setsv($arg, &sv_undef);
	   debug_warn("Setting KTEXT_ST to undef");
	}
T_KRB_MSG_DAT
	if (&$var) {
	   sv_setpvn($arg, (char *)&$var, sizeof(MSG_DAT));
	} else {
	   sv_setsv($arg, &sv_undef);
	   debug_warn("Setting MSG_DATA to undef");
	}
T_KRB_DES_KEY_SCHEDULE
	if (&$var) {
	   sv_setpvn($arg, (char *)&$var, sizeof(Key_schedule));
	} else {
	   sv_setsv($arg, &sv_undef);
	   debug_warn("Setting Key_schedule to undef");
	}
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
C_Block		T_OPAQUE
d55 6
d62 5
a66 14
      memset((void *)&$var, 0, sizeof($var));
      if (SvPOK($arg)) {
        int len;
        (void)SvPV($arg,len);
        if (len == 16*8) {
	   /* unmarshal arguments - very dependent on des.h */
	   register int k;
	   register char *s = (char *)SvPV($arg, na);
	   for (k=0; k<16; k++) {
	       memcpy((void *)&($var\[k\]._), (void *)s, 8);
	       s += 8;
	   }
	} 
      }
@


1.1.1.1
log
@KerberosIV for Perl5 sources
@
text
@@
