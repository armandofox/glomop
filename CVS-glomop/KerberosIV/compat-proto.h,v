head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.04.09.05.45.03;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.04.08.23.00.46;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.04.08.23.00.46;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@sort of works, sort of
@
text
@#ifndef BSD_44_COMPAT_H
#define BSD_44_COMPAT_H

#include <sys/cdefs.h>
#include <sys/types.h>
#if defined(TCGETS) && defined(__osf__)
#include <termios.h>
#endif

/* need these for flock() emulation */
#ifndef LOCK_UN
#define LOCK_UN         0x01
#define LOCK_SH         0x02
#define LOCK_EX         0x04
#define LOCK_NB         0x08
#endif

#ifdef __hpux
#define srandom(s)	srand(s)
#define random()	rand()

#define setrgid(a)	setresgid(a, -1, -1)
#define setruid(a)	setresuid(a, -1, -1)
#define setegid(a)	setresgid(-1, a, -1)
#define seteuid(a)	setresuid(-1, a, -1)
#define setregid(a, b)	setresgid(a, b, -1)
#define setreuid(a, b)	setresuid(a, b, -1)

#define killpg(a, b)	kill(-a, b)
#endif /* __hpux */

#if defined(__sun) && (defined(__SVR4) || defined(__svr4__))
#define srandom(s)	srand(s)
#define random()	rand()

#define index(a,b)	strchr(a,b)
#define rindex(a,b)	strrchr(a,b)

#define bcmp(a,b,c)	memcmp(a,b,c)
#define bcopy(a,b,c)	memmove(b,a,c)
#define bzero(a,b)	memset(a,0,b)

#define MIN(a,b)	((a) < (b) ? (a) : (b))
#define MAX(a,b)	((a) > (b) ? (a) : (b))

#define setruid(a)	setuid(a)
#define setreuid(a,b)	(setuid(a) ? -1 : (seteuid(b) ? -1 : 0))

#define killpg(a, b)	kill(-a, b)

/* this should be the same as the macro in <sys/signal.h> */
#define sigmask(n)		((unsigned int)1 << (((n) - 1) & (32 - 1)))
#endif

/* we *REALLY* want long passwords */
#ifdef _PASSWORD_LEN
#undef _PASSWORD_LEN
#endif
#define _PASSWORD_LEN	128

#ifdef TCGETS
void cfsetspeed __P((struct termios *t, speed_t speed));
#endif
char *cgetcap __P((char *buf, const char *cap, int type));
int cgetclose __P((void));
int cgetent __P((char **buf, const char **db_array, const char *name));
int cgetfirst __P((char **buf, char **db_array));
int cgetmatch __P((char *buf, char *name));
int cgetnext __P((char **bp, char **db_array));
int cgetnum __P((char *buf, char *cap, long *num));
int cgetset __P((char *ent));
int cgetstr __P((char *buf, const char *cap, char **str));
int cgetustr __P((char *buf, char *cap, char **str));
__dead void err __P((int eval, const char *fmt, ...));
__dead void errx __P((int eval, const char *fmt, ...));
#ifdef FILE
char *fgetln __P((FILE *fp, size_t *lenp));
#endif
char *__findenv __P((const char *, int *)); 
char *getpass __P((const char *prompt));
int iruserok __P((unsigned long raddr, int superuser, const char *ruser,
		  const char *luser));
int rcmd __P((char **ahost, unsigned short rport, const char *locuser,
	      const char *remuser, const char *cmd, int *fd2p));
int rresvport __P((int *));
int ruserok __P((const char *rhost, int superuser, const char *ruser,
		 const char *luser));
int setenv __P((const char *name, const char *value, int));
int snprintf __P((char *str, size_t n, const char *fmt, ...));
char *strerror __P((int num));
void unsetenv __P((const char *name));
#ifdef va_end
__dead void verr __P((int eval, const char *fmt, va_list ap));
__dead void verrx __P((int eval, const char *fmt, va_list ap));
int vsnprintf __P((char *str, size_t n, const char *fmt, va_list ap));
void vwarn __P((const char *fmt, va_list ap));
void vwarnx __P((const char *fmt, va_list ap));
#endif
void warnx __P((const char *fmt, ...));
#if defined(__sun) && (defined(__SVR4) || defined(__svr4__))
int getpriority __P((int which, int who));
int setpriority __P((int which, int who, int priority));
#endif /* __sun && (__SVR4 || __svr4__) */

#endif /* BSD_44_COMPAT_H */
@


1.1
log
@Initial revision
@
text
@a98 2
#if 0
void warn __P((const char *fmt, ...));
a99 1
#endif
@


1.1.1.1
log
@KerberosIV for Perl5 sources
@
text
@@
