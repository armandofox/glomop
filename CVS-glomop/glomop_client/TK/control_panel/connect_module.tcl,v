head	1.4;
access;
symbols
	stable:1.4
	current:1.4
	release:1.4;
locks; strict;
comment	@# @;


1.4
date	96.06.14.21.11.31;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.06.07.01.55.30;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.06.05.21.13.54;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.23.36.11;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Whoohoo!  Created image browser application, added unauthenticated
connection, TOC parsing.
@
text
@#!/usr/sww/bin/wish -f

##
## gm_cp_conn button - the "proxy connection" control panel module
##
## This module is responsible for managing a connection to the proxy.
## If we're currently disconnected, it will display a series of
## CommandEntry widgets that enable the user to type in their
## username, kerberos credentials, etc, as well as a connect button.
## 
## If we're currently connected, it will display a series of label
## widgets that show the current connection state, as well as a
## disconnect button.
## 

# utility function for creating a "CommandEntry" Widget
proc CommandEntry { name label width args } {
    frame $name
    label $name.label -text $label -anchor w -width 12
    eval {entry $name.entry -relief sunken -width $width} $args
    pack $name.label -side left
    pack $name.entry -side right -fill x -expand true
    return $name.entry
}

# what to do when connect button is called
proc gm_cp_doconn { fm constate } {
    global $constate

    set phost [set ${constate}(proxyhost)]
    set pport [set ${constate}(proxyport)]
    if {$pport == ""} {
	puts "setting to gmproxy"
	set pport gmproxy   # tells glomop to call getservbyname on gmproxy
    }
    set uname [set ${constate}(username)]
    set upass [set ${constate}(userpass)]
    set krelm [set ${constate}(krbrealm)]
    set tgtlf [set ${constate}(tgtlife)]
    set usekb [set ${constate}(usekrb)]
    if {$usekb == 0} {
	if [catch {gm_connectproxy_unauth $phost $pport $uname} result] {
	    puts stderr $result
	} else {
	    # connection succeeded
	    set ${constate}(connected) 1
	    set ${constate}(connectid) $result
	    gm_cp_conn $fm $constate
	}
    } else {
	if [catch {gm_connectproxy $phost $pport $uname $upass $krelm $tgtlf} \
		result] {
	    puts stderr $result
	} else {
	    # connection succeeded
	    set ${constate}(connected) 1
	    set ${constate}(connectid) $result
	    gm_cp_conn $fm $constate
	}
    }
}

# what to do when disconnect button is called
proc gm_cp_dodisc { fm constate } {
    global $constate

    # grab the current connection id, and call gm_disconnectproxy

    set conid [set ${constate}(connectid)]
    if [catch {gm_disconnectproxy $conid} result] {
	# disconnection failed !?
	puts stderr $result
	set ${constate}(connected) 0
	gm_cp_conn $fm $constate
    } else {
	# disconnection worked
	set ${constate}(connected) 0
	gm_cp_conn $fm $constate
    }
}

##
## The meat of the module - the button event procedure.
##

proc gm_cp_conn { fm constate } {
    global ${constate}
    global gm_default_proxyhost gm_default_proxyport  # in .gmwishrc file
    global gm_default_username  gm_default_krbrealm   # in .gmwishrc file
    global gm_default_tgtlife   gm_default_usekrb     # in .gmwishrc file

    # destroy what was in fm before
    eval destroy [winfo children $fm]

    # if global state array members don't exist, initialize them.
    foreach index {connected connectid usekrb} {
	if ![info exists ${constate}($index)] {
	    set tmpname "gm_default_"
	    append tmpname $index
	    if [info exists $tmpname] {
		set ${constate}($index) [set $tmpname]
	    } else {
		set ${constate}($index) 0
	    }
	}
    }
    foreach index {proxyhost proxyport username krbrealm userpass} {
	if ![info exists ${constate}($index)] {
	    set tmpname "gm_default_"
	    append tmpname $index
	    if [info exists $tmpname] {
		set ${constate}($index) [set $tmpname]
	    } else {
		set ${constate}($index) ""
	    }
	}
    }
    foreach index {tgtlife} {
	if ![info exists ${constate}($index)] {
	    set tmpname "gm_default_"
	    append tmpname $index
	    if [info exists $tmpname] {
		set ${constate}($index) [set $tmpname]
	    } else {
		set ${constate}($index) 1
	    }
	}
    }

    # check to see whether or not we're connected yet
    set conval [set ${constate}(connected)]
    if { $conval == 0 } {
	# we're not yet connected - add connection command widgets
	set width [winfo width $fm]
	message $fm.msg -text "\nIn order to connect to a proxy, fill in \
            the following parameters and press the \"Connect to Proxy\" \
            button.\n" -width [expr $width - 30]
	CommandEntry $fm.pname {Proxy Host:} 35 -textvar ${constate}(proxyhost)
	CommandEntry $fm.pport {Proxy Port:} 35 -textvar ${constate}(proxyport)
	CommandEntry $fm.kname {Kerberos ID:} 35 -textvar ${constate}(username)
	CommandEntry $fm.kpass {Password:} 35 -textvar ${constate}(userpass) \
		-show false
	CommandEntry $fm.krealm {Realm:} 35 -textvar ${constate}(krbrealm)
	CommandEntry $fm.ktgt {TGT lifetime:} 35 -textvar ${constate}(tgtlife)
	checkbutton $fm.kusekrb -text "Use Kerberos" -variable \
		${constate}(usekrb)
	button $fm.connect -text "Connect to Proxy" -command \
		"gm_cp_doconn $fm $constate" -relief raised -borderwidth 1
	pack $fm.msg $fm.pname $fm.pport $fm.kname $fm.kpass $fm.krealm \
		$fm.ktgt -fill x -side top
	pack $fm.kusekrb -side top -fill none -expand 0
	pack $fm.connect -side top -pady 25
    } else {
	# we are connected - add disconnection command widgets
	set width [winfo width $fm]
	set ttext "\nCurrently connected to proxy\
		\"[set ${constate}(proxyhost)]\" "
	set ptext [set ${constate}(proxyport)]
	if {$ptext != ""} {
	    append ttext "port \"$ptext\" "
	}
	append ttext "as user \"[set ${constate}(username)]\" in realm\
		\"[set ${constate}(krbrealm)]\"."

	message $fm.msg -text "$ttext" -width [expr $width - 30]
	button $fm.disconnect -text "Disconnect from Proxy" -command \
		"gm_cp_dodisc $fm ${constate}"
	pack $fm.msg -side top -fill x
	pack $fm.disconnect -side top -pady 25
    }
}
@


1.3
log
@Fixed up so gmwishrc fetched instead of wishrc
@
text
@d40 10
a49 3
    if [catch {gm_connectproxy $phost $pport $uname $upass $krelm $tgtlf} \
	    result] {
	puts stderr $result
d51 9
a59 4
	# connection succeeded
	set ${constate}(connected) 1
	set ${constate}(connectid) $result
	gm_cp_conn $fm $constate
d90 1
a90 1
    global gm_default_tgtlife                         # in .gmwishrc file
d96 1
a96 1
    foreach index {connected connectid} {
d145 2
d151 1
@


1.2
log
@Made it so that if gm_default_{username,...} variables are set globally
(intended for .wishrc file or .wishrc to source .glomoprc file), then
those defaults will be put into the ${constate}() array and also into
the connection dialog box.
@
text
@d76 3
a78 3
    global gm_default_proxyhost gm_default_proxyport  # in .wishrc file
    global gm_default_username  gm_default_krbrealm   # in .wishrc file
    global gm_default_tgtlife                         # in .wishrc file
@


1.1
log
@This is the initial proxy connection and authentication module.  It
takes advantage of the gm_connectproxy and gm_disconnectproxy
functions.
@
text
@a74 1
    # global state variable for this button
d76 3
d83 33
a115 10
    # if the global state array doesn't exist, initialize it.
    if ![info exists ${constate}] {
	set ${constate}(connected) 0
	set ${constate}(proxyhost) ""
	set ${constate}(proxyport) ""
	set ${constate}(username) ""
	set ${constate}(krbrealm) ""
	set ${constate}(tgtlife) ""
	set ${constate}(userpass) ""
	set ${constate}(connectid) 0
@
