head	1.5;
access;
symbols
	stable:1.5
	current:1.5
	release:1.5;
locks; strict;
comment	@# @;


1.5
date	96.06.14.21.11.32;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.06.05.21.13.52;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.06.04.02.55.08;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.06.03.23.35.30;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.06.01.01.45.43;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Whoohoo!  Created image browser application, added unauthenticated
connection, TOC parsing.
@
text
@#!/usr/sww/bin/wish -f

##
## The GM_CreateControlPanel procedure will create a new control
## panel called "$top", including the standard control panel buttons.
## A side effect of creating a control panel called $top is that a
## global array called "$top.constate" is created, to hold state
## information pertaining to this instantiation of the glomop
## library.  Included in this state are the following array indices:
##
##    connected - 0 if disconnected from proxy, 1 if connected to proxy
##    proxyhost - the hostname of the proxy (if connected)
##    proxyport - the port number of proxy (if connected)
##    username  - the kerberos principle name of user (if connected)
##    userpass  - the kerberos password of the user (if connected)
##    krbrealm  - the kerberos realm of the user (if connected)
##    tgtlife   - the TGT lifetime of this connection (if connected)
##    connectid - the connection id of this connection
##
## Accessing these variables is a little tricky.  Here's how I do it:
##
##  set arname $top.constate
##  set conval [set ${arname}(connected)]   # sets conval to connected

proc GM_CreateControlPanel { top } {
    # create the control panel
    toplevel $top
    wm title $top "GloMop Control Panel"

    # want two frames - one for the buttonbar canvas, one for panel info
    frame $top.c
    canvas $top.c.canvas -width 90 -height 300 -bg LightBlue1 \
	    -yscrollcommand [list $top.c.yscroll set]
    scrollbar $top.c.yscroll -orient vertical \
	    -command [list $top.c.canvas yview] -bg LightBlue1
    pack $top.c.yscroll -side right -fill y
    pack $top.c.canvas -side left -fill both -expand true
    pack $top.c -side left -fill y -expand true

    # set up the decorations around the working area
    frame $top.cframe -width 400 -height 300
    pack $top.cframe -side right -fill y -expand false
    frame $top.cframe.cbar -width 400 -height 3 -bg black
    pack $top.cframe.cbar -side top -fill x

    # the working area
    frame $top.cframe.cp -width 400 -height 300
    pack $top.cframe.cp -side top -fill both

    frame $top.cframe.bbar -width 400 -height 3 -bg black
    pack $top.cframe.bbar -side bottom -fill x

    # create a frame inside the canvas to hold all buttons
    set f [frame $top.c.canvas.f -bd 3 -bg LightBlue1]
    $top.c.canvas create window 0 0 -anchor nw -window $f

    # add some standard buttons
    GM_CPAddButton $top con { -text "connect\noptions" -command \
	    "gm_cp_conn $top.cframe.cp $top.constate " -borderwidth 1 \
            -relief raised }
    GM_CPAddButton $top cp { -text "QoS\nprefs" -command \
	    "gm_cp_qos $top.cframe.cp $top.constate" -borderwidth 1 \
	    -relief raised }

    # make connection button come up as default
    gm_cp_conn $top.cframe.cp $top.constate
}


##
## The GM_CPAddButton procedure allows you to add buttons and button code
## to an already created glomop control panel.  You must pass in the name
## of the control panel that you created, the name of the button to create,
## and arguments to pass to the button creation procedure.  These arguments
## should include the command to call when the button is pressed.  I
## usually call it this like:
##
##  GM_CPAddButton .foo credits { -text "Credits" -command \
##	"gm_cp_credits .foo.cframe.cp .foo.constate" -borderwidth 1 \
##      -relief raised }
##
## The "gm_cp_credits" procedure then takes two arguments.  The first
## is the frame that the button command should draw in when pressed.  The
## second is the global connection state.  This means that the first line
## of the "gm_cp_credits" procedure should declare the second argument
## as global.  Also, the second line should destroy whatever the previous
## module has drawn in the frame.  This means all button procedures should
## look like:
##
##   proc gm_cp_credits { dframe constate } {
##     global $constate
##     eval destroy [winfo children $dframe]
##
##     ... other stuff
## }

proc GM_CPAddButton { top bname bargs } {
    # create the button
    set f $top.c.canvas.f
    
    eval {button $f.$bname} $bargs
    pack $f.$bname -side top -fill x -padx 2 -pady 2
    tkwait visibility $f.$bname
    set width [winfo width $f]
    set height [winfo height $f]
    $top.c.canvas config -scrollregion "0 0 $width $height"
    $top.c.canvas config -width $width -height 300
}
@


1.4
log
@Made it so that if gm_default_{username,...} variables are set globally
(intended for .wishrc file or .wishrc to source .glomoprc file), then
those defaults will be put into the ${constate}() array and also into
the connection dialog box.
@
text
@d62 2
a63 1
	    "gm_cp_qos $top.cframe.cp" -borderwidth 1 -relief raised }
@


1.3
log
@More niceties added, including the ability to not specific a port
number and use the "gmproxy" getservbyname entry automatically.
@
text
@d6 1
a6 1
## A side effect of creating a control pannel called $top is that a
@


1.2
log
@The control panel is now modular - there is an interface (albeit a rough
one) for adding new buttons and control interfaces to the panel, in the
old Macintosh control panel interface style.
@
text
@a2 4
## dependencies
source "connect_module.tcl"
source "qos_module.tcl"

@


1.1
log
@Basic structure of the Tcl/Tk GloMop control panel finished.  Packing
in Tk sucks, especially if you don't understand it fully.
@
text
@d3 27
a29 1
proc GM_ShowControlPanel { top } {
d36 1
a36 1
    canvas $top.c.canvas -width 90 -height 300 -bg white \
d39 1
a39 1
	    -command [list $top.c.canvas yview]
d44 12
a55 2
    frame $top.cp -width 300 -height 300
    pack $top.cp -side right -fill y -expand false
d58 1
a58 1
    set f [frame $top.c.canvas.f -bd 3 -bg white]
d61 6
a66 5
    # add some buttons to the frame
    button $f.con -text "connect\noptions" -command "gm_cp_conn $top.cp" \
	    -borderwidth 1 -relief raised
    button $f.qos -text "QoS\nprefs" -command "gm_cp_qos $top.cp" \
	    -borderwidth 1 -relief raised
d68 3
a70 2
    pack $f.con -side top -fill x -padx 2 -pady 2
    pack $f.qos -side top -fill x -padx 2 -pady 2
a71 1
    tkwait visibility $f.qos
d73 34
a110 16
    
    gm_cp_conn $top.cp
}

proc gm_cp_conn { fm } {
    # destroy what was in fm before
    eval destroy [winfo children $fm]

    # add connection stuff
}

proc gm_cp_qos { fm } {
    # destroy what was in fm before
    eval destroy [winfo children $fm]

    # add connection stuff 
@
