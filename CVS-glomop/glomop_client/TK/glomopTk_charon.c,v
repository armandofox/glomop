head	1.5;
access;
symbols
	stable:1.4
	current:1.4
	release:1.4;
locks; strict;
comment	@ * @;


1.5
date	96.08.23.19.57.39;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.06.14.21.10.21;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.06.07.01.55.01;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.06.01.00.04.34;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.05.31.22.15.54;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merged with Wink source tree.  It all works now.
@
text
@/*
   Copyright (C) 1994-1996 by the Regents of the University of California.
   Commercial and non-commercial licenses to use this software must be arranged
   by the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
   <fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
   Prof. Randy Katz <randy@@cs.berkeley.edu>.
*/

/*
 * glomopTk_charon.c --
 *
 * This file provides an implementation of the indirect authentication
 * module described in the paper "Security on the Move: Indirect
 * Authentication using Kerberos".
 * 
 * $Id: glomopTk_charon.c,v 1.1 96/08/19 14:39:26 glomop Exp $
 * 
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/time.h>

#include "glomopTk.h"
#include "des.h"

static char gm_rcsid[] = "$Id";

GMStr2 ch_build_authenticator(char *krb_user, char *krb_realm);

int charon_authenticate(int fd, char *krb_user, char *krb_pass,
			char *krb_realm, byte tgt_lifetime,
			char *device_id, char *session_key)
{
  /*** Phases of authentication:
    1. Send initial handshake message.
    2. Receive encrypted TGT
       2a. Decrypt TGT using krb_pass, extract tgt_key
       2b. Zero out tgt_key
    3. Send back decrypted TGT and authenticator
    4. Receive encrypted proxy ticket
       4a. Decrypt proxy ticket using tgt_key, extract proxy_key
       4b. Zero out proxy_key
    5. Send back decrypted proxy ticket
    6. Receive auth_ok or auth_err

    If a protocol or session failure occurs, the socket will be closed
    and 0 returned. Otherwise, the proxy key will be copied into
    session_key, and 1 returned.
  ***/
  
  GMMessage        outMsg;
  GMStr1           theStr1;
  GMStr2           theStr2;
  des_cblock       kerb_key, tgt_key;
  des_key_schedule kerb_sched, tgt_sched;

  if (krb_pass == NULL) {
    fprintf(stderr, "Bogus krb_pass in charon_auth.\n");
    close(fd);
    return 0;
  }
  des_string_to_key(krb_pass, (des_cblock *) &(kerb_key[0]));
  des_key_sched(kerb_key, kerb_sched);

  outMsg = GMMessage_newMessage();

#ifdef DEBUG
  printf("Starting phase 1.\n");
#endif
  /* Phase 1 - build handshake message */
  if (!ch_build_handshake(krb_user, device_id, krb_realm, tgt_lifetime, 
			  "AUTH_KERB", &outMsg)) {
    fprintf(stderr, "Couldn't build handshake message in charon_auth.\n");
    close(fd);
    return 0;
  }
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif
  if (!GMMessage_writeToStream(outMsg, fd)) {
    fprintf(stderr, "Couldn't write out handshake message in charon_auth.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }

#ifdef DEBUG
  printf("Starting phase 2.\n");
#endif
  /* Phase 2 - Receive encrypted TGT */
  if (!GMMessage_readFromStream(&outMsg, fd)) {
    fprintf(stderr, "readFromStream failed in phase 2 of authentication.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif
  if (GMMessage_isError(outMsg)) {
    fprintf(stderr, "Protocol level failure in phase 2 of authentication.\n");
    GMMessage_dumpError(outMsg, stderr);
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  /* 2a. Decrypt TGT using krb_pass, extract tgt_key */
  GMMessage_beginExtract(&outMsg);
  theStr2 = GMMessage_getNextStr2(&outMsg);
  if ((theStr2.length == 0) || (theStr2.length % 8 != 0)) {
    fprintf(stderr, "Bogus encrypted krb_ticket in phase 2.\n");
    GMMessage_destroy(outMsg);
    GMStr2_destroy(theStr2);
    close(fd);
    return 0;
  }
  des_pcbc_encrypt((C_Block *) theStr2.data, (C_Block *) theStr2.data,
		   (S_BIT32) theStr2.length, kerb_sched,
		   (C_Block *) kerb_key, 0);
  memcpy((void *) tgt_key, (void *) theStr2.data, (size_t) 8);
  des_key_sched(tgt_key, tgt_sched);

  /* 2b. Zero out tgt_key */
  memset((void *) theStr2.data, (int) '\0', (size_t) 8);
  GMMessage_clearMessage(&outMsg);

#ifdef DEBUG
  printf("starting phase 3.\n");
#endif
  /* Phase 3 - Send back decrypted TGT and encrypted authenticator */
  if (!GMMessage_addStr2(&outMsg, theStr2)) {
    fprintf(stderr, "Couldn't add decrypted TGT in phase 3.\n");
    GMStr2_destroy(theStr2);
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  GMStr2_destroy(theStr2);
  theStr2 = ch_build_authenticator(krb_user, krb_realm);
  if (theStr2.length == 0) {
    fprintf(stderr, "Couldn't build authenticator in phase 3.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  des_pcbc_encrypt((C_Block *) theStr2.data, (C_Block *) theStr2.data,
		   (S_BIT32) theStr2.length, tgt_sched,
		   (C_Block *) tgt_key, 1);
  if (!GMMessage_addStr2(&outMsg, theStr2)) {
    fprintf(stderr, "Couldn't add authenticator in phase 3.\n");
    GMMessage_destroy(outMsg);
    GMStr2_destroy(theStr2);
    close(fd);
    return 0;
  }
  GMStr2_destroy(theStr2);
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif DEBUG
  if (!GMMessage_writeToStream(outMsg, fd)) {
    fprintf(stderr, "Couldn't write out auth message in charon_auth.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  GMMessage_clearMessage(&outMsg);

#ifdef DEBUG
  printf("Starting phase 4.\n");
#endif
  /* Phase 4 - Receive encrypted proxy ticket */
  if (!GMMessage_readFromStream(&outMsg, fd)) {
    fprintf(stderr, "readFromStream failed in phase 4 of authentication.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif DEBUG
  if (GMMessage_isError(outMsg)) {
    fprintf(stderr, "Protocol level failure in phase 4 of authentication.\n");
    GMMessage_dumpError(outMsg, stderr);
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  /* 4a. Decrypt proxy ticket using tgt_key, extract proxy_key */
  GMMessage_beginExtract(&outMsg);
  theStr2 = GMMessage_getNextStr2(&outMsg);
  if ((theStr2.length == 0) || (theStr2.length % 8 != 0)) {
    fprintf(stderr, "Bogus encrypted proxy ticket in phase 4.\n");
    GMMessage_destroy(outMsg);
    GMStr2_destroy(theStr2);
    close(fd);
    return 0;
  }
  des_pcbc_encrypt((C_Block *) theStr2.data, (C_Block *) theStr2.data,
		   (S_BIT32) theStr2.length, tgt_sched,
		   (C_Block *) tgt_key, 0);
  memcpy((void *) session_key, (void *) theStr2.data, (size_t) 8);
  /* 4b. Zero out proxy_key */
  memset((void *) theStr2.data, (int) '\0', (size_t) 8);
  GMMessage_clearMessage(&outMsg);

#ifdef DEBUG
  printf("Starting phase 5.\n");
#endif
  /* Phase 5 - Send back decrypted proxy ticket */
  if (!GMMessage_addStr2(&outMsg, theStr2)) {
    fprintf(stderr, "Couldn't add decrypted proxy key in phase 5.\n");
    GMStr2_destroy(theStr2);
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  GMStr2_destroy(theStr2);
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif DEBUG
  if (!GMMessage_writeToStream(outMsg, fd)) {
    fprintf(stderr, "Couldn't write out proxy message in charon_auth.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  GMMessage_clearMessage(&outMsg);

#ifdef DEBUG
  printf("Starting phase 6.\n");
#endif
  /* Phase 6 - Receive auth_ok or auth_err */
  if (!GMMessage_readFromStream(&outMsg, fd)) {
    fprintf(stderr, "readFromStream failed in phase 4 of authentication.\n");
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
#ifdef DEBUG
  GMMessage_dump(outMsg, stdout);
#endif DEBUG
  if (GMMessage_isError(outMsg)) {
    fprintf(stderr, "Protocol level failure in phase 6 of authentication.\n");
    GMMessage_dumpError(outMsg, stderr);
    GMMessage_destroy(outMsg);
    close(fd);
    return 0;
  }
  GMMessage_beginExtract(&outMsg);
  theStr1 = GMMessage_getNextStr1(&outMsg);
  if ((theStr1.length == 0) || (strncmp(theStr1.data, ERR_STR, 2) == 0)) {
    fprintf(stderr, "Error in authentication - OK message not received.\n");
    GMMessage_dumpError(outMsg, stderr);
    close(fd);
    GMMessage_destroy(outMsg);
    GMStr1_destroy(theStr1);
    return 0;
  }
  GMMessage_destroy(outMsg);
  GMStr1_destroy(theStr1);
  return 1;
}


int ch_build_handshake(char *krb_user, char *device_id, char *krb_realm,
		       byte tgt_lifetime, char *authtype, GMMessage *theMsg)
{
  GMStr1 the1;
  GMStr2 the2;
  i16    klen;
  unsigned char *args;

  if (strlen(krb_user) >= 255) {
    fprintf(stderr, "krb_user is too long - must be < 255 bytes.\n");
    return 0;
  }
  if (strlen(device_id) >= 255) {
    fprintf(stderr, "device_id is too long - must be < 255 bytes.\n");
    return 0;
  }
  if (strlen(krb_realm) >= 65534) {
    fprintf(stderr, "krb_realm is too long - must be < 65534 bytes.\n");
    return 0;
  }

  the1 = GMStr1_defFromBytes(krb_user, (byte) strlen(krb_user));
  if (!GMMessage_addStr1(theMsg, the1)) {
    fprintf(stderr, "addStr1 failed for krb_user in build_handshake.\n");
    GMStr1_destroy(the1);
    return 0;
  }
  GMStr1_destroy(the1);

  the1 = GMStr1_defFromBytes(device_id, (byte) strlen(device_id));
  if (!GMMessage_addStr1(theMsg, the1)) {
    fprintf(stderr, "addStr1 failed for device_id in build_handshake.\n");
    GMStr1_destroy(the1);
    return 0;
  }
  GMStr1_destroy(the1);
  
  the1 = GMStr1_defFromBytes(authtype, (byte) strlen(authtype));
  if (!GMMessage_addStr1(theMsg, the1)) {
    fprintf(stderr, "addStr1 failed for %s.\n", authtype);
    GMStr1_destroy(the1);
    return 0;
  }
  GMStr1_destroy(the1);

  args = (unsigned char *) malloc(sizeof(unsigned char) *
				  (strlen(krb_realm) + 1));
  if (args == NULL) {
    fprintf(stderr, "Out of memory in build_handshake.\n");
    return 0;
  }
  klen = (i16) strlen(krb_realm);
  memcpy(args, krb_realm, (size_t) klen);
  *(args + (long int) klen) = (unsigned char) tgt_lifetime;
  the2 = GMStr2_defFromBytes(args, (i16) (klen + 1));
  free(args);
  if (!GMMessage_addStr2(theMsg, the2)) {
    fprintf(stderr, "addStr2 failed for krb_realm etc. in build_handshake.\n");
    GMStr2_destroy(the2);
    return 0;
  }
  GMStr2_destroy(the2);

  if (!GMMessage_addi16(theMsg, (i16) CHARON_VERSION)) {
    fprintf(stderr, "addi16 failed for CHARON_VERSION in build_handshake.\n");
    return 0;
  }

  return 1;
}

GMStr2 ch_build_authenticator(char *krb_user, char *krb_realm)
{
  /* the authenticator structure should look like:
     
     krb_user (null-terminated string);
     krb_inst (0x00);
     krb_realm (null_terminated string);
     checksum (0x00 0x00 0x00 0x00)
     (byte) time.usec;   from gettimeofday
     (i32) time.seconds;  from gettimeofday

     then rounded up to even 8 byte length, padding with zeroes
  */

  GMStr2           retStr2;
  int              authlen, authpad, authtot;
  unsigned char   *cptr;
  struct timeval   tp;
  struct timezone  tzp;


  /* calculate length of authenticator */
  authlen = strlen(krb_user) + strlen(krb_realm) + 3 + 4 + 5;
  authpad = authlen % 8;
  if (authpad != 0)
    authpad = 8 - authpad;
  authtot = authlen + authpad;

  /* allocate space for authenticator */
  retStr2.length = (i16) authtot;
  retStr2.data = (unsigned char *) malloc(sizeof(unsigned char) * authtot);
  if (retStr2.data == NULL) {
    fprintf(stderr, "Out of memory in ch_build_authenticator.\n");
    retStr2.length = (i16) 0;
    return retStr2;
  }

  cptr = retStr2.data;
  /* now start building it */
  strcpy(cptr, krb_user);
  cptr = cptr + (unsigned long) (strlen(cptr) + 1);
  *cptr = '\0';
  cptr = cptr + (unsigned long) 1;
  strcpy(cptr, krb_realm);
  cptr = cptr + (unsigned long) (strlen(cptr) + 1);
  *cptr = '\0';  cptr = cptr + (unsigned long) 1;
  *cptr = '\0';  cptr = cptr + (unsigned long) 1;
  *cptr = '\0';  cptr = cptr + (unsigned long) 1;
  *cptr = '\0';  cptr = cptr + (unsigned long) 1;

  if (gettimeofday(&tp, &tzp) != 0) {
    fprintf(stderr, "gettimeofday failed in ch_build_auth..\n");
    free(retStr2.data);
    retStr2.length = 0;
    return retStr2;
  }
  *cptr = (unsigned char) tp.tv_usec;
  cptr = cptr + (unsigned long) 1;
  tp.tv_sec = htonl(tp.tv_sec);
  memcpy(cptr, &(tp.tv_sec), (size_t) 4);
  cptr = cptr + (unsigned long) 4;
  memset(cptr, (int) '\0', (size_t) authpad);

  /* Ok - built!  Return that puppy */
  return retStr2;
}
@


1.4
log
@Whoohoo!  Created image browser application, added unauthenticated
connection, TOC parsing.
@
text
@d2 8
d16 1
a16 1
 * $Id: glomopTk_charon.c,v 1.3 1996/06/07 01:55:01 gribble Exp $
a17 13
 * $Log: glomopTk_charon.c,v $
 * Revision 1.3  1996/06/07 01:55:01  gribble
 * Fixed some syntax bugs
 *
 * Revision 1.2  1996/06/01 00:04:34  gribble
 * Fixed up so that the gm_connectproxy command successfully uses the
 * Charon authentication module.
 *
 * Revision 1.1  1996/05/31 22:15:54  gribble
 * Rewrote charon module from scratch, thanks to the @@#$)(*$#@@ barad-dur
 * disk crash over the weekend.
 *
 *
@


1.3
log
@Fixed some syntax bugs
@
text
@d8 1
a8 1
 * $Id: glomopTk_charon.c,v 1.2 1996/06/01 00:04:34 gribble Exp $
d11 3
d36 1
a36 2
#include "glomopTk_protocol.h"
#include "glomopTk_charon.h"
a40 6
#define CHARON_VERSION 0x0100         /* version 1.0 */
#define AUTH_METHOD "AUTH_KERB"         /* kerberos authentication */

int ch_build_handshake(char *krb_user, char *device_id, char *krb_realm,
		       byte tgt_lifetime, GMMessage *theMsg);

d85 1
a85 1
			  &outMsg)) {
d279 1
a279 1
		       byte tgt_lifetime, GMMessage *theMsg)
d315 1
a315 1
  the1 = GMStr1_defFromBytes(AUTH_METHOD, (byte) strlen(AUTH_METHOD));
d317 1
a317 1
    fprintf(stderr, "addStr1 failed for %s.\n", AUTH_METHOD);
@


1.2
log
@Fixed up so that the gm_connectproxy command successfully uses the
Charon authentication module.
@
text
@d8 1
a8 1
 * $Id: glomopTk_charon.c,v 1.1 1996/05/31 22:15:54 gribble Exp $
d11 4
d114 3
d174 3
d195 3
d235 3
d256 3
d268 1
a268 1
  if ((theStr1.length == 0) || (strncmp(theStr1.data, "ER", 2) == 0)) {
@


1.1
log
@Rewrote charon module from scratch, thanks to the @@#$)(*$#@@ barad-dur
disk crash over the weekend.
@
text
@d8 1
a8 1
 * $Id$
d10 5
a14 1
 * $Log$
d24 2
d27 1
d383 1
@
