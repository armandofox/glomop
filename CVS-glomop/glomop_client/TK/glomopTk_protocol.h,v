head	1.8;
access;
symbols
	stable:1.6
	current:1.6
	release:1.6;
locks; strict;
comment	@ * @;


1.8
date	96.08.23.19.57.42;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	96.06.15.01.50.17;	author gribble;	state Exp;
branches;
next	1.6;

1.6
date	96.06.14.21.10.23;	author gribble;	state Exp;
branches;
next	1.5;

1.5
date	96.06.07.00.27.58;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.06.05.20.38.42;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.05.31.22.16.43;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.05.31.17.23.20;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.05.24.21.30.51;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merged with Wink source tree.  It all works now.
@
text
@/*
   Copyright (C) 1994-1996 by the Regents of the University of California.
   Commercial and non-commercial licenses to use this software must be arranged
   by the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
   <fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
   Prof. Randy Katz <randy@@cs.berkeley.edu>.
*/

/*
 * glomopTk_protocol.h --
 *
 * Protocol parsing routines
 *
 * $Id: glomopTk_protocol.h,v 1.2 96/08/22 14:10:40 glomop Exp $
 *
 */

#ifndef GLOMOP_TKPROT
#define GLOMOP_TKPROT

#ifdef __cplusplus
extern "C" {
#endif

/*** Protocol elements ***/

/***** THESE DEFINITIONS MAY BE ARCHITECTURE SPECIFIC *****/
typedef unsigned char  byte;
typedef unsigned short i16;
typedef unsigned long  i32;

/** Some commonly used tokens **/
#define ERR_STR        "ER"
#define OK_STR         "OK"
#define OP_OPEN_CREEK  "OC"
#define OP_CLOSE_CREEK "CC"
#define OP_SET_TYPES   "TY"
#define OP_SET_PREFS   "PF"
#define OP_SET_CLIENTTYPE   "SC"
#define OP_SET_HTYPEBINDING "HB"
#define OP_OPEN_DOC    "OD"
#define OP_CLOSE_DOC   "CD"
#define OP_CHUNK       "ch"
#define OP_GET_CHUNK   "get"
#define OP_FAIL        "FAIL"

typedef struct gmstr1_st {
  unsigned char *data;
  byte           length;   /* Str1's are between 0 and 255 bytes long */
} GMStr1;

#define MAX_GMSTR1 255

typedef struct gmstr2_st {
  unsigned char *data;
  i16            length;   /* Str2's are between 0 and 65535 bytes long */
} GMStr2;

#define MAX_GMSTR2 65535

typedef struct gmmessage_st {
  unsigned char *data;        /* data stored _in network order_ */
  i16            length;      /* up to 65535 long, including flag byte */
  unsigned char  flags;       /* bits are set in the flags byte */
  i16            cur_offset;  /* used to keep state while parsing */
} GMMessage;

#define MAX_GMMESSAGE 65535

/*** Bit definitions for the message flags byte ***/

typedef enum {
  GM_EMPTY_FLAG            = 0x00,   /* if flag empty, everything ok */
  GM_MSG_ERR               = 0x01,   /* an error has occured.  Expect an
				        Str2 reason as body of message */
  GM_MSG_ENCRYPT           = 0x02    /* message is encrypted */
} gm_flags;

typedef unsigned char GMBoolean;

/*** Operations that can be performed on protocol elements ***/

GMStr1 GMStr1_defFromBytes(unsigned char *bytes, byte len);
void   GMStr1_destroy(GMStr1 destroyMe);
void   GMStr1_dump(GMStr1 dumpMe, FILE *dumpToMe);

GMStr2 GMStr2_defFromBytes(unsigned char *bytes, i16 len);
void   GMStr2_destroy(GMStr2 destroyMe);
void   GMStr2_dump(GMStr2 dumpMe, FILE *dumpToMe);

GMMessage    GMMessage_newMessage(void);
void         GMMessage_destroy(GMMessage destroyMe);
GMBoolean    GMMessage_clearMessage(GMMessage *clearMe);
GMBoolean    GMMessage_addStr1(GMMessage *addToMe, GMStr1 addMe);
GMBoolean    GMMessage_addStr2(GMMessage *addToMe, GMStr2 addMe);
GMBoolean    GMMessage_addi16(GMMessage *addToMe, i16 addMe);
GMBoolean    GMMessage_addi32(GMMessage *addToMe, i32 addMe);
GMBoolean    GMMessage_beginExtract(GMMessage *fromMe);
GMStr1       GMMessage_getNextStr1(GMMessage *fromMe);
GMStr2       GMMessage_getNextStr2(GMMessage *fromMe);
i16          GMMessage_getNexti16(GMMessage *fromMe);
i32          GMMessage_getNexti32(GMMessage *fromMe);
GMBoolean    GMMessage_readFromStream(GMMessage *intoMe, int fd);
GMBoolean    GMMessage_writeToStream(GMMessage fromMe, int fd);
GMMessage    GMMessage_decodeMessage(GMMessage *decodeMe, unsigned char *key);
GMMessage    GMMessage_encodeMessage(GMMessage *encodeMe, unsigned char *key);
void         GMMessage_dump(GMMessage dumpMe, FILE *dumpToMe);

/* Some convenience routines */
GMBoolean    GMMessage_isError(GMMessage testMsg);
void         GMMessage_dumpError(GMMessage dumpMe, FILE *dumpToMe);

#ifdef __cplusplus
}
#endif

#endif

@


1.7
log
@Tweaked protocol.h opcode constant from "fail" to "FAIL"
@
text
@d2 8
d14 1
a14 26
 * $Id: glomopTk_protocol.h,v 1.6 1996/06/14 21:10:23 gribble Exp $
 *
 * $Log: glomopTk_protocol.h,v $
 * Revision 1.6  1996/06/14 21:10:23  gribble
 * Whoohoo!  Created image browser application, added unauthenticated
 * connection, TOC parsing.
 *
 * Revision 1.5  1996/06/07 00:27:58  gribble
 * Added opcode tokens.
 *
 * Revision 1.4  1996/06/05 20:38:42  gribble
 * Added functions to handle the encryption/decryption of messages.
 *
 * Revision 1.3  1996/05/31 22:16:43  gribble
 * Rewrote the half of the protocol code that got trounced by the #$@@#$@@#$
 * barad-dur disk crash over the weekend.
 *
 * Revision 1.2  1996/05/31 17:23:20  gribble
 * Unknown changes, due to REALLY ANNOYING lossage after barad-dur crash.
 *
 * Revision 1.1  1996/05/24 21:30:51  gribble
 * Added protocol parser functionality, and the tkAppInit.c file required
 * to build gmwish.  Modified headers and Makefile to include protocol
 * parsing.  Preliminary stab at underlying C glomop functionality, and glue
 * routines to map into them.  Will need significant rewriting.
 *
d21 4
d39 2
d112 4
@


1.6
log
@Whoohoo!  Created image browser application, added unauthenticated
connection, TOC parsing.
@
text
@d6 1
a6 1
 * $Id: glomopTk_protocol.h,v 1.5 1996/06/07 00:27:58 gribble Exp $
d9 4
d56 1
a56 1
#define OP_FAIL        "fail"
@


1.5
log
@Added opcode tokens.
@
text
@d6 1
a6 1
 * $Id: glomopTk_protocol.h,v 1.4 1996/06/05 20:38:42 gribble Exp $
d9 3
d47 1
@


1.4
log
@Added functions to handle the encryption/decryption of messages.
@
text
@d6 1
a6 1
 * $Id: glomopTk_protocol.h,v 1.3 1996/05/31 22:16:43 gribble Exp $
d9 3
d37 12
@


1.3
log
@Rewrote the half of the protocol code that got trounced by the #$@@#$@@#$
barad-dur disk crash over the weekend.
@
text
@d6 1
a6 1
 * $Id: glomopTk_protocol.h,v 1.2 1996/05/31 17:23:20 gribble Exp $
d9 4
d93 2
@


1.2
log
@Unknown changes, due to REALLY ANNOYING lossage after barad-dur crash.
@
text
@d6 1
a6 1
 * $Id: glomopTk_protocol.h,v 1.1 1996/05/24 21:30:51 gribble Exp $
d9 3
d26 1
d46 1
a46 1
  unsigned char *data;
d49 1
a49 1
  unsigned long  cur_offset;  /* used to keep state while parsing */
d85 2
a86 2
unsigned int GMMessage_getNexti16(GMMessage *fromMe);
unsigned long int GMMessage_getNexti32(GMMessage *fromMe);
d90 4
@


1.1
log
@Added protocol parser functionality, and the tkAppInit.c file required
to build gmwish.  Modified headers and Makefile to include protocol
parsing.  Preliminary stab at underlying C glomop functionality, and glue
routines to map into them.  Will need significant rewriting.
@
text
@d6 9
a14 2
 * $Id$
 * $Log$
d21 26
d48 38
d88 1
@
