head	1.1;
access;
symbols
	stable:1.1
	current:1.1
	release:1.1;
locks; strict;
comment	@ * @;


1.1
date	96.05.31.22.21.10;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Hash function test files.
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "glomopTk_utils.h"

int hashf(void *element, int num_slots);
int my_comp(void *el1, void *el2);
void deletr(void *element);

int main(int argc, char **argv)
{
  long int i;
  void *retel;
  hash_table t1, t2;

  if (chained_hash_create(500, &t1) != 0) {
    fprintf(stderr, "Couldnt make t1=500.\n");
    exit(-1);
  }
  
  if (chained_hash_create(600, &t2) != 0) {
    fprintf(stderr, "Couldn't make t2=600.\n");
    exit(-1);
  }

  for (i=1L; i<10000L; i++) {
    if (chained_hash_insert(t1, (void *) i, hashf) != 0) {
      fprintf(stderr, "hash insert on t1 failed for %ld\n", i);
    }
    if (chained_hash_insert(t2, (void *) (i*i), hashf) != 0) {
      fprintf(stderr, "hash insert on t2 failed for %ld\n", i*i);
    }
  }

  for (i=1L; i<10000L; i++) {
    retel = chained_hash_search(t1, (void *) i, hashf, my_comp);
    if (retel == NULL)
      fprintf(stderr, "hash search on t1 for %ld failed.\n", i);
    if ((long int) retel != i)
      fprintf(stderr, "hash search on t1 for %ld returned bogus %ld.\n",
	      i, (long int) retel);

    retel = chained_hash_search(t2, (void *) (i*i), hashf, my_comp);
    if (retel == NULL)
      fprintf(stderr, "hash search on t2 for %ld failed.\n", i*i);
    if ((long int) retel != i*i)
      fprintf(stderr, "hash search on t1 for %ld returned bogus %ld.\n",
	      i*i, (long int) retel);
  }
  for (i=10001L; i<20000; i++) {
    retel = chained_hash_search(t1, (void *) i, hashf, my_comp);
    if (retel != NULL)
      fprintf(stderr, "hash search on t1 for %ld succeeded.\n", i);

    retel = chained_hash_search(t2, (void *) (i*i), hashf, my_comp);
    if (retel != NULL)
      fprintf(stderr, "hash search on t2 for %ld succeeded.\n", i*i);
  }

  for (i=1L; i<10000L; i+=2L) {
    if (chained_hash_delete(t1, (void *) i, hashf, deletr, my_comp) != 1)
      fprintf(stderr, "delete for t1 on %ld failed.\n", i);
    if (chained_hash_delete(t2, (void *) (i*i), hashf, deletr, my_comp) != 1)
      fprintf(stderr, "delete for t2 on %ld failed.\n", i*i);
  }

  for (i=1L; i<10000L; i+=2L) {
    if (chained_hash_delete(t1, (void *) i, hashf, deletr, my_comp) != 0)
      fprintf(stderr, "2nd delete for t1 on %ld succeeded.\n", i);
    if (chained_hash_delete(t2, (void *) (i*i), hashf, deletr, my_comp) != 0)
      fprintf(stderr, "2nd delete for t2 on %ld succeeded.\n", i*i);
  }

  for (i=1L; i<10000L; i+=2L) {
    retel = chained_hash_search(t1, (void *) i, hashf, my_comp);
    if (retel != NULL)
      fprintf(stderr, "hash search on t1 for %ld succeeded...\n", i);

    retel = chained_hash_search(t2, (void *) (i*i), hashf, my_comp);
    if (retel != NULL)
      fprintf(stderr, "hash search on t2 for %ld succeeded...\n", i*i);
  }

  for (i=2L; i<10000L; i+=2L) {
    retel = chained_hash_search(t1, (void *) i, hashf, my_comp);
    if (retel == NULL)
      fprintf(stderr, "hash search on t1 for %ld failed...\n", i);
    if ((long int) retel != i)
      fprintf(stderr, "hash search on t1 for %ld returned bogus %ld...\n",
	      i, (long int) retel);

    retel = chained_hash_search(t2, (void *) (i*i), hashf, my_comp);
    if (retel == NULL)
      fprintf(stderr, "hash search on t2 for %ld failed...\n", i*i);
    if ((long int) retel != i*i)
      fprintf(stderr, "hash search on t1 for %ld returned bogus %ld...\n",
	      i*i, (long int) retel);
  }

  chained_hash_destroy(t1, NULL);
  chained_hash_destroy(t2, NULL);
  return 0;
}


int hashf(void *element, int num_slots)
{
  long int myInt = (long int) element;
  int theHash;

  theHash = myInt%num_slots;

  return theHash;
}

int my_comp(void *el1, void *el2)
{
  long int li1, li2;

  li1 = (long int) el1;
  li2 = (long int) el2;

  if (li1 > li2)
    return 1;
  if (li1 < li2)
    return -1;
  return 0;
}

void deletr(void *element)
{
  return;
}
@
