head	1.5;
access;
symbols
	stable:1.4
	current:1.4
	release:1.4;
locks; strict;
comment	@ * @;


1.5
date	96.08.23.19.57.46;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.06.01.00.04.38;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.02.21.23.00.54;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.02.21.03.40.59;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.02.21.03.24.26;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merged with Wink source tree.  It all works now.
@
text
@/*
   Copyright (C) 1994-1996 by the Regents of the University of California.
   Commercial and non-commercial licenses to use this software must be arranged
   by the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
   <fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
   Prof. Randy Katz <randy@@cs.berkeley.edu>.
*/

/*
 * glomopTk_utils.h --
 *
 * Utility functions for the core glomop routines.
 *
 * $Id: glomopTk_utils.h,v 1.1 96/08/19 14:39:34 glomop Exp $
 * 
 */

#ifndef GLOMOP_TKUTILS
#define GLOMOP_TKUTILS

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <sys/ioctl.h>

/*
 ***************** Socket convenience utilities ****************
 */

/*
 * saccept takes an open socket, and blocks while performing an
 * "accept" system call.  "accept" waits for incoming connections from
 * client applications.  If the connection succeeds, the new socket
 * is returned, else an error is indicated through a negative return value.
 */
int saccept(int s);

/* 
 * nbaccept is similar to saccept, except that it is non-blocking.  If
 * a new connection is made, the new socket is returned in the rs
 * argument and 1 is returned.  If the accept call would have blocked,
 * 0 is returned.  -1 is returned on an error.
 */

int nbaccept(int s, int *rs);

/*
 * sconnect takes a string hostname or IP address, and a string port number
 * or service name as arguments.  It then creates a socket, and
 * performs the correct hostname/servicename to inet addr conversions.
 * It finally calls bind and connect as appropriate.  If all functions
 * perform successfully, a new file descriptor is returned, otherwise
 * -1 is returned.  sconnect is intended to be used by clients.
 */

int sconnect(char *hostname, char *servicename);

/*
 * This call attempts to set up a listening socket.  A listening socket
 * passively waits for connections (through the accept command).  The
 * function accepts a string port number or service name that clients
 * will use to contact this listening socket.  The socket, inet addr
 * conversion, bind, and listen functions are performed.  If all succeed,
 * the new listening file descriptor will be returned, else -1 will be
 * returned.
 */

int slisten(char *servicename);

/*
 * This function accepts a socket file descriptor, and returns the port
 * number that it corresponds to, or -1 in case of error.
 */

int sportnum(int s);

/*
 * This primitive function creates the sockaddr_in structure corresponding
 * to the hostname/IPaddress and servicename/portnumber pair passed in
 * as arguments.  In case of error, -1 is returned, else 0 is returned.
 */

int make_inetaddr(char *hostname, char *servicename, 
                  struct sockaddr_in *inaddr);

/*
 * This primitive function returns the protocol entry number corresponding
 * to the protocol string passed in, or -1 in case of error.
 */

int protonumber(char *protoname);

/* these return -1 for error, 0 for wouldblock, 1 for wouldsucceed */

/*
 * test_readable returns 1 if data is available to be read, 0 if no data
 * is available to be read and thus a read would block, or -1 in case of
 * an error.
 */

int test_readable(int s);

/*
 * test_writable returns 1 if a subsequent write-a-byte operation would
 * succeed, 0 if it would block, and -1 in case of error.
 */

int test_writable(int s);

/*
 ***************** Linked-list routines ****************
 */

/*
 * the "ll_node" structure contains a node of a linked list.  Note that
 * a NULL "ll" type implies an empty linked-list.
 */

typedef struct ll_st {
  void         *data;
  struct ll_st *next;
  struct ll_st *prev;
} ll_node, *ll;

/*
 * ll_add_to_end adds data to the end of a linked list.  A new node
 * is always created.  If the list previously didn't exist, then a
 * new list is created and the addToMe variable updated accordingly.
 * This function returns 1 for success.  If we run out of memory, die.
 */

int ll_add_to_end(ll *addToMe, void *data);

/*
 * ll_add_to_start is identical to ll_add_to_end, except the new data
 * is added to the start of the linked list.
 */

int ll_add_to_start(ll *addToMe, void *data);

/* 
 * ll_find traverses the linked list, looking for a node containing
 * data that matches the "data" argument, according to the "compare"
 * comparator function.  "compare" should return 0 if for equal, -1
 * for d1 less than d2, and +1 for d1 greater than d2.  ll_find
 * returns a pointer to the first found node, or NULL if such a node
 * doesn't exist.
 */

ll  ll_find(ll *findInMe, void *data, int (*compare)(void *d1, void *d2));

/*
 * ll_del performs an ll_find operation on the "data" argument.  If
 * a node is found, it is removed from the linked list and the data field
 * of the node freed with the "nukeElement" function.  (If "nukeElement"
 * is NULL, the free is avoided.)  If the linked list becomes empty,
 * "*delFromMe" becomes NULL.  If multiple nodes match the "data" argument,
 * only the first is removed.  This function returns 1 if a node is found
 * and removed, or 0 otherwise.
 */

int ll_del(ll *delFromMe, void *data, int (*compare)(void *d1, void *d2),
           void (*nukeElement)(void *nukeMe));

/*
 * ll_destroy removes all nodes from a list, and calls "nukeElement" on
 * the data field of all nodes.  If "nukeElement" is NULL, no operation
 * is performed on the data field, but the destroy proceeds.  This
 * function always returns 1.
 */

int ll_destroy(ll *destroyMe, void (*nukeElement)(void *nukeMe));

/*
 * ll_build takes a string of the form [a, b, c, .. ] and returns a linked
 * list with elements from the string.  It malloc's space for the new
 * linked list element strings.  The function returns 1 on success, and
 * 0 in case of an error.
 */

int ll_build(ll *buildMe, char *buildFromMe);

/*
 ***************** Hash table routines ****************
 */

typedef ll       hash_el;
typedef struct hash_table_st {
    int num_elements;
    hash_el *slot_array;
} hash_table;
typedef int (*hash_function)(void *element, int num_slots);
typedef int (*sc_comparator)(void *element1, void *element2);
typedef void (*deletor)(void *element);

/*
 * chained_hash_create creates a new chained hash table, with room for
 * "num_slots" slots.  If the creation succeeds, the new table is passed back
 * in the rt variable and 0 is returned, else -1 is returned.
 */

int chained_hash_create(int num_slots, hash_table *rt);

/*
 * chained_hash_destroy destroys a previously created hash table.  It
 * first purges the chains of all non-empty slots in the table, and then
 * frees the table itself.  0 is always returned.
 */

int chained_hash_destroy(hash_table ht, deletor d);

/*
 * chained_hash_insert first uses the hash_function f to acquire the
 * hash slot for the element "element", and then inserts that element
 * into the slot's list.  0 is returned in case of success, and -1 in
 * case of failure.
 */

int chained_hash_insert(hash_table ht, void *element, hash_function f);

/*
 * chained_hash_search finds the stored element matching "element" in
 * table ht according to comparator function "c".  "c" must return 0
 * if two elements match, 1 if the first argument is greater, and -1 if
 * the first argument is less.  If an element is found, it is returned,
 * else NULL is returned.
 */

void *chained_hash_search(hash_table ht, void *element, hash_function f,
                          sc_comparator c);

/*
 * chained_hash_delete removes the element from ht that would be found
 * with chained_hash_search.  It uses the deletor function d to purge
 * the data found.  If deletor is NULL, the purging is not performed.
 * Comparator "c" is used to do the matching within the list. This function
 * returns 1 if an element was deleted, and 0 otherwise.
 */

int chained_hash_delete(hash_table ht, void *element, hash_function f,
                          deletor d, sc_comparator c);


#ifdef __cplusplus
}
#endif

#endif
@


1.4
log
@Fixed up so that the gm_connectproxy command successfully uses the
Charon authentication module.
@
text
@d2 8
d14 1
a14 1
 * $Id: glomopTk_utils.h,v 1.3 1996/02/21 23:00:54 gribble Exp $
a15 14
 * $Log: glomopTk_utils.h,v $
 * Revision 1.3  1996/02/21 23:00:54  gribble
 * Added chained hash table support.  Users of the chained hash tables must
 * supply their own hash function, comparator function, and deletor
 * function.
 *
 * Revision 1.2  1996/02/21 03:40:59  gribble
 * Added linked-list data structure manipulation routines.
 *
 * Revision 1.1  1996/02/21 03:24:26  gribble
 * Added socket convenience routines.  These have been extensively debugged
 * in the past, so they should be ok.
 *
 *
d21 4
d251 5
@


1.3
log
@Added chained hash table support.  Users of the chained hash tables must
supply their own hash function, comparator function, and deletor
function.
@
text
@d6 1
a6 1
 * $Id: glomopTk_utils.h,v 1.2 1996/02/21 03:40:59 gribble Exp $
d9 5
d27 4
@


1.2
log
@Added linked-list data structure manipulation routines.
@
text
@d6 1
a6 1
 * $Id: glomopTk_utils.h,v 1.1 1996/02/21 03:24:26 gribble Exp $
d9 3
d113 1
a113 1
 ***************** Linked-list ****************
d184 60
@


1.1
log
@Added socket convenience routines.  These have been extensively debugged
in the past, so they should be ok.
@
text
@d6 1
a6 1
 * $Id$
d8 5
a12 1
 * $Log$
d108 73
@
