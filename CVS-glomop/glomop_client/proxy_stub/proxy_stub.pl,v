head	1.1;
access;
symbols
	stable:1.1
	current:1.1
	release:1.1;
locks; strict;
comment	@# @;


1.1
date	96.02.27.23.29.40;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@A proxy stub that matches input lines against regular expressions
and outputs strings or files.
@
text
@#!/usr/sww/bin/perl5 -w

# proxy_stub.pl
#
# This program will open a listening socket, and behave functionally like
# a proxy.  It will be driven from a script file;  the script file will
# be structured as a list of regular expressions and response strings.
# The listening socket will be monitored;  data extracted from the socket
# will be compared against the regular expressions, and the response from
# the first expression that matches will be returned on the socket.

package main;
require 'gm_sock.pl' || die "Couldn't load gm_sock.pl\n";

&init_parent;
&main_loop;
&parent_cleanup;

sub parent_cleanup {
    
    # we want to close down the listening socket.
    eval "close($Listen)";

    #eval "shutdown(S,2)";      # eval to make it error-safe
    #eval "close(S)";
    exit(0);
}

sub init_parent {

    # proxy_stub should be invoked as "proxy_stub <portnum> <filename>" 
    # or "proxy_stub <portnum> < <filename>"

    $portnum = shift(@@ARGV) or
	die "Invoke as \"proxy_stub <portnum> <filename>\"";
    if ($_ = shift(@@ARGV)) {
	# open file, redirects as STDIN
	$infile = FN;
	open($infile, $_) or die "Couldn't open file $_.\n";
    } else {
	$infile = STDIN;
    }
    
    # now parse in script file.  Lines in the script file should be of
    # the form:
    #   IN <regexp>
    #      <regexp> is an input pattern to be matched.  There is a
    #      single whitespace character between IN and <regexp>.  The
    #      carriage return at the end of the line is stripped, but any
    #      whitespace after <regexp> and before the carriage return is
    #      assumed to be part of <regexp>.
    #   OUT  @@string@@
    #      "@@" is some hash symbol not contained in the string that
    #      bounds the string.  The string will be output on the
    #      socket.  Newlines or carriage returns embedded in the
    #      string are output unmodified.
    #   OUTF filename
    #       The file "filename" is output on the socket.
    #   # comment
    #       Except for within @@string@@ tags, lines beginning with
    #       "#" are ignored.

    # We will build two arrays - the first (@@regarray) is an array of
    # input regexps, and the second array (@@outarray) contains lists.
    # Each list in the array contains 2N elements, with element 1
    # being "STRING" or "FILE", and element 2 being the string value
    # or the filename.

    print STDOUT "Parsing script..";
  MAININLOOP:
    while ($_ = <$infile>) {
	my @@outarr;

	# look for "IN" tag
	next MAININLOOP if /^#/;                 # ignore comments
	if (/^(\s*)IN (.*)$/) {           # found my "IN" line
	    push @@regarray, $2;
	}
	else {
	    next MAININLOOP;          # didn't find it. loop on
	}
	
	# have "IN" tag, now gather "OUT" and "OUTF" tags.  Note
	# that "@@outarr" is redefined every loop iteration because
	# of lexical (local) scoping.	
      MAINOUTLOOP:
	while ($_ = <$infile>) {
	    next MAINOUTLOOP if /^#/;    # ignore comments 
	    if (/^(\s*)IN (.*)$/) {  # hit the next IN line.
		# add built @@outarr to main @@outarray
		push @@outarray, [ @@outarr ];
		redo MAININLOOP;
	    } elsif (/^(\s*)OUTF(\s*)(.*)$/) {  # hit a next OUTF line
		push @@outarr, "FILE";
		push @@outarr, $3;  # the filename
	    } elsif (/^(\s*)OUT(\s*)(.)(.*)/) {  # hit a next OUT line
		my($delim) = '';
		my($totstring) = '';
		my($remainder) = $4 . "\n";
		$delim = $3;
		push @@outarr, "STRING";

		# parse out the string, looking for the delimiter
		while (! ($remainder =~ /^(.*)$delim/) ) {
		    $totstring .= $remainder;
		    $remainder = <$infile>;
		}
		$remainder =~ /^(.*)$delim/;
		if ($1) {    # peg off the last bit of the string.
		    $totstring .= $1;
		}
		push @@outarr, $totstring;
	    } else {
		# must be some sort of empty line.  ignore.
		next MAINOUTLOOP;
	    }
	}
	push @@outarray, [ @@outarr ];
    }
    close $infile;
    print STDOUT "Found " . scalar @@regarray . " patterns.\n";
}

sub main_loop {

    print STDOUT "Creating listening socket..";
    # OK - the script file is parsed in, now open a listening port.
    ($Listen = listensock gm_sock $portnum, 'tcp', 10) or
	die "listensock (TCP): $gm_sock::Err";

    $con = 0;   # number of connections
  CON:
    while (1) {
	print STDOUT "Waiting for connection.\n";
	($newsock = $Listen->acceptsock()) ||
	    die "accept failed: $gm_sock::Err";
	$con++;
	print STDOUT "Accepted incoming connected, forking grandchild.\n";
	if ($c = fork()) {
	    # this is parent
	    waitpid($c,0);
	    closesock $newsock;
	    print STDOUT "Reaped child, grandchild lives on.\n";
	    next CON;
	} elsif (! (defined $c)) {
	    # fork failed
	    writesock $newsock ("ERR fork failed: $!");
	    next CON;
	} else {
	    # first child.  Fork again so that grandchild will be
	    # inherited by init.

	    if ($c2 = fork()) {
	       	# short-lived first child
		exit 0;
	    } elsif (! (defined $c2)) {
		# grandchild fork failed, but this child is still running.
		# report error, then die.
		writesock $newsock ("ERR grandfork failed: $!");
		exit(0);
	    } else {
		# this grandchild will become real process
		$newsock->redirect(STDIN, STDOUT);

		# done! Now call child processing routine
		&doChild($newsock);
		exit(0);
	    }
	}
    }
#     for ($i=0; $i<10; $i++) {
# 	if (defined $regarray[$i]) {
# 	    print "\$regarray[$i] is defined.\n";
# 	    print $regarray[$i];
# 	    print "\n";
# 	}
# 	if (defined @@{$outarray[$i]}) {
# 	    print "\$outarray[$i] is defined.\n";
# 	    print @@{$outarray[$i]};
# 	    print "\n";
# 	    for ($j=0; $j<10; $j++) {
# 		if (defined ${$outarray[$i]}[$j]) {
# 		  print "\${\$outarray[$i]}[$j] is ${$outarray[$i]}[$j]\n";
# 	      }
# 	    }
# 	}
#    }

}

sub doChild {
    my $sock = shift;
    
    # wait for a line of input, then do the regexp matching and output

    while (! $sock->{EOF} ) {
	$nextIN = readsock_raw $sock;
	if ($sock->{EOF}) {
	    next;
	}
	print STDERR "Got request $nextIN";

	$countPat = scalar @@regarray;
      REGS:
	for ($i=0; $i<$countPat; $i++) {
	    if (defined $regarray[$i]) {
		print STDERR "Matching against $regarray[$i]\n";
		if ($nextIN =~ /$regarray[$i]/) {
		    print STDERR "Matched $regarray[$i]\n";
		    if (defined @@{$outarray[$i]}) {
			for ($j=0; $j<scalar @@{$outarray[$i]}; $j+=2) {
			    if ( ( defined ${$outarray[$i]}[$j])) {
				if (${$outarray[$i]}[$j] eq "STRING") {
				    print STDOUT ${$outarray[$i]}[$j+1];
		                } elsif (${$outarray[$i]}[$j] eq "FILE" ) {
		                    if (!open(OUTFL, ${$outarray[$i]}[$j+1])) {
				        print STDERR "Couldn't find file ${$outarray[$i]}[$j+1].\n";
				    } else {
					while ($nextL = <OUTFL>) {
					    print STDOUT $nextL;
					}
					close OUTFL;
				    }
				}
		            }
			}
		    }
		    
		    # break out of matching loop
		    last REGS;
                }
	    }
	}
    }
}
@
