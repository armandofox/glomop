head	1.5;
access;
symbols
	prewink:1.4
	stable:1.3
	release:1.2
	current:1.5;
locks; strict;
comment	@# @;


1.5
date	96.08.23.19.35.59;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.01.33.06;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.06.07.00.33.48;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.01.25.58;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.19.46.17;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@#
#  gm_conn.pl - connection abstraction
#  $Id: gm_conn.pl,v 1.1 96/08/19 14:37:44 glomop Exp $
#

=head1 NAME

gm_conn - implements the GloMop proxy connection abstraction

=head1 SYNOPSIS

require "gm_conn.pl";

 # Constructor

 $c = makeconn gm_conn $name,$readfh,$writefh,$readfn,$excepfn;

 # Instance variables

 $c->readfunc
 $c->excepfunc
 $c->name
 $c->state

=head1 DESCRIPTION

A gm_conn is a subclass of L<gm_sock(3)> and inherits all its methods and
variables, plus adds a couple.

=head1 CONSTRUCTOR

=over 3

=item  $c = makeconn gm_conn $name,$readfh,$writefh,$readfn,$excepfn;

Returns a connection object whose name is $name (a string, used to refer to the
object later), with (open) filehandles $readfh and $writefh corresponding to
the source (sink) of the connection data.  $readfn and $excepfn name the
functions to be called when this connection's socket (or filehandles) are
readable or show an exception, respectively; they can be subroutine references
or subroutine names.  The subroutines themselves need not be reentrant, but
should not block and can use the L</"state"> instance variable to store
connection state in between calls.  The default wakeup conditions for the
underlying socket object are set to "re".

=back

=head1 INSTANCE VARIABLES

=over

=item &{$c->readfunc}(@@args);
=item &{$c->excepfunc}(@@args);

Methods that return subroutine handles for calling this connection's read and
exception functions.

=item $n = $c->name;

Return the symbolic name of this connection.  Used in debugging and logging,
but not internally.

=item $c->state([$scalar])

Set, or (without any arguments) get, the local state of this connection.  THis
is an opaque scalar that can be manipulated at will by the read and exception
functions.

=back

=cut

package gm_conn;
require "gm_sock.pl";
@@ISA = qw(gm_sock);

&util::instvars(qw(gm_conn readfunc writefunc excepfunc name state));

sub makeconn {
    my $class = shift;
    my ($name,$in,$out,$readfunc,$excepfunc) = @@_;

    my $sock = bless (makesock gm_sock $in,$out);
    $sock->{readfunc} = $readfunc;
    $sock->{excepfunc} = $excepfunc;
    # $sock->{writefunc} = $writefunc;
    $sock->{name} = $name;
    $sock->conditions("re");
    return bless ($sock);
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    


1;
@


1.4
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d1 5
d91 11
@


1.3
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d1 66
a66 5
#
#  Implement the connection abstraction.  Each connection is a nonblocking
#  gm_sock that has methods for serving (collecting more data) and trapping
#  exceptions.
#
a68 1

d72 1
a72 1
&util::instvars(qw( gm_conn readfunc writefunc excepfunc name ));
d86 1
@


1.2
log
@Semi-runnable state; allows auth handshake and OD (open doc) requests
seem to work.
@
text
@d12 2
d18 1
a18 1
    my $sock = makesock gm_sock $in,$out;
d27 1
a27 16
sub _instvar {
    my $self = shift;
    my $var = shift;
    my $val = shift;
    $self->{$var} = $val if $val;
    return $self->{$var};
}

sub readfunc { shift->_instvar("readfunc",@@_) }
sub writefunc { shift->_instvar("writefunc",@@_) }
sub excepfunc { shift->_instvar("excepfunc",@@_) }
sub name { shift->_instvar("name", @@_) }
    
    


@


1.1
log
@rudiments of main loop working, with gm_conn object inheriting from
gm_sock for handling open proxy connections
@
text
@d17 4
a20 3
    $sock->{Read} = $readfunc;
    $sock->{Excep} = $excepfunc;
    $sock->{Name} = $name;
d25 12
@
