head	1.6;
access;
symbols
	prewink:1.3
	stable:1.2
	release:1.1
	current:1.5;
locks; strict;
comment	@# @;


1.6
date	96.09.12.23.57.36;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.08.23.19.36.00;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.07.26.20.30.54;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.01.33.07;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.06.07.00.33.49;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.19.46.18;	author fox;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fixed up makefile, added simple serial support
@
text
@#
#  gm_sock.pl - socket abstraction
#  $Id: gm_sock.pl,v 1.5 1996/08/23 19:36:00 gribble Exp $
#

=head1 NAME

gm_sock -  socket/stream abstractions

=head1 SYNOPSIS

 require "gm_sock.pl";

 # Constructors

 $s = connectsock gm_sock $host,$port[,$proto]
 $s =listensock gm_sock $port[,$proto[,$queuesize]]
 $s = makesock gm_sock $readfh,$writefh

 # Class functions

 $errmsg = gm_sock::lasterror();
 $errmsg = $s->lasterror();

 # Instance methods

 $s_new = $s->acceptsock
 $m = $s->readsock([$count])
 $m = s->readsock_raw([$count])
 $s->writesock(@@vals)
 $s->conditions([$cond])
 @@ready = $s->selectsock($timeout,$sock[,$sock...])
 $readable = $s->readable
 $writable = $s->writable
 $exception = $s->exception
 $s->closesock
 $s->killsock
 $s->redirect($readfh,$writefh)
 $eof_seen = $s->eof
 ($readfh,$writefh) = $s->filehandles
 ($ohost, $oport, $ahost, $aport) = $s->endpoints()

=head1 DESCRIPTION

gm_sock provides a class level abstraction for handling socket objects,
including reading, writing, polling, etc.

All functions that can return an error status allow you to call
L</"gm_sock::lasterror"> to retrieve the error message text.  This function can
be called as either a generic subroutine or an instance method.

=head1 CONSTRUCTORS/CLASS METHODS

All constructors set the following socket options (using L<setsockopt(1)>) by
default: SO_LINGER to wait on all flushes, and SO_REUSEADDR.

=over 3

=item $s = connectsock gm_sock $host,$port[,$proto]

Returns a gm_sock object that is connected to the given host and port number
using protocol $proto, which can be 'tcp' (default) or 'udp'.  In case of
error, returns undef.

=item $s =listensock gm_sock $port[,$proto[,$queuesize]]

Listens on port $port of $proto ('tcp' or 'udp'), with socket queue size of
$queuesize (defaults to 10).  The resulting object is a gm_sock that is useful
for passing to L</"acceptsock">.

=item $s = makesock gm_sock $readfh,$writefh

Takes a pair of filehandles (say, STDIN and STDOUT) and casts them into a
gm_sock object, so the resulting object can use the gm_sock methods.  Ignored
for UDP sockets.

=item $errmsg = gm_sock::lasterror();
=item $errmsg = $s->lasterror();

Return error text corresponding to last error condition for any of the gm_sock
calls.  Can be called as a method or as  a regular subroutine.

=back

=head1 INSTANCE METHODS

=over 3

=item $s_new = $s->acceptsock

Accept connection on TCP socket; ignored for UDP.  $s must be a gm_sock whose
relevant fields were initialized by calling L</"listensock">; return value is a
new (cloned) gm_sock representing the actual active connection.

=item  $m = $s->readsock([$count])

Read & return a line of up to $count bytes from previously accepted
connection; strips newlines.  For UDP sockets, $count is required,
and if called in array context,a list containing the sender's IP address
(printable ASCII form) and the accepted dgram is returned, otherwise just the
datagram contents.

=item $m = s->readsock_raw([$count])

Read a line from socket, don't strip anything; same comments
apply as for readsock.  For UDP sockets, readsock and readsock_raw are
equivalent.

=item $s->writesock(@@vals)

Writes list to accepted connection, verbatim.

=item $s->conditions([$cond])

With no argument, return a string indicating which conditions the socket object
will wake up on; a string containing one or more of "rwe".  With argument, set
the wakeup conditions to that string.  Used in L</"selectsock">, below.

=item @@ready = $s->selectsock($timeout,$sock[,$sock...])

Select on the listed socket objects.  The timeout is in milliseconds and
corresponds to the argument normally passed to L<select(1)>, except that -1
means "block forever".  Returns a list of socket objects for which one or more
of the conditions specified by L</"gm_sock::conditions"> were ready; for each
socket object, you can call the L</"readable">, L</"writable">, and
L</"exception"> methods to determine which condition(s) were true, or just call
L</"conditions"> to get back the string and parse it yourself.  Returns undef
if the timeout elapsed before any sockets were ready.

=item $s->readable, $s->writable, $s->exception

Return nonzero iff the given condition is true for the socket object.  Valid
only immediately after return from L</"selectsock">.

=item $s->closesock, $s->killsock

Close socket.  Killsock also performs a L<shutdown(1)>, shutting down for both
read and write.  See also L</"connectsock">, L</"makesock">, L</"listensock">
for some default socket options that apply to the underlying sockets.  Killsock
shuts down the original socket, so you shouldn't normally use it if you plan to
do further L</"acceptsock">'s.

=item $s->redirect($readfh,$writefh)

Redirect this socket object to use these
filehandles for reading and writing (default: STDIN, STDOUT).  You can do this,
e.g., 
if you plan to pass the socket object to a child and have the child's STDIN and
STDOUT correspond to the socket read and write filehandles.

=item $s->eof()

Returns nonzero iff eof has been seen on this socket during a previous read.

=item ($readfh,$writefh) = $s->filehandles()

Returns the read and write filehandles bound to this socket, as a list of
two elements 
    
=item ($ohost, $oport, $ahost, $aport) = $s->endpoints()

Returns a list of four strings: the "calling" host and port and the "listening"
host and port of a socket.  Hosts are given as IP address strings
(e.g. "99.99.99.99"), ports as integers.

=back

=cut    

package gm_sock;
use Socket;

$FH = "SR0";

#
#  Determine name and address of local host
#

use POSIX 'uname';
$Hostname = (&uname)[1]
    or die "Cannot get hostname: $!";

$Myaddr = (gethostbyname($Hostname))[4];
die "Cannot get IP address of $Hostname: $!"
    unless $Myaddr;

# declare instance variables
require "util.pl";
&util::instvars(qw(gm_sock conditions readable writable exception));

###########################################################################
#  redirect socket to STDIN/STDOUT
#
###########################################################################

sub redirect {
    my $self = shift;
    my $fh = $self->{ReadFH};
    my($read,$write) = @@_ ? @@_ : ("STDIN", "STDOUT");
    my($result) = 1;
    
    open($write, ">&$fh") or $result = 0;
    open($read, "<&$fh") or $result = 0;

    select($write); $| = 1;
    select($read); $| = 1;

    return $result;
}

######################################################################
#  readsock: Read a "line" from already-open socket (up to CRLF) and remove
#  trailing CRLF
#  readsock_raw: don't strip trailing CRLF
######################################################################

sub readsock {
    my $self = shift;
    my $count = shift;
    my $addr;

    if ($self->{Protoname} eq 'tcp') {
        $_ = $self->readsock_raw($count);
        return $_ unless defined $_;
        chop while /[\r\n\012]$/;
        return $_;
    } else {
        ($addr, $_) = $self->readsock_raw($count);
        return (wantarray? () : undef) unless defined $_;
        chop while /[\r\n\012]$/;
        return (wantarray? ($addr, $_) : $_);
    }
}

sub readsock_raw {
    my $self = shift;
    my $count = shift || 0;
    my $sock = $self->{ReadFH};
    my $result;
    
    unless ($sock) {
        $self->{Error} = "No read filehandle";
        return undef;
    }
    
    if ($self->{Protoname} eq 'tcp') {
        select($sock); $| = 1; select(STDERR);
        $_ = <$sock>;

        $self->{EOF} = 1, $_ = ""
            unless defined $_;
    
        ($self->closesock()), $_ = ""
            unless $_;
        $result = $_;
    } else {
        ($self->{Error} = "Datagram receive requires a byte count",
         return undef)
            unless $count > 0;
        # connectionless: just do a receive
        my $addr = recv $sock,$result,$count,0;
        $self->{Error} = "recvfrom failed: $!" unless defined $addr;
        return ( wantarray ?
                (join('.',unpack('C4', (unpack('S n a4 x8',$addr))[2])), 
                 $result) :
                $result);
    }
}

sub eof
{
    my $self= shift;
    return ($self->{EOF});
}

######################################################################
#  writesock
#
#  Write a 'line' to already-open socket, appending a trailing newline.
######################################################################

sub writesock {
    my $self = shift;
    my $sock = $self->{WriteFH};
    unless ($sock) {
        $self->{Error} = "No write filehandle";
        return 0;
    }
    if ($self->{Protoname} eq 'tcp') {
        print $sock (@@_);
    } else {
        $self->{Error} = "send failed: $!", return undef
            unless (send $sock,join(//, @@_),0);
    }
    return 1;
}

###########################################################################
#  filehandles: return filehandle names for reading & writing
###########################################################################

sub filehandles {
    my $self = shift;

    my $readfh = $self->{ReadFH};
    my $writefh = $self->{WriteFH};

    return ('gm_sock::' . $readfh, 'gm_sock::' . $writefh);
}

###########################################################################
#  endpoints: return socket endpoints as list:
#  talkhost,talkport,listenhost,listenport 
###########################################################################

sub endpoints {
    my $self = shift;

    return ($self->{TalkHost}, $self->{TalkPort},
            $self->{ListenHost}, $self->{ListenPort});
}

###########################################################################
#  selectsock: implement select() on socket objs or fh's
###########################################################################

sub selectsock {
    my $timeout = shift;
    my @@fhlist = @@_;
    my $fh;
    my ($rbits, $ebits, $wbits) = ('','','');

    foreach $fh (@@fhlist) {
	$cond = $fh->{conditions};
	if (! ($cond =~ /r|w|e/)) {
            $Err = "Bad condition list '$cond' for socket";
            warn "Bad conditions list $cond for socket\n";
            return (wantarray? () : undef);
        }
        vec($rbits, fileno($fh->{ReadFH}), 1) = 1 if $cond =~ /r/i;
        vec($wbits, fileno($fh->{WriteFH}), 1) = 1 if $cond =~ /w/i;
        vec($ebits, fileno($fh->{ReadFH}), 1) = 1 if $cond =~ /e/i;
    }

    $timeout = undef if $timeout == -1;
    my ($nfound,$timeleft) = select($rout = $rbits, $wout = $wbits, $eout =
                                 $ebits, $timeout);

    # if a socket was ready, return the socket object along with a string for
    # any conditions that are ready

    return undef unless $nfound > 0;

    my @@retA;
    foreach $fh (@@fhlist) {
        my $cond = 0;
        $fh->readable(++$cond) if (vec($rout, fileno($fh->{ReadFH}), 1));
        $fh->writable(++$cond) if (vec($wout, fileno($fh->{WriteFH}), 1));
	$fh->exception(++$cond) if (vec($eout, fileno($fh->{ReadFH}), 1));
	push(@@retA, $fh) if ($cond > 0);
    }
    return @@retA;
}
        
    

###########################################################################
#  connectsock: Open socket connection to host:port
###########################################################################

sub connectsock {
    shift;
    my $self = &new();
    my($host, $port, $protoname) = @@_;
    $protoname = 'tcp' unless $protoname =~ /udp/i;
    $protoname = lc $protoname;
    $protomodel = ($protoname eq 'tcp'? SOCK_STREAM : SOCK_DGRAM);
    my($fh) = $FH++;
    my($name, $aliases, $proto) = getprotobyname($protoname);
    my($addr) = (gethostbyname($host))[4];
    my($me) = pack_sockaddr_in(0, $Myaddr);
    my($them) = pack_sockaddr_in($port, $addr);

    unless (socket($fh, PF_INET, $protomodel, $proto)) {
        $Err = "connectsock: socket: $!";
        return undef;
    }
    
    setsockopt($fh, SOL_SOCKET, SO_REUSEADDR, 1)
        || warn("Warning: setsockopt: $!");

    setsockopt($fh, SOL_SOCKET, SO_LINGER, pack("ii",1, 1000));

    unless (bind($fh, $me)) {
        $Err = "connectsock: bind: $!";
        return undef;
    }

    unless (connect($fh, $them)) {
        $Err = "connectsock: connect $host:$port: $!";
        return undef;
    }
    select($fh); $| = 1; select(STDOUT);

    $self->{ReadFH} = $self->{WriteFH} = $fh;
    $self->{TalkHost} = $Hostname;
    $self->{TalkPort} = "??";
    $self->{ListenHost} = $host;
    $self->{ListenPort} = $port;
    $self->{Protoname} = $protoname;
    return $self;
}

######################################################################
#  listensock: Open socket for listening for new client connections
#
#  Arguments: port, queue size
######################################################################

sub listensock {
    my $self = shift;
    my($port, $protoname, $qsize) = @@_;
    my $readfh = $FH++;

    $qsize = 10 unless $qsize;
    $protoname = 'tcp' unless $protoname =~ /udp/i;
    $protoname = lc $protoname;
    my $protomodel = ($protoname eq 'tcp'? SOCK_STREAM : SOCK_DGRAM);

    local($name,$aliases,$proto) = getprotobyname($protoname);
    local($bind);

    # Check args

    unless ($port) {
        die "listensock: usage: listensock port [qsize]";
    }

    $bind = pack_sockaddr_in($port, INADDR_ANY);

    # create socket

    unless (socket($readfh, PF_INET, $protomodel, $proto)) {
        die( "listensock: socket($readfh): $!" );
        return 0;
    }
    setsockopt($readfh, SOL_SOCKET, SO_REUSEADDR, 1);

    # Bind socket to our addr/port num

    unless (bind($readfh, $bind)) {
        $Err =  "listensock: bind: $!";
        return 0;
    }

    if ($protoname eq 'tcp') {
        # listen for connections

        unless (listen($readfh, $qsize)) {
            $Err = "listensock: listen: $!";
            return 0;
        }
    }

    select($readfh); $| = 1; select(STDOUT);

    $self = &new();
    $self->{ReadFH} = $readfh;
    $self->{WriteFH} = $readfh;
    $self->{ListenHost} = inet_ntoa($Myaddr);
    $self->{ListenPort} = $port;
    $self->{Protoname} = $protoname;
    
    return $self;
}

###########################################################################
#  new: return a generic, blessed, anonymous hash for the socket object's
#  instance variables.  This is a private method.
###########################################################################

sub new
{
    my $self = shift;
    $self->{EOF} = 0;
    $self->{ReadFH} = '';
    $self->{WriteFH} = '';
    $self->{Error} = '';
    $self->{ListenHost} = '';
    $self->{ListenPort} = '';
    $self->{TalkHost} = '';
    $self->{TalkPort} = '';
    $self->{Readable} = 0;
    $self->{Writable} = 0;
    $self->{Exception} = 0;
    $self->{conditions} = "rwe";
    return bless($self);
}
        

###########################################################################
#  makesock: take an already open read and write filehandle and treat them as a
#  socket object reference
###########################################################################

sub makesock
{
    my $class = shift;
    my $self;
    my($readfh,$writefh) = @@_;

    select($readfh); $| = 1; select($writefh); $| = 1;
    
    $self = &new();
    $self->{ReadFH} = $readfh;
    $self->{WriteFH} = $writefh;
    return $self;
}

###########################################################################
#  lasterror: return the last error message generated by an operation on this
#  socket object.
###########################################################################

sub lasterror
{
    my $self = shift;
    unless (ref($self) ne 'gm_sock') {
        return $self->{Error};
    } else {
        return $Err;
    }
}

sub acceptsock
{
    my $self = shift;
    my ($af,$port,$inetaddr);
    my $newreadfh = $FH++;
    my $newwritefh = $newreadfh;
    my $addr;

    # if this is  a datagram socket, just return this instance.
    return $self if $self->{Protoname} ne 'tcp';

    my($addr) = accept($newreadfh, $self->{ReadFH});
    unless ($addr) {
        $self->{Error} = "Accept failed: $!";
        return undef;
    }

    ($af,$port,$inetaddr) = unpack('S n a4 x8', $addr);

    $selfcopy = &new();

    $selfcopy->{ListenPort} = $self->{ListenPort};
    $selfcopy->{ListenHost} = $self->{ListenHost};
    $selfcopy->{TalkHost} = join(".", unpack('C4', $inetaddr));
    $selfcopy->{TalkPort} = $port;
    $selfcopy->{ReadFH} = $newreadfh;
    $selfcopy->{WriteFH} = $newwritefh;
    $selfcopy->{Protoname} = $self->{Protoname};

    return $selfcopy;
}

sub closesock
{
    my $self = shift;
    close $self->{ReadFH};
    close $self->{WriteFH};
}

sub killsock
{
    my $self = shift;
    #shutdown($Sockfh, 2);
    close($self->{ReadFH});
}

###########################################################################
#  close_conn: close logical connection to client
###########################################################################

sub close_conn {
    my $self = shift;
    # any "bye" acknowledge should go here.
    closesock $self;
    return 1;
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    

######################################################################
# Return a value for 'require'
1;
@


1.5
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@d3 1
a3 1
#  $Id: gm_sock.pl,v 1.1 96/08/19 14:37:47 glomop Exp $
d223 1
a223 1
        $_ = $self->readsock_raw();
@


1.4
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 5
d591 11
@


1.3
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d503 1
@


1.2
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d1 163
a163 65
###########################################################################
#  gm_sock.pl: socket/stream abstractions
#
#  Accept client connection on TCP/UDP socket, open a connection to a
#  TCP/UDP server, or create a "fake" socket from an already open (pair of)
#  filehandles.
#
#  Object methods:  All return nonzero for success.  In case of error,
#  call the lasterror() method to get error message text.
#
#  Constructors:
#
#  listensock(port, [proto, queuesize]): create socket object for listening
#       (server).  Proto is either 'tcp' or 'udp' (default 'tcp').
#  connectsock(host, port, [proto]): create socket object and connect
#       to host:port using proto (default 'tcp')
#  makesock(readfh, writefh): bless a pair of open filehandles into a socket
#        object; useful if you've already opened the socket yourself, or if you
#        want to use the read/write abstractions on plain old files
#
#  Methods: all return nonzero for success, zero for failure, unless otherwise
#       noted.  Call lasterror() to get a string description of failure cause.
#
#  acceptsock(): accept connection on created socket object; returns a new
#               socket object.  Ignored for udp sockets.
#  readsock([count]):  read & return a line of up to count bytes from accepted
#     connection; strips newlines.  For udp sockets, count param is required,
#     and if called in array context,a list containing the sender's IP address
#     (printable ASCII form) and the accepted dgram is returned.
#  readsock_raw([count]): read a line, don't strip anything; same comments
#     apply as for readsock.  For UDP sockets, readsock and readsock_raw are
#     equivalent.
#  writesock(list): write list to accepted connection, verbatim
#  selectsock(blocktimeout,sock[,sock,sock....]): select for conditions
#       on each of the socket objects.  Each object should have its listen
#       conditions set to a string containing one or more of "rwe" by calling
#       $sock->conditions($string).  'blocktimeout' is the
#       length of time in millisecs to block before timing out: 0 means
#       nonblocking, -1 means block forever.  Returns undef if timeout,
#       otherwise returns list of ready sockets.  you can call $sock->readable,
#       $sock->writable, and $sock->exception on each to find out what
#       conditions were true for each.
#  closesock(): close socket object
#  killsock():  shutdown and close (shouldn't usually need to do this, since it
#               shuts down the original socket)
#  redirect(readfh,writefh):  Redirect this socket object to use these
#       filehandles for reading and writing (default: STDIN, STDOUT)
#  lasterror(): return string describing last error condition.  This can be
#       called as a subroutine or as a method.  The former is useful if an
#       error is returned by a constructor, e.g.:
#               unless ($sock = connectsock gm_sock $host,$port) {
#                     print STDERR &gm_sock::lasterror();
#               } 
#  eof(): return nonzero if eof has been seen on this socket during a read.
#
#  Instance variables (implemented as subs):
#
#  conditions: (string) what conditions to listen for in selectsock; one or
#       more of "rwe"
#  readable,writable,exception: set to 1 or 0 on return from selectsock
#  filehandles(): returns read and write filehandles
#  endpoints(): (talkhost, talkport, listenhost, listenport) as strings; hosts
#       are given as IP addresses, ports as integers
#
###########################################################################
@


1.1
log
@rudiments of main loop working, with gm_conn object inheriting from
gm_sock for handling open proxy connections
@
text
@d56 1
a56 1
#  Methods that help you violate encapsulation:
d58 3
d84 4
d231 1
a231 1
	$cond = $fh->{Conditions};
a250 1
    $cond = '';
d253 5
a257 6
	($cond .= 'r') if (vec($rout, fileno($fh->{ReadFH}), 1));
	($cond .= 'w') if (vec($wout, fileno($fh->{WriteFH}), 1));
	($cond .= 'e') if (vec($eout, fileno($fh->{ReadFH}), 1));
	if ($cond) {
	    push (@@retA, $fh);
	}
d393 1
a393 1
    $self->{Conditions} = "rwe";
a475 17

###########################################################################
#  access to instance variables
###########################################################################

sub _instvar {
    my $self = shift;
    my $var = shift;
    my $val = shift;
    $self->{$var} = $val if $val;
    return $self->{$var};
}

sub conditions { shift->_instvar("Conditions",@@_)}
sub readable { shift->_instvar("Readable") }
sub writable { shift->_instvar("Writable") }
sub exception { shift->_instvar("Exception") }
@
