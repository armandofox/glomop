head	1.5;
access;
symbols
	current:1.5
	prewink:1.3
	stable:1.2;
locks; strict;
comment	@# @;


1.5
date	96.08.23.19.36.11;	author gribble;	state Exp;
branches;
next	1.4;

1.4
date	96.07.26.20.31.06;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.01.33.12;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.06.14.06.39.28;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.06.13.22.34.53;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@#
#  prefs.pl - user prefs management
#  $Id: prefs.pl,v 1.2 96/08/22 15:47:11 glomop Exp $
#


=head1 NAME

prefs - Manage user preferences information on behalf of various Type Managers

=head1 SYNOPSIS

 require "prefs.pl";

 # Reading default prefs

 $success = &prefs::array_from_file($htype, $filename);

 # Accessing stored prefs

 %prefs = %{&prefs::array($htype)};

 # Accessors and mutators for individual pref items

 &prefs::set($htype, $pref_attribute, $newvalue, $weight);
 $value = &prefs::get($htype, $pref_attribute);
 ($value,$weight) = &prefs::get($htype, $pref_attribute);

=head1 DESCRIPTION

Manages preferences information for various high-level types, based on client
set_prefs messages and default values from configuration files.

=head1 FUNCTIONS

=over 3

=item $success = &prefs::array_from_file($htype, $filename);

Read the file $filename, and use it as the default initial preferences for the
high-level type $htype (e.g. "Image", "WebPage").  Returns true iff success.

=item %prefs = %{&prefs::array($htype)};

Get a hash table containing the current preferences information for $htype.  An
empty array could mean that no default preferences exist, or no such package
exists; this is a bug.  Normally, you should use L</"prefs::set"> and
L</"prefs::get">, which are safer and have a nicer interface.

=item &prefs::set($htype,$name,$val,$weight);

Set the value (arbitrary scalar) and weight (an integer) for attribute $name
in the preferences for high-level type $htype.  A prefs array springs into
existence if it doesn't already exist.

=item $val = &prefs::get($htype, $name);

=item ($val,$weight) = &prefs::get($htype, $name);

Get the value (or value and weight,if called in an an array context) of the
given attribute for the given htype.  It is a fatal error for the htype not to
exist.  If no such element exists, and/or no default value has been set for the
element, the empty string is returned.

=back

=cut

package prefs;

%prefs = ();

###########################################################################
#  prefs::array($pkg)
#
#  Return prefs array for a particular package.  If one doesn't
#  exist, create it.
###########################################################################

sub array {
    my $pkg = shift;
    $prefs{$pkg} = {} unless defined $prefs{$pkg};
    return $prefs{$pkg};
}

###########################################################################
#  prefs::array_from_file($pkg,$filename)
#
#  Read default prefs for $pkg from file $filename and store them in the
#  prefs array for that package.
#  RETURNS: true iff success
#  EFFECTS: sets up prefs array for $pkg, if successful
###########################################################################

sub array_from_file {
    my ($pkg,$filename) = @@_;
    &array($pkg);
    my $prefs = &util::configfile($filename);
    
    return undef unless $prefs;
    unless (open(F, $prefs)) {
        &util::log ("prefs",
                    "warning: can't read prefs for $pkg from $filename; $!");
        return undef;
    }
    while (<F>) {
        next if /^#/;
        next if /^\s*$/;
        if ( /^(\S+)\s+(\d+)\s+(\d+)\s*$/ ) {
            set($pkg, $1, $2, $3);
            $DefaultVal{"$pkg,$1"} = $2;
            $DefaultWt{"$pkg,$1"} = $3;
        } else {
            warn "prefs: bad line ${.} in $filename, ignored";
        }
    }
    close F;
    return 1;
}

###########################################################################
#  prefs::set($pkg,$name,$val,$weight)
#
#  Sets attribute $name to value $val and weight $weight in $package.  A
#  value of -1 means use the default value from the packages' config file.
#  A value of empty string means keep the current value.
###########################################################################

sub set {
    my ($pkg,$name,$val,$weight) = @@_;
    my $ary = &array($pkg);

    my $cval = $ary->{$name};
    my $cwt;
    
    if (defined $cval && $cval =~ /([^:]*):([^:]*)/) {
        ($cval,$cwt) = ($1,$2);
    } else {
        ($cval,$cwt) = (0,1);
    }

    if ($val == -1) {
        $val = ($DefaultVal{"$pkg,$1"} || 0);
    } elsif ($val eq '') {
        $val = $cval;
    }
    if ($weight == -1) {
        $weight = ($DefaultWt{"$pkg,$1"} || 1);
    } elsif ($weight eq '') {
        $weight = $cwt;
    }
    $ary->{$name} = "${val}:${weight}";
}

###########################################################################
#  prefs::get($pkg,$name)
#
#  Returns a pair (value,weight) for $name in $pkg; undef if they don't exist.
###########################################################################

sub get {
    my ($pkg,$name) = @@_;

    die "No prefs for package $pkg"
        unless defined $prefs{$pkg};
    my ($val,$wt) = split(/:/, $prefs{$pkg}->{$name});
    return (wantarray? ($val,$wt) : $val);
}

=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut

1;

        

    
    
@


1.4
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 6
d98 6
a103 2
    unless (open(F, $filename)) {
        die "prefs: can't read prefs for $pkg from $filename; $!";
d169 10
@


1.3
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d51 1
@


1.2
log
@prefs stuff more robust; falls back on defaults, read from .prefs file
in each htype module. prefs sort-of-observed
for target size in bytes (actually for latency, calculated backwards
from network bandwidth), but ignores all others prefs right
now. standalone gifmunch is used to do distillation.  network.pl will
be where NCM calls get made; right now it returns static values.  also
change to startup rendezvous for monitor; proxy PID is now attached to
rendezvous file name, and passed as first (and only) arg to gmmon.
@
text
@d1 60
a60 4
#
#  Manage the prefs arrays for the various types, based on client messages and
#  default values from config files.
#
@


1.1
log
@*** empty log message ***
@
text
@d24 31
d57 3
a59 3
#  Sets attribute $name to value $val and weight $weight in $package.  $val and
#  $weight default to the default values in the package's config file
#  (BUG::not implemented yet).
d64 10
a73 1
    my %ary = %{&array($pkg)};
d75 11
a85 1
    $ary{$name} = "$val:$weight";
d99 2
a100 1
    return split(/:/, $prefs{$pkg}->{$name});
@
