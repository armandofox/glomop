head	1.3;
access;
symbols
	current:1.2;
locks; strict;
comment	@# @;


1.3
date	96.12.17.04.22.14;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.08.23.19.35.53;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.07.26.20.30.48;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added the lackey, which required minor changes to util.pl (to make unique
file names really unique when forking is involved).  Also added
beginnings of an autoconf script and a Makefile.in.
@
text
@# $Id: chunk.pl,v 1.2 1996/08/23 19:35:53 gribble Exp $
=head1 NAME

chunk - GloMop chunk abstraction and interface to Segmentation Manager

=head1 SYNOPSIS

 require "util.pl";
 require "segmgr.pl";

 # Constructors/class methods:
 
 $ch = new chunk ($mime_type,$compr_type,$doc_id,$chunk_idx,$data,$filename,$refine_dl,$anno);
 
 $toc = toc chunk ($doc_id, $metadata, @@chunks);
 
 # Instance methods:
 
 $data = $ch->packed();
 $copy = $ch->clone();
 
 # Instance variables:
 
 mime_type
 doc_id
 chunk_idx
 refine_dl
 compr_type
 metadata
 data
 len
 anno
 filename (obsolete)

=head1 DESCRIPTION

The segmentation manager provides generic services for modules that will do
chunking of documents, and exports the chunk abstraction.

=head1 CONSTRUCTORS/CLASS METHODS

=over 3

=item new chunk ($mime, $compr, $doc_id, $indx, $data, $filename, $refine_dl, $anno, $metadata)

Creates a chunk object with the given instance variables.  If $data is defined,
it is taken to be the chunk contents; otherwise, $filename must be defined and
be a readable file containing the chunk contents verbatim.  If $refine_dl is
defined, it is taken as the Document Locator for refinement of this chunk; if
undefined, an appropriate Document Locator is synthesized.

=item $toc = toc chunk ($doc_id, $metadata, @@chunks)

Once you have built up a list of chunks that make up a document, you can call
this constructor to create a TOC chunk.  It returns a chunk object that is
intended to be used as chunk index 0.  $doc_id is the document ID for which
this is the TOC; $metadata is an opaque string that is used as the TOC
metadata; @@chunks is an array of chunk objects.  This routine will create a TOC
entry for each of the chunks, and return the TOC as a chunk object.

=item $newchunk = $chunk->clone()

Makes a deep copy of the chunk, i.e. the copy and original will not point to
any of the same objects (unless you embedded your own references in the
metadata or data fields, of course).

=back

=head1 INSTANCE METHODS

=over 3

=item $data = $ch->packed

Returns the opaque bytes corresponding to the "chunk" portion of a chunk
delivery message.  The result can be used, e.g., as one of the arguments of the
L<Msg::send_chunk(3)> call.

=item $copy = $ch->clone

Returns a clone of the chunk: every field is copied (but not recursively
copied, i.e. if a field contained a reference, the clone of the field will
contain the same reference, therefore point to the same object).

=back

=head1 INSTANCE VARIABLES

You can set an instance variable's value by passing the value to the instance
variable accessor function.

=over 3

=item $ch->mime_type

The MIME type/subtype of this chunk, as a string; e.g. "image/gif".

=item $ch->doc_id

The document ID (integer) of which this chunk is a part.

=item $ch->chunk_idx

The index of this chunk.  Chunk index 0, by convention, is the table of
contents.

=item $ch->refine_dl

The document locator to use for refining this chunk.

=item $ch->compr_type

The compression type to be applied to this chunk, as a 2-letter string.  This
will be used at chunk delivery time to compress the content for the client, but
you never have to deal with it directly; chunk data is always returned in
verbatim uncompressed form when accessed through the appropriate method.
Currently ignored since no compression is implemented.

=item $ch->data

The data corresponding to this chunk, returned as a verbatim scalar.  If the
data was previously only in a file, the file is read and its contents
returned.   B<BUG::this behavior is NYI!>

=item $ch->len

The length of the data.  This is a read-only variable.

=item $ch->anno

Textual annotation of the chunk contents, to help make the chunk
self-describing.  This is transmitted in the chunk 
message and may or may not be used by the client.

=item $ch->filename

The filename containing the verbatim chunk data; if undefined, there is no such
file.  B<Warning:> This is an obsolete instance method that will soon go away
or be made private; don't use it.

=back

=cut

package chunk;

&util::instvars(qw(chunk
                   mime_type
                   doc_id
                   chunk_idx
                   refine_dl
                   compr_type
                   metadata
                   len:r
                   filename:r
                   anno
                   ));

#  Create a new chunk, given the mime type, compr_type, data
#  length, document and chunk id's, and content and/or filename.
#
#  The 'data' instance variable is handled by a special function; see below in
#  this file.
#
#  If data is undef, filename must be defined and is assumed to contain the raw
#  data.  Vice versa if filename is undef.  At least one must be defined.
#
#  If compr_type is undef, no compression is done; otherwise the data is
#  compressed (by being read from file first, if necessary).
#
#  If length is undef, it is computed from the data or file length.

sub new {
    my ($class,$mime,$comptype,$doc_id,$chunk_idx,$data,
        $filename,$refine,$anno,$metadata) = @@_;
    if (scalar @@_ == 2) {                   # just 'self' and 'data'
        $data = $_[1];
    }
    die "chunk::new: At least one of data or filename must be defined"
        unless (defined($data) || (defined($filename) && (-r $filename)));

    # BUG::should do compression here

    if (defined $data) {
        $length = length($data);
    } else {
        $length = -s $filename;
    }

    unless ($refine) {
        if (defined $filename) {
            $refine = "file:$filename";
        } else {
            $refine = "refine://no";
        }
    }

    # create the object

    return bless {
        "mime_type" => $mime,
        "refine_dl" => $refine,
        "compr_type" => $comptype,
        "len" => $length,
        "metadata" => $metadata,
        "data" => $data,
        "filename" => $filename,
        "anno" => $anno
        };
}

sub clone {
    my $self = shift;
    my $x = bless {};
    for (keys %$self) {
        $x->{$_} = $self->{$_};
    }
    $x;
}
#
#  Return the chunk data packed together as the opaque bytes that will be
#  transmitted in a message.  If necessary,pull the data out of a file.  
#

sub packed {
    my $self = shift;
    if (! defined $self->{"data"}) {
        open(F, $self->filename);
        local($/) = undef;
        $self->data( <F> );
        close F;
    }
    my $len = length($self->data);
    $self->{len} = $len;
    my $mdlen = length($self->metadata);
    # pack the MIME type, refinement DL, compr type, length, data

    return (
	    join("",
		 &Msg::pack_str1($self->mime_type),
		 &Msg::pack_str1($self->refine_dl),
		 &Msg::pack_i16($self->compr_type),
		 &Msg::pack_str2($self->metadata),
		 &Msg::pack_str2($self->data)
		 )
	    );
}

# fromfile is like unpack, but intended to be called as a constructor.

sub fromfile {
    my ($class,$filename) = @@_;
    my $self = new chunk "";
    $self->unpack($filename);
    return $self;
}

# sub unpack {
#     my $self = shift;
#     my $filename = shift;
#     open (F, $filename) or return undef;
#     $self->mime_type(&Msg::read_str1(F));
#     $self->refine_dl(&Msg::read_str1(F));
#     $self->compr_type(&Msg::read_i16(F));
#     $self->metadata(&Msg::read_str2(F));
#     $self->data(&Msg::read_str2(F));
#     close F;
#     return $self;
# }    

sub unpack {
    my $self = shift;
    my $filename = shift;
    local($dat) = &util::slurp($filename);
    &Msg::set_buffer("chunk::dat");
    $self->mime_type(&Msg::read_str1);
    $self->refine_dl(&Msg::read_str1);
    $self->compr_type(&Msg::read_i16);
    $self->metadata(&Msg::read_str2);
    $self->data(&Msg::read_str2);
    &Msg::set_buffer();
    return $self;
}


#
#  Routines that operate on the DTOC.
#  Return a new empty table-of-contents (DTOC) chunk.
#

sub toc {
    my ($class,$doc_id,$metadata,@@chunks) = @@_;
    my $toc =  new chunk "glomop/toc", undef, $doc_id, 0, "", undef, "TOC";
    my $data = '';
    # fill in metadata
    $data .= &Msg::pack_str2($metadata);
    # and number of chunks
    $data .= &Msg::pack_i16(scalar @@chunks);
    foreach $ch (@@chunks) {
        $data .= &Msg::pack_str1($ch->mime_type);
        $data .= &Msg::pack_str1($ch->anno);
    }
    # all done
    $toc->{"data"} = $data;
    return $toc;
}

sub data {
    my $self = shift;
    if ($#_ >= 0) {
        # set data
        my $dat = shift;
        $self->{"data"} = $dat;
        $self->{"len"} = length($dat);
    }
    $self->{"data"};
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    

1;
@


1.2
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@d1 1
a1 1
# $Id: chunk.pl,v 1.2 96/08/22 14:43:49 glomop Exp $
d176 3
a178 1

d247 3
d251 19
a269 7
# &Msg::pack_str1($self->mime_type)
#             .  &Msg::pack_str1($self->refine_dl)
#             .  &Msg::pack_i16($self->compr_type)
#              .  &Msg::pack_i16($mdlen)
#             .  pack("a$mdlen", $self->metadata)
#              .  &Msg::pack_i16($self->{len})
#              .  pack("a$len", $self->data));
d271 12
d284 1
@


1.1
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 1
d20 1
d61 6
d178 1
a178 1
        unless (defined($data) || (defined($filename) && -r $filename));
d233 1
d235 19
a253 5
    return (&Msg::pack_str1($self->mime_type)
            .  &Msg::pack_str1($self->refine_dl)
            .  &Msg::pack_i16($self->compr_type)
            .  &Msg::pack_i16($self->len)
            .  pack("a$len", $self->data));
d288 11
@
