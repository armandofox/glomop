head	1.2;
access;
symbols
	current:1.2;
locks; strict;
comment	@# @;


1.2
date	96.08.23.19.36.06;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.07.26.20.31.03;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@#
# layout.pl - simple layout packer
# $Id: layout.pl,v 1.3 96/08/22 20:28:24 glomop Exp $
#


=head1 NAME

layout.pl - simple layout packer

=head1 SYNOPSIS

 $ly = new layout ($x0,$y0,$x1,$y1[,$thresh]);

 ($x0,$y0,$x1,$y1) = $ly->pack_static($chunk,$halign,$valign);
 $leftover_chunk = $ly->pack_dynamic($textchunk,$measproc,$halign,$valign);

 $ly->clear();
 $ly->clearleft();
 $ly->clearright();
 $ly->clearboth();

=head1 DESCRIPTION

The layout manager takes an initial bounding box upper left and lower right
corner  (x0,y0,x1,y1) and packs flowable (e.g. text) and non-flowable
(e.g. images) objects into it.

To pack an object, you call one of two packing functions with the
chunk
containing the object.  The packing information for the chunk -- its
bounding box coordinates relative to the initial layout coordinates -- 
is filled in the chunk metadata field, as a subset of X11-style geometry
specification (e.g. "250x200+100+0").  It's a subset
because all four components (width, height, horizontal, vertical) are
guaranteed to be 
given and the left and top components are guaranteed to be positive,
i.e. measured from the left and top respectively of the original layout window.
Note that the "+" coordinates are in the coordinate system of the layout
itself, i.e. if the original layout was (10, 20, 100, 100), then a
specification "+10+20" is the upper left corner.

=cut

package layout;

=head1 CONSTRUCTOR

=over 3

=item $ly = new layout $x0,$y0,$x1,$y1[,$thresh]

Create new layout object with initial bounding box $x0,$y0 (upper left), ,$x1,$y1
(lower right). $thresh, if given, is the smallest "useful" packing cavity
width, i.e. if the current packing cavity is fewer than $thresh pixels wide, no
attempt will be made to fit a flowable object into it.  Defaults to zero.

=back

=cut

&util::instvars('layout', qw(thresh left right top bottom stack lastbottom));

sub new {
    my $class= shift;
    my ($x0,$y0,$x1,$y1,$textsizefunc) = @@_;

    bless {
        "thresh" => 5,
        "left" => $x0,
        "right" => $x1,
        "top" => $y0,
        "bottom" => $y1,
        # "stack" => [[$x0,$y0,$x1,$y1],[$x0-1,$y0-1,$x1+1,$y1+1]],
        "stack" => [[$x0,$y0,$x1,$y1],[$x0,$y0,$x1,$y1]],
        "lastbottom" => [$y1],
    };
}

=head1 INSTANCE METHODS

=over 3

=item $ly->pack_static($chunk,$halign,$valign)

Packs the specified chunk according to constraints $halign and $valign, each of
which may be "left", "top", "right", "bottom", or -1, 0, 1 respectively.  Note
that "left" means "top" if given as the $valign argument; similarly
"right"; and vice versa.  The object will not be "flowed" around other
objects.

The object's chunk metadata should be of the form "NxM" where N and M are
integers giving the pixel dimensions (width,height) of the chunk's bounding box.

Returns: a list of coordinates (left,top,right,bottom) if success;
-1, if the available space will not accommodate the object; a string
describing an error, otherwise.  The chunk's metadata field will be set to
"NNxNN+xx+yy", i.e. an X11-style geometry specification describing how the
object was packed.

=cut

sub pack_static {
    my ($self,$chunk,$halign,$valign,$thresh) = @@_;
    $halign = -1 unless defined $halign;
    $valign = -1 unless defined $valign;
    $thresh = $self->thresh unless defined $thresh;
    
    &util::debug("layout", "pack_static: Halign=$halign Metadata=" .
                 $chunk->metadata);
    my ($x,$y);
    my $have_pushframe;

    my($cl,$ct,$cr,$cb) = @@{$self->spop()};
    my($ol,$ot,$or,$ob) = $self->tos();

    &util::debug('layout', "Currentframe is $cl $ct $cr $cb");
    &util::debug('layout', "Pushframe is $ol $ot $or $ob");


    my %pack = ("right"=>1,"bottom"=>1,"left"=>-1,"top"=>-1);

    # canonicalize alignment
    $valign += $pack{$valign} if exists $pack{$valign};
    $halign += $pack{$halign} if exists $pack{$halign};

    ($x,$y) = split(/x/, $chunk->metadata);

    # make sure it's not too wide.
    &util::debug('layout', "pack_static returns: out of room!"), return -1
        if $x > ($cr-$cl);

    # invariants:
    # 1. top of stack is the bounding box to use.
    # 2. next elt on stack is the push frame.

    # pack the object.

    my($fl,$fr,$ft,$fb);                    # left right top bottom
    my($nt,$nb,$nl,$nr);
    my $pushframe;
    my $nextframe;
    my $old_pushframe;

    # if it's not the same width as the current bounding box, compute the new
    # coords.

    if ($halign == -1) {                    # left
        $fl = $cl;
        $fr = $nl = $cl+$x;
        $nr = $cr;
    } elsif ($halign == 0) {
        $fl = ($cl+$cr-$x) >> 1;
        $fr = $fl+$x;
        $nl = $cl;
        $nr = $cr;
    } else {
        $fr = $cr;
        $fl = $nr = $cr-$x;
        $nl = $cl;
    }
    # BUG::no valign for now; assume top
    if (1 || $valign == -1) {                    # top
        $ft = $ct;
        $fb = $ct+$y;
    }

    # calculate new top and bottom.
    # if we're too close to  edges, it's time to start a new "row".

    if ($halign == 0 || ($cr-$fr <= $thresh) && ($fl-$cl <= $thresh)) {
        # we used up all the horizontal space in the current cavity.  Now we
        # must see if the bottom of this frame is above, in line with, or below
        # the top of the pushframe.
        if (($fb < $ot) || ($ot == $self->top)) {
            # bottom of this frame is above the top of the pushframe.  Leave
            # pushframe as is, and set nextframe to be the same as the current
            # frame except that its top edge should be the packed object's
            # bottom edge (we used up some space).
            # BUG::if valign is bottom instead of top, we need to do the
            # reverse.  Maybe we just won't support valign packing.
            $nt = $fb;
            $nl = $cl;
            $nr = $cr;
            $nb = $cb;
            &util::debug('layout', "New nextframe: $nl $nt $nr $nb");
            # ... no change to old pushframe, but push new frame
            $self->spush( [$nl,$nt,$nr,$nb] );
        } elsif ($fb > $ot) {
            # bottom of this frame is below the top of the pushframe.  Make
            # the pushframe be the nextframe and vice versa.
            $old_pushframe = $self->spop();
            $self->spush([$cl, $fb, $cr, $cb]); # new pushframe
            $self->spush($old_pushframe);   # new nextframe
        } elsif ($fb != $self->bottom) {
            # boundary case! need to do a clearboth.  Pop the pushframe
            # (leaving the previous pushframe as the pushframe), and set the
            # newframe to combine the old pushframe with the remaining space in
            # the current frame.
            # BUG::should probably do this recursively, in case we can pop
            # multiple old pushframes.
            &util::debug('layout', "Combining frames");
            $self->spop();                  # get rid of old pushframe
            $self->spush([&util::min($ol,$cl),$ot,
                          &util::max($or,$cr),$cb]);
        }
    } else {
        # not all of the horiz. space will be used up, so we must push both a
        # new pushframe and a new nextframe.
        $self->spush([$fl,$fb,$fr,$cb]);    # new pushframe
        $self->spush(($halign == -1)
                     ? [$fr,$ct,$cr,$cb]
                     : [$cl,$ct,$fl,$cb]);  # new nextframe
        unshift(@@{$self->{"lastbottom"}}, $fb);
    }
    $chunk->metadata(sprintf("%dx%d+%d+%d", $fr-$fl, $fb-$ft, $fl,$ft));
    &util::debug('layout', "pack_static returns $fl,$ft,$fr,$fb");
    return ($fl,$ft,$fr,$fb);
}

=item  *

 $leftover = $ly->pack_dynamic($text,$measproc,$halign,$valign[,$thresh[,@@restargs]])

Dynamically packs the text to fill as much vertical space as corresponds
to the bottom boundary of the pushframe.  Returns the text that was
left over, which is not necessarily a
substring of the original text, since tags that are open at the time the text
is cut off need to be closed and reopened across text chunks.

$thresh is a threshold: if the remaining horizontal space in the packing cavity
is narrower than this amount, no attempt should be made to pack the text.  If
negative or not given, the current threshold value for the layout is used.

@@restargs, if supplied, will be passed to the text measurement function as
described below.

The chunk passed in will have its metadata field modified to have the form
"NNxNN+xx+yy", an X11-style geometry specification that can be used downstream
by the actual GUI.

$text should be a text chunk.  $measproc should reference a subroutine
that can be called as follows:


    $boxheight = &$measproc($fixedwidth,$text,@@restargs)
    ($index,$leftover,$ht) = &$measproc($fixedwidth,$fixedheight,$text,@@restargs)

In both cases, @@restargs are passed verbatim from the call to pack_dynamic.
The first form returns an integer saying how tall a box of $fixedwidth width
would have to be to accommodate the string $text; the second form
returns the index of the last text character that will fit
into a box of dimensions $fixedwidth by $fixedheight (first char is index 0),
along with any stuff that should be prepended to the next text chunk
(e.g. tags that were open when the text chunk ended) and the actual height of
the part of the box that got filled.  The
function should use argument count (not calling context) to determine how
it is being called.


Return values: If $leftover is undef, all the text was packed
successfully.   If $leftover is -1, there was not enough room to pack any of
it.   If $leftover is a chunk, the chunk data contains what should be passed
the next time this function is called.  In any case, you
probably want to call L<clearleft> after this.


=cut

sub pack_dynamic {
    my($self,$text,$measureproc,$halign,$valign,$thresh,@@rest) = @@_;

    $thresh = $self->thresh if (!defined($thresh) || ($thresh < 0));
    my $newchunk = undef;

    # invariants:
    # 1. top elt of "lastbottom" stack is the cutoff point we're aiming for

    my $bottom = $self->{"lastbottom"}->[0];
    my $packregion = $self->{"stack"}->[0];

    # determine how much text is left over if we pack a box of that height and
    # the width of the packing cavity.

    my $boxwidth = $packregion->[2] - $packregion->[0];
    my $boxht = $bottom - $packregion->[1];

    if ($boxwidth < $thresh) {
        &util::debug('layout', "Zero width packregion; exiting");
        return -1;
    }
    if ($boxht < $thresh) {
        &util::debug('layout', "Zero height packregion; exiting");
        return -1;
    }

    &util::debug('layout', "Packregion: " . join(' ', @@$packregion),
                 " bottom=$bottom");

    #  HACK::
    $boxht = int($boxht * 3/4);

    my ($index,$stuff,$realheight)
        = &$measureproc($boxwidth, $boxht, $text->data, @@rest);
    &util::debug('layout', "Packing in $boxwidth x $boxht" .
                 " gives index=$index, stack=$stuff, height=$realheight");

    if ($index < $text->len - 1) {
        &util::debug('layout', "Will break into 2 chunks");
        # there wasn't enough room for all of it, so we should pop the
        # lastbottom since we will now start flowing future text around other
        # stuff
        $newchunk = $text->clone();
        shift (@@{$self->{"lastbottom"}})
            unless (scalar @@{$self->{"lastbottom"}}) == 1;
        # truncate the data we're about to pack statically.
        #$newchunk->data($stuff . substr($text->data, $index));
        $newchunk->data(substr($text->data, $index));
        $text->data(substr($text->data, 0, $index));
    } else {
        # there was leftover vertical space.
        # only use as much as is needed.
        $boxht = $realheight;
        $newchunk = undef;
    }

    # HACK::
    $boxht = int($boxht * 4/3);

    # actually pack the thing.
    $text->metadata(sprintf("%dx%d", $boxwidth,$boxht));
    &util::debug('layout', "Calling pack_static with ".($text->metadata));
    my($l,$t,$r,$b) = $self->pack_static($text,$halign,$valign);
    return -1 if $l == -1;                  # out of space!
    $text->metadata(sprintf("%dx%d+%d+%d", $r-$l, $b-$t, $l, $t));
    return $newchunk;
}

sub spush { unshift(@@{$_[0]->{"stack"}}, $_[1]) }
sub spop { shift(@@{$_[0]->{"stack"}}) }
sub stacksize { scalar @@{$_[0]->{"stack"}} }
sub tos { $#{$_[0]->{"stack"}} >= 0
              ? @@{$_[0]->{"stack"}->[0]}
          : (-1,-1,-1,-1) }

=item $ly->clear

Insert a conceptual line break after the last object packed.  Useful if
you just packed an object flush left (or right) which was not the full
width of the available packing area, and then you want to pack another
object below it.  Gives the effect of <BR> in HTML.  Returns true iff success.

=cut

sub clear {
    my $self = shift;
    if ($self->stacksize > 2) {
        $self->spop();
        return 1;
    } else {
        return 0;
    }
}

=item $ly->clearleft

=item $ly->clearright

=item $ly->clearboth

Arrange for the next object to be packed flush against the page
left, right, or both margins.  Gives you the functionality of <BR CLEAR=LEFT>,
for example.  Returns true iff success.

=cut

sub clearleft {
    my $self = shift;
    my $thresh = $self->thresh;
    my $right = $self->right;
    my $left = $self->left;

    $self->spop() while ($self->stacksize > 2
                         && abs($self->tos->[0] - $left) > $thresh);
    return (abs($self->tos->[0] - $left) <= $thresh);
}

sub clearright {
    my $self = shift;
    my $thresh = $self->thresh;
    my $right = $self->right;
    my $left = $self->left;

    $self->spop() while ($self->stacksize > 2
                         && abs($self->tos->[2] - $right) > $thresh);
    return (abs($self->tos->[2] - $right) <= $thresh);
}

sub clearboth {
    my $self = shift;
    my $thresh = $self->thresh;
    my $right = $self->right;
    my $left = $self->left;

    $self->spop() while ($self->stacksize > 2
                         && abs($self->tos->[2] - $right) > $thresh
                         && abs($self->tos->[0] - $left) > $thresh);
    return (abs($self->tos->[2] - $right) <= $thresh
            && abs($self->tos->[0] - $left) <= $thresh);
}



sub chk {
    my $x;

    $x = new chunk $_[0], undef,
                       1, 1, $_[1],
                       undef, undef, undef, "$_[2]x$_[3]";
    $x;
}

=back

=head1 IMPLEMENTATION

The packer implements the following basic algorithm.  The state consists of
a I<stack> S, a I<current frame> CF, and a I<push frame> PF.  CF
represents the rectangular subregion of the "full page" that is
currently available for packing.  PF represents (approximately) the
region in which packing will continue after CF's area is exhausted.   An
invariant is that CF is always at
the top of the stack, followed by PF if there is one.

Initially, S contains two copies of the frame corresponding to the full
screen.

To pack an object O whose dimensions can be represented by the frame
OF:

=over 4

=item 1.

If the object will not fit in CF, return -1 immediately.

=item 2.

Pack the object against the left or right of CF, as specified.  For
centering, extend the object to full width of CF.

=item 3.

If the object is not as wide as CF, partition up the space and set CF
and PF as shown in the before-and-after figure below.  (Recall that CF
is always made the topmost stack element, followed by PF.)

 +---------------+     +-------+-------+
 |     CF        |     |   O   |new CF |
 |               |     +-------+-------+
 |               |     |     new PF    |
 |               |     |               | 

=item 4.

If the object is as wide as CF, there are three cases, depending on
whether the bottom of the object's frame is above, below, or in line
with the top of PF.  In all of the following diagrams, "P" represents an
area already packed (filled), PF represents the push frame,  CF the
current frame, and O the object being packed.

=item 4a.

Case (a): Bottom of OF is above top of PF.  Corresponds to the
before-and-after figures
below: we have not used up all of the packing area available in CF.  In
this case, leave PF unchanged, and set CF to the new smaller frame.

 +------+--------+        +------+--------+
 |  P   | old CF |        |  P   |   O    |
 |      |        |        |      +--------+
 +------+        |        +------+ new CF |
 | PF   |        |        | PF   +--------+
 |      |        |        |      |        |

=item 4b.

Case (b): Bottom of OF is below top of PF.  Packing should continue in
the area adjoining PF, rather than in CF.  So we interchange CF and PF
on the stack.

 +------+--------+        +------+--------+
 |  P   | old CF |        |  P   |   O    |
 |      |        |        |      |        |
 +------+        |        +------+        |
 | PF   |        |        | new  +--------+
 |      |        |        | CF   | new PF |
 |      |        |        |      |        |

=item 4c.

Case (c): Bottom of OF is exactly in line with top of PF.  In this case
we discard the old PF, since we can merge it into the remaining
space in the CF.  The new PF will be whatever was on the stack below PF,
so that when the packing algorithm is run recursively, everything will
work.

 +------+--------+        +------+--------+
 |  P   | old CF |        |  P   |   O    |
 |      |        |        |      |        |
 +------+        |        +------+--------+
 | PF   |        |        |    new        |
 |      |        |        |     CF        |
 |      |        |        |               |

=back

Packing of flowable objects such as text is handled by calling a
measurement routine 
to determine how much of the object will fit in a "static" chunk that
fills the width of CF, and continuing to pack until there is no more of
the flowable object left.

Clear is implemented by popping a single frame.
Clearleft, clearright, and clearboth are implemented by popping stack
frames until CF's left, right, or both edges correspond to the actual
screen bounds.

=cut


sub main {
    $ly = new layout 0,0,250,250;

    open(TCL,"| /usr/local/bin/wish -f") or die $!;
    select TCL; $| =1;select STDOUT;
    print TCL "frame .f -width 250 -height 250 ; place .f -x 0 -y 0\n";
    while (++$num) {
        print "$num: ";
        chop($x=<STDIN>);
        ($typ,$x,$y,$align,$thing)=split(/\s+/,$x);
        if ($typ eq 't') {
            $res=$ly->pack_static($c=&chk("text/plain",
                                          "*" x ($thing/2),
                                          $x,$y),$align);
            ($w,$h,$t,$l)=($1,$2,$3,$4)
                if $c->metadata =~ /(\d+)x(\d+)\+(\d+)\+(\d+)/;
        } elsif ($typ eq 'i') {
            $res=$ly->pack_static($c=&chk("image/gif",$thing,$x,$y),$align);
            ($w,$h,$l,$t)=($1,$2,$3,$4)
                if $c->metadata =~ /(\d+)x(\d+)\+(\d+)\+(\d+)/;
        } elsif ($typ eq 'd') {
            $leftover = $ly->pack_dynamic($c = &chk("text/plain",
                                                    "* "x  ($thing/2),
                                                    $x,$y),
                                          \&layout::meas,
                                          $align);
            ($w,$h,$l,$t)=($1,$2,$3,$4)
                if $c->metadata =~ /(\d+)x(\d+)\+(\d+)\+(\d+)/;
            warn "Leftover text: " . $leftover->data
                if defined $leftover;
        } elsif ($typ eq 'l') {
            $leftover = $ly->pack_dynamic($c=$leftover, \&layout::meas, $align);
            ($w,$h,$l,$t)=($1,$2,$3,$4)
                if $c->metadata =~ /(\d+)x(\d+)\+(\d+)\+(\d+)/;
        } else {
            $ly->clearboth;
        }
        my $str = sprintf ("place .f.b$num -x $l -y $t -width $w -height $h\n");
        warn "-- $str";
        print TCL "button .f.b$num -text {$x} -relief sunken\n";
        print TCL $str;
        local($,)=',';
        @@z0 = @@{$ly->{"stack"}->[0]};
        @@z1 = @@{$ly->{"stack"}->[1]};
        @@z2 = @@{$ly->{"stack"}->[2]};
        &util::debug("layout", "Stack top: @@z0 -- @@z1 -- @@z2");
    }
}

=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    

1;
@


1.1
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 6
d9 1
a9 1
layout.pl - simple packing layout object
d13 4
a16 1
=head1 DESCRIPTION
d18 4
a21 1
Input: an initial bounding box (upper left and lower right corners).
d23 1
a23 2
Output: a list of output boxes: upper left corner, dimensions (or lower right
corner), object tag.
d25 17
a41 6
Description: to pack an object, you call the packing function with the chunk
representing the object.  If the chunk's MIME type is "text", the text will be
flowed around existing subboxes, and the function will return two chunks
corresponding to where the text was divided to do a runaround.  If it's
anything else the function will return 1.  Undef is returned to indicate an
error. 
a45 1
&util::instvars("layout", qw(frames textsizeproc));
d51 1
a51 13
=item $ly = new layout $x0,$y0,$x1,$y1,$textsizeproc

Start a new layout with initial bounding box $x0,$y0 (upper left), ,$x1,$y1
(lower right). $textmeasproc is a reference to a subroutine that can measure
text in text/enriched or a comparable format.  The subroutine must be callable
as follows:

    &$textsizeproc("measure",$str) should return the width in pixels of $str
    &$textsizeproc("height",$str,$wid) should return the height of $str in
        pixels given that it should occupy no more than $wid pixels
        horizontally
    &$textsizeproc("width",$str,$ht) should return the width of $str in pixels
        given that it should occupy no more than $ht pixels vertically
d53 4
a56 1
Returns the layout object.
d62 2
d74 3
a76 3
        "stack" => [[$x0,$y0,$x1,$y1],[$x0-1,$y0-1,$x1+1,$y1+1]],
        "frames" => [],
        "tsz" => $textsizefunc,
d90 4
a93 1
objects. 
d95 1
a95 2
Returns: a list ($x0,$y0,$x1,$y1) of the upper left and lower right
corners of the subregion into which the object was packed, if success;
d97 3
a99 1
describing an error, otherwise.
d104 4
a107 1
    my ($self,$chunk,$halign,$valign) = @@_;
d109 2
a112 2
    #my ($cl,$ct,$cr,$cb) = @@{shift @@{$self->{"stack"}}};
    #my ($ol,$ot,$or,$ob) = @@{$self->{"stack"}->[0]};
a125 11
    
    if ($chunk->mime_type =~ m!^text/!) {
        # measure text object vertically
        $x = $cr-$cl;                       # full width for now
        $y = &{$self->{"tsz"}}("height", $chunk->data, $cr-$cl);
    } else {
        # get image height. Image chunk metadata is "x,y"
        ($x,$y)= (split(/,/,$chunk->metadata));
        # make sure it's not too wide.
        return -1 if $x > ($cr-$cl);
    }
d127 9
d137 1
a137 2
    # invariant: top of stack is the bounding box to use.
    # pack.
d144 1
a144 1
    
d152 5
d167 1
a167 1
        
d171 1
a171 1
    if (($cr-$fr <= $self->{"thresh"}) && ($fl-$cl <= $self->{"thresh"})) {
d175 1
a175 1
        if (($fb < $ot) || ($ot == -1)) {
d189 7
a195 1
        } elsif ($fb == $ot) {
a205 6
        } else {
            # bottom of this frame is below the top of the pushframe.  Make
            # the pushframe be the nextframe and vice versa.
            $old_pushframe = $self->spop();
            $self->spush([$cl, $fb, $cr, $cb]); # new pushframe
            $self->spush($old_pushframe);   # new nextframe
d214 1
d216 2
d221 118
d341 1
d346 19
d370 2
a371 2
    
Pop stack frames so that the next object laid out can be flush against the page
d373 1
a373 1
for example.
d377 22
d401 12
a412 5
    my @@stack = @@{$self->{"stack"}};
    my $maxbottom = $stack[0]->[3]; # top of stack
    my $new;
    
    # pop stack frames and remember the lowest-down bottom as we go.
d414 2
d417 7
a423 4
    while ($#stack > 0) {
        $new = shift @@stack;
        $maxbottom = $new->[3] if $new->[3] > $maxbottom;
    }
d425 1
a425 1
    # only one record is left on the stack; it had better be right.
d427 88
a514 3
    &util::debug("layout", "Warning! Top of stack is " . @@$new)
        unless ($new->[0] == $self->{"left"}
                && $new->[2] == $self->{"right"});
d516 1
a516 1
    # make that record have the correct value for its top coord.
d518 10
a527 3
    $stack[1] = $maxbottom;
    $self->{"stack"} = \@@stack;
}
d529 1
a529 1
sub tsz { 0+$_[1] }
a530 6
sub img {
    new chunk ("image/gif",undef,1,1,"foo",undef,undef,undef,"$_[0],$_[1]");
}
sub text {
    new chunk ("text/plain",undef,1,1,$_[0],undef,undef,undef,undef);
}
d533 1
a533 1
    $ly = new layout 0,0,250,250,\&layout::tsz;
d541 25
a565 5
        @@x=split(/\s+/,$x);
        if ($x[0] eq 't') {
            ($l,$t,$r,$b)=$ly->pack_static(&text($x[1]), $x[2],$x[3]);
        } elsif ($x[0] eq 'i') {
            ($l,$t,$r,$b)=$ly->pack_static(&img($x[1],$x[2]), $x[3],$x[4]);
d569 1
a569 2
        $str = sprintf ("place .f.b$num -x $l -y $t -width %d -height %d\n",
                        $r-$l, $b-$t);
d580 10
a589 1
    
@
