head	1.9;
access;
symbols
	prewink:1.6
	stable:1.5
	release:1.4
	current:1.9;
locks; strict;
comment	@# @;


1.9
date	96.08.23.19.36.15;	author gribble;	state Exp;
branches;
next	1.8;

1.8
date	96.07.26.20.31.10;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.07.07.00.03.26;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.07.01.04.00.45;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.06.07.00.33.56;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.06.03.19.46.20;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.05.25.02.46.01;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.23.59.23;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.04.27.02.24.20;	author fox;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@# testdrv.pl - simple message send/receive testing
# $Id: testdrv.pl,v 1.1 96/08/19 14:38:03 glomop Exp $

#!/usr/local/bin/perl

BEGIN { push(@@INC,"/staff/glomop/perlmod.SunOS"); }
require "./gm_sock.pl";
require "./bytestream.pl";
require "./msgdefs.pl";

$code =  &Msg::init_msgs_external("perl5_test");
eval $code;

$port = shift @@ARGV || (getservbyname("gmproxy.debug","tcp"))[2];
$s= connectsock gm_sock "predator", $port
    or die "Connectsock: ",&gm_sock::lasterror();
select $s->{WriteFH}; $| = 1;
select STDOUT; $| = 1;

sub my_write { $s->writesock(shift); warn "Message sent\n"; }

&send_handshake(qw(0 Nobody generic AUTH_NONE foo 10));

if ($c=0) {
    # child waits for output from proxy
     my $msg = &Msg::read_generic;
     if ($msg eq &Msg::OP_CHUNK) {
         # receive a chunk
         ($dummy,$doc_id,$chk_idx,$data) = &Msg::receive_chunk;
         print "=== BEGIN Chunk $doc_id:$chk_idx === ";
         &Msg::set_buffer("main::data");
         $mime = &Msg::read_str1;
         $refdl = &Msg::read_str1;
         $comptype = &Msg::read_i16;
         $len = &Msg::read_i16;
     }
 } elsif (defined $c) {
     while (1) {
        print STDERR "Msg name and args: ";
        
        chomp($_ = <STDIN>);
        @@msg = split;
        $name = shift @@msg;
        grep(s/^(.*)$/'$1'/, @@msg);
        $" = ', ';                               # "
        warn sprintf("Message $name: %d args\n", (scalar @@msg));
        eval "&send_$name(0, @@msg)";
        warn $@@ if $@@;
        
        if ($DbgMode) {
            print STDERR "Packet: ";
            for ($i=0;$i<length($p); $i++) {
                printf STDERR "%3d ",ord(substr($p,$i,1));
            }
            print STDERR "\n";
        }        
    }
} else {
    die "Fork error; $!";
}
@


1.8
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 3
@


1.7
log
@Various robustifications, addition of client abstraction, mainloop.pl
renamed to proxy.pl.  interface to htypes has changed: the doc object
(instead of doc_id) and client object are now passed.
@
text
@d12 1
a12 1
$s= connectsock gm_sock "full-sail", $port
d14 1
a14 1
$f = ($s->filehandles)[1];
d21 1
a21 1
if (fork()) {
d23 13
a35 13
    my $msg = &Msg::read_generic;
    if ($msg eq &Msg::OP_CHUNK) {
        # receive a chunk
        ($dummy,$doc_id,$chk_idx,$data) = &Msg::receive_chunk;
        print "=== BEGIN Chunk $doc_id:$chk_idx === ";
        &Msg::set_buffer("main::data");
        $mime = &Msg::read_str1;
        $refdl = &Msg::read_str1;
        $comptype = &Msg::read_i16;
        $len = &Msg::read_i16;
    }
} else {
    while (1) {
d37 1
d43 1
d55 2
@


1.6
log
@Split the Charon stuff out into charon.pl.
@
text
@d1 1
a1 1
#!/usr/sww/bin/perl5
d3 1
d19 1
a19 1
&send_handshake(qw(0 Nobody TestDrv AUTH_NONE foo 10));
@


1.5
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d18 34
a51 18
&send_handshake(qw(0 fox TestDrv AUTH_NONE foo 10));
while (1) {
    print STDERR "Msg name and args: ";
    chomp($_ = <STDIN>);
    @@msg = split;
    $name = shift @@msg;
    grep(s/^(.*)$/'$1'/, @@msg);
    $" = ', ';                               # "
    eval "&send_$name(0, @@msg)";
    warn $@@ if $@@;
    
    if ($DbgMode) {
        print STDERR "Packet: ";
        for ($i=0;$i<length($p); $i++) {
            printf STDERR "%3d ",ord(substr($p,$i,1));
        }
        print STDERR "\n";
    }        
@


1.4
log
@rudiments of main loop working, with gm_conn object inheriting from
gm_sock for handling open proxy connections
@
text
@d18 1
@


1.3
log
@no longer a need for http transport mgr; using LWP perl module.
completed multilanguage support for msgdef generation.  added messages
for doc open and chunk xmission to hsk.txt.  added monitor calls for
showing open documents.  modified testdrv to use as generic send/receive
of any messags defined in hsk.txt.  began working on doc.pl document
abstraction.
@
text
@d3 1
a3 1
require "/disks/barad-dur/now/pythia/release/perllib/gm_sock.pl";
d16 1
a16 1
sub my_write { $s->writesock(shift); }
@


1.2
log
@moved some globals into config file.  first cut at mainloop.  created
directories for front-end servers, transport managers, and doc type
segmenters.  split out message-parsing-code generation so that various
language back-ends can be used, allowing message code to be generated
automatically for clients in different languages; say 'perl5 msgdefs.pl
<lang>' to do it.
@
text
@d5 4
d13 1
d15 3
a17 1
%rd = ('str1','1','str2','2','i16','6','i32','3');
d19 1
a19 1
    print STDERR "Msg args and template (e.g. foo 234 str1 i16): ";
d22 13
a34 17
    $p = &Msg::pack_msg(0,@@msg);
    # send template, newline, message
    $tmpl = '';
    foreach $i (@@msg[($#msg+1)/2 .. $#msg]) {
        $tmpl .= $rd{$i};
    }
    @@z= (&Msg::str1($tmpl));
    $tmpl = pack($z[0], @@z[1..$#z]);

    print STDERR "Packet: ";
    for ($i=0;$i<length($p); $i++) {
        printf STDERR "%3d ",ord(substr($p,$i,1));
    }
    print STDERR "\n";

    #$s->writesock($tmpl);
    $s->writesock($p);
@


1.1
log
@*** empty log message ***
@
text
@d30 1
a30 1
    $s->writesock($tmpl);
@
