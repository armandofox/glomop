head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	96.09.23.07.06.42;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.09.12.23.57.38;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.09.11.23.50.38;	author fox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added serial.pl to configure serial port - still needs work.  Changed
return string of AUTH_OK msg to make it distinct from all other msgs. New
rule: msgs must have initial strings that are unique in first 2 letters
(case insensitive).  Minor changes to msgdefs.pl and the lang_*.pl to allow
passing of constant arg strings for code generation.  Added a "newt" client.
@
text
@#
#  Message code generation routines for NewtonScript
#

package lang_newtonscript;

$msgs = '';
$sends = '';

sub emit_const {
    local($varname,$type,$value) = @@_;
    return qq!constant kGM_$varname := $value;\n! ;
}

sub emit_sendmsg {
    local($msgname,$argtypes,$args) = @@_;
    my @@argtypes = @@$argtypes;
    my @@args = @@$args;
    my $msgtype = $args[0];
    grep(s/^/\'/, @@argtypes);
    grep(s/"(.*)"/$1/, @@argtypes);
    my $argtypes = join(',', @@argtypes);
    $msgs .= qq!{ name: $msgtype, args: kMsg_$msgname },\n! ;
    return "DefConst ('kMsg_$msgname, [$argtypes]);\n" ;
}

sub done {
    return "DefConst ('kMsgs, [\n" . $msgs . "]);\n";
}

sub emit_receivemsg { undef }

1;

@


1.2
log
@Fixed up makefile, added simple serial support
@
text
@d7 3
d12 1
a12 1
    return qq!constant kGM_$varname := $value;! ;
d16 4
a19 1
    local($msgname,@@argtypes) = @@_;
d23 6
a28 1
    return qq!constant kMsg_$msgname := [$argtypes];! ;
@


1.1
log
@NewtonScript code generation routines for glomop messages
@
text
@d9 1
a9 1
    return qq!DefineGlobalConstant('kGM_$varname, $value);! ;
d17 1
a17 1
    return qq!DefineGlobalConstant('kMsg_$msgname, [$argtypes]);! ;
@
