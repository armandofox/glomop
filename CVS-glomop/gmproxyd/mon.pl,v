head	1.15;
access;
symbols
	prewink:1.14
	stable:1.8
	release:1.4
	current:1.15;
locks; strict;
comment	@# @;


1.15
date	96.08.23.19.36.08;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	96.06.15.23.59.26;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	96.06.15.23.57.47;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	96.06.15.00.08.36;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	96.06.15.00.06.22;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	96.06.15.00.03.47;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	96.06.14.07.39.58;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.06.14.06.39.27;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.06.13.09.15.33;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.06.10.22.50.24;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.06.07.00.33.54;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.05.25.02.45.59;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.05.22.23.59.21;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.00.04.11;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.23.09.06;	author fox;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@#
#  mon.pl: interface to monitoring program (GUI, etc)
#  $Id: mon.pl,v 1.1 96/08/19 14:37:56 glomop Exp $
#

package Mon;
require "gm_sock.pl";

$Mon::TCP = undef;
$Mon::Log = undef;

sub init {
    #
    # Evil hack:
    #  Start the debugger, which will write its tcp port to a file.
    #  Return the debugger's tcp port by reading /tmp/mon file.
    #
    my $globals = shift;
    my $tcp;
    my $pid = $$;

    if ($globals->{LogWindow}) {
        system "/bin/cp /dev/null /tmp/mon$pid";
        open($Mon::Log = "LOG", ">/tmp/mon$pid")
            or die "Can't open mon log /tmp/mon$pid: $!";
        select $Mon::Log; $| = 1; select STDOUT;
        if (fork) {
            exec "xterm -e tail -f /tmp/mon$pid";
            die "Exec xterm failed: $! or maybe $?";
        }
    } elsif ($globals->{Textonly}) {
        # text only to same window as STDERR
        $Mon::Log = "STDERR";
        # BUG::need to redirect STDERR if daemon mode
    } else {
        unless (fork) {
            # this is the child
            chdir "../gmmon" or die "Chdir ../gmmon: $!";
            exec "./gmmon $pid";
            die "Exec failed: $!";
        }
        # kludgy way to avoid race cond
        sleep 1 until (-s "/tmp/mon$pid" > 3);
        unless (open(T, "/tmp/mon$pid")) {
            warn "mon: No monitor running...continuing anyway\n";
            return 1;
        }
        my $port = <T>;
        close T;
        unlink "/tmp/mon$pid";
        chomp $port;
        $port = 0+$port;

        # try to open tcp connection

        &util::debug("mon",
                     "Opening socket to $globals->{ProxyHost}:$port...\n"); 
        unless ($tcp = connectsock gm_sock $globals->{ProxyHost},$port,"tcp") {
            &util::debug("mon", "mon: TCP connect: " . &gm_sock::lasterror());
            return 1;
        }
        $Mon::TCP = $tcp;
    }
    return 1;
}

#
#  Send a raw command to the monitor
#

sub cmd {
    my $cmd = shift;

    if (defined $Mon::TCP) {
        # write 2-byte length as ascii, then msg text
        $Mon::TCP->writesock(sprintf("%02x%s", length($cmd),$cmd)) 
            or &util::debug("mon", $Mon::TCP->lasterror());
    } else {
        print $Mon::Log "== ".$cmd."\n";
    }
}

sub kill { &Mon::cmd( "exit 0"); }

sub setfield {
    # return unless ref($self) eq 'mon';
    my ($field,$value) = @@_;
    &Mon::cmd("set_field $field \{$value\}");
}

sub status {
    #return unless ref($self) eq 'mon';
    my $status = shift;

    &Mon::cmd("set_field Status \{$status\}");
}

sub doc_add {
    my @@docstuff = @@_;
    local ($") = " ";                       #" 
    grep(s/^(.*)$/{$1}/, @@docstuff);        # surround args w/braces
    &Mon::cmd("doc_add @@docstuff");
}

sub doc_delete {
    my $docid = shift;
    &Mon::cmd("doc_delete $docid");
}

sub doc_status {
    my ($id,$stat) = @@_;
    &Mon::cmd("doc_status \{$id\} \{$stat\}");
}

sub doc_info {
    my ($id,$tchunks,$schunks) = @@_;
    # hack for now
    #&Mon::cmd("doc_info \{$id\} \{$tchunks\} \{$schunks\}");
    &Mon::cmd("doc_status \{$id\} \{$schunks/$tchunks\}");
}
    
sub show_credentials {
    &Mon::cmd("show_cred AUTH_KERB");
}

=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut

1;
@


1.14
log
@*** empty log message ***
@
text
@d3 1
d125 10
@


1.13
log
@*** empty log message ***
@
text
@d78 1
a78 1
        print $Mon::Log $cmd."\n";
@


1.12
log
@*** empty log message ***
@
text
@d21 1
a21 1
    if ($globals->{Textonly}) {
d30 4
@


1.11
log
@*** empty log message ***
@
text
@d25 1
a25 1
        autoflush $Mon::Log;
@


1.10
log
@*** empty log message ***
@
text
@a17 1
    my $textonly = shift;
d21 1
a21 1
    if ($textonly) {
@


1.9
log
@*** empty log message ***
@
text
@d8 2
a9 2
$Port = 0;
$TCP = undef;
d18 1
d21 13
a33 3
    
    unless (fork) {
            # this is the grandchild
d38 21
a58 21
    
    # kludgy way to avoid race cond
    sleep 1 until (-s "/tmp/mon$pid" > 3);
    unless (open(T, "/tmp/mon$pid")) {
        warn "mon: No monitor running...continuing anyway\n";
        return 1;
    }
    my $port = <T>;
    close T;
    unlink "/tmp/mon$pid";
    
    chomp $port;
    $port = 0+$port;
    $Port = $port if $port;

    # try to open tcp connection

    &util::debug("mon", "Opening socket to $globals->{ProxyHost}:$port...\n"); 
    unless ($tcp = connectsock gm_sock $globals->{ProxyHost},$port,"tcp") {
        &util::debug("mon", "mon: TCP connect: " . &gm_sock::lasterror());
        return 1;
a59 2
    $TCP = $tcp;
    # &mon::status(\%self, "Monitor listening");
a68 1
    # return unless ref($self) eq 'mon';
d70 7
a76 4
    my $tcp = $TCP;
    # write 2-byte length as ascii
    $tcp->writesock(sprintf("%02x%s", length($cmd),$cmd)) 
        or &util::debug("mon", $tcp->lasterror());
@


1.8
log
@prefs stuff more robust; falls back on defaults, read from .prefs file
in each htype module. prefs sort-of-observed
for target size in bytes (actually for latency, calculated backwards
from network bandwidth), but ignores all others prefs right
now. standalone gifmunch is used to do distillation.  network.pl will
be where NCM calls get made; right now it returns static values.  also
change to startup rendezvous for monitor; proxy PID is now attached to
rendezvous file name, and passed as first (and only) arg to gmmon.
@
text
@d90 5
@


1.7
log
@Defined a simple protocol in hsk.txt for setting session-level
preferences for an htype, and implemented the message handler for it
which sends the parsed prefs info to the set_prefs routine of the
appropriate htype module.
@
text
@d19 1
d24 1
a24 1
            exec "./gmmon";
d29 2
a30 2
    sleep 1 until (-s "/tmp/mon" > 3);
    unless (open(T, "/tmp/mon")) {
d36 1
a36 1
    unlink "/tmp/mon";
@


1.6
log
@image segmenter successfuly calls pnmcut, but leaves chunks in ppm
format for now
@
text
@a20 1
        unless (fork) {
d26 1
a26 3
        exit 0;
    }
    wait;
@


1.5
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d70 2
@


1.4
log
@no longer a need for http transport mgr; using LWP perl module.
completed multilanguage support for msgdef generation.  added messages
for doc open and chunk xmission to hsk.txt.  added monitor calls for
showing open documents.  modified testdrv to use as generic send/receive
of any messags defined in hsk.txt.  began working on doc.pl document
abstraction.
@
text
@d33 1
a33 1
        warn "No monitor running...continuing anyway\n";
d46 1
a46 1
    warn "Opening socket to $globals->{ProxyHost}:$port...\n"; 
d48 1
a48 1
        warn "TCP connect: " . &gm_sock::lasterror();
a64 1
    warn "Writing $cmd";
d67 1
a67 1
        or warn "Hey! " . $tcp->lasterror();
d95 7
@


1.3
log
@moved some globals into config file.  first cut at mainloop.  created
directories for front-end servers, transport managers, and doc type
segmenters.  split out message-parsing-code generation so that various
language back-ends can be used, allowing message code to be generated
automatically for clients in different languages; say 'perl5 msgdefs.pl
<lang>' to do it.
@
text
@d5 1
a5 1
package mon;
d8 3
d14 2
a15 2
    #  Start the debugger, which will write its udp port to a file.
    #  Return the debugger's udp port by reading /tmp/mon file.
d17 1
a17 1
    my %self = ();
a19 3
    $self{Port} = 0;
    $self{Tcp} = undef;

d34 1
a34 1
        return bless( \%self );
d42 1
a42 1
    $self{Port} = $port if $port;
d46 2
a47 1
    unless ($tcp = connectsock gm_sock $globals::ProxyHost,$port,"tcp") {
d49 1
a49 1
        return bless(\%self);
d51 1
a51 1
    $self{TCP} = $tcp;
d53 1
a53 1
    return bless(\%self);
a60 1
    my $self = shift;
d62 1
a62 1
    return unless ref($self) eq 'mon';
d64 1
a64 1
    my $tcp = $self->{TCP};
d72 1
a72 2
    my $self = shift;
    return unless ref($self) eq 'mon';
d74 1
a74 1
    $self->cmd("set_field $field \{$value\}");
d78 1
a78 2
    my $self = shift;
    return unless ref($self) eq 'mon';
d81 13
a93 1
    $self->cmd("set_field Status \{$status\}");
d97 2
a98 2
    my $self = shift;
    return unless ref($self) eq 'mon';
d100 1
a100 2
    $self->cmd("show_cred AUTH_KERB");
}
@


1.2
log
@changed monitor msgs from udp to tcp
@
text
@d71 7
@


1.1
log
@Added support for monitoring (to external GUI monitor) in mon.pl.
currently talks to tcl/tk monitor app via udp packets.
@
text
@d15 1
a15 1
    my $udp;
d18 1
a18 1
    $self{Udp} = undef;
d44 1
a44 1
    # try to open udp connection
d46 2
a47 2
    unless ($udp = connectsock gm_sock $globals::ProxyHost,$port,"udp") {
        warn "UDP connect: " . &gm_sock::lasterror();
d50 1
a50 1
    $self{UDP} = $udp;
d64 1
a64 1
    my $udp = $self->{UDP};
d66 3
a68 1
    $udp->writesock($cmd) or warn "Hey! " . $udp->lasterror();
@
