head	1.10;
access;
symbols
	prewink:1.9
	stable:1.8
	release:1.7
	current:1.10;
locks; strict;
comment	@# @;


1.10
date	96.08.23.19.35.59;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	96.06.15.00.06.20;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.06.07.00.33.48;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.06.04.02.28.41;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.06.04.02.28.24;	author fox;	state dead;
branches;
next	1.5;

1.5
date	96.05.22.23.59.17;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.05.03.23.09.04;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.00.41.42;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.04.27.02.24.17;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.04.26.10.12.05;	author fox;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@#
#  Read global variables that will be used by all proxy modules.
#  Some of them come from config file.
#  $Id: globals.pl,v 1.2 96/08/22 15:47:01 glomop Exp $
#
#  BUG::References to globals throughout code should use the instvars
#  mechanism, not reference the hash directly!  Maybe globals should just be a
#  package?? 

package globals;
use POSIX 'uname';
use Socket 'inet_ntoa';
require "util.pl";

&util::instvars(qw(globals ProxyHost ProxyIPn ProxyIPa ProxyInstName));

sub init {

    my %G = ();

    # Read config file
    open(CFG, &util::configfile("gmproxy.cf"))
        or die "$0: cannot open gmproxy.cf, exiting immediately";

    while (<CFG>) {
        next if /^#/;
        next if /^\s*$/;
        if (/^(\S+)\s+(.*)$/) {
            eval { $G{"$1"} = $2 };
            die "$0: error at gmproxy.cf line $., exiting immediately"
                if $@@;
        }
    }
    close CFG;

    $G{ProxyHost} = (&uname)[1]
        or die "Uname error: $!";

    $G{ProxyIPn} = (gethostbyname($G{ProxyHost}))[4]
        or die "gethostbyname($G{ProxyHost}): $!";

    $G{ProxyIPa} = &inet_ntoa($G{ProxyIPn});

    # In some implementations of KerberosIV, instance name is expected to be
    # only the short (unqualified) hostname.  Construct it here.

    if ( $G{ProxyHost} =~ /^([^\.]+)/ ) {
        $G{ProxyInstName} = $1;
    } else {
        die "Can't construct proxy instance name from hostname '$G{ProxyHost}'";
    }

    return bless(\%G);
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    


1;
__END__
@


1.9
log
@*** empty log message ***
@
text
@d4 1
d22 1
a22 1
    open(CFG, "./gmproxy.cf")
d55 12
@


1.8
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d5 3
@


1.7
log
@*** empty log message ***
@
text
@d9 3
@


1.6
log
@*** empty log message ***
@
text
@@


1.5
log
@moved some globals into config file.  first cut at mainloop.  created
directories for front-end servers, transport managers, and doc type
segmenters.  split out message-parsing-code generation so that various
language back-ends can be used, allowing message code to be generated
automatically for clients in different languages; say 'perl5 msgdefs.pl
<lang>' to do it.
@
text
@@


1.4
log
@Added support for monitoring (to external GUI monitor) in mon.pl.
currently talks to tcl/tk monitor app via udp packets.
@
text
@d14 3
a16 5
    # Allow unauthorized users: 0=no, 1=yes
    $G{AllowNoAuth} = 0;                    # BUG::should read from cfg file
    
    # Proxy's Charon service key
    $G{ProxyService} = 'rcmd';              # BUG::should read from config file
d18 10
a27 5
    # File in which it resides
    $G{SvcKeyFile} = "/etc/krb.srvtab";

    # Proxy's realm
    $G{ProxyRealm} = "EECS.BERKELEY.EDU";       # BUG::should be in config file
@


1.3
log
@Kerberos handshake works.  Need to put in code to actually check fields
of received packets, timestamps, etc., and remove debugging printf's.
@
text
@d3 1
a6 2

$ProxyService = 'rcmd';                     # BUG::should read from config file
d10 12
a21 1
$ProxyRealm = "EECS.BERKELEY.EDU";          # BUG::should be in config file
d23 2
a24 2
$ProxyHost = (&uname)[1]
    or die "Uname error: $!";
d26 2
a27 2
$ProxyIPn = (gethostbyname($ProxyHost))[4]
    or die "gethostbyname($ProxyHost): $!";
d29 2
a30 1
$ProxyIPa = &inet_ntoa($ProxyIPn);
d32 1
a32 2
# In some implementations of KerberosIV, the instance name is expected to be
# only the short (unqualified) hostname.  Construct it here.
d34 10
a43 4
if ( $ProxyHost =~ /^([^\.]+)/ ) {
    $ProxyInstName = $1;
} else {
    die "Can't construct proxy instance name from hostname $ProxyHost";
a44 1

@


1.2
log
@*** empty log message ***
@
text
@d21 10
@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
package ProxyGlobals;
d8 2
a9 1
use POSIX 'uname' or die "Can't use uname...you LOSE";
d16 1
a16 1
$ProxyIPn = (gethostbyname($ProxyHost))[3]
d19 1
a19 1
$ProxyIPa = &inet_ntoa($ProxyIP);
@
