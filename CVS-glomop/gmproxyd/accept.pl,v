head	1.15;
access;
symbols
	prewink:1.13
	stable:1.11
	release:1.7
	current:1.15;
locks; strict;
comment	@# @;


1.15
date	96.08.23.19.35.50;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	96.07.07.00.03.17;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	96.07.01.04.00.40;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	96.06.23.01.32.58;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	96.06.14.05.22.01;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	96.06.12.22.16.25;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	96.06.11.02.17.22;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.06.07.00.33.44;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.05.25.02.45.53;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.05.24.20.45.30;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.05.22.23.59.12;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.05.03.23.09.02;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.04.28.00.41.39;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.04.27.02.24.16;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.04.26.10.12.02;	author fox;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@# $Id: accept.pl,v 1.3 96/08/22 18:37:00 glomop Exp $
# $Id: accept.pl,v 1.3 96/08/22 18:37:00 glomop Exp $
=head1 NAME

accept - accept a client connection for gmproxyd

=head1 SYNOPSIS

require "accept.pl";
$auth = accept_client auth $globals;

=head1 DESCRIPTION

This module provides the functionality needed to accept a client and optionally
authenticate her.  The authentication handshake is "atomic": if it fails or is
interrupted, the proxy will die immediately.

=head1 FUNCTIONS

=over 3

=item if (ref($auth=accept_client auth $g) eq 'auth') { success; }

Attempt to accept a client; $g is a L<globals(3)> object containing various
globals related to the proxy's authentication infrastructure (Kerberos server
and service name, etc.)  Listens on already-open proxy filehandles (using
the L<bytestream(3)> and L<msgdefs(3)> packages) and tries to walk through the
connection handshake as defined in hsk.txt.  If failure, a scalar string is
returned describing the error; otherwise an object of type I<auth> is
returned.

The particular globals of interest are:

 AllowNoAuth: nonzero means unauthenticated (AUTH_NONE) clients are OK.
 ProxyService: Kerberos service name of the proxy (e.g. "rcmd").
 SvcKeyFile: the file containing the proxy's Kerberos service key.

=back

=head1 INSTANCE VARIABLES

The instance variables of a returned I<auth> object are as follows. Note that
all except L</"authargs"> are specified in the initial handshake message (see
hsk.txt). 

=over 3

=item $auth->Principal

User's username; corresponds to Kerberos principal name if AUTH_KERB is used.

=item $auth->Device

User's device; it is a L<client(3)> object.

=item $auth->Authtype

Authentication type; currently either AUTH_NONE (unauthenticated) or AUTH_KERB
(Kerberos IV, using Charon protocol).

=item $auth->Authargs

Arguments passed from client that proxy should use for authentication.
Specific to each authentication type, e.g. for AUTH_KERB it is the ticket
lifetime concatenated with the Kerberos realm of the principal/proxy.

=item $auth->Sessionkey

An (opaque) session key that can be used as the shared key between proxy
and client.  Its format and uses depend on the authentication protocol
used; e.g. for AUTH_KERB it is the 64-bit PCBC DES session key.
Only used when specifying encryption for the L<msgdefs> module.

=back

=head1 BUGS

The Kerberos/Charon functions should really be split out into a separate file.
Also, nothing in here should rely on the L<globals(3)> object; the few globals
actually used should be passed explicitly.

=cut
    
#
#  Accept a client for the proxy.  Client can connect with no authentication
#  (assuming this option is turned on in the proxy) or with Kerberos
#  authentication.  Other types may be added later.
#
#  Messages sent/received:
#    auth_ok auth_error handshake hsk_kerb_2  hsk_kerb_3 hsk_kerb_4 hsk_kerb_5
#
#  Returns an Auth object.

package auth;
&util::instvars(qw(Principal:r Device:r Authtype:r Authargs:r Sessionkey:r));

#  If KerberosIV doesn't appear to be loaded, assume Charon is not available.

if (! defined &KerberosIV::krb_get_in_tkt) {
    warn "accept: AUTH_KERB connections will be refused";
    $auth::have_charon = 0;
} else {
    require "charon.pl";
    $auth::have_charon = 1;
}
    
sub accept_client {
    my $self = shift;
    my $globals = shift;
    my $allow_noauth = $globals->{AllowNoAuth};
    my $deskey;
    my $err;
    my ($life);
    my %au = ();
    
    # Wait for initial connection request from a client
    my($username,$devid,$authtype,$authargs,$version)
        = &Msg::receive_handshake;

    # BUG::Should check version here and generate error if mismatch.

    # Construct a new authentication record, and then attempt to complete it by
    # authenticating client

    $au{"Principal"} = $username;
    $au{"Authtype"} = $authtype;
    $au{"Authargs"} = $authargs;
    $au{"Sessionkey"} = undef;
    
    # create client object for this device.  If we can't find this client type,
    # fall back to 'generic'.  If that doesn't work, refuse the client.

    my $client;

    if (!defined ($client = new client $devid)
        && !defined ($client = new client "generic")) {
        return "Unknown client '$devid' and no 'generic' to fall back to";
    }

    $au{"Device"} = $client;


    # Make status window show we're in process of authenticating....
    &Mon::setfield("Principal", $username);
    &Mon::setfield("Authentication",$authtype);
    &Mon::setfield("Device", $client->name);

    if ($authtype eq 'AUTH_NONE') {

        if ($allow_noauth) {
            &Mon::status("Unauthenticated client accepted");
            return bless(\%au);
        } else {                            # unauth access disallowed
            &Mon::status("Unauthenticated client rejected");
            return "Unauthenticated access not allowed here";
        }

    }  elsif ($authtype eq 'AUTH_KERB' && $auth::have_charon)  {

        # Realm and authenticator will be filled in during authentication
        # process, but because they are accessed from within Perl functions
        # that are called back from C, we must (temporarily) declare them as
        # global to this package.
        $auth::KRB_realm = '';
        $auth::KRB_auth = '';                     # filled in during Kerberos
                                            # authentication
        $life = ord(chop $authargs) || 1;
        $auth::KRB_realm = $authargs;
        ($deskey,$err) = &kerbauth($globals,$mon,$username,$life);
        if (! defined($deskey)) {           # error
            &Mon::status("Kerberos error: $err");
            return "Kerberos error: $err";
        } else {                            # ok
            &Mon::status("Kerberos authentication OK");
            # destroy the global copies of KRB_realm and KRB_auth.  KRB_realm
            # was already copied (above) into authargs.
            $au{"KRB_realm"} = $auth::KRB_realm;
            undef $auth::KRB_realm;
            undef $auth::KRB_auth;
            # Grab session key
            $au{"Sessionkey"} = $deskey;
            undef $deskey;
            return bless(\%au);   # was return bless(\$au) - bugfix gribble
        } 

    } else {

        # Can't recognize auth type
        return "Authentication method '$authtype' not supported";
    }
    die "Should never get here";
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    

1;
@


1.14
log
@Various robustifications, addition of client abstraction, mainloop.pl
renamed to proxy.pl.  interface to htypes has changed: the doc object
(instead of doc_id) and client object are now passed.
@
text
@d1 2
d183 1
a183 1
            return bless(\$au);
d193 11
@


1.13
log
@Split the Charon stuff out into charon.pl.
@
text
@d52 1
a52 1
User's device name.  Will be used in the future to get device profiles.
d90 1
a90 10
#  Returns a list:
#    bool:  Client should be accepted (false implies proxy should shutdown socket)
#    string: Client's principal
#    string: client's device ID
#    string: authentication type ("AUTH_NONE", "AUTH_KERB")
#    string: authentication args
#    scalar: DES session key (if success && authenticated)
#            *OR* error message (if unsuccessful)
#  
#  Note: KerberosIV module must already be loaded.
a123 1
    $au{"Device"} = $devid;
d128 13
d144 1
a144 1
    &Mon::setfield("Device", $devid);
@


1.12
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d104 10
d153 1
a153 1
    }  elsif ($authtype eq 'AUTH_KERB')  {
d159 2
a160 2
        $KRB_realm = '';
        $KRB_auth = '';                     # filled in during Kerberos
d163 1
a163 1
        $KRB_realm = $authargs;
d172 3
a174 3
            $au{"KRB_realm"} = $KRB_realm;
            undef $KRB_realm;
            undef $KRB_auth;
a188 235
sub kerbauth {
    my $globals = shift;
    my $mon = shift;
    my $princ = shift;
    my $life = shift;
    my $key;
    my $arg = "foo";                        # dummy string arg
    my $decrypt_proc = "auth::receive_auth";
    my $auth_with_bogus_reqid;
    my $rpkt;

    # step 1: request ticket for PDA's principal.  Ticket will arrive encrypted
    # with principal's key.  Send the ticket to PDA, which will decrypt it and
    # send back a cipherblock which has a bogus session key but is otherwise
    # correct, so the krb_get_in_tkt call should not complain.  PDA also sends
    # back authenticator, which we grab now for use later when we request an
    # rcmd ticket.

    my $res = &KerberosIV::krb_get_in_tkt($princ, undef, $KRB_realm, "krbtgt",
                                          $KRB_realm, $life, $decrypt_proc, $arg);

    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }
    &Mon::status("Got initial ticket successfully");
    &Mon::show_credentials();

    # Obtain an rcmd ticket for the proxy.  To do this, begin with krb_mk_req to
    # construct an authentication packet for the TGT we have.  The req_id in
    # the authenticator (confusingly, the thing that Kerberos literature calls
    # "authenticator") will be bogus because it will be encrypted with the
    # bogus s-key from above.

    ($res, $auth_with_bogus_reqid) 
        = &KerberosIV::krb_mk_req("krbtgt", $KRB_realm, $KRB_realm, 0);
    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }
    # Overwrite the bogus reqid with the one received from PDA in the
    # last mesg. 
    # WARN::this requires us to know the internals of the ticket structure!
    # Here it is, from krb.h:
    #
    # struct ktext {
    #   int     length;		/* Length of the text */
    #   unsigned char dat[MAX_KTXT_LEN];	/* The data itself */
    #   BIT32 mbz;		/* zero to catch runaway strings */
    # };
    #
    # We need to overwrite the dat[] part with the reqid we have, which
    # should be the same length since the principal, instance and realm are the
    # same.  What saves our butt is that the (bogus) reqid is the last thing
    # (before the four bytes of zero) in
    # the structure returned by krb_mk_req, so we can pack it in at the end.
        
    #open(F,">/tmp/reqid"); print F $auth_with_bogus_reqid; close F;
    #warn "Overwriting bogus auth with: " . sprintf("%02x " x length($KRB_auth),
    # unpack("C*",$KRB_auth));
    my ($orig_len,$more_stuff,$rpkt,@@rpkt);
    $orig_len = unpack("L", $auth_with_bogus_reqid);

    # determine offset into the auth_with_bogus_reqid where we should overwrite
    # the auth we have.  We do this by observing that the (bogus) reqid is the
    # last thing at the end of this structure.
    # Therefore the desired offset is 4+$orig_len-length($KRB_auth)
    # (the initial 4 skips over the packet's length bytes).

    my $offset = 4 + $orig_len - length($KRB_auth);
    &util::debug("charon", "Writing good req_id at offset $offset");
    substr($auth_with_bogus_reqid, $offset, length($KRB_auth))
       = $KRB_auth;
    #open(F,">/tmp/reqid_2"); print F $auth_with_bogus_reqid; close F;

    # OK, now we have an authenticator (TGT+reqid) ALMOST ready to send to the KDC.
    # Need to add on ws's clock time (4 bytes), tkt lifetime in 5-min intervals
    # (1 byte), service, sinstance.
    # WARN::This is copied from get_ad_tkt.

    $more_stuff =  pack("C4Ca*xa*x", 
                        0, 0, 0, 0, $life,
                        $globals->{ProxyService}, $globals->{ProxyInstName});
    # Place the extra stuff in the authenticator
    substr($auth_with_bogus_reqid, 4+$orig_len, length($more_stuff)) = $more_stuff;

    # Record new length of the authenticator and store in first 4 bytes
    $orig_len += length($more_stuff);
    substr($auth_with_bogus_reqid, 0, 4) = pack("L", $orig_len);

    # Finally, we're ready to send to the KDC, to get our 'rcmd' ticket.

    #open(F,">/tmp/reqid_3"); print F $auth_with_bogus_reqid; close F;

    &Mon::status("Sending ticket request for '$globals->{ProxyService}' ".
                 "to KDC");
    ($res,$rpkt) = &KerberosIV::send_to_kdc($auth_with_bogus_reqid, $KRB_realm);
    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }

    # Do some standard checks that krb_get_ad_tkt does with the returned packet
    # from KDC.

    @@rpkt = &Kutil::decomp_rpkt($rpkt);
    
    &util::debug("charon", "Wrong Kerberos version $rpkt[0] (should be 4)")
        unless ($rpkt[0] == 4);

    # BUG::must do some checks here from get_ad_tkt.c l.165

    if (($rpkt[1] >> 1) == (11 >> 1)) {
        # error!
        &util::debug("charon", "TGS error: packet written");
        &Mon::status("TGS Error");
        #open(F,">/tmp/pkt"); print F $rpkt; close F;
        die;
    }

    # extract cipherblock from returned object (rpkt)

    my $cipherblock = &KerberosIV::pkt_cipher($rpkt);
    if ($res = length($cipherblock) % 8) {
        return (undef, "Cipherblock length $res not multiple of 8");
    }
    # send cipherblock to PDA (hsk_kerb_4)

    #warn "Sending cipherblock to PDA. First/last 4 bytes: " .
    # sprintf("%02x " x 4, substr($cipherblock,0,4)) . "..." .
    # sprintf("%02x " x 4, substr($cipherblock, -4));

    &Msg::send_hsk_kerb_4(0,$cipherblock);

    # PDA returns decrypted cipherblock with bogus s-key, as before

    &Mon::status("(8) Sent TGT response to PDA, awaiting response");
    eval { ($decrypted) = &Msg::receive_hsk_kerb_5 };
    if ($@@) {
        return (0, "Reading decrypted cipherblock: $@@");
    }

    &Mon::status("Decrypting ticket with '$globals->{ProxyService}' svc key");
    #warn "Decrypted cipherblock server name,realm,inst = ".
    #substr($decrypted, 8, 60);

    # check the decrypted info in the message to make sure it's valid.

    # pull the sessionkey out of the ticket, by decrypting the ticket with the
    # rcmd credentials stored in krb.srvtab.  (Must be running as root!)

    my $key;
    ($res,$key)= &KerberosIV::read_service_key($globals->{ProxyService},
                                               $globals->{ProxyInstName},
                                               $KRB_realm, 0,
                                               $globals->{SvcKeyFile});
    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }
    if ($res = length($key) % 8) {
        return (undef,
                "$globals->{ProxyService} session key modulus $res not multiple of 8");
    }
    # Decrypt the ticket with the rcmd credentials, and extract the session key
    # from it.

    my $ksch = &KerberosIV::des_key_sched($key);

    # WARN::the following relies on the structure of ciphertext block

    my ($sname,$sinst,$srealm,$life,$kvno,$tktlen,$tkt,$ts)
        = ($1,$2,$3,$4,$5,$6,$7,$8)
            if $decrypted =~
                /\A........([^\0]+)\0([^\0]+)\0([^\0]+)\0(.)(.)(.)(.+)(....)\Z/s;
    # two of these were unsigned chars; convert them to ints
    $life = ord($life);
    $kvno = ord($kvno);

    #warn sprintf("life,kvno,tktlen = %d,%d,%d", ord($4),ord($5),ord($6));
    #warn sprintf( "svc,inst,realm is $1,$2,$3, actual tktlen=%d", length($7));

    # Got the ticket, now stuff it into a KTEXT structure to pass to decomp_ticket.

    $tkt = &Kutil::make_ktext($tkt);
    
    my (@@tktstuff);
    ($res,@@tktstuff) = (&KerberosIV::decomp_ticket($tkt,$key,$ksch));

    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }

    my ($flags,$pname,$pinstance,$prealm,$paddress,$skey,$life,$time_sec,
        $sname,$sinst) = @@tktstuff;
    
    # Save ticket in ticket file.

    &Mon::status("Saving ticket");
    $res = &KerberosIV::save_credentials($sname, $sinst, $srealm, $skey,
                                         $life, $kvno, $tkt, time);
    if ($res != &KerberosIV::KSUCCESS) {
        return (undef, &KerberosIV::krb_strerror($res));
    }

    # Display new credentials
    &Mon::show_credentials();
    # BUG::destroy all traces of keys before returning
    return ($skey);
}

#
#  This is the callback function that krb_get_in_tkt will call to get the TGT.
#  This function sends the cipherblock to the pda, which decrypts it and
#  returns a correct ticket that happens to have a bogus session key.
#  It also grabs the authenticator and saves it for later.
#

sub receive_auth {
    my ($user,$inst,$realm,$ciptext,$arg) = @@_;
    # my $ciptext = $_[3];                    # ciphertext from tgs
    my $decrypted;

    &Mon::status("(4) Sending ciphertext for \[$user,$inst,$realm\] to PDA");
    
    &Msg::send_hsk_kerb_2(0, $ciptext);

    # Expect a reply which is the decrypted cipherblock with bogus s-key

    &Mon::status("(5) Receiving decrypted packet from PDA...");
    
    eval { ($decrypted, $KRB_auth) = &Msg::receive_hsk_kerb_3 };
    if ($@@) {                               # failed to receive msg correctly
        &Mon::status("Error receiving hsk_kerb_3 message: $@@");
        # die "Error receiving hsk_kerb_3 message: $@@";
        return '0' x length($ciptext);
    }
    return $decrypted;
}
@


1.11
log
@*** empty log message ***
@
text
@d1 81
d102 1
@


1.10
log
@Weird bug in accept.pl: the kerberos version number was not being
converted from unsigned char to perl int after being extracted from the
decrypted rcmd ticket; this resulted in a warning "Argument not numeric
in entersub" when calling save_credentials; but mysteriously, also
caused an error in UserAgent much later -- "undefined subroutine
UserAgent::_need_proxy" while fetching a file: URL -- even though the
fetch should succeed, and the subroutine is defined in a previously
loaded file!  Hypothesis: the bad kerberos version number had some
non-obvious effect on internal perl data structures because of stack
overrun or similar badness when it was passed to the underlying kerberos
call?  Ugh...
@
text
@a297 3
    &Mon::status("Sending AUTH_OK to client");
    &Msg::send_auth_ok(0, &Msg::OK_STR, "");

@


1.9
log
@Image fetching and segmenting works end-to-end, but no error checking in
place yet.
@
text
@d268 3
@


1.8
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d75 1
a75 2
            return (0, $username, $devid, $authtype, $authargs,
                    "Kerberos error: $err");
d123 1
a123 1
    print "step3\n";
@


1.7
log
@no longer a need for http transport mgr; using LWP perl module.
completed multilanguage support for msgdef generation.  added messages
for doc open and chunk xmission to hsk.txt.  added monitor calls for
showing open documents.  modified testdrv to use as generic send/receive
of any messags defined in hsk.txt.  began working on doc.pl document
abstraction.
@
text
@d166 1
a166 1
    warn "Writing good req_id at offset $offset";
d202 1
a202 1
    warn "Wrong Kerberos version $rpkt[0] (should be 4)"
d209 2
a210 1
        warn "TGS error: packet written";
@


1.6
log
@*** empty log message ***
@
text
@a20 1
$Mon = '';
a24 1
    $Mon = shift;
d47 3
a49 3
    $Mon->setfield("Principal", $username);
    $Mon->setfield("Authentication",$authtype);
    $Mon->setfield("Device", $devid);
d54 1
a54 1
            $Mon->status("Unauthenticated client accepted");
d57 1
a57 1
            $Mon->status("Unauthenticated client rejected");
d74 1
a74 1
            $Mon->status("Kerberos error: $err");
d78 1
a78 1
            $Mon->status("Kerberos authentication OK");
d122 2
a123 2
    $Mon->status("Got initial ticket successfully");
    $Mon->show_credentials();
d190 1
a190 1
    $Mon->status("Sending ticket request for '$globals->{ProxyService}' ".
d230 1
a230 1
    $Mon->status("(8) Sent TGT response to PDA, awaiting response");
d236 1
a236 1
    $Mon->status("Decrypting ticket with '$globals->{ProxyService}' svc key");
d288 1
a288 1
    $Mon->status("Saving ticket");
d295 1
a295 1
    $Mon->status("Sending AUTH_OK to client");
d299 1
a299 1
    $Mon->show_credentials();
d316 1
a316 1
    $Mon->status("(4) Sending ciphertext for \[$user,$inst,$realm\] to PDA");
d322 1
a322 1
    $Mon->status("(5) Receiving decrypted packet from PDA...");
d326 1
a326 1
        $Mon->status("Error receiving hsk_kerb_3 message: $@@");
@


1.5
log
@moved some globals into config file.  first cut at mainloop.  created
directories for front-end servers, transport managers, and doc type
segmenters.  split out message-parsing-code generation so that various
language back-ends can be used, allowing message code to be generated
automatically for clients in different languages; say 'perl5 msgdefs.pl
<lang>' to do it.
@
text
@d34 1
a34 1
    my($username,$devid,$authtype,$authargs)
d36 2
@


1.4
log
@Added support for monitoring (to external GUI monitor) in mon.pl.
currently talks to tcl/tk monitor app via udp packets.
@
text
@d24 1
d31 1
a31 2
    $KRB_realm = '';
    $KRB_auth = '';                # filled in during Kerberos authentication
d33 1
d37 13
a49 3
    $Mon->cmd("set_field Principal \{$username\}");
    $Mon->cmd("set_field Authentication \{$authtype\}");
    $Mon->cmd("set_field Device \{$devid\}");
d54 2
a55 1
            return (1, $username, $devid, $authtype, $authargs, undef);
d57 2
a58 2
            return (0, $username, $devid, $authtype, $authargs,
                    "Unauthenticated access not allowed here");
d63 7
d79 9
a87 1
            return (1, $username, $devid, $authtype, $authargs, $deskey);
d93 1
a93 2
        return (0, $username, $devid, $authtype, $authargs,
                "Authentication method '$authtype' not allowed here");
d104 1
a104 1
    my $arg = "foo";
d119 1
a119 1
    if ($res != &KerberosIV::KSUCCESS) {                        # BUG::should be KerberosIV::KSUCCESS
a121 1

d124 1
a124 1

@


1.3
log
@Kerberos handshake works.  Need to put in code to actually check fields
of received packets, timestamps, etc., and remove debugging printf's.
@
text
@d21 1
a21 1

d24 3
a26 1
    my $allow_noauth = shift;
d36 4
d41 1
d48 1
d50 1
d53 1
a53 1
        ($deskey,$err) = &kerbauth($username,$life);
d55 1
d59 1
d62 1
d64 1
d73 2
d93 1
a93 1
    if ($res != 0) {                        # BUG::should be KSUCCESS
d97 2
a98 1
    warn "Got initial ticket successfully";
d108 1
a108 1
    if ($res != 0) {
d128 3
a130 3
    open(F,">/tmp/reqid"); print F $auth_with_bogus_reqid; close F;
    warn "Overwriting bogus auth with: " . sprintf("%02x " x length($KRB_auth),
                                                   unpack("C*",$KRB_auth));
d143 2
a144 2
        = $KRB_auth;
    open(F,">/tmp/reqid_2"); print F $auth_with_bogus_reqid; close F;
d153 1
a153 1
                        $globals::ProxyService, $globals::ProxyInstName);
d163 4
a166 1
    open(F,">/tmp/reqid_3"); print F $auth_with_bogus_reqid; close F;
d168 1
a168 1
    if ($res != 0) {
a171 2
    warn "KDC returned a valid packet";

d185 1
a185 1
        open(F,">/tmp/pkt"); print F $rpkt; close F;
d197 3
a199 3
    warn "Sending cipherblock to PDA. First/last 4 bytes: " .
        sprintf("%02x " x 4, substr($cipherblock,0,4)) . "..." .
            sprintf("%02x " x 4, substr($cipherblock, -4));
d205 1
a205 1
    warn "Waiting for decrypted cipherblock...";
d211 3
a213 2
    warn "Decrypted cipherblock server name,realm,inst = ".
        substr($decrypted, 8, 60);
d221 2
a222 2
    ($res,$key)= &KerberosIV::read_service_key($globals::ProxyService,
                                               $globals::ProxyInstName,
d224 2
a225 2
                                               "/etc/krb.srvtab");
    if ($res != 0) {
d230 1
a230 1
                "$globals::ProxyService session key modulus $res not multiple of 8");
d244 2
a245 3
    warn sprintf("life,kvno,tktlen = %d,%d,%d", ord($4),ord($5),ord($6));

    warn sprintf( "svc,inst,realm is $1,$2,$3, actual tktlen=%d", length($7));
d251 1
a251 1
    my ($skey,@@tktstuff);
d254 6
a259 3
    local($,)=',';
    warn "Tktstuff: @@tktstuff";
    $skey = $tktstuff[5];
d261 8
a268 1
    # If all is well, send OK and accept.
d270 1
a270 3
    warn "Session key is: " . sprintf("%02x " x length($skey), unpack("C*",$skey));
    warn "Sending ok to pda";
    
d273 2
a275 1
    warn "Returning key";
d291 2
a292 4
    warn "Sending ciphertext for \[$user,$inst,$realm\] to PDA for decryption: " .
        sprintf("len=%d, ", length($ciptext)) .
        sprintf("%02x " x 8, unpack("C*",substr($ciptext,0,8)));

d297 2
a298 1
    warn "Receiving decrypted packet from PDA...";
d301 3
a303 1
        die "Error receiving hsk_kerb_3 message: $@@";
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
#    auth_ok auth_error handshake hsk_krb_2  hsk_krb_3 hsk_krb_4 hsk_krb_5
a21 2
$KRB_authenticator = '';                    # filled in during Kerberos authentication
$KRB_realm = '';
d28 2
d41 1
a41 1
    }  elsif ($authtype eq 'AUTH_KERB') {
d44 2
a45 4

        if (($deskey,$err) = &kerbauth($username,$life,$KRB_realm)) {
            return (1, $username, $devid, $authtype, $authargs, $deskey);
        } else {
d48 3
a50 1
        }
a67 2
    $KRB_authenticator = '';                # filled in during Kerberos authentication
    $KRB_realm = '';
d78 1
a78 1
    if ($res != &KSUCCESS) {
d92 1
a92 1
    if ($krb_result != &KSUCCESS) {
d112 1
d115 2
d118 9
a126 1
    substr($auth_with_bogus_reqid, -(4+length($KRB_auth)), length($KRB_auth))
d128 1
a134 3
    my ($orig_len,$more_stuff,$rpkt,@@rpkt);

    $orig_len = unpack("L", $req_with_bogus_reqid);
d137 1
a137 1
                        $globals::ProxyService, $globals::ProxyHost);
d139 1
a139 1
    substr($req_with_bogus_reqid, 4+$orig_len, length($more_stuff)) = $more_stuff;
d143 1
a143 1
    substr($req_with_bogus_reqid, 0, 4) = pack("L", $orig_len);
d147 3
a149 2
    ($res,$rpkt) = &KerberosIV::send_to_kdc($auth_with_bogus_reqid, $realm);
    if ($res != &KSUCCESS) {
d159 2
a160 1
    return (undef, "Wrong Kerberos version $rpkt[0] (should be 4)")
d165 7
d178 1
a178 1
    # send cipherblock to PDA (hsk_krb_4)
d184 1
a184 1
    &Msg::send_hsk_krb_4($cipherblock);
d189 1
a189 1
    eval { ($decrypted) = &Msg::receive_hsk_krb_5 };
d204 4
a207 4
                                               $globals::ProxyHost,
                                               $realm, 0,
                                               &_KerberosIV::_PATH_KRB_SRVTAB);
    if ($res != &KSUCCESS) {
d212 1
a212 1
                "$globals::ProxyService session key length $res not a multiple of 8");
d224 1
a224 1
                /........([\w.]+)\0([\w.]+)\0([\w.]+)\0(.)(.)(.)(.+)(....)/s;
d226 1
a226 1
    warn "Decrypted ciphertext regexp says $1,$2,$3...decrypting actual ticket";
d228 1
a228 1
    # Got the ticket, now decrypt and extract the session key from it.
d230 1
a230 2
    $decrypt_ticket = &KerberosIV::des_pcbc_encrypt($tkt,length($tkt),$ksch,
                                                    $key,0);
d232 1
a232 1
    # BUG::do some checks on decrypted ticket here
d234 2
a235 2
    my $skey;
    ($res,$skey) = (&KerberosIV::decomp_ticket($tkt))[6];
d237 4
d246 1
a246 1
    &Msg::send_auth_ok(&Msg::OK_STR, "");
d250 1
a250 1
    return ($key);
d261 2
a262 1
    my $ciptext = $_[3];                    # ciphertext from tgs
d265 5
a269 1
    &Msg::send_hsk_kerb_2($ciptext);
d273 2
a274 1
    eval { ($decrypted, $KRB_authenticator) = &Msg::receive_hsk_kerb_3 };
d276 1
a276 1
        die "horribly";
d278 1
a278 1

a279 3



a280 2


@


1.1
log
@*** empty log message ***
@
text
@d68 2
d84 2
d93 1
a93 1
        = &KerberosIV::krb_mk_req("krbtgt", undef, $KRB_realm, 0);
d114 3
d129 2
a130 1
                        0, 0, 0, 0, $life, $ProxyService, $ProxyHost);
d144 3
a146 1
    
d159 4
d164 3
a166 1
    # send cipherblock to PDA (hsk_krb_4)
d172 2
a173 1
    eval { $decrypted = &Msg::receive_hsk_krb_5 };
d178 3
d187 2
a188 1
    ($res,$key)= &KerberosIV::read_service_key($ProxyService, $ProxyHost,
d194 4
a197 1

d201 20
a220 1
    $key = $do_all_the_above;
d224 3
d229 2
@
