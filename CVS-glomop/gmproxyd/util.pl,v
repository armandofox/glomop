head	1.17;
access;
symbols
	current:1.14
	prewink:1.10
	stable:1.5;
locks; strict;
comment	@# @;


1.17
date	96.12.17.04.22.18;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	96.09.23.07.06.45;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	96.09.23.01.08.59;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	96.08.23.19.36.18;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	96.07.26.20.31.11;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	96.07.09.02.53.28;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	96.07.07.00.03.26;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	96.06.28.03.39.43;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	96.06.23.01.33.14;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.06.16.01.41.32;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.06.15.02.39.06;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.06.15.01.49.19;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.06.14.06.39.29;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.06.13.22.33.55;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.06.11.02.17.30;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.22.50.26;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.06.07.00.33.57;	author fox;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Added the lackey, which required minor changes to util.pl (to make unique
file names really unique when forking is involved).  Also added
beginnings of an autoconf script and a Makefile.in.
@
text
@#
#  util.pl - utility functions
#  $Id: util.pl,v 1.16 1996/09/23 07:06:45 fox Exp $
#


=head1 NAME

util - utility functions for gmproxyd

=head1 SYNOPSIS

 require "util.pl";

 # Configuration

 $fullpath = &util::configfile($filename);
 &util::configpath(@@dirs);

 # Miscellany

 $maxval = &util::max(@@values);
 $minval = &util::min(@@values);
 $ceil = &util::ceil($val);

 # File manipulation

 $tmpfile = &util::mktemp;
 $permfile = &util::mkimmortal;
 $mkcached = &util::mkcached;

 $contents = &util::slurp($filename);
 $filename = &util::dump($data);
 $mime = &util::mime_type_of_file($filename);

 # Debugging and logging

 &util::debug($keyword, @@args);

=head1 DESCRIPTION

Various utility functions that support the GloMop proxy.

=head1 MISCELLANEOUS FUNCTIONS

=item $maxval = &util::max(@@values);
=item $minval = &util::min(@@values);

Return maximum or minimum item from list, which must be numeric values.  Ties
are broken arbitrarily.

=item $ceil = &util::ceil($val);

Return smallest integer greater than or equal to $val.

=head1 FILE MANIPULATION FUNCTIONS

=item $tmpfile = &util::mktemp;
=item $permfile = &util::mkimmortal;
=item $mkcached = &util::mkcached;

Return a unique filename for a temporary, immortal, or cached file.  Temporary
files may be deleted as soon as the function that requested them has exited.
Immortal files last the life of the proxy process.  Cached files are like
immortal files but a hint is given that the contents should be cached in memory
if there is enough room.

=item $contents = &util::slurp($filename);

Returns the entire contents of $filename as a scalar, or undef if the contents
could not be read; call L</"util::error"> to get the error message.

=item $filename = &util::dump($data [,$type])

Dumps the data (a scalar) into a file and returns the full pathname to the
file.  The file will be created as a temporary file by default, but specifying
a type of C<util::CACHED> or C<util::IMMORTAL> will create it that way
instead. 

=item $mime = &util::mime_type_of_file($filename);

Try to determine a file's MIME type by examining the contents (using, among
other things, the L<file(1)> command), and return the type/subtype
(e.g. "image/gif"), the null string if it couldn't be determined, or undef if
the file couldn't be read; in the latter case see L</"util::error">.

=head1 DEBUGGING AND LOGGING FUNCTIONS

=item &util::debug($keyword, @@args);

Log the debugging message given by I<printf> (@@args) if and only if $keyword is
enabled for debugging output.

=item $lasterror = &util::error;

Return the error message text, if any, corresponding to the last error
encountered by a util function that did not succeed.

=head1 BUGS

The file caching hint is currently ignored.  Temporary and immortal files are
not properly cleaned up at proxy exit time.    

=cut

package util;
use Carp;
use LWP::MediaTypes;
$Lasterror = '';
$Tmpname = 0;
$Immname = 0;
$Cachename = 0;
$Wd = '.';
@@Cfgpath = ('./config');
umask 077;

# find the 'file' binary
$File = (-x '/bin/file' && "/bin/file")
    || (-x '/usr/bin/file' && "/usr/bin/file")
    || (-x '/usr/ucb/file' && "/usr/ucb/file")
    || (-x '/usr/local/bin/file' && "/usr/local/bin/file")
    || die "No 'file' program: can't determine types of refinement files";

# Make a temp directory for files

sub init {
    $Wd = shift || '.';
    umask 0;
    mkdir("$Wd/gmtmp$$", 0777)
        or die "util: can't make temp dir $Wd/gmtmp$$ : $!";
    $Wd = "$Wd/gmtmp$$";
}

sub TEMP { '%temp%' }
sub CACHED { '%cached%' }
sub IMMORTAL { '%imm%' }

sub instvars {
    my $class = shift;
    foreach $var (@@_) {
        if ($var =~ /(\S+):r/) {
            # read-only variable
            $var = $1;
            $action = qq!carp "Can't set instance variable `$var' this way, ignored"!;
        } else {
            $action = qq!\$self->{"$var"} = shift!;
        }
        eval "sub ${class}::${var}"  . qq!{
            my \$self = shift;
            $action if defined \$_[0];
            return \$self->{"$var"}; }! ;
    }
}

sub mktemp { ++$util::Tmpname && return "$util::Wd/T${$}_$util::Tmpname"  }
sub mkimmortal { ++$util::Immname && return "$util::Wd/I${$}_$util::Immname"  }
sub mkcached { ++$util::Cachename && return "$util::Wd/C${$}_$util::Cachename"  }

sub error { $Lasterror }

sub max {
    my $max = shift;
    for (@@_) { $max = $_ if $max < $_; }
    return $max;
}
sub min {
    my $min = shift;
    for (@@_) { $min = $_ if $min > $_; }
    return $min;
}

sub dbg_list {
    my @@list = split(/,/ , shift);
    my $str = "Debugging: ";
    for (@@list) {
        $util::DebugList{$_}++;
        $str .= $_ . " ";
        $util::DebugAll++, $str = "Debugging: (all)", last if /^all$/;
    }
    warn "$str\n";
}

sub debug {
    my $dbg = shift;
    warn "$dbg: @@_\n" if  $util::DebugList{$dbg} || $util::DebugAll;
}    

sub log {
    my $dbg = shift;
    warn "*** $dbg: @@_\n";
}

sub ceil {  $_[0] == int($_[0])? $_[0] : int(1+$_[0]) }

sub slurp {
    my $file = shift;
    unless (open(FILE, $file)) {
        $Lasterror = $!;
        return undef;
    }
    local($/) = undef;
    my $res = <FILE>;
    close FILE;
    return $res;
}

sub dump {
    my $data = shift;
    my $type = shift || '';

    my $fn = (($type eq &util::TEMP || $type eq '')
              ? &util::mktemp
              : $type eq &util::IMMORTAL
              ? &util::mkimmortal
              : $type eq &util::CACHED
              ? &util::mkcached
              : $type);
    open(F, ">$fn");
    print F $data;
    close F;
    $fn;
}

#
#  Set or query config path
#

sub configpath { for (@@_) { push(@@Cfgpath, split(/:/, $_)) } }

sub configfile {
    my $file = shift;
    for (@@Cfgpath) {
        return "$_/$file" if -e "$_/$file";
    }
    &util::log("configfile","no $file in " . join(':',@@Cfgpath));
    return undef;
}

#
#  Try to determine MIME type of a file by analyzing a few bytes
#

sub mime_type_of_file {
    my $filename = shift;

    &util::debug("util", "Guessing mimetype from filename $filename");
    # First try guessing from LWP support
    my $guess = &LWP::MediaTypes::guess_media_type($filename);

    &util::debug("util", "LWP returned $guess");
    if ($guess eq "application/octet-stream") {
        # try to do better
        $_ = `$File $filename`;
        $Lasterror = $?, return undef if ($? >> 8);
        return ((/\bgif\b/i && "image/gif")
                || (/\bgif\d\d/i && "image/gif")
                || (/\bjpeg\b/i && "image/jpeg")
                || "");
    } else {
        return $guess;
    }
}

#
# cleanup in preparation for exit
#

sub cleanup {
    &Mon::status("Cleaning up temporary files");
    system "/bin/rm -rf $util::Wd"
        and warn "Util: /bin/rm -rf $util::Wd: exit $?";
}


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    

1;

@


1.16
log
@Added serial.pl to configure serial port - still needs work.  Changed
return string of AUTH_OK msg to make it distinct from all other msgs. New
rule: msgs must have initial strings that are unique in first 2 letters
(case insensitive).  Minor changes to msgdefs.pl and the lang_*.pl to allow
passing of constant arg strings for code generation.  Added a "newt" client.
@
text
@d3 1
a3 1
#  $Id: util.pl,v 1.15 1996/09/23 01:08:59 fox Exp $
d134 3
a136 3
sub TEMP { 11 }
sub CACHED { 12 }
sub IMMORTAL { 13 }
d155 3
a157 3
sub mktemp {  ++$util::Tmpname && return "$util::Wd/T$util::Tmpname"  }
sub mkimmortal { ++$util::Immname && return "$util::Wd/I$util::Immname"  }
sub mkcached { ++$util::Cachename && return "$util::Wd/C$util::Cachename"  }
d209 1
a209 1
    my $type = shift || &util::TEMP;
d211 3
a213 1
    my $fn = ($type == &util::IMMORTAL
d215 1
a215 1
              : $type == &util::CACHED
d217 1
a217 1
              : &util::mktemp);
d270 2
a271 2
    system "/bin/rm -rf $Wd"
        and warn "Util: /bin/rm -rf $Wd: exit $?";
@


1.15
log
@minor change to gmproxyd to support serial connection; added new
debugging messages to util.pl debug routine
@
text
@d3 1
a3 1
#  $Id: util.pl,v 1.14 1996/08/23 19:36:18 gribble Exp $
a108 2
%DebugList = ();
$DebugAll = 0;
d176 1
a176 1
        $DebugList{$_}++;
d178 1
a178 1
        $DebugAll++, $str = "(all)", last if /^all$/;
d185 1
a185 1
    warn "$dbg: @@_\n" if  $DebugList{$dbg} || $DebugAll;
@


1.14
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@d3 1
a3 1
#  $Id: util.pl,v 1.3 96/08/22 17:34:05 glomop Exp $
d176 7
a182 1
    for (@@list) { $DebugList{$_}++; $DebugAll++ if /^all$/; }
@


1.13
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@d1 6
d15 5
a107 1
use Cwd 'cwd';
d115 2
a116 1
$Wd = Cwd::cwd();
d121 1
d128 7
a134 4
umask 0;
mkdir("$Wd/gmtmp$$", 0777)
    or die "util: can't make temp dir $Wd/gmtmp$$ : $!";
$Wd = "$Wd/gmtmp$$";
d184 5
d217 15
a231 1
              
d239 2
d243 2
d267 11
@


1.12
log
@imported from wink, 7/8 pm
@
text
@d116 2
a117 1
mkdir("$Wd/gmtmp$$", 0700)
@


1.11
log
@Various robustifications, addition of client abstraction, mainloop.pl
renamed to proxy.pl.  interface to htypes has changed: the doc object
(instead of doc_id) and client object are now passed.
@
text
@d22 1
d62 7
d120 4
d181 16
@


1.10
log
@added plan for nonblocking UA to TBD.  mime_type_of_file function in
util.pl now also tries calling LWP::MediaTypes::guess_media_type, and
only shells out to the 'file' command as a fallback.
@
text
@d90 1
@


1.9
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d175 13
a187 6
    $_ = `$File $filename`;
    $Lasterror = $?, return undef if ($? >> 8);
    return ((/\bgif\b/i && "image/gif")
            || (/\bgif\d\d/i && "image/gif")
            || (/\bjpeg\b/i && "image/jpeg")
            || "");
@


1.8
log
@minimal refinement seems to work, albeit bad management of ppm's and
gifs results in lots of wasteful shell processes to determinme simple
properties of the orig file. Lesson: need to keep properties with each
file/chunk.
@
text
@d1 85
a85 3
#
#  utility functions
#
d88 1
d92 1
d114 7
d123 1
a123 1
        \$self->{"$var"} = shift if defined \$_[0];
d132 1
d159 4
a162 1
    open(FILE, $file) or return undef;
d164 3
a166 1
    return <FILE>;
d176 1
a176 1

d180 1
a180 1
            || undef);
d183 9
@


1.7
log
@skeletal refinement is working, but D'OH!  it returns the specified
chunk at the distilled size, not the original size! D'OH!
@
text
@d11 1
d39 1
@


1.6
log
@Fixed 'bad htype' bug on every other fetch (lesson: don't do a 'return'
or far jump out a 'while each()' loop!).  Fixed error behavior: was
trying to set error field in self->resp instead of self (an
HTTP::Headers object rather than a proxy object).  Still tbd: Image
module does not call gifmunch if distillation isn't needed or would
increase e2e latency. (Hook in place, but no fxnality yet.)
@
text
@d10 1
d14 6
d36 3
a38 1
sub mktemp { ++$util::Tmpname && return "$util::Wd/GM$util::Tmpname" }
d69 16
@


1.5
log
@prefs stuff more robust; falls back on defaults, read from .prefs file
in each htype module. prefs sort-of-observed
for target size in bytes (actually for latency, calculated backwards
from network bandwidth), but ignores all others prefs right
now. standalone gifmunch is used to do distillation.  network.pl will
be where NCM calls get made; right now it returns static values.  also
change to startup rendezvous for monitor; proxy PID is now attached to
rendezvous file name, and passed as first (and only) arg to gmmon.
@
text
@d52 2
@


1.4
log
@more dynamic-adaptation stuff that seems stable enough to checkin...
@
text
@d13 6
d29 1
a29 1
sub mktemp { ++$util::Tmpname && return "$util::Wd/GM$$.$util::Tmpname" }
@


1.3
log
@Image fetching and segmenting works end-to-end, but no error checking in
place yet.
@
text
@d46 6
@


1.2
log
@image segmenter successfuly calls pnmcut, but leaves chunks in ppm
format for now
@
text
@d18 1
a18 1
        \$self->{"$var"} = shift if defined \$_[1];
@


1.1
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d6 1
d9 3
d15 5
a19 10
    my @@vars = @@_;
    eval "sub ${class}::_instvar" . q!{
        my $self = shift;
        my $var = shift;
        my $val = shift;
        $self->{$var} = $val if $val;
        return $self->{$var}; }! ;
    foreach (@@vars) {
        eval "package $class; sub $_ { shift->_instvar('$_',\@@_) }";
        warn $@@ if $@@;
d23 11
a33 6
sub _instvar {
    my $self = shift;
    my $var = shift;
    my $val = shift;
    $self->{$var} = $val if $val;
    return $self->{$var};
@
