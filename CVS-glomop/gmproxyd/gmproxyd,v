head	1.30;
access;
symbols
	prewink:1.22
	stable:1.19
	release:1.12
	current:1.26
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.30
date	96.12.17.04.22.16;	author fox;	state Exp;
branches;
next	1.29;

1.29
date	96.09.23.07.06.41;	author fox;	state Exp;
branches;
next	1.28;

1.28
date	96.09.23.01.08.58;	author fox;	state Exp;
branches;
next	1.27;

1.27
date	96.09.12.23.57.37;	author fox;	state Exp;
branches;
next	1.26;

1.26
date	96.08.23.19.36.02;	author gribble;	state Exp;
branches;
next	1.25;

1.25
date	96.07.26.20.30.58;	author fox;	state Exp;
branches;
next	1.24;

1.24
date	96.07.09.02.53.26;	author fox;	state Exp;
branches;
next	1.23;

1.23
date	96.07.07.00.03.21;	author fox;	state Exp;
branches;
next	1.22;

1.22
date	96.07.01.04.00.43;	author fox;	state Exp;
branches;
next	1.21;

1.21
date	96.06.23.01.33.08;	author fox;	state Exp;
branches;
next	1.20;

1.20
date	96.06.15.00.06.21;	author fox;	state Exp;
branches;
next	1.19;

1.19
date	96.06.14.05.21.59;	author fox;	state Exp;
branches;
next	1.18;

1.18
date	96.06.13.22.33.53;	author fox;	state Exp;
branches;
next	1.17;

1.17
date	96.06.13.09.15.30;	author fox;	state Exp;
branches;
next	1.16;

1.16
date	96.06.13.04.49.39;	author fox;	state Exp;
branches;
next	1.15;

1.15
date	96.06.11.02.17.25;	author fox;	state Exp;
branches;
next	1.14;

1.14
date	96.06.10.22.50.22;	author fox;	state Exp;
branches;
next	1.13;

1.13
date	96.06.07.00.33.51;	author fox;	state Exp;
branches;
next	1.12;

1.12
date	96.06.03.19.46.19;	author fox;	state Exp;
branches;
next	1.11;

1.11
date	96.05.25.02.45.57;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	96.05.22.23.59.18;	author fox;	state Exp;
branches;
next	1.9;

1.9
date	96.05.03.23.09.05;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	96.04.28.00.41.43;	author fox;	state Exp;
branches;
next	1.7;

1.7
date	96.04.27.02.24.18;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	96.04.26.10.12.06;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.04.24.08.13.34;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.04.24.06.20.56;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.04.24.06.15.46;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.04.24.06.14.52;	author fox;	state dead;
branches;
next	1.1;

1.1
date	96.04.24.06.12.19;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.04.24.06.12.19;	author fox;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Added the lackey, which required minor changes to util.pl (to make unique
file names really unique when forking is involved).  Also added
beginnings of an autoconf script and a Makefile.in.
@
text
@#
#  Proxy main program.  Uses stdin and stdout, since it's intended to be
#  invoked by inetd.  Note that to get this to run, you must use "make run" 
#  from the Makefile to get the proper include paths, etc. set.
#
#  $Id: gmproxyd,v 1.29 1996/09/23 07:06:41 fox Exp $ 

require 5.002;
use LWP;
eval "use KerberosIV" && warn "No Kerberos, not using Charon\n";

######################################################################
#  parse_argv: parse command line arguments and set up global vars
#  
#  Args: pointer to globals structure
#  Assumptions: @@ARGV contains cmd line args.  
#  Returns: nothing
#  Description: If cmd line begins with
#  "-port x", proxy will listen on that tcp port; otherwise, assumes
#  proxy has been launched by inetd, grabs peer address off front of cmd
#  line, and listens on STDIN.  If command line contains "-test filename",
#  filename.pl is used as a test harness -- it is sourced and its function
#  "test" is passed the proxy object as its sole arg.
#  Side effects: sets some variables in globals: Port, ClientIP, DbgMode
######################################################################

sub parse_argv {
    my $globals = shift;
    
    # grab peer's address.  If it's not present (we weren't launched by inetd),
    # assume peer address is loopback (STDIN from self).
    my $clip = shift @@ARGV;
    unshift(@@ARGV, $clip), $clip = "127.0.0.1"
        if $clip =~ /^-/;
    $globals->{ClientIP} = $clip;

    # parse remaining cmd line args.
    while ($_ = shift @@ARGV) {
        $globals->{Textonly} = 1, next
            if /^-t/;
        $globals->{Test} = (shift @@ARGV || die "$_ requires a filename\n"), next
            if /^-m/;
        $globals->{Port} = (shift @@ARGV || die "$_ requires a number\n"), next
            if /^-p/;
        &util::dbg_list(shift @@ARGV), next
            if /^-d/;
        die "Unknown arg $_\n";
    }
}    

############################################################################
#  Main
###########################################################################

sub main {
    # Set config path

    require 'util.pl';
    if (exists $ENV{"GMPROXYD_CONFIG"}) {
        &util::log("main","Adding $ENV{GMPROXYD_CONFIG} to config path");
        &util::configpath($ENV{GMPROXYD_CONFIG});
    }

    for (qw(globals
            gm_sock
            bytestream
            msgdefs
            accept
            mon
            proxy
            client
            prefs
            chunk
            doc
            commands
            layout
            network
	    serial
            lackey
            ))
    {
        require "${_}.pl";
    }

    my $G = init globals;
    &util::init($G->{"TempDir"});
    my $s;


    &parse_argv($G);
    &setsigs;
    &Mon::init($G);
    &Msg::init_msgs;
    &proxy::init_handlers;

    if ($G->{Port} =~ /^(\d+)$/) {
        # accept connection on TCP socket, redirect stdin and stdout
        $s = listensock gm_sock $G->{Port},"tcp"
            or die "Can't listen: ",&gm_sock::lasterror();
    }

    # If invoked with a test harness, call the harness's "main".

    if ($G->{Test}) {
        my $pkg= $G->{Test};
        use strict 'vars';
        require "${pkg}.pl";
        no strict 'vars';
        &{"${pkg}::main"};
        &exit_cleanup;
    }

    while (1) {
        if ($G->{Port} =~ /^(\d+)$/) {
            &Mon::status("Waiting for connection on $G->{Port}/tcp");
            # accept connection and redirect it to STDIN/STDOUT
            my $a = $s->acceptsock();
            $a->redirect(STDIN, STDOUT);
            &Mon::status("Accepted connection, beginning authentication");
        } elsif (defined $G->{Port}) {
            # serial port
	    &serial::config_device("/dev/$G->{Port}");	
        }
        my ($Authrecord) = accept_client auth $G;
        if (ref($Authrecord) eq 'auth')  {
            # valid authentication object returned: go to mainloop
            &Mon::status("Sending AUTH_OK to client");
            &Msg::send_auth_ok(0, &Msg::AUTH_OK_STR, "");
            my $proxy = new proxy $Authrecord,$G;
            $proxy->mainloop();
        } else {
            # failure: authentication object is just the error message
            &Mon::status("Authentication failed: $Authrecord");
            &Msg::send_auth_error(&Msg::FLAG_MSG_ERROR,
                                  &Msg::ERR_STR,
                                  $Authrecord);
        }
    }
}

sub setsigs {
    # BUG::should set up signal handlers here
    $SIG{'PIPE'} = exit_cleanup;
    $SIG{'INT'} = exit_cleanup;
}


sub debug_loop {

    my ($tmpl,$msg);
    my $i;
    my $blah;
    my %rd = ('1', 'str1', '2', 'str2', '3', 'i32', '6', 'i16');
    my ($flags,$len);
    
    while (1) {
        warn "Waiting for message\n";
        eval {$tmpl = &Msg::read_str1(STDIN)};
        die "Couldn't read template: $@@" if $@@;
        @@tmpl = ();
        unshift(@@tmpl, $rd{$_}) while ($_ = chop $tmpl);
        warn "Template=@@tmpl\n";
        # read message
        @@res = &Msg::unpack_msg(@@tmpl);
        foreach (@@res) {
            warn  "->$_<-\n";
        }
    }
}
            
sub exit_cleanup {
    &util::cleanup;
    system "kdestroy"
        and warn "kdestroy: exit $?";
    &Mon::kill;
    exit 0;
}

&main; 1 while 1;


=head1 COPYRIGHT

Copyright (C) 1994-1996 by the Regents of the University of California.
Commercial and non-commercial licenses to use this software must be arranged by
the GloMop Group at UC Berkeley.  For inquiries email Armando Fox
<fox@@cs.berkeley.edu>, Prof. Eric Brewer <brewer@@cs.berkeley.edu>, or
Prof. Randy Katz <randy@@cs.berkeley.edu>.

=cut    
@


1.29
log
@Added serial.pl to configure serial port - still needs work.  Changed
return string of AUTH_OK msg to make it distinct from all other msgs. New
rule: msgs must have initial strings that are unique in first 2 letters
(case insensitive).  Minor changes to msgdefs.pl and the lang_*.pl to allow
passing of constant arg strings for code generation.  Added a "newt" client.
@
text
@d6 1
a6 1
#  $Id: gmproxyd,v 1.28 1996/09/23 01:08:58 fox Exp $ 
d79 1
@


1.28
log
@minor change to gmproxyd to support serial connection; added new
debugging messages to util.pl debug routine
@
text
@d6 1
a6 1
#  $Id: gmproxyd,v 1.27 1996/09/12 23:57:37 fox Exp $ 
d10 1
a10 1
use KerberosIV;
d78 1
d121 1
a121 13
            my $device = "/dev/$G->{Port}";
            open(SERIAL, $device)
                or die "Can't open $device: $!\n";
            &Mon::status("Waiting for connection on $device");
            open(STDIN, "<& SERIAL")
                or die "STDIN redirect failed: $!\n";
            open(STDOUT, ">& SERIAL")
                or die "STDOUT redirect failed: $!\n";
            select(STDOUT); $| = 1;
        }
        while (1) {
            sysread(STDOUT,$tmp,1);
            printf STDERR "%02x ",ord($tmp);
d127 1
a127 1
            &Msg::send_auth_ok(0, &Msg::OK_STR, "");
@


1.27
log
@Fixed up makefile, added simple serial support
@
text
@d6 1
a6 1
#  $Id: gmproxyd,v 1.26 1996/08/23 19:36:02 gribble Exp $ 
d129 4
@


1.26
log
@Did a complete merge with the source tree from Wink, and got refinement and
Kerberos authentication working again.  Many, many little subtle changes.
The refinement path was changed to "./gmtmpXXX/I1" from an absolute path
name, which broke some regexps.  Fixing that helped, as well as calling
the determine_htype function with a filename instead of undef.
@
text
@d6 1
a6 1
#  $Id: gmproxyd,v 1.5 96/08/22 19:17:07 glomop Exp $ 
d94 1
a94 1
    if ($G->{Port}) {
d112 1
a112 1
        if ($G->{Port}) {
d118 11
@


1.25
log
@segmgr renamed to chunk.  lots of changes including new html parser,
rudimentary layout manager, beginnings of interface to ptm, modularized
front-end vs back-end distiller components (but interfaces aren't really
stabilized yet).
@
text
@a0 2
#!/usr/local/bin/perl -w

d3 2
a4 12
#  invoked by inetd.
#


#####  Begin site modifications #####

#  This should really be taken care of by a Makefile, but you need to
#  change the following here:
#   - change the pathname in the @@INC to wherever your perl5
#  site-specific libraries live
#   - comment out "use KerberosIV" a few lines down if you don't have
#  the KerberosIV.pm package
d6 1
d8 1
a8 6
BEGIN {
    push(@@INC, "/staff/glomop/lib/perl5");
    my $homedir = "/staff/glomop/gmproxyd";
    push(@@INC, $homedir, "$homedir/tm");
}

d10 1
a10 22
# use KerberosIV;

#####  End site modifications  #####

for (qw(globals
	util
	gm_sock
	bytestream
	msgdefs
	accept
	mon
	proxy
	client
	prefs
	doc
	chunk
	commands
	network
	))
{
    require "${_}.pl";
}
d56 27
d84 1
a85 1
    &parse_argv($G);
d88 1
a89 1

d108 1
a108 1
        exit 0;
d167 1
a167 1
    #&util::cleanup;
d176 10
@


1.24
log
@imported from wink, 7/8 pm
@
text
@d20 3
a22 4
    use POSIX 'uname';
    local($arch) = (&uname)[0];
    push(@@INC,
	"/staff/glomop/perlmod.$arch");
d26 1
a26 1
use KerberosIV;
d41 1
a41 1
	segmgr
d78 2
d109 12
d149 1
d177 1
a177 1
    &util::cleanup;
@


1.23
log
@Various robustifications, addition of client abstraction, mainloop.pl
renamed to proxy.pl.  interface to htypes has changed: the doc object
(instead of doc_id) and client object are now passed.
@
text
@d59 3
a61 1
#  line, and listens on STDIN.
d95 2
d102 1
@


1.22
log
@Split the Charon stuff out into charon.pl.
@
text
@d1 1
a1 1
#!/usr/sww/bin/perl5 -w
d23 1
a23 1
         "/disks/barad-dur/now/pythia/release/perlmod.$arch");
d32 14
a45 13
           util
           gm_sock
           bytestream
           msgdefs
           accept
           mon
           mainloop
           prefs
           doc
           segmgr
           commands
           network
           ))
a135 1
    $Msg::Debug = 1;
@


1.21
log
@Added extensive documentation in the form of embedded perlpod.
@
text
@d8 11
d28 2
@


1.20
log
@*** empty log message ***
@
text
@d102 2
a103 2
            my $proxy = new proxy $Authrecord;
            $proxy->mainloop($G);
d145 3
a147 1
    system "kdestroy";
@


1.19
log
@*** empty log message ***
@
text
@d61 2
@


1.18
log
@more dynamic-adaptation stuff that seems stable enough to checkin...
@
text
@d98 2
@


1.17
log
@Defined a simple protocol in hsk.txt for setting session-level
preferences for an htype, and implemented the message handler for it
which sends the parsed prefs info to the set_prefs routine of the
appropriate htype module.
@
text
@d18 17
a34 11
require "globals.pl";
require "util.pl";
require "gm_sock.pl";
require "bytestream.pl";
require "msgdefs.pl";
require "accept.pl";
require "mon.pl";
require "mainloop.pl";
require "doc.pl";
require "segmgr.pl";
require "commands.pl";
@


1.16
log
@*** empty log message ***
@
text
@d28 1
d75 1
@


1.15
log
@Image fetching and segmenting works end-to-end, but no error checking in
place yet.
@
text
@d15 1
@


1.14
log
@image segmenter successfuly calls pnmcut, but leaves chunks in ppm
format for now
@
text
@d69 1
d94 3
d101 6
d131 6
@


1.13
log
@Added utilities file (with debugging stuff and generalization of
instance-variable access for various classes), and segment manager
(provides generic segmentation services).  'tm' submodule will contain
high-level document type (htype) "chunkers".  added close_doc message to
hsk.txt.
@
text
@d26 1
@


1.12
log
@rudiments of main loop working, with gm_conn object inheriting from
gm_sock for handling open proxy connections
@
text
@d18 1
d54 1
a54 1
        $globals->{DbgMode} = 1, next
@


1.11
log
@no longer a need for http transport mgr; using LWP perl module.
completed multilanguage support for msgdef generation.  added messages
for doc open and chunk xmission to hsk.txt.  added monitor calls for
showing open documents.  modified testdrv to use as generic send/receive
of any messags defined in hsk.txt.  began working on doc.pl document
abstraction.
@
text
@a11 1
         "/disks/barad-dur/now/pythia/release/perllib",
@


1.10
log
@moved some globals into config file.  first cut at mainloop.  created
directories for front-end servers, transport managers, and doc type
segmenters.  split out message-parsing-code generation so that various
language back-ends can be used, allowing message code to be generated
automatically for clients in different languages; say 'perl5 msgdefs.pl
<lang>' to do it.
@
text
@d25 1
d66 1
d68 2
a69 2
    my $M = init mon;
    
d73 1
a73 1
        my $s = listensock gm_sock $G->{Port},"tcp"
a74 6
        $M->status("Waiting for connection on $G->{Port}/tcp");
        
        # accept connection and redirect it to STDIN/STDOUT
        my $a = $s->acceptsock();
        $a->redirect(STDIN, STDOUT);
        $M->status("Accepted connection, beginning authentication");
d76 17
a92 7
    my ($Authrecord) = accept_client auth $G,$M;
    if (ref($Authrecord) eq 'auth')  {
        # valid authentication object returned: go to mainloop
        &mainloop::mainloop($Authrecord, $G, $M);
    } else {
        # failure: authentication object is just the error message
        $M->status("Authentication failed: $Authrecord");
@


1.9
log
@Added support for monitoring (to external GUI monitor) in mon.pl.
currently talks to tcl/tk monitor app via udp packets.
@
text
@d9 2
a10 1
    chop($cwd = `pwd`);
d13 2
a14 5
         #$z="/usr/tmp/fox/KerberosIV",
         $z = "../KerberosIV",
         "$z/blib/arch","$z/blib/blib",
         "."
);}
d24 1
d36 1
a36 1
#  Side effects: sets some variables in globals: Port, ClientIP,
d42 2
a43 1
    # grab peer's address
d48 2
a49 1
    
d80 4
a83 4
    my ($res,$principal,$devid,$authtype,$authargs,$session_key)
        = &auth::accept_client($G,$M);
    if ($res)  {
        # success
d85 2
a86 2
        # failure: report error to monitor
        $M->status("Authentication failed: $session_key");
@


1.8
log
@Kerberos handshake works.  Need to put in code to actually check fields
of received packets, timestamps, etc., and remove debugging printf's.
@
text
@d11 3
a13 1
         $z="/usr/tmp/fox/KerberosIV",
d15 1
a15 1
         "/usr/tmp/fox/gmproxyd"
d25 14
d41 2
a42 1

d44 5
a48 4
    $ClientIP = shift @@ARGV;
    unshift(@@ARGV, $ClientIP), $ClientIP = "127.0.0.1"
        if $ClientIP =~ /^-/;

d50 1
a50 1
        $Port = (shift @@ARGV || die "$_ requires a number\n"), next
d52 1
a52 1
        $DbgMode = 1, next
d62 25
a86 30
$ClientIP = '';
$Port = 0;
$DbgMode = 0;

######## end globals #########

&parse_argv;
&Msg::init_msgs;
if ($Port) {
    # accept connection on TCP socket, redirect stdin and stdout
    my $s = listensock gm_sock $Port,"tcp"
        or die "Can't listen: ",&gm_sock::lasterror();
    warn "Waiting for connection on $Port/tcp...\n";
    my $a = $s->acceptsock();
    $a->redirect(STDIN, STDOUT);
    warn "Established connection\n";
}
#&debug_loop, exit 0 if $DbgMode;    

# debugging mode


&test_auth();
#&debug_loop();

sub test_auth {
    warn "Waiting for PDA";
    @@res = &auth::accept_client(0);
    local($,)=','; warn @@res;
    exit 0;
d113 2
@


1.7
log
@*** empty log message ***
@
text
@d11 4
a14 4
         "/disks/barad-dur/now/pythia/fox/work/charon/src/KerberosIV",
         "/disks/barad-dur/now/pythia/release/perllib",
         $cwd);
}
d16 1
a16 1
# use KerberosIV;
d61 1
a61 1
&debug_loop, exit 0 if $DbgMode;    
d71 2
a72 1
    $key = &accept_client(0);
@


1.6
log
@*** empty log message ***
@
text
@d22 1
d51 1
d66 2
d69 5
a73 1
&debug_loop();
@


1.5
log
@*** empty log message ***
@
text
@d18 1
d84 1
a84 1
        @@res = &Msg::unpack_msg(STDIN, @@tmpl);
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
#!/usr/sww/bin/perl5
d10 3
a12 1
    push(@@INC, "/disks/barad-dur/now/pythia/fox/work/charon/src/KerberosIV",
d18 1
d20 1
a20 1
require "msgdef.pl";
d22 1
a22 1
# grab peer's address
d24 35
a58 1
$ClientIP = shift @@ARGV;
d62 2
d67 2
d71 1
d73 2
a74 1

d77 5
a81 1
        chomp($tmpl = <STDIN>);
d83 3
a85 10
        die "Couldn't read 3 bytes!"
            unless (sysread(STDIN, $blah, 3) == 3);
        for ($i=0; $i<length($tmpl); $i++) {
            $_ = substr($tmpl,$i,1);
            eval { $res = &{"Msg::read_".$rd{$_}}(STDIN); }
            if ($@@) {
                warn "Read error: $@@ reading $i'th component";
            } else {
                warn "Read $rd{$_} ->$res<-\n";
            }
d88 1
a88 1
} 
@


1.3
log
@*** empty log message ***
@
text
@d25 2
@


1.2
log
@*** empty log message ***
@
text
@d46 1
a46 1
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@gmproxyd, for real. All Proxy perl code will live here.
@
text
@@
