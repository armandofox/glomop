head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @% @;


1.1
date     98.01.29.19.46.23;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.01.29.19.46.23;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
\documentstyle{article}

\begin{document}

\title{GPT\footnote{I'll give you four bucks if you tell me what GPT
should stand for} : A Heuristic Space Search Engine} \author{Ali
Rahimi}
\maketitle

\section {Introduction}

Although many heuristic based search algorithms have been suggested, few
have been implemented in a general way. GPT is a package which attempts to
provide a very general and flexible implementation of a specific heuristic
based search algorithm.

This paper provides a description of this algorithm and defines its
interface and the implementation. The example at the end of this paper
is geared towards the specific problem of converting an image from one
set of characteristics to another, the interface of the package
is general enough to allow a variety of other problems to be solved.

\section {Problem Description}

GPT lends itself very well to the class of search problems whereby nothing
is known about the goal node except for the fact that it optimizes some value
$e$, which is function $E$ of a state. The affect of each possible operator
$O$ with parameter set $\vec{p}$ on every state $s$ is known in terms of the
change in the energy $e$. To summarize, the givens of the problem are as
follows:
\begin{eqnarray}
e = E(s) \\
\Delta e = E(O_{\vec{p}}[s])
\end{eqnarray}

The goal node is whichever node that minimizes equation (1). The output of
the algorithm is both the end node and the series of operators and their
parameter sets used to reach the goal node from a given start node.

\section {Algorithm}

The algorithm is loosely based on the A* algorithm. The given
information is manipulated in such a way that A* will be applicable to
the problem. This way, proving the correctness, optimality, and
efficiency of the problem will be simpler. The current node energy
$g(s)$ is $E(s)$ and a heuristic measure $h(s)$ for operation $O$ on
the current node is $\Delta e = O_{\vec{p}}[s]$, such that $e$ is
maximized.

The heuristic $h$ is admissible in that it can never overestimate the
maximum energy, since that energy corresponds to a real node, and that
node would be a goal node.

The rest of the algorithm consists of running A* on the operators and
the start node. Since the heuristic has been shown to be admissible,
GPT's correctness and finiteness are readily proven. Proving the
optimality and efficiency of GPT is more difficult since $h$ may not
be the best heuristic obtainable from the givens. The author's response
to this limitation is ``Yeah, I have a midterm on Monday.''

\section {Interface}

GPT relies on three crucial pieces of information: an algorithm which
computes the energy of a state, a set of operators and their effect on the
energy of a state, and a start state.

If one were to assume a C++ representation of GPT, one could reprsent
states as a class {\tt State}, which would contain the different properties
of a state, including a measure of the energy of the state. A class {\tt
Operator} would provide a member function which takes a {\tt State} as a
parameter and an value representing one of several possible configurations
for the operator (see the Examples section for more detail).

All in all, the user interface to the package is not at all involved and
easy to use.

\section {Example}

Consider the usage of GPT in an image conversion utility. Suppose we
are given an image with a certain property list {\tt \{Area=65536
Size=30K Format=ALI Depth=24\}} and we wish to convert it to an image
with properties that maximize the energy of each of the properties
according to the following rules\footnote{These rules are very ad-hoc and
were not researched. I pulled them out of my hat.}:

\[
\begin{array}{ll}
e_{area}         & Area/10000 \\
e_{size}         & \left\{ \begin{array}{ll}
			-Size/1000 & Size > 10K \\
			Size/10    & otherwise
		    \end{array} \right. \\
e_{format}       & \left\{ \begin{array}{ll}
			0        &   Format = JPEG \\
			-100000  &   otherwise
		    \end{array} \right. \\
e_{depth}        & \left\{ \begin{array}{ll}
			Depth*2  &   Depth \leq 4 \\
			8        &   otherwise
		    \end{array} \right.
\end{array}
\]

The energy of any state, then, is the sum of the energy of each of its
properties.

Defining operators is also simple. One might define an image reduction
filter as follows:

\[ Area = Area / p[ratio] \]

where $p[ratio]$ is one of the properties associated with the filter,
and would have to be specified by A*. Thus, a filter must specify both
its rules for changing the properties and its requirements on its $\vec{p}$
vector.

After the operator has been applied, GPT recomputes the energy of the newly
expanded node and pushes it into its working set.

\section {Observations}

This paper has not described in much depth the handling of the
$\vec{p}$ vectors. The various combinations of the $p$ set and its
corresponding operator can be considered as separate operators all by
themselves. However, it may be possible to use local gradient
information from the operators themselves to prune some of the
possible values of $p$. If the p-space is dense (which might be the
case if, in the image reduction filter, for example, one can reduce
the image by an arbitrary factor) then GPT will take a tremendous
amount of time if more information is not put to use.

Another intimidating aspect of GPT is the definition of the scoring
rules. Although extremely powerful, these rules are difficult to
define. Thankfully, they need only be defined once for each different
type of architecture.

\section {Conclusion}

(XXX don't give this to Armando until this is done. And make sure
Professor Brewer never sees this paper in this state.)

\begin{thebibliography}{1}
\bibitem{xcf}The XCF fridge in 311 Soda hall.
\bibitem{book}Some AI book I picked up in the XCF office to make sure
		about I was remembering the admissibility rules for A*
		correctly.
\end{thebibliography}
\end{document}
@


1.1.1.1
log
@GloMOp bibliographies, meetings, etc, re-imported into GloMop CVS
archive on full-sail
@
text
@@
