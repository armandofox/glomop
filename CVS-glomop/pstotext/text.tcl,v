head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.11.19.01.17.23;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.11.19.01.17.23;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/sww/bin/wish -f

proc ScrolledCanvas { c width height region } {
    canvas $c.canvas -width $width -height $height -bg white \
	    -scrollregion $region \
	    -xscrollcommand [list $c.xf.xscroll set] \
	    -yscrollcommand [list $c.yscroll set]
    $c.canvas coords p
    frame $c.xf
    pack $c.xf -side bottom -fill x -expand true
    scrollbar $c.xf.xscroll -orient horizontal \
	    -command [list $c.canvas xview]
    scrollbar $c.yscroll -orient vertical \
	    -command [list $c.canvas yview]
    pack $c.xf.xscroll -side right -fill x -expand true
    button $c.xf.next -text {Next} -command { NextPage }
    pack $c.xf.next -side left -fill y
    button $c.xf.prev -text {Prev} -command { PrevPage }
    pack $c.xf.prev -side left -fill y
    button $c.xf.print -text {Print} -command { PrintPage }
    pack $c.xf.print -side left -fill y

    pack $c.yscroll -side right -fill y
    pack $c.canvas -side left -fill both -expand true
    pack $c -side top -fill both -expand true
    return $c.canvas
}

proc NextPage {} {
    global Page Pages c PageCount

    incr Page
    if {$Page == $PageCount} {
	incr Page -1
    }
    $c delete all
    eval [lindex $Pages $Page]
}

proc PrevPage {} {
    global Page Pages c PageCount

    incr Page -1
    if {$Page < 0} {
	incr Page
    }
    $c delete all
    eval [lindex $Pages $Page]
}

proc PrintPage {} {
    global c FontMap
    $c postscript -file out.ps -fontmap FontMap
}

set f [frame .f]

button .f.q -command {exit 0} -text "Quit"
pack .f.q -side bottom -fill y
set c [ScrolledCanvas $f 612p 500p {0 0 612p 792p}]

# hack to get *some* font stuff working quickly -- this encodes
# which sizes to assume are present

proc getsize {size} {
    incr size
    if {$size < 10} {return 80}
    if {$size < 12} {return 100}
    if {$size < 14} {return 120}
    if {$size >= 24} {return 240}
    if {$size >= 18} {return 180}
    return 140
}

proc r {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font *-times-medium-r-*-*-$size-*
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-times-medium-r-*-*-$i-*) [list Times [expr $i/10]]
}


proc ir {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw  -text $word -font *-times-medium-i-*-*-$size-*
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-times-medium-i-*-*-$i-*) [list TimesItalic [expr $i/10]]
}

proc br {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw  -text $word -font *-times-bold-r-*-*-$size-*
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-times-bold-r-*-*-$i-*) [list TimesBold [expr $i/10]]
}

proc bir {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font "*-times-bold-i-*-*-$size-*"
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-times-bold-i-*-*-$i-*) [list TimesBoldItalic [expr $i/10]]
}

proc h {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font "*-helvetica-medium-r-*-*-$size-*"
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-helvetica-medium-r-*-*-$i-*) [list Helvetica [expr $i/10]]
}

proc bh {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font "*-helvetica-bold-r-*-*-$size-*"
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-helvetica-bold-r-*-*-$i-*) [list HelveticaBold [expr $i/10]]
}

proc bih {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font "*-helvetica-bold-o-*-*-$size-*"
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-helvetica-bold-o-*-*-$i-*) [list HelveticaBoldOblique [expr $i/10]]
}

proc s {s x y word} {
    global c
    set size [getsize $s]
    append x p
    append y p
    $c create text $x $y -anchor sw -text $word -font "*-symbol-medium-r-*-*-$size-*"
}
foreach i {80 100 120 140 180 240} {
    set FontMap(*-symbol-medium-r-*-*-$i-*) [list Symbol [expr $i/10]]
}


set file [open "spaa.rt"]
set Pages [split [read $file] {#}]
close $file

set Page 0
set PageCount [expr [llength $Pages] - 1]
eval [lindex $Pages $Page]
@


1.1.1.1
log
@
@
text
@@
