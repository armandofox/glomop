head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.03.06.04.36.17;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.1
log
@run.pl: modified gifmunch runner and spawner
scripto.sh: used to coordinate all other pieces
spawner.pl:  spawns a number of gifmunchers on the local machine
stresser.pl: stress tests a number of gifmunchers with a file
stats.pl: computes mean, stddev, variance, etc.
@
text
@#!/usr/sww/bin/perl5

# spawner.pl - spawns a number of gifmunchers on consecutive port numbers
#   ARGS:  localstartport proxystartport nummunchers notifyhost gifmuncherpath

package spawner;

$startport = shift @@ARGV or die "usage: spawner.pl lsp psp numm nh gmpath\n";
$pstartport = shift @@ARGV or die "usage: spawner.pl lsp psp numm nh gmpath\n";
$nummunchers = shift @@ARGV or die "usage: spawner.pl lsp psp numm nh gmpath\n";
$nh = shift @@ARGV or die "usage: spawner.pl lsp psp numm nh gmpath\n";
$gmpath = shift @@ARGV or die "usage: spawner.pl lsp psp numm nh gmpath\n";

my $arch = `uname` || `/bin/uname` || `/usr/ucb/uname` ||
    die "can't get archtype from uname";
chomp $arch;

for ($i=0; $i<$nummunchers; $i++) {
    $curport = $startport + $i;
    $pcurport = $pstartport + $i;

    if ($c = fork()) {
	# this is parent
	sleep 1;
    } elsif (! (defined $c)) {
	# fork failed
	die "fork number $i failed.\n";
    } else {
	# this is child
	print "${gmpath}.${arch} $pcurport $nh $\n";
	exec "${gmpath}.${arch} $curport $nh $pcurport";
	die "exec failed: $!";
    }
}

# done spawns.  Now just wait to be killed
sleep;

print STDOUT "I've been woken up!  Time to kill myself.\n";
exit(0);


@
