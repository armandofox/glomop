head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	96.12.03.09.39.04;	author fox;	state dead;
branches;
next	1.4;

1.4
date	96.12.03.07.51.18;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.12.03.03.40.18;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.12.03.03.16.22;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.12.03.00.22.40;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@#!/usr/sww/bin/perl


#
#  typegraph global to this file
#

$Dolf::TG = new typegraph;
$Dolf::TG->accept_typegraph(
	      'application/postscript text/html b FOO',
	      'text/html text/plain c FOO',
	      'image/gif image/jpeg d FOO',
	      'image/jpeg image/gif e FOO',
	      'image/gif image/x-portable-anymap f FOO',
	      'image/x-portable-anymap image/x-xbitmap g FOO',
	      'application/postscript image/gif h FOO',
	      'text/plain audio/basic i FOO',
	      'audio/basic audio/x-wav j FOO',
	      'application/postscript application/pdf k FOO',
	      'application/xlatex application/x-dvi l FOO',
	      'application/x-dvi application/postscript m FOO',
                            );


#
#  dolf globals
#

sub read_config {
    open(CF, "dolf.cf")
        or die "Opening dolf.cf: $!";
    while (<CF>) {
        chomp;
        next if /^#/;
        next if /^\s-*$/;
        eval "\$Dolf::$1 = \"$2\"" if /^\s*(\S+)\s+(.*)/;
    }
    close CF;
}

sub create_new_do {
    my $url = shift;
    my $do = new DO $url;
    my @@types = $Dolf::TG->typegraph_reachables($do->origType);
    for (@@types) {
        $do->add_fixation($_);
        &debug('tg', "Adding: $_\n");
    }
    return $do;
}

sub test {
    my $tg = new typegraph;
    $tg->accept_typegraph(@@inputlist);
    
    my $z = "http://www.cs/~fox/foo.ps";
    while ($z) {
        $w = &create_new_do($z,$tg);
        $w->dump();
        print "\n\n--- BEGIN HTML ---\n\n";
        print $w->make_html();
        print "\n\n--- END HTML ---\n\n";
        print "\n\nNew URL: ";
        chomp($z = <STDIN>);
    }
}        

1;
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@*** empty log message ***
@
text
@a2 6
BEGIN { push(@@INC,  "/disks/barad-dur/now/pythia/release/lib/perl-5.002"); }
use LWP;

require "util.pl";
require "do.pl";
require "typegraph.pl";
a66 4

&read_config;
&test;

@


1.2
log
@*** empty log message ***
@
text
@a5 1
require "ctime.pl";
@


1.1
log
@*** empty log message ***
@
text
@d1 4
a4 1
#! perl
d7 1
d9 22
d48 27
d76 2
a77 1
print;
@
