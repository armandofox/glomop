head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.12.03.20.22.48;	author fox;	state dead;
branches;
next	1.1;

1.1
date	96.11.27.21.34.52;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.27.21.34.52;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@# $Id: client.pl,v 1.1 1996/11/27 21:34:52 fox Exp fox $
#
#  Code to read client info from pythia.clients and determine client type given
#  HTTP headers.

=head1 NAME

client.pl - manages client device characteristics

=head1 SYNOPSIS

    &client::read_clients();
    $prefs_hash_ref = &client::client_prefs_from_headers($hdrs_hash_ref);

=head1 DESCRIPTION

The I<read_clients> call reads F<pythia.clients> for information about
possible client device types and how to identify them from their HTTP
headers.  See that file for details.

I<client_prefs_from_headers> returns a reference to a hash of the client
characteristics as specified in F<pythia.clients>, given a reference to
a hash whose keys are HTTP header names and whose values are the
contents (no newlines) of those headers.  The header names should be in
canonical form: the first letter and every letter following a hyphen
should be capitalized.

=cut
    
package client;

@@Hdrs = @@Regexps = @@Clients = ();

sub read_clients {
    my $file = shift || "pythia.clients";
    open(F,$file) or die "client: no clients file $file\n";
    my $cli;
    
    while (<F>) {
        next if /^\s*$/;
        next if /^#/;
        die "Bad entry: $_" unless
            /^(\S+)\s+(\S+)\s+(.*)/;
        push(@@Hdrs, lc $1);
        push(@@Regexps, $cli = lc $2);
        my ($a,%a);
        foreach $a (split (/\s+/, $3)) {
            die "Bad attrib for $_: $a"
                unless $a =~ /(\S+)=(\S+)/;
            $a{lc $1} = $2;
        }
        push(@@Clients, \%a);
        &main::debug('client', "Client $cli");
    }
    close F;
}

sub client_prefs_from_headers {
    my $hdrs = shift;
    my $success = 0;
    
    for ($i=0; $i <= $#Clients; $i++) {
        $success = 1,last if $hdrs->header($Hdrs[$i]) =~ /$Regexps[$i]/i;
    }

    &main::log("*** client: no client matching headers")
        unless $success;

    return $Clients[$i];
}

1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $Id: client.pl,v 1.4 1996/09/09 23:04:12 fox Exp $
@


1.1.1.1
log
@cs294-7 DOLF (digital objects) project
@
text
@@
