head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.12.03.03.16.26;	author fox;	state dead;
branches;
next	1.1;

1.1
date	96.11.27.21.34.53;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.27.21.34.53;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#
#  Functions to deal with the refinement icon, which is a little bitmap.
#  $Id: ismap_icon.pl,v 1.1 1996/11/27 21:34:53 fox Exp fox $
#
#  The function ismap_icon::coords2code takes a pair of coordinates (location
#  of the click inside the refinement icon) and is expected to return a
#  refinement code number from 0 to 4 (0=NW,1=NE,2=SW,3=SE,4=whole image).  If
#  you make a new icon, you must modify the function.  The icon must be an
#  image/gif. 
#

package ismap_icon;
use strict 'vars';

$ismap_icon::IconFile = "4.gif";

#
# Initialization
#
sub init {
    open(F, $ismap_icon::IconFile)
        or die "*** Reading refinement icon in $ismap_icon::IconFile: $!";
    local($/) = undef;
    $ismap_icon::Icon = <F>;
}

sub refine_icon_url { "http://%4%/" }

sub refine_icon { $ismap_icon::Icon }

sub make_refinable {    (shift @@_) . ";;"   }
    
sub is_refinement {
    my $url = shift;
    if ($url =~ s!;;\?(\d+),(\d+)/?!!) {
        return ($url, &coords2code($1,$2));
    } else {
        return ($url, undef);
    }
}

sub coords2code {
    my($x,$y) = @@_;
    # check for center; otherwise quadrantize
    ($x >= 4 && $x <= 10 && $y >= 4 && $y <= 10)
        ? 4 : (($x > 7) << 1) + ($y > 7);
}

1;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#  $Id: ismap_icon.pl,v 1.1 1996/09/09 23:04:17 fox Exp $
@


1.1.1.1
log
@cs294-7 DOLF (digital objects) project
@
text
@@
