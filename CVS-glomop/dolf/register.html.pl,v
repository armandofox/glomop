head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.12.03.20.22.51;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.11.27.21.34.54;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.11.27.21.34.54;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@# $Id: register.html.pl,v 1.1.1.1 1996/11/27 21:34:54 fox Exp $

package main;

#
#  Given an IP addrs (or empty string), return an instance of the registration
#  page customized to that client's current preference, or some default set if
#  client unknown.
#

sub make_checkbuttons_from_prefs {
    my ($pfs,@@keys) = @@_;
    my @@checkbuttons;
    for (@@keys) {
        push(@@checkbuttons, ($pfs->{$_} =~ /on/i ? "checked" : ""));
    }
    return @@checkbuttons;
}

sub make_radiobutton_group_from_prefs {
    my ($pfsvalue,@@values) = @@_;
    my @@radio;
    my $checked_one;
    for (@@values) {
        push(@@radio, ( /$pfsvalue/i ? $checked_one = "checked" : ""));
    }
    # insure at least one radiobutton is checked.
    $radio[0] = "checked" unless $checked_one;
    return @@radio;
}

#--------------------------------------------------------------------------
#   NAME: do_login
#   DESCRIPTION: Return the login page for client
#   ARGS: none
#   RETURNS: HTML string
#   SIDE EFFECTS: none
#   ASSUMPTIONS: none
#---------------------------------------------------------------------------

sub do_login {
    return &html_wrap("",
                      sprintf($main::Const{LoginPage}, $main::Const{LoginURL}),
                      "Dolf Login");
}

#--------------------------------------------------------------------------
#   NAME: do_register - return prefs change page suitable for client
#   DESCRIPTION: returns prefs change form for client, with default values filled
#       in corresponding to client's current prefs 
#   ARGS: the connection object (so the IP addr of the client can be extracted
#       for prefs lookup)
#   RETURNS: HTML string
#   ASSUMPTIONS: none
#---------------------------------------------------------------------------

sub do_register {
    # Send the registration page. If this is a client we know about (based on
    # IP addr), fill in client's prefs first - a nice personal touch
    my $con = shift;
    my($ipad) = $con->{"IPaddr"};
    local($html) = &regpage_with_prefs($ipad);
    return &html_wrap("", $html, "Change Prefs");
}

sub regpage_with_prefs
{
    local(%pfs) = &main::get_prefs(shift @@_);

    # If this is not a user that we know about, make them login first.  We
    # "know about"  a user if we can locate a prefs profile for the given IP
    # address.  This lookup will fail (thereby requiring a login) if this IP
    # address has never been seen before, or if its entry in the prefs file is
    # currently inactive.  However, if a different user is now using this IP
    # address, we'll end up setting that person's prefs.  Not much to be done
    # about this.

    return &do_login unless (defined $pfs{'u'});

    # for the checkbuttons and radiobuttons, create lists in which only the
    # selected elements have value "checked", others have the value
    # empty-string.  These will be used in the sprintf.
    
    local(@@auto) =
        &make_radiobutton_group_from_prefs($pfs{'a'}, 't', 'n');
    local(@@exclude) =
        &make_checkbuttons_from_prefs(\%pfs, 'h','p','g','j');
    my($html) = sprintf($Const{RegistrationPage},
                        sprintf($Const{GenerateRegisterURL}, $pfs{'u'}),
                        @@auto,
                        @@exclude,
                        $pfs{u}
                        );
    return $html;
}
         
sub register::init {

$Const{RegistrationPage} = <<EndOfRegistrationPage;

<pragma nocache>
<!-- URL to submit -->
<form action="%s" method="GET">

<h1>DOLF User Preferences</h1>

<!-- radiobutton group: 'a' values 't' 'n'-->
<input %s type="radio" name="a" value="t">
Redirect DOLFifiable URL's automatically<br>
<input %s type="radio" name="a" value="t">
Only redirect URL's ending in <tt>"$Dolf::DolfForceRedirect"</tt><br>

<br><hr><br>
<!-- checkbuttons: types to exclude -->
Types to exclude from automatic conversion:<br>
<input %s type="checkbox" name="h" value="on">
text/html<br>
<input %s type="checkbox" name="p" value="on">
text/plain<br>
<input %s type="checkbox" name="g" value="on">
image/gif, image/pgif<br>
<input %s type="checkbox" name="j" value="on">
image/jpeg, image/pjpeg<br>

<!-- user name -->
<input type="submit" value="Set Prefs for %s">    
</form>
EndOfRegistrationPage


$main::Const{LoginPage} = <<EndOfLoginPage;

<pragma nocache>
<form action="%s" method="GET">
<h1>DOLF Login</h1>
<b>User name:</b>
<input type="text" name="u" value="" size="16">
<input type="submit" value="Login to DOLF">
</form>
EndOfLoginPage


}

1;

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $Id: register.html.pl,v 1.10 1996/11/17 01:50:23 fox Exp $
d44 1
a44 1
                      "Pythia Login");
d84 4
a87 10
    local(@@segment) =
        &make_checkbuttons_from_prefs(\%pfs,"s");
    local(@@color_or_gray) = 
	&make_radiobutton_group_from_prefs($pfs{'c'}, 'c', 'm');
    local(@@imgmap) =
        &make_radiobutton_group_from_prefs($pfs{'m'},'s','i','u');
    local(@@refinement) =
        &make_radiobutton_group_from_prefs($pfs{'q'}, 'o', 'b');
    local(@@bits_pixel) =
	&make_radiobutton_group_from_prefs($pfs{'b'}, '1','2','4','8');
d90 2
a91 6
                        @@segment,
			@@color_or_gray,
			@@bits_pixel,
                        $pfs{i},
                        @@imgmap,
                        @@refinement,
d105 20
a124 32
<!-- checkbutton: 's' -->
<input %s type="checkbox" name="s" value="on">
Segment pages

<!-- radiobutton group: 'c' (2 values) -->
<br><b>Display type:</b>
<input %s type="radio" name="c" value="c"><strong>C</strong>olor
<input %s type="radio" name="c" value="m"><strong>M</strong>onochrome

<!-- radiobutton group: 'b' (4 values) -->
<br><b>Bits/pixel:</b>
<input %s type="radio" name="b" value="1"><strong>1</strong>
<input %s type="radio" name="b" value="2"><strong>2</strong>
<input %s type="radio" name="b" value="4"><strong>4</strong>
<input %s type="radio" name="b" value="8"><strong>8</strong>

<!-- text: maximum allowable latency for one inline img -->
<br><b>Max wait time (seconds) to load one inline image:</b>
<input type="text" name="i" value="%d">

<!-- radiobutton group: 'm' (3 values) -->
<br><b>Server-side Imagemaps:</b>
<input %s type="radio" name="m" value="s"><strong>S</strong>caled
<input %s type="radio" name="m" value="i">Om<strong>i</strong>t (fastest)
<input %s type="radio" name="m" value="u"><strong>U</strong>nmodified
<br>

<!-- radiobutton group: 'q' (2 values) -->
<br><b>Image Refinement:</b>
<input %s type="radio" name="q" value="o"><strong>O</strong>riginal
<input %s type="radio" name="q" value="b"><strong>B</strong>est for this device
    
d135 1
d138 1
a138 1
<input type="submit" value="Login to Pythia">
@


1.1.1.1
log
@cs294-7 DOLF (digital objects) project
@
text
@@
