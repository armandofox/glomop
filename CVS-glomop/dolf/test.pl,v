head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	96.12.03.08.50.07;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.12.03.05.34.00;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.12.03.01.46.06;	author gribble;	state Exp;
branches;
next	1.1;

1.1
date	96.11.28.02.06.39;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added token_arcs function for Armando.
@
text
@#!/usr/sww/bin/perl5 -w

require "typegraph.pl";
require "tgconfig.pl";

# grab some real data to play with
open(GIFFER, "steve_crossarm.gif");
local($/) = undef;
$gifdata = <GIFFER>;
close(GIFFER);

# try out a few conversions
$cfg = new tgconfig "tgconfig.txt";                    # sucks in typegraph
$tg = $cfg->ret_tg();                                  # the typegraph object we built
print "Typegraph we built is:\n";
$tg->dump_typegraph();

($smt, $dmt) = $cfg->token_arcs("ppmtogif");
print "returned: $smt $dmt\n";

@@outputtypes = $tg->typegraph_reachables("image/gif"); # array of reachable mime types and token piplines to get there
$i = 0;
foreach $nextline (@@outputtypes) {
    $i++;
    @@toks = split(/\s/, $nextline);
    $gentype = shift(@@toks);                                              # the reachable mimetype
    $pipeline = join(' ', @@toks);                                         # the pipeline for this reachable type
    $data = $cfg->do_conversions($gifdata, $pipeline);
    print "converted gif to type $gentype, stored in file ${i}_outfile\n";
    open(OF, ">${i}_outfile") or die "couldn't open ${i}_outfile for writing.";
    print OF $data;
    close(OF);
}

# $data = $cfg->do_conversions("test data", "textoau");  # convert text to audio

1;
@


1.3
log
@Seems to all work OK now.

  1) Fixed up a few bugs in typegraph.pl that perl -w caught for me.
  2) Added tgconfig.pl, which parses and deals with config files, and
     runs conversion pipelines for you (not very efficiently, though).
  3) Added tgconfig.txt, which is a sample configuration file.
  4) Modified test.pl to try out the tgconfig.pl routines.
  5) Got some test data to try stuff out on.
@
text
@d18 3
@


1.2
log
@FOobar
@
text
@d1 1
a1 1
#!/usr/sww/bin/perl5
d3 1
a4 1
require "typegraph.pl";
d6 27
a32 39
@@inputlist = (
	      'application/postscript text/html pstohtml FOO',
	      'application/postscript text/html ocrize FOO',
	      'text/html text/plain striphtmltags FOO',
	      'image/gif image/jpeg giftojpeg FOO',
	      'image/jpeg image/gif jpegtogif FOO',
	      'image/gif image/x-portable-anymap giftopnm FOO',
	      'image/x-portable-anymap image/x-xbitmap pnmtoxbm FOO',
	      'application/postscript image/gif renderps FOO',
	      'text/plain audio/basic synthesistext FOO',
	      'audio/basic audio/x-wav xwavify FOO',
	      'application/postscript application/pdf adobedistill FOO',
	      'application/xlatex application/x-dvi latex FOO',
	      'application/x-dvi application/postscript dvips FOO',
	      'generatebogus entry please',
	      );

$foo = new tgconfig "tgconfig.txt";

exit(0);

$tg = new typegraph;
$tg->accept_typegraph(@@inputlist);
$tg->dump_typegraph();  # for debugging only!

print "\nReachables from application/postscript:\n";
&dumpretarray(
      $tg->typegraph_reachables("application/postscript")
	      );

print "\nReachables from image/gif:\n";
&dumpretarray(
      $tg->typegraph_reachables("image/gif")
	      );

print "\nReachables from audio/x-wav:\n";
&dumpretarray(
      $tg->typegraph_reachables("audio/x-wav")
	      );
a34 8

sub dumpretarray {
    my $nextstr;

    foreach $nextstr (@@_) {
	print "$nextstr\n";
    }
}
@


1.1
log
@Typegraph implemented and tested.  It just works, dammit.
@
text
@d3 1
d22 4
@
