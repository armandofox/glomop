head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     96.03.09.23.52.56;  author fox;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     96.03.09.23.52.56;  author fox;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@To make this Perl module, it must be checked out as a subdirectory of
the 'ext' subdir of the Perl source area.  To fake this:

1. Go to your favorite working area and create a directory called
   'perlsrc'

2. Link all of the source files from the real Perl source area:
         ln -s /usr/sww/share/src/GNU/perl-5.001e/* perlsrc

3. Remove the link to the 'ext' directory and replace it with your own:
         rm perlsrc/ext
         mkdir perlsrc/ext

4. Now check out this CVS module as a subdirectory of the 'ext'
   directory:
        cd perlsrc/ext
        cvs checkout <thismodule>

   WARNING:  ** DON'T ** just copy the already-checked-out files to
   perlsrc/ext, or you will experience grief if you later try to do a
   'cvs commit' or 'cvs update'!

Now you're ready to make the extension.  The following is a distillation
of what's in the Perl Info pages for "perlapi".

Make a Makefile: (do this every time, since the Makefile will be
different depending on what architecture you're using)

         cd <thismodule>
         /usr/sww/bin/perl5 Makefile.PL

Make a  dynamically loadable shared library for this architecture: (this
is the point you start at after you've modifed the .xs or .pm files)

         gmake dynamic

This should leave a "blib" subdir containing the actual stuff that is
loaded by Perl autoload.  To test your code:

       cd blib
       perl5 -de 0
       
You should now be able to say "use <thismodule>" to dynamically load and
bootstrap the extension, and then call the functions in the extension.

Happy hacking.
-armando



@


1.1.1.1
log
@gettimeofday() and related support as a Perl 5 extension.
@
text
@@
