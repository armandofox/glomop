head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.12.01.00.16.51;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<html> <head>
<title>UIST97 Demos</title>
</head>

<body>
<h1>Orthogonal Extensions to the WWW User Interface Using Client-Side
Technologies</h1>
Armando Fox, Steve Gribble, Yatin Chawathe, others?, UC Berkeley<p>

<b>Outline</b><p>

<ul>
  <li> WWW: a familiar and <i>simple</i> UI (browser navigation elements,
       clicking to follow links, images that behave button-like, form
       submission) 
  <li> browsers became UI-extensible with arrival of Java and JS; sites
       jumped on board to extend their content/interface
       <ul>
         <li> Portable UI elements, integrated
              w/existing WWW interface, enabled delivery of new behavior
              (applets) using WWW interface
         <li> In most "nontrivial" cases, Java/JS  <i>is</i> the
              content (ie 
              site serves standalone applets, or applets an integral
              part of site service; give examples)
         <li> Some sites "personalize" content, by cookies or other user
              token 
       </ul>
  <li> Meanwhile back on the farm: extensive work in Web access via
       intelligent proxies, which are getting more intelligent and more
       customizable per-user (more knobs that can be set).
       <ul>
         <li> "Intervention" proxies give users more info about the
              constraints underlying their Web surfing
              <ul>
                <li> "You're about to fetch a far-away link" [Teleweb,
                     plus the Schilt et al WWW-6]
                <li> "Lock this page in the cache", annotation of each
                     link with how far away it is  [MOWGLI]
                <li> Rover: disconnected Web browsing
                     with panel showing status of outstanding queued-RPC
                     requests
              </ul>
         <li> "Transformation" proxies provide semi-transparent
              improvement of user experience by actively munging content
              <ul>
                <li> anonymizer.com
                <li> Kanji converters
                <li> datatype-specific distillation and refinement [Fox
                     et al 96] and application building [Fox et al
                     97, SOSP - knock on wood]
              </ul>
         <li> Proxies have become more intelligent: behavior can be
              customized and parametrized, often per-user
       </ul>
  <li> Our contribution: experience with orthogonal extensions to
       browser behavior, 
       to support intelligent proxies
       <ul>
         <li> Proxied service "always" available, is largely independent
              of site-specific content, and has many "tuning knobs"
         <li> Distinguish "extensibility" in the Java/JS sense from Plug-ins:
              the latter don't really help you customize the UI, just present
              new data
         <li> <b>Vision:</b> Internet service model that gives you
              <i>the content you
              want</i> (not just a stream of bytes) from any existing server,
              and an interface that
              lets you view and interact with it <i>the way you
              want</i> using any existing [extensible] client.
       </ul>
  <li> Methods used: [can have screenshots/storyboards of each]
       <ul>
         <li> HTML decoration/annotation: e.g.
              inserted "icon" that takes you to a Control Panel
              using HTML forms and controls; you change some settings,
              "submit", and return to surfing (somewhat disruptive...)
         <li> Embed toolbar (==Java applet) at top of each page; can be
              "minimized" to the icon above: e.g. toolbar has "quality
              slider" that can be adjusted on-the-fly as you surf, and
              lets you temporarily disable the service, get help, etc.
         <li> Change behaviors of page elements (using Javascript) to
              extend the interface: e.g. double-clicking an image
              refines it
       </ul>
  <li> Problems/experience deploying the above methods
       <ul>
         <li> Interaction of the above with existing Web technologies
              (HTML, HTTP, caching semantics)
              <ul>
                <li> HTML parsing lossage for inserting decorations;
                     parsing ambiguities in JavaScript, combined with
                     high error-tolerance of commercial browsers
                <li> Passing around state in URL's, and fighting a
                     stateless HTTP protocol (caching problems, etc)
                <li> Persistent state in Java
              </ul>
         <li> Interaction of interface with existing Web page interfaces
              <ul>
                <li> HTML "refine" decorations often break pixel-level
                     layout, and look intrusive
                <li> Toolbar/icon don't do the right thing with
                     fixed-size non-scrollable frames
                <li> Would like to choose on a per-page
                     basis....sometimes requires extensive HTML analysis
              </ul>
         <li> Inherent security risks of using Java/JS: some seasoned
              users refuse to turn it on [various cites showing that
              their fear is justified]
              <ul>
                <li> "Screen" applets from untrusted sites?
                <li> Really want an orthogonal-security solution
                     [Wagner, Goldberg SOSP 97] that
                     doesn't require turning off Java or JS completely
              </ul>
       </ul>
  <li>  UI issues
       <ul>
         <li> Naive user population: as researchers, this was a harsh
              trip to reality for us
              <ul>
                <li> URL's that break proxy for one reason or another:
                     "scalable" circumvention in JS (using Bloom
                     filters), warning msgs otherwise
                <li> What about users that don't have Java/JS-enabled
                     browsers?
                <li> Can't usually tell in advance that a page will
                     break with the proxy; if a naive user discovers
                     this, who does she call for help?
              </ul>
         <li> "Collisions" with browser built-in UI
              <ul>
                <li> Can't get things like "right-click" or
                     "shift-left-click" from JS, don't want to overload
                     left-click; double-clicking?
              </ul>
         <li> Interesting UI work to be done:
              <ul>
                <li> How to choose defaults for each user?
                <li> We can generate every page on the fly; which UI
                     aspects should be customizable? (eg "customizable
                     toolbar" like MS Office apps)
                <li> How to provide a good selection of "knobs" without
                     defeating appealing simplicity of WWW interface?
                <li> How intrusive vs. effective is the UI in various cases?
              </ul>
       </ul>
</ul>





<hr>
<address></address>
<!-- hhmts start -->
<!-- hhmts end -->
</body> </html>
@
