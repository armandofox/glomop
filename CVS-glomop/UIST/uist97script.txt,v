head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.12.01.00.16.52;	author fox;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@There is increasing interest in having users' access to the Web mediated
by a proxy, specifically one that provides a filtering or transformation
service that affects ALL content presented to the user.  For example, we
have developed a proxy server that performs on-the-fly, lossy
compression on inline images in order to decrease user download time,
and lets the user request high-quality versions of any degraded images.

[screenshot of two pages side-by-side: proxied and unproxied] 

In this screen shot you can see a typical page as delivered by our
service: the browser on the left is accessing the page directly from the
server, while the browser on the right is accessing the page through our
transformational proxy service.  The proxied version illustrates this
lossy compression;  image quality is degraded, but the content on the
page is reduced by a factor of 3-7 in bytes.

Each user of our service can tune her desired level of compression
independently, as well as request the original versions of
lossily-compressed images.  Since our goal is to enhance the overall
user experience of Web surfing, the user interfaces that provide access
to this customization functionality must be flexible enough to allow
continuous tuning of the service while surfing, yet unobtrusive enough
not to compromise the "look and feel" of Web pages.

We refer to this problem as ORTHOGONAL USER INTERFACE EXTENSIONS:
ORTHOGONAL because the user interface controls behavior that is
independent of any particular Web site's content, and EXTENSION because
we are effectively extending the interface to the Web browser--and
therefore to the Web itself--as seen by the user.

[screenshot with HTML refinement-asterisks and TS logo]

We have experimented with three client-side technologies to implement
the service's user interface: HTML decoration, Java, and JavaScript.
The HTML decoration interface is simple: when a page is visited through
the proxy, HTML annotations are added next to each inline image,
permitting the user to retrieve the original image.  We call this
process of recovering the original "image refinement". 

In addition, a button that gives access to a control panel is inserted
at the top of every page.  This button is actually just a link, and the
control panel is just an HTML form.

       [click on the TS icon]

The control panel allows the user to set the compression aggressiveness,
temporarily disable the service, control whether the button is
inserted on each page, get Help on using the service, and submit
comments and bug reports.

         [change quality to "higher" and turn off the button]

Here we are reducing the aggressiveness of image compression, and
disabling the Control Panel icon.  As you can see, when we reload the
last page visited, the quality of images is higher, and the Control Panel
icon is no longer visible.

 [pause recording]

We have also experimented with a Java "toolbar" that appears at the top
of each page and provides quick access to common functions, such as
changing compression aggressiveness and selectively disabling the
service.

  [change quality on toolbar, then reload; disable proxy, then reload]

As with HTML decoration, our proxy service inserts on-the-fly the code
necessary to display the applet on each page visited.  Users with
Java-capable browsers can use the toolbar rather than having to visit a
separate page in order to control their settings.  Notice that the
image-refinement links are still being inserted in the HTML, and behave
as they did before.

[pause recording]

Finally, we have experimented with JavaScript as a way to allow images
to be refined "in place" on the original page.  As you can see, another
button called "Refine All" has been added at the top of each page.

       [click the button]

Clicking this button causes all the images on the page to be refined "in
place", preserving the page layout and the user's visual context.


@
