head	1.2;
access;
symbols
	V1_1_2:1.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	97.02.26.09.31.37;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.02.05.23.02.14;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.14;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@cleaned up and added docs for 1.1.2 ftp release
@
text
@#
#  Decision function for inline jpegs. Currently all it does is convert to GIF,
#  and possibly do some color quantization or graymapping.
#  $Id: jpeg.pl,v 1.1.1.1 1997/02/05 23:02:14 fox Exp $

=head1 NAME

jpeg.pl - JPEG distillation decision function    

=head1 SYNOPSIS

  $args = &jpeg::decide_distill($resp,$prefs,$cli);

=head1 DESCRIPTION

This is another example of a distillation decision function. For a
heavily commented example, see L<gif>.

The main difference here is that the JPEG distiller is an external
program, not a distillation server, so what is returned is a command
line for doing the distillation, rather than the args to pass to the
distillation server.  The cjpeg and djpeg programs are used for JPEG
distillation; look at their man pages to see what command line arguments
they take.

Things to notice:

=over 3

=item *

Pythia expects a distiller to generate the MIME type
of the output produced, followed by newline, followed by the binary data
resulting from distillation; so you can see that the command line
generated by this decision function has an "echo" statement to generate
the MIME type before dumping the distilled data into a file.

=item *

Note JPEG's are "distilled" by converting them to GIFs!  This is why you
want to be able to specify the MIME type of the output.  You could
easily change the command line so that JPEG's stay JPEG's, and change
the "echo" argument to output "image/jpeg" instead.

=item *

Pipelines are allowed in the distiller command line.

=item *

The escape sequences %b, %i, %o are part of the command line; they are
replaced with the path to the Pythia distiller binaries subdirectory
(probably "../proxy_bin" for you), the input file name, and the output
file name.  Pythia generates temporary files in a temporary directory
for these things, and cleans up the files when it exits or when
distillation completes.  There are other escape characters too; see
L<services> and look in F<pythia.cf> for examples.

=item *

Distillation may take place even if the source image is small enough.
In particular, if the client profile indicates that the client is
grayscale-only, or the user preferences profile indicates that the user
has chosen grayscale-only, grayscale conversion is done without any
accompanying downscaling.  This is an example of adapting to client
constraints independently of network variation.

=cut

package jpeg;

sub decide_distill {
    my($resp) = shift @@_;
    my(%prefs) = %{shift @@_};
    my(%client) = %{shift @@_};              # client characteristics

    my($data) = $resp->content;
    my($path) = shift @@_;
    my($arg) = shift @@_;
    if ($client{i} < length($data)) {
        my $gray = ($client{g} || ($prefs{c} ne 'c') ? "-grayscale" : "");
        # if client has exactly 8 grays, quantize to jpeg.cmap.  otherwise, if
        # client has <256 colors, quant to that many.  Otherwise no quant.
        my $ncols = ( ($client{c} == 8 && $client{g})
                     ? "-map jpeg.cmap"
                     : ($client{c} < 256
                        ? "-quantize $client{c}"
                        : ""));
        return ("/bin/echo image/gif && %b/$path -gif -fast -scale 1/2 $gray $ncols %i");
    } elsif ($client{"g"} || ($prefs{c} ne 'c')) {
        # at least grayscale conversion required
        return ("/bin/echo image/gif && %b/$path -gif -fast -grayscale %i | %b/cjpeg");
    } else {
        return undef;
    }
}

1;
@


1.1
log
@Initial revision
@
text
@d4 65
a68 1
#  $Id: jpeg.pl,v 1.5 1996/09/09 23:04:18 fox Exp $
d81 1
a81 1
        my $gray = ($client{g} ? "-grayscale" : "");
d90 1
a90 1
    } elsif ($client{"g"}) {
d92 1
a92 1
        return ("/bin/echo image/gif && %b/$path -gif -fast -grayscale %i | %b/cjpeg %i");
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
