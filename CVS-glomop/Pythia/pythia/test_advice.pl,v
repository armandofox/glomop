head	1.1;
branch	1.1.1;
access;
symbols
	V1_1_2:1.1.1.1
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#
#  simple test program to generate "advice" packets
#  enter a line of the form:  op,value
#  where op is one of "b" (bandwidth change notify) or "l" (latency change
#  notify)  and value is a numeric value
#
#  this program will construct an appropriate UDP packet and send it to the
#  proxy.  change the first two lines below to indicate where the proxy is
#  running (host & port).

use POSIX 'uname';

$host = 'localhost';
$port = 9542;

# change these to other defaults if you want

$default_age = 1;
$default_ci = 0.0;                          # 95% conf interval

require "./gm_sock.pl";
$sock = connectsock gm_sock $host,$port,"udp"
    or die "connectsock: " . &gm_sock::lasterror;

# get our own IP address

$sockaddr_in = gethostbyname((&uname)[1])
    or die sprintf( "can't gethostbyname %s: $!", (&uname)[1]);

while(1) {
    print STDERR "op,value = ";
    chomp($x = <STDIN>);
    ($op,$val) = split(/,/, $x);
    $opcode =
        ($op eq 'b'? 2 : $op eq 'l' ? 3 : die "Bad opcode, must be b or l");
    $pkt = $sockaddr_in . pack("N N f N", $opcode, $default_age, $default_ci,
                               0+$val);
    $sock->writesock($pkt)
        or warn "Send failed: " . $sock->lasterror();
}
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
