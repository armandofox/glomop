head	1.2;
access;
symbols
	V1_1_2:1.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	97.02.26.09.31.43;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@cleaned up and added docs for 1.1.2 ftp release
@
text
@# $Id: register.html.pl,v 1.1.1.1 1997/02/05 23:02:15 fox Exp $

=head1 NAME

register.html.pl - user prefs registration form

=head1 SYNOPSIS

 @@checks = &make_checkbuttons_from_prefs($pfs,@@keys);
 @@radio = &make_radiobutton_group_from_prefs($pfs,@@values);

 $page = &regpage_with_prefs($ipaddr);

=head1 DESCRIPTION

This file contains functions that support creating and delivering the
HTML form the user can use to change his preferences (see L<prefs.pl>).
To add a new modifiable preference item, you should think of a
one-letter name for it, add it to F<pythia.cf>, modify the code
in L</regpage_with_prefs> to construct an HTML form that allows the user
to set this pref, and modify the code in L</register::init> (the form
template).

Most of the functions here are in package 'main'.

=cut

package main;

#
#  Given an IP addrs (or empty string), return an instance of the registration
#  page customized to that client's current preference, or some default set if
#  client unknown.
#

=head2 @@checks = &make_checkbuttons_from_prefs($pfs,@@keys);

Given a reference to the user prefs hash (see L<prefs.pl>), and a list
of one-letter pref names that should be expressed as checkbuttons on the
HTML form, create HTML form text that will render the buttons.  For
example, a @@keys argument of ("s", "x", "a") will look for three
preference items named "s", "x", "a" in the user prefs, and construct
a checkbutton for each whose initial value is "on" if the user pref
value for the corresponding letter is "on", otherwise "off".

Returns the HTML text used to insert the buttons into the form.

=cut


sub make_checkbuttons_from_prefs {
    my ($pfs,@@keys) = @@_;
    my @@checkbuttons;
    for (@@keys) {
        push(@@checkbuttons, ($pfs->{$_} =~ /on/i ? "checked" : ""));
    }
    return @@checkbuttons;
}

=head2 @@radio = &make_radiobutton_group_from_prefs($pfs,@@values);

Similar in spirit to L</make_checkbuttons_from_prefs>.  Assumes that
the one-letter names listed in @@values are different choices for a
radiobutton group, and that at most one of them can be selected.  The
selected one, if any, should have the value "checked".  If none is
selected, picks the first one arbitrarily.

Returns the HTML text used to insert the radiobutton group.

=cut

sub make_radiobutton_group_from_prefs {
    my ($pfsvalue,@@values) = @@_;
    my @@radio;
    my $checked_one;
    for (@@values) {
        push(@@radio, ( /$pfsvalue/i ? $checked_one = "checked" : ""));
    }
    # insure at least one radiobutton is checked.
    $radio[0] = "checked" unless $checked_one;
    return @@radio;
}

#--------------------------------------------------------------------------
#   NAME: do_login
#   DESCRIPTION: Return the login page for client
#   ARGS: none
#   RETURNS: HTML string
#   SIDE EFFECTS: none
#   ASSUMPTIONS: none
#---------------------------------------------------------------------------

sub do_login {
    return &html_wrap("",
                      sprintf($main::Const{LoginPage}, $main::Const{LoginURL}),
                      "Pythia Login");
}

#--------------------------------------------------------------------------
#   NAME: do_register - return prefs change page suitable for client
#   DESCRIPTION: returns prefs change form for client, with default values filled
#       in corresponding to client's current prefs 
#   ARGS: the connection object (so the IP addr of the client can be extracted
#       for prefs lookup)
#   RETURNS: HTML string
#   ASSUMPTIONS: none
#---------------------------------------------------------------------------

sub do_register {
    # Send the registration page. If this is a client we know about (based on
    # IP addr), fill in client's prefs first - a nice personal touch
    my $con = shift;
    my($ipad) = $con->{"IPaddr"};
    local($html) = &regpage_with_prefs($ipad);
    return &html_wrap("", $html, "Change Prefs");
}

=head2 $page = &regpage_with_prefs($ipaddr);

Returns the HTML text corresponding to a registration page for the user
at $ipaddr.  In other words, the form is filled in with the current
values from that user's prefs.

The way this works is that it uses the "template" HTML defined in
L</register::init>. That HTML has various printf() escapes embedded in
it.  This function substitutes those escapes with text generated by
calling L</make_checkbuttons_from_prefs> and
L</make_radiobutton_group_from_prefs> above.  The best way to understand
it is to Use The Source, Luke.

=cut

sub regpage_with_prefs
{
    local(%pfs) = &main::get_prefs(shift @@_);

    # If this is not a user that we know about, make them login first.  We
    # "know about"  a user if we can locate a prefs profile for the given IP
    # address.  This lookup will fail (thereby requiring a login) if this IP
    # address has never been seen before, or if its entry in the prefs file is
    # currently inactive.  However, if a different user is now using this IP
    # address, we'll end up setting that person's prefs.  Not much to be done
    # about this.

    return &do_login unless (defined $pfs{'u'});

    # for the checkbuttons and radiobuttons, create lists in which only the
    # selected elements have value "checked", others have the value
    # empty-string.  These will be used in the sprintf.
    
    local(@@segment) =
        &make_checkbuttons_from_prefs(\%pfs,"s");
    local(@@color_or_gray) = 
	&make_radiobutton_group_from_prefs($pfs{'c'}, 'c', 'm');
    local(@@imgmap) =
        &make_radiobutton_group_from_prefs($pfs{'m'},'s','i','u');
    local(@@refinement) =
        &make_radiobutton_group_from_prefs($pfs{'q'}, 'o', 'b');
    local(@@bits_pixel) =
	&make_radiobutton_group_from_prefs($pfs{'b'}, '1','2','4','8');
    my($html) = sprintf($Const{RegistrationPage},
                        sprintf($Const{GenerateRegisterURL}, $pfs{'u'}),
                        @@segment,
			@@color_or_gray,
			@@bits_pixel,
                        $pfs{i},
                        @@imgmap,
                        @@refinement,
                        $pfs{u}
                        );
    return $html;
}
         
sub register::init {

$Const{RegistrationPage} = <<EndOfRegistrationPage;

<pragma nocache>
<!-- URL to submit -->
<form action="%s" method="GET">

<!-- checkbutton: 's' -->
<input %s type="checkbox" name="s" value="on">
Segment pages

<!-- radiobutton group: 'c' (2 values) -->
<br><b>Display type:</b>
<input %s type="radio" name="c" value="c"><strong>C</strong>olor
<input %s type="radio" name="c" value="m"><strong>M</strong>onochrome

<!-- radiobutton group: 'b' (4 values) -->
<br><b>Bits/pixel:</b>
<input %s type="radio" name="b" value="1"><strong>1</strong>
<input %s type="radio" name="b" value="2"><strong>2</strong>
<input %s type="radio" name="b" value="4"><strong>4</strong>
<input %s type="radio" name="b" value="8"><strong>8</strong>

<!-- text: maximum allowable latency for one inline img -->
<br><b>Max wait time (seconds) to load one inline image:</b>
<input type="text" name="i" value="%d">

<!-- radiobutton group: 'm' (3 values) -->
<br><b>Server-side Imagemaps:</b>
<input %s type="radio" name="m" value="s"><strong>S</strong>caled
<input %s type="radio" name="m" value="i">Om<strong>i</strong>t (fastest)
<input %s type="radio" name="m" value="u"><strong>U</strong>nmodified
<br>

<!-- radiobutton group: 'q' (2 values) -->
<br><b>Image Refinement:</b>
<input %s type="radio" name="q" value="o"><strong>O</strong>riginal
<input %s type="radio" name="q" value="b"><strong>B</strong>est for this device
    
<!-- user name -->
<input type="submit" value="Set Prefs for %s">    
</form>
EndOfRegistrationPage


$main::Const{LoginPage} = <<EndOfLoginPage;

<pragma nocache>
<form action="%s" method="GET">
<b>User name:</b>
<input type="text" name="u" value="" size="16">
<input type="submit" value="Login to Pythia">
</form>
EndOfLoginPage


}

1;

@


1.1
log
@Initial revision
@
text
@d1 26
a26 1
# $Id: register.html.pl,v 1.10 1996/11/17 01:50:23 fox Exp $
d36 15
d60 12
d117 15
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
