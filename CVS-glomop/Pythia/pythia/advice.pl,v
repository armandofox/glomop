head	1.2;
access;
symbols
	V1_1_2:1.2
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	97.02.26.09.31.31;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.15;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@cleaned up and added docs for 1.1.2 ftp release
@
text
@#
#  Interpret UDP datagrams containing advice regarding network
#  characteristics.  At present, the advice is stored in the prefs profiles.
#  We have the following entries:
#
#  w  bandwidth in bits/sec
#  l  roundtrip latency in msec
#

=head1 NAME

advice.pl - receive and process external event notifications

=head1 SYNOPSIS

=head1 DESCRIPTION

This page describes how to notify Pythia (via UDP) of external events
that can cause it to change the preference profile associated with a
particular user.  This mechanism can be used for automatic adaptation,
since each distillation request is accompanied by the latest version of
the user profile.  If the profile encodes such things as the user's
current network bandwidth, that information can be used in deciding how
much distillation to do.

Pythia notifications have to be formatted in a particular way.  The file
F<advice.h> is included as an example of how to format the UDP packets,
and the program F<gen_advice.pl> shows how to construct and send the
packets using Perl.

A packet consists of five fields:

=over 3

=item *

IP address (4 octets) of client to which the notification applies.  There is
no way to say "all clients", but the code in this file can be modified
to ignore this field.

=item *

Opcode (see below); describes what property is being reported on (int).

=item *

Age of this information, in milliseconds; to be supplied by sender (int).

=item *

Half-width of the 95% confidence interval for the data (float).

=item *

The data itself (float).

=cut

=head1 OPCODES

Opcodes are represented in one octet.  The high-order bit indicates
whether the opcode is making an inquiry or answering an inquiry; the
remaining 7 bits are the opcode itself.  For example, an opcode field of
0x02 means that this message is asking "What is the current bandwidth?"
while 0x82 means "The current bandwidth is as follows...."  For
"interrogative" packets, the data values are ignored, and only the
client, age and opcode fields are valid.

Pythia only expects to receive "answer" packets, and the only opcodes
currently recognized are T<WHATIS_CURRENT_BANDWIDTH> and
T<WHATIS_CURRENT_LATENCY>; the remaining opcodes and "interrogation"
capability are present because this mechanism is part of a larger
notification system used in the Daedalus wireless network architecture.

=head2 OPCODE LIST (Lower 7 bits)

 0x1              WHATIS_CURRENT_PER  (packet error rate)
 0x2              WHATIS_CURRENT_BANDWIDTH  (bits/sec)
 0x3              WHATIS_CURRENT_LATENCY (1/2 roundtrip time in millisecs)
 0x4              WHATIS_POWER_TOSEND (power in watts to send a packet)
 0x5              WHATIS_POWER_TORECV (power in watts to receive a packet)
 0x6              WHATIS_COST_TOSEND (cost in millicents to send a packet)
 0x7              WHATIS_COST_TORECV (cost in millicents to receive a packet)
 0x8              WHATIS_POWER_TURNON (power in watts to turn on NI)
 0x9              WHATIS_POWER_TURNOFF (power in watts to turn off NI)
 0xA              WHATIS_MAX_PACKETSIZE (maximum MTU payload for link)
 0xB              WHATIS_BEST_PACKETSIZE (optimal MTU payload for link)
 0xC              REGISTER_BANDWIDTH_LESSTHAN (wake me up if bandwidth
                                                 falls below this value)
 0xD              REGISTER_BANDWIDTH_MORETHAN (wake me up if bandwidth
                                                 rises above this value)
 0xE              REGISTER_LATENCY_LESSTHAN 
 0xF              REGISTER_LATENCY_MORETHAN 
 0x10             REGISTER_PER_LESSTHAN 
 0x11             REGISTER_PER_MORETHAN 

=cut


package advice;

$advice::PacketFormat = "CCCC N N f N";

#  BUG::the following array should be constructed on the fly by reading the
#  advice.h file, rather than being 'hardwired' here.

@@Opcodes = qw(DUMMY_OP
              WHATIS_CURRENT_PER
              WHATIS_CURRENT_BANDWIDTH 
              WHATIS_CURRENT_LATENCY 
              WHATIS_POWER_TOSEND 
              WHATIS_POWER_TORECV 
              WHATIS_COST_TOSEND 
              WHATIS_COST_TORECV 
              WHATIS_POWER_TURNON 
              WHATIS_POWER_TURNOFF 
              WHATIS_MAX_PACKETSIZE 
              WHATIS_BEST_PACKETSIZE 
              REGISTER_BANDWIDTH_LESSTHAN 
              REGISTER_BANDWIDTH_MORETHAN 
              REGISTER_LATENCY_LESSTHAN 
              REGISTER_LATENCY_MORETHAN 
              REGISTER_PER_LESSTHAN 
              REGISTER_PER_MORETHAN 
              );

sub opcode {
    my $op = shift;
    return @@advice::Opcodes[$op & 0x7f] || sprintf("unknown (%d)", $op);
}

#  Decode the packet, returning the client IP address (as string), the opcode
#  (int), age (int), confidence interval (float), and data.  The type of the
#  returned data depends on the particular opcode.

sub decode_pkt {
    my $pkt = shift;

    my ($a1,$a2,$a3,$a4,$op,$age,$confidence,$data)
        = unpack($advice::PacketFormat, $pkt);
    my $addr = join('.', $a1,$a2,$a3,$a4);
    # remember, top bit of opcode is the "reply mask"
    return ($addr, $op & 0x7f, $age, $confidence, $data);
}
    
sub do_advice {
    my ($addr, $op, $age, $confidence, $data) = &decode_pkt(shift @@_);

    # for network bw/latency notifications, just set the appropriate pref.
    my $opcode = &opcode($op);
    &main::debug('advice',
                 sprintf("%s says: %s changes to %lu +- %.2f\n",
                         $addr, $opcode, $data, $confidence));

    if ($opcode eq 'WHATIS_CURRENT_BANDWIDTH') {
        &main::set_one_pref($addr, "w", $data);
        &main::set_one_pref($addr, "a", time);
    } elsif ($opcode eq 'WHATIS_CURRENT_LATENCY') {
        &main::set_one_pref($addr, "l", $data);
        &main::set_one_pref($addr, "a", time);
    }
}

#
# given a user prefs structure (which encodes bandwidth and latency info as
# received by the above routines) and a client characteristics structure (which
# may encode a default bandwidth for the client, in the absence of
# notifications), derive an estimate of the current bandwidth and latency.
#

=head2  ($bw,$lat) = &advice::estimate_bandwidth_latency($prefs,$cli);

Given the user prefs (see L<prefs>) and client device characteristics
(see L<client>), estimate the current bandwidth and latency of the
connection to this user, as recorded by the most recent advice packets.
If no advice has been seen about this user, make a default assumption
based on the client characteristics if possible.

Returns a list of two items: the current bandwidth  in bits per second,
and the current latency in milliseconds.

=cut

sub estimate_bandwidth_latency {
    my ($prefs, $client) = @@_;

    my $bw = 14400;
    my $lat = 0;                            # initial estimates

    if (defined $prefs->{'w'}) {
        # use estimate from user prefs
        &main::debug("advice",
                     sprintf("Using BW advice value %d (%s seconds old)",
                             $prefs->{'w'},
                             ($prefs->{'a'}
                              ? time - $prefs->{'a'}
                              : "<??>")));
        $bw = $prefs->{'w'};
    } elsif (defined $client->{'b'}) {
        &main::debug("advice", "Using client-default bandwidth ".
        $client->{'b'});
        $bw = $prefs->{'b'};
    } else {
        &main::debug("advice", "Bandwidth unknown, assuming 14400");
        $bw = 14400;
    }

    # latency

    if (defined $prefs->{'l'} && defined $prefs->{'a'}) {
        &main::debug("advice",
                     sprintf("Using lat advice value %d (%d seconds old)",
                     $prefs->{'l'}, time - $prefs->{'a'}));
    } else {
        &main::debug("advice", "Using lat default value $lat");
    }
    
    return ($bw,$lat);
}
       
1;
@


1.1
log
@Initial revision
@
text
@d10 90
d170 13
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
