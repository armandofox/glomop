head	1.1;
branch	1.1.1;
access;
symbols
	V1_1_2:1.1.1.1
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.02.05.23.02.14;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.14;	author fox;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#! perl

#
# this program can be used to generate "test packets" for the advice
# notification.
#

require "./advice.pl";
require "./gm_sock.pl";

package advice;
%Opcodes = ();
$n = 0;
for ( @@advice::Opcodes ) {
    $Opcodes{$_} = $n++;
}

sub main {
    &usage if $#ARGV < 5 or $#ARGV > 6;
    ($pythia,$ip,$op,$age,$conf,$data,$rep) = @@ARGV;
    @@pythia_ip = split(/:/,$pythia);
    @@ip = split(/\./, $ip);
    $op = $Opcodes{$op} || die "Bad opcode name $op";

    $pkt = pack($advice::PacketFormat, @@ip, 0+$op, 0+$age, 0.0+$conf, 0+$data);

    # open udp socket

    $sock = connectsock gm_sock @@pythia_ip, "udp"
        or die "Connect $pythia: " . &gm_sock::lasterror();
    do {
        $sock->writesock($pkt);
        sleep($rep);
        warn "Packet sent to localhost:9542\n";
    } while $rep;
}

sub usage {
    print STDERR <<EndOfHelp;
Usage: $0  88.88.88.88 99.99.99.99 OPCODE age confidence data [repeat]
    88.88.88.88:8888  IP address and UDP port where Pythia is listening
                 (port is usually 9542)
    99.99.99.99  IP address of the client to which advice applies
    OPCODE       Opcode name, e.g. WHATIS_CURRENT_BANDWIDTH
    age          Age of this info in msecs (unsigned long)
    confidence   Half-width of 95% confidence interval (as float)
    data         Data value (unsigned long)
    repeat       Repeat interval in seconds (omitted means don't repeat)
EndOfHelp
}

&main;
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
