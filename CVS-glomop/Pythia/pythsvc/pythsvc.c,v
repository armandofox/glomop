head	1.1;
branch	1.1.1;
access;
symbols
	V1_1_2:1.1.1.1
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	97.02.05.23.02.17;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.17;	author fox;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 *  pythsvc.c $Id: pythsvc.c,v 1.3 1996/09/10 01:16:54 fox Exp $
 */

#include "pythia.h"
#include "socklib.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <string.h>

static void announce(char *av[]);
static void mainloop(void);

/*
 *  Where to reach the proxy for registration and deregistration
 */
static char *gProxyhost;
static char *gProxyport;
/*
 *  port we are listening on, assigned at connect-to-proxy time
 */
static char *gListenport;         
/*
 *  Socket we accept connections on
 */
static int gListensock, gRealsock;
/*
 *  Service name as announced to proxy, number of connections
 */
static char *gSvcname;
static int gNumconn = 0;

static void quit(int);
static void gasp(void);

int main(int argc, char *argv[]) 
{
    int i;
    
    if (argc < 4) {
        fprintf(stderr, "Usage: %s listenport proxyhost proxyport\n",
                argv[0]);
        exit(1);
    }
    /*
     *  Announce our presence to the proxy.
     */
    announce(argv);
    /*
     *  Arrange to quit gracefully.
     */
    signal(SIGCHLD, SIG_IGN);
    signal(SIGPIPE, quit);
    signal(SIGINT, quit);
    signal(SIGHUP, quit);
    signal(SIGTERM, quit);
    /*
     *  Listen for incoming request.
     */
    if ((gListensock = slisten(gListenport)) < 0) {
        perror("slisten");
        quit(1);
    }
    DEBUG((stderr, "Listening on %s\n", gListenport));
    i = 1;
    if (setsockopt(gListensock, SOL_SOCKET, SO_REUSEADDR, (char*)(&i),
                   sizeof(i))
        < 0) {
        perror("setsockopt listensock");
        quit(1);
    }
    DEBUG((stderr, "Calling svc_init\n"));
    svc_init(argc, argv);
    DEBUG((stderr, "Calling mainloop\n"));
    mainloop();
    exit(0);
}

void mainloop(void)
{
    FILE *fp;
    int waitstat;
    static struct linger li;
    static int op;

    li.l_onoff = 1;
    li.l_linger = 100;

    while (1) {

        while (waitpid((pid_t)(-1), &waitstat, WNOHANG) > 0)
          wait(NULL);

        DEBUG((stderr, "Waiting for connection\n"));
        if ((gRealsock = saccept(gListensock)) < 0) {
            perror("saccept");
            quit(1);
        }
        (void)setsockopt(gRealsock, SOL_SOCKET, SO_LINGER,
                         (char *)(&li), sizeof(li));
        gNumconn++;
        
        DEBUG((stderr, "Doing fdopen\n"));
        if ((fp = fdopen(gRealsock, "r+")) == NULL) {
            perror("fdopen");
            quit(1);
        }

        /*
         *  grab the first byte, which represents the "opcode" for
         *  this request.
         */

        op = getc(fp);
        getc(fp);               /* consume a space */
        DEBUG((stderr, "Op is %c\n", (char)op));
        switch(op) {
          case EOF:
            DEBUG((stderr,"EOF seen while reading opcode\n"));
            quit(1);
            break;
          case 'k':
            DEBUG((stderr, "committing suicide\n"));
            quit(-1);
            break;
          case 'd':
          default:
            if (fork()) {
                /* this is the parent */
                close(gRealsock);
                break;
            } else {
                /* this is the child */
                DEBUG((stderr, "Calling main\n"));
                svc_main(fp);
                DEBUG((stderr, "Flush & close\n"));
                fflush(fp);
                shutdown(gRealsock, 2);
                fclose(fp);
                exit(0);
            }
        }
    }
}

void announce(char *av[])
{
    int i;
    int proxysock;
    char msg[255];
    
#if 0
    /*
     *  Removing trailing ".arch" from program name (if there) to form
     *  service name. 
     */
    gSvcname = av[0];

    i =  strlen(gSvcname);
    while (i-- > 0) {
        if (gSvcname[i] == '.') {
            gSvcname[i] = '\0';
            break;
        }
    }
    /*
     *  Get rid of initial path crapola
     */
    i = strlen(gSvcname);
    while (i > 0) {
        if (gSvcname[i] == '/') {
            strcpy(gSvcname, gSvcname+i+1);
            break;
        }
        i--;
    }
#else

    gSvcname = gMimeTypeSubtype;

#endif

    /*
     *  Announce our presence.
     */

    gListenport = av[1];
    gProxyhost = av[2];
    gProxyport = av[3];
    
    DEBUG((stderr, "Connecting to %s:%s\n", gProxyhost, gProxyport));
    if ((proxysock = sconnect(gProxyhost, gProxyport)) < 0) {
        perror("sconnect proxy");
        exit(1);
    }
    sprintf(msg, "svcadd %s %s\r\n", gSvcname, gListenport);
    DEBUG((stderr, "Announcing with '%s'\n", msg));
    write(proxysock, msg, (size_t)strlen(msg));
    i = 1;
    if (setsockopt(proxysock, SOL_SOCKET, SO_REUSEADDR,  (char*)(&i),
                   sizeof(i))
        < 0) {
        perror("setsockopt proxysock");
        quit(1);
    }
    shutdown(proxysock, 2);
    close(proxysock);
}

void quit(int sig)
{
    DEBUG((stderr, "Stopping server and dying\n"));
    svc_stop();
    /* fprintf(stderr, "Accepted %d connections\n", gNumconn); */
    shutdown(gListensock, 2);
    close(gListensock);
    shutdown(gRealsock, 2);
    close(gRealsock);
    if (sig != -1)
      gasp();
    exit(0);
}

void gasp(void)
{
    int proxysock;
    char msg[255];
    
    /* throw up the white handkerchief */
    if ((proxysock = sconnect(gProxyhost, gProxyport)) < 0) {
        DEBUG((stderr, "conn refused on %s:%s\n", gProxyhost,
               gProxyport));
        exit(1);
    }
    sprintf(msg, "svcdel %s %s\r\n", gSvcname, gListenport);
    write(proxysock, msg, (size_t)strlen(msg));
    shutdown(proxysock,2);
    close(proxysock);
}

    
@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
