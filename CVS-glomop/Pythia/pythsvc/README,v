head	1.1;
branch	1.1.1;
access;
symbols
	V1_1_2:1.1.1.1
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.02.05.23.02.17;	author fox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.02.05.23.02.17;	author fox;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@How to make a Pythia service:

The service should be written as a function that will be invoked once
per HTTP request, as a forked process.  If you use global variables, be
aware that they will NOT automatically be reinitialized for each
request.

You need to provide functions that match the following prototypes:

    extern void svc_init(int ac, char **av);

Called once only (NOT once per request); set up one-time global state if
necessary.  Argc and argv reflect the command line used by Pythia to
start the service.

    extern void svc_main(FILE *fp);

fp will point to an already-open input stream on which Pythia will send
you whitespace-separated args.  Use fscanf or something similar to read
from the stream.  The pythia.cf file can be used to configure which args
will be sent.

    extern void svc_stop(void);

Called when Pythia is about to shut down.  After this function exits,
the main server process will be gracefully killed.

HOW TO WRITE svc_main

Avoid writing to stdin and stdout if possible.  stderr will be
redirected either to a log file or /dev/null, so it's ok to write to
that.

Use fscanf or something similar to read arguments and data from the
stream pointer.  When you're ready to generate output, call
READY_TO_WRITE(fp, mime_type) where fp is the stream pointer and
mime_type is a string describing the content-type that the client will
receive (for example, "image/gif").  Then start using fwrite or fprintf
to generate the output.

When svc_main is done, it should simply return (it should NOT call
exit() or anything like that).

To report an error, say ERROR(fp, errstr) where errstr is a string
containing some informative description of what went wrong.  This macro
will NOT terminate svc_main, so if you want to terminate after the
error, you must do an explicit return.

COMPILING

Include "pythia.h" in the file containing svc_main and the above macro
calls.  Use the Makefile in this directory to create an executable.
Note that libpythsvc contains the main() function; pythia.h creates a
dummy reference to this function so the linker will find it.

TESTING






@


1.1.1.1
log
@New, distribution version of Pythia with a real directory structure and
real documentation
@
text
@@
