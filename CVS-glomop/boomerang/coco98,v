head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     98.11.08.11.33.24;  author daw;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.11.08.11.33.24;  author daw;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@Let
c, S be fixed and public
K = (K_1,...,K_8) be a 256-bit key
  [with (K_7,K_8) \ne 0]
k_i = \sum_{t \in T_i} K_t
each T_i is fixed and public
  [see below for definition]
\phi(x) = x + 256 S(x mod 256) mod 2^32
g(x) = ROL(\phi(x), 11) + c mod 2^32
f_i(x) = \phi(g(x \xor k_i))
F_i((x,y)) = (y, x \xor f_i(y))
E = Z_2[x]/(x^{64} + x^{11} + x^2 + x + 1) ~ GF(2^{64})
M((x,y)) = ((x,y) \xor (K_5,K_6)) * (K_7,K_8) \bmod E
with the sets T_i defined as
i  |	1	2	3	4	5	6	7	8
T_i|	{1}	{1,3}	{1,3,4}	{1,4}	{2}	{2,3}	{2,3,4}	{2,4}

Then COCONUT98 is 4 rounds of Feistel
network with F_1,..,F_4, followed by M,
followed by 4 more rounds of Feistel
with F_5,..,F_8.

Decryption can be performed with the key
K^{-1} = (K_2 \xor K_4, K_1 \xor K_4, K_3, K_4,
	  K'_5, K'_6, K'_7, K'_8)
where
(K'_5,K'_6) = (K_5,K_6) * (K_7,K_8) \bmod E
(K'_7,K'_8) = 1/(K_7,K_8) \bmod E.

Here is an equivalent description for
COCONUT98.  Let
N((x,y)) = (x \xor K_1 \xor K_2, y \xor K_1 \xor K_2)
The equivalent algorithm: 4 rounds
of Feistel network with F_1,..,F_4,
followed by M, then by N, then by 4
more rounds of Feistel with F_1,..,F_4,
and finally by N again.
@


1.1.1.1
log
@
@
text
@@
