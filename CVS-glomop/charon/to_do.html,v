head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	96.08.22.16.34.21;	author gribble;	state Exp;
branches;
next	1.3;

1.3
date	96.08.22.16.11.55;	author gribble;	state Exp;
branches;
next	1.2;

1.2
date	96.07.28.05.13.25;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.07.15.00.36.02;	author gribble;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Minor bugfixes
@
text
@<html>
<head>
<title>Charon to do</title>
</head>

<body>

<h1>Things to fix</h1>
<UL>
     <LI> broaden scope of proxy infrastructure introduction.  Subtly
	  change emphasis from <i>not reimplementing full Kerberos on
          PDA</i> to <i>accessing proxied services securely</i>.

     <LI> related work - more of it
	  (<a href="http://www.cs.berkeley.edu/~gribble/glomop/summaries/3rd_party_auth.html">Third-Party Auth in IFS</a>)

     <LI> add fact that we must look in TGT packets (msg 4) and in
	  service packets (msg 8) sent to the client to verify that the
	  service name+instance+realm is correct after decryption.  This
	  fixes the weakness mentioned by the reviewer
	  but adds complexity to the client.

     <LI> add &quot;things the client-side does not have to do&quot;
          list to the Client-Side Implementation on Sony MagicLink
          section.  Things to go in this list include Kerberos
          handshakes with KDC, TGS, and services directly, TCP/IP, 
          manage ticket files, plus the interaction with the service
          itself (benefit of proxy architecture, not Charon)

     <LI> clarify that we have reduced costs of kerb *implementation* but that
	  the *functionality* of combined client & porxy is same as full kerb
	  
     <LI> talk about subversion of proxy: could plug by adding checking to
	  client (possibly ugly), or simply treat this the same as
	  subverted krlogind (ie all hope is lost).  somewhere we already
	  mentioned which entities in a kerb infrastruc are assumed safe if
	  the world is to continue to exist; i think this eplan. is
	  consistent with saying that you trust gmproxyd as much as
	  krlogind, but sit's subejct to same attacks (filesystem, nfs,
	  etc)

     <LI> rlogin client - future work for journal paper, implement for
	  conference

  <li> add new section before 1.2: motivation for proxied services, why they
       are likely to become ubiquitous in mobile computing.  we can have plenty
       of refs for such a section, and it gives a nice slot into which to drop
       the motivation for charon.

  <li> in "Why Kerberos" sec: clarify that we are NOT security experts and
       therefore NOT changing the protocol

  <li> how is charon hsk differnt from kerberos service request?
       how is charon service request diff from kerberos service request,
       other than caching of the original TGT?
       haven't we just reimplemented "idealized kerberos" but using a
       simpler protocol and simpler data structures?  The answer is yes,
       but this has significant practical implications; it relieves
       client of at least the following:
       <ul>
         <li> file system/ticket management
         <li> TCP and multiple connections
         <li> service protocols for applications (eg kpop) - provided by
              proxy
         <li> realm lookup, etc.
       </ul>

  <li> how is this different from just securely giving a proxy
       authenticators and tickets (and possibly session keys)?  It's
       not, but in a non-proxied world you have no need to do it. Charon
       is most valuable in a proxied world, and we expect the mobile
       world to move in that direction.
  <li> Why not to relinquish Kc,tgs: prevents proxy from doing damage if
       subverted after you disconnect.
	  
</ul>

<h1>Reviewer's comments</h1>
<UL>
     <LI> &quot;I found the whole story and its presentation to be quite
	  naive relative to prior work in the area of authentication.&quot;

     <LI> &quot;The author's repeatedly claim to have displaced complexity
	  from the client to the proxy and that Charon relieves the mobile
	  client of Kerberos protocol processing.  These claims are not
	  substantiated in any meaningful way.&quot;

     <LI> &quot;claim is made that Charon is <i>at least as strong as</i>
	  Kerberos.  The <i>as strong</i> as part of this assertion should be
	  proven formally.  The <i>at least</i> part of the assertion
	  should be supported through the identification of ways in which
	  Charon is safer than Kerberos.

     <LI> weakness regarding request for proxy service message (5)
</UL>

<h1>Related work to be described</h1>
<ul>
     <li> <B>Third-Party Auth in IFS</B>: Describes a proxy-like mechanism
	  for acquiring access to Kerberized services via a proxy on behalf of a
	  client, just like Charon.  Their approach is almost the opposite
	  of ours (which is good for us).
	  <P>
	  In their system, the proxy (they call it a "translator") acts as a
	  principle, and the client as a service.  The proxy gets a ticket
	  for the "client service" using the usual Kerberos mechanism.  It
	  also acquires the TGT for the client (but cannot decrypt it since
	  it doesn't have the client's secret key).  The proxy passes the
	  "client service" ticket to the client, so now it and the client
	  share a session key Kc,proxy.  The proxy then passes the client's
	  TGT to the client, the client decrypts it, and sends back the
	  decrypted TGT and the key Kc,tgt to the proxy using the session
	  key Kc,proxy.  The proxy can now independently access services on
	  the client's behalf, since it has the client's TGT and the client's TGS
	  session key.  (!!)
	  <P>
	  Strengths of their system:
	  <UL>
	       <LI> clients' interaction with the system is minimal
	       <LI> services and Kerberos infrastructure remain unmodified
	       <LI> clients' secret keys are never revealed
	  </UL>
	  Weaknesses of their system:
	  <UL>
	       <LI> clients' require a large part of the full-blown kerberos
		    implementation (decrypting tickets, extracting ticket
		    components, verifying authenticators, ...)
	       <LI> proxies, if subverted, can request further services on
		    behalf of the clients' without the clients' permission,
		    since clients' have no control over proxies once they
		    reveal their TGT/TGS credentials.
	  </UL>

     <LI> Referenced and critiqued in 3rd party paper:
	  <UL>
	       <LI> Proxy-Based Authorizaiton and Accounting for Distributed
		    Systems [B. Clifford Neuman]
	       <LI> LAN Coexistence with DCE: Options [Blakely]
	  </UL>
	  
</UL>
</body>
</html>
@


1.3
log
@Merged
@
text
@d11 1
a11 1
          change emphasis from <i>not reimplementing full Kerberos on
@


1.2
log
@*** empty log message ***
@
text
@d8 1
a8 1
<h1>Reviewer's comments</h1>  (yes, reviewer is supposed to be singular.)
d10 19
a28 2
     <LI> &quot;I found the whole story and its presentation to be quite
	  naive relative to prior work in the area of authentication.&quot;
d30 11
a40 4
     <LI> &quot;The author's repeatedly claim to have displaced complexity
	  from the client to the proxy and that Charon relieves the mobile
	  client of Kerberos protocol processing.  These claims are not
	  substantiated in any meaningful way.&quot;
d42 2
a43 10
     <LI> &quot;claim is made that Charon is <i>at least as strong as</i>
	  Kerberos.  The <i>as strong</i> as part of this assertion should be
	  proven formally.  The <i>at least</i> part of the assertion
	  should be supported through the identification of ways in which
	  Charon is safer than Kerberos.

     <LI> 
</UL>

<h1> Fixes to paper</h1>
a44 1
<ul>
d75 2
d78 9
d88 8
a140 1

a141 1
   
@


1.1
log
@To do list for Charon paper
@
text
@d27 36
@
