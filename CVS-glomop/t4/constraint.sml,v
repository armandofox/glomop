head	1.2;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.12.08.22.48.32;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.12.07.21.34.57;	author daw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.07.21.34.57;	author daw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added support for functions.
Also minor changes to string support (off-by-ones, etc.).
@
text
@structure Constraint : CONSTRAINT =
  struct
    type label = int
    val curLabel = ref 0
    fun getFreshLabel () = let val l = !curLabel in curLabel := l + 1; l end

    datatype operator = Plus | Minus | Mul | Div | Union | Intersect

    (* IntTerm of (uniqLabel, isConstant)
     | OpTerm of (opr, lhs, rhs) *)
    datatype term = IntTerm of label * bool | OpTerm of operator * term * term

    fun opStr Plus = "+" | opStr Minus = "-" | opStr Mul = "*"
      | opStr Div = "/" | opStr Union = "union" | opStr Intersect = "intersect"
    fun str (IntTerm(lbl,_)) = "l" ^ (Int.toString lbl)
      | str (OpTerm(opr,l,r)) = (str l) ^ " " ^ (opStr opr) ^ " " ^ (str r)
    

    fun freshTerm () = IntTerm(getFreshLabel (), false)

    val globalZero =
          let val t = IntTerm(getFreshLabel (), true);
	  in print ("constant " ^ (str t) ^ " := 0\n"); t
	  end
    fun constantTerm i = if i = 0 then globalZero else
          let val t = IntTerm(getFreshLabel (), true)
	  in
	    print ("constant " ^ (str t) ^ " := " ^ (Int.toString i) ^ "\n");
	    t
	  end

    val globalTop = 
           let val t = IntTerm(getFreshLabel (), true)
           in  print ("constant top " ^ (str t) ^ "\n"); t
           end
    fun top () = globalTop

    val firstResettableLabel = !curLabel
    fun reset () = curLabel := firstResettableLabel;


    fun op + (t,u) = OpTerm(Plus, t, u)
    fun op - (t,u) = OpTerm(Minus, t, u)
    fun op * (t,u) = OpTerm(Mul, t, u)
    fun op / (t,u) = OpTerm(Div, t, u)
    fun negate t   = OpTerm(Minus, constantTerm 0, t)
    fun union (t,u) = OpTerm(Union, t, u)
    fun intersect (t,u) = OpTerm(Intersect, t, u)

    fun op =   (t,u) = print ((str t) ^ " = " ^ (str u) ^ "\n")
    fun subset (t,u) = print ((str t) ^ " subset " ^ (str u) ^ "\n")
    (* for when t must be wholly greater than u,
       i.e. the condition `x >= y for all x in t and y in u' *)
    fun op >=  (t,u) = print ((str t) ^ " >= " ^ (str u) ^ "\n")


    val toString = str
  end
@


1.1
log
@Initial revision
@
text
@d38 3
@


1.1.1.1
log
@
@
text
@@
