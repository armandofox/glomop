head	1.7;
access;
symbols
	initial:1.1.1.1
	initial:1.1.1;
locks; strict;
comment	@# @;


1.7
date	99.01.23.01.36.09;	author daw;	state Exp;
branches;
next	1.6;

1.6
date	99.01.12.04.25.10;	author daw;	state Exp;
branches;
next	1.5;

1.5
date	99.01.11.20.06.21;	author daw;	state Exp;
branches;
next	1.4;

1.4
date	99.01.08.23.42.05;	author daw;	state Exp;
branches;
next	1.3;

1.3
date	99.01.08.03.53.37;	author daw;	state Exp;
branches;
next	1.2;

1.2
date	98.12.08.22.48.31;	author daw;	state Exp;
branches;
next	1.1;

1.1
date	98.12.07.21.34.57;	author daw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.07.21.34.57;	author daw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@A stub to get to setsolver.c.  Lots of changes.
Changes to the interface for ranges, etc.
@
text
@signature CONSTRAINT =
  sig
    val reset : unit -> unit

    (* A set of values of some integer quantity *)
    type term

    (* Create a new term (possibly associated with an identifier) *)
    val freshTerm  : unit -> term
    (* Special case for constants: Create a new term for an integer constant *)
    val constantTerm : int -> term
    (* The top of the lattice; i.e. the set of all integers *)
    val top : unit -> term

    (* Expressions over terms *)
    val op + : term * term -> term
    val op - : term * term -> term
    val op * : term * term -> term
    val op / : term * term -> term
    val negate : term -> term
    val union  : term * term -> term
    val intersect  : term * term -> term
    val min  : term * term -> term 

    (* Force this to be a singleton set. *)
    val makeSingleton : term -> unit
    
    (* Constraints over terms *)
    val op =   : term * term -> unit (* unification *)
    val subset : term * term -> unit

    (* A constraint for when term t must be wholly >= than term u,
       i.e. the condition `x >= y for all x in t and y in u' *)
    val op >=  : term * term -> unit

    datatype endpoint = Int of int | Infinity | NegativeInfinity

    (* (lo,hi) = the interval lo..hi (inclusive) *)
    type range = endpoint * endpoint

    (* A variant form of the `>=' constraint:
       Query whether the listed `>=' constraint is compatible
       with the rest of the constraints.
       The result of the query is not available until the system is
       solved, so you must supply a function to call if the
       `query constraint' is inconsistent with the system of
       `non-query constraints'.
       In the case of an incompatible `query constraint', the
       supplied function will be called later with the possible
       range of values for the first term and the possible range
       of values for the second term, and you can deal with the
       error condition however you like. *)
    val queryge  : term * term * (range * range -> unit) -> unit

    (* For printouts and debugging. *)
    val toString : term -> string

    (* Solve the constraint system *)
    val solve    : unit -> unit
  end
@


1.6
log
@Bugfixes.  Now examples/{rlogin,getenv}.c work.
@
text
@d36 4
a39 3
    (* (SOME(lo),SOME(hi)) = the interval lo..hi (inclusive).
       NONE means +Infinity or -Infinity, whichever is appropriate. *)
    type range = int option * int option
@


1.5
log
@Lots of stuff.  New str*() functions modeled.  Now detect which
variables the overrun is in, and how bad the overrun might be.
Lots of bugfixes.  Probably other stuff which I'm forgetting
right now.
@
text
@d29 1
a29 1
    val op =   : term * term -> unit
@


1.4
log
@Yah, we have a working buffer overflow detector.
@
text
@d23 4
@


1.3
log
@*** empty log message ***
@
text
@d32 17
a48 5
    (* An optional form of the `>=' constraint:
       We want to query whether the listed `>=' constraint is compatible
       with the rest of the constraints.  If it is incompatible, the error
       emssage will be printed later when the constraint system is solved. *)
    val queryge  : term * term * string -> unit
@


1.2
log
@Added support for functions.
Also minor changes to string support (off-by-ones, etc.).
@
text
@d32 6
d40 3
@


1.1
log
@Initial revision
@
text
@d3 2
@


1.1.1.1
log
@
@
text
@@
