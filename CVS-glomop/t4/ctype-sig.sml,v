head     1.1;
branch   1.1.1;
access   ;
symbols  initial:1.1.1.1 initial:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     98.12.07.21.34.57;  author daw;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     98.12.07.21.34.57;  author daw;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@(*
Copyright (c) 1997,1998 The Regents of the University of California.
All rights reserved.

Permission to use, copy, modify, and distribute this software for any
purpose, without fee, and without written agreement is hereby granted,
provided that the above copyright notice and the following two
paragraphs appear in all copies of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
*)

signature CTYPE =
    sig
	exception notFunc     (* Called returnType with a non-function *)
	exception badNumArgs  (* Operator had a bad number of arguments *)
	exception noSuchField (* Looked up a non-existant field *)
	exception undefinedTypedef (* Looked for a typedef that's undefined *)
	exception undefinedStruct (* Looked for a struct that's undefined *)

	(* A type and a type environment *)
	type extType = AST.lookupFun * AST.syntacticType

	(* Handy types *)
	val nullType       : extType
	val allocFunType   : extType
	val charType       : extType
	val intType        : extType
	val realType       : extType
	val stringType     : extType
	val unknownFunType : extType
	val voidPtrType    : extType

	(* Test properties of types *)
	val isArrayType     : extType->bool
	val isCharArrayType : extType->bool
	val isExternType    : extType->bool
	val isFunType       : extType->bool
	val isPtrType       : extType->bool
	val isStaticType    : extType->bool
	val isStructType    : extType->bool

	(* Promote an array type to a pointer type *)
	val arrayToPtr   : extType->extType

	(* Resolve any typedef names and top-level struct names in a type *)
	val resolveType : extType->extType

	(* Get the type of a variable. *)
	val getVarType : AST.lookupFun->AST.identifier->extType

	(* Given a function type, return its return type *)
	val returnType : extType->extType

	(* Given an operator and the types of its operands, return
	   the type of the result *)
	val operType : AST.operator->extType list->extType

	(* Find the type of a field of an aggregate *)
	val fieldType : extType->AST.identifier->extType

	(* Return the fields of a structure type *)
	val fields : extType->(AST.identifier*extType) list
    end
@


1.1.1.1
log
@
@
text
@@
