head	1.5;
access;
symbols
	stable:1.5
	release:1.3
	current:1.3;
locks; strict;
comment	@# @;


1.5
date	96.06.14.06.40.38;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.06.11.02.18.08;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.06.04.01.27.32;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.00.03.58;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.23.13.27;	author fox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@New rendezvous at startup that uses proxy pid; should prevent collisions
when multiple instances of proxy run at same time on same machine
@
text
@#
#  Listen for Tcl-DP connections
#

global sock

proc listen_init {} {
    global sock proxyPid
    set res [dp_connect -server 0 -linger -reuseAddr]
    set sock(port) [lindex $res 1]
    puts "Listening on port $sock(port)"
    #dp_socketOption $sock(sockid) noblock no
    # HACK: write port number to /tmp/mon.<proxyPid> for gmproxyd
    update idletasks                          ;#sync here
    catch {exec "/bin/rm -f /tmp/mon$proxyPid"}
    if {[set f [open "/tmp/mon$proxyPid" "w"]] < 0} {
        puts stderr "Can't write /tmp/mon; exiting"
        exit 1
    }
    puts $f $sock(port)
    close $f

    # accept a connection....
    set sock(sockid) [lindex [dp_accept [lindex $res 0]] 0]
    return $sock(sockid)
}

proc read_cmd {condition sockid} {
    set len [read_n_bytes 2 $sockid]
    # interpret 2 bytes as hex length
    scan $len "%2x" len
    set msg [read_n_bytes $len $sockid]
    # dispatch
    # BUG::need error checking to see if proc exists

    if [catch {eval $msg} x] {
        set_field Status "Warning: $x"
    }
}

proc read_n_bytes {nbytes sockid} {
    set count 0
    set result ""

    while {$count < $nbytes} {
        set dat [dp_receive $sockid $nbytes]
        set result [concat $result $dat]
        set len [string length $dat]
        set count [expr $count+$len]
        set nbytes [expr $nbytes-$len]
    }
    return $result
}

    
@


1.4
log
@minor changes to allow a suicide message
@
text
@d8 1
a8 1
    global sock
d13 1
a13 1
    # HACK: write port number to /tmp/mon for gmproxyd
d15 2
a16 2
    catch {exec "/bin/rm -f /tmp/mon"}
    if {[set f [open "/tmp/mon" "w"]] < 0} {
@


1.3
log
@Fixed screen-update problem and doc-opening interface is a bit better
@
text
@a32 2
    
    puts $msg
@


1.2
log
@changed monitor msgs from udp to tcp
@
text
@d25 1
a25 1
    return $sock(port)
d28 2
a29 4
proc read_cmd {} {
    global sock

    set len [read_n_bytes 2 $sock(sockid)]
d32 1
a32 1
    set msg [read_n_bytes $len $sock(sockid)]
@


1.1
log
@a first cut at the monitor app that displays your credentials and the
proxy state
@
text
@d5 1
a5 1
global udp
d8 18
a25 6
    global udp
    set res [dp_connect -udp]
    set udp(sockid) [lindex $res 0]
    set udp(port) [lindex $res 1]
    dp_socketOption $udp(sockid) noblock no
    return $udp(port)
d29 1
a29 3
    global udp

    set msg [dp_receiveFrom $udp(sockid) -noaddr]
d31 6
a36 1
    #puts $msg
d45 13
@
