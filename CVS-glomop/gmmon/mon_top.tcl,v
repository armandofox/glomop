head	1.6;
access;
symbols
	stable:1.5
	release:1.4
	current:1.4;
locks; strict;
comment	@# @;


1.6
date	96.07.01.18.28.04;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	96.06.11.02.18.09;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	96.06.04.01.27.34;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	96.05.25.02.46.57;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.00.03.59;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	96.05.03.23.13.28;	author fox;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@#
#  Top-level monitor window
#

global wig

proc top_init {} {
    global wig
    #catch {destroy .mon}
    #toplevel .mon
    set f ""
    frame $f.f
    label $f.f.l -text "GloMop Proxy Monitor" -relief ridge -fg red
    button $f.f.b -text "Quit" -command exit
    pack $f.f.b -side right -fill none -expand 0
    pack $f.f.l -side left -fill x -expand 1
    pack $f.f -side top -fill x -expand 1

    # Client name, auth type, device
    frame $f.clientinfo
    set fr $f.clientinfo

    foreach x {Principal Authentication Device} {
        set wname [string tolower $x]
        frame $fr.$wname -relief ridge
        label $fr.$wname.l -text "$x:" -fg red
        label $fr.$wname.$wname -width 15 -anchor w
        pack $fr.$wname.l -side left
        pack $fr.$wname.$wname -side left -fill x -expand 1
        set wig($x) $fr.$wname.$wname
    }

    pack $fr.principal $fr.authentication $fr.device -side left
    pack $fr -side top -fill x -expand 1

    # Status

    frame $f.fstatus -relief sunken
    set fr $f.fstatus
    label $fr.l -text "Status:" -fg red
    label $fr.status -anchor w
    set wig(Status) $fr.status
    pack $fr.l -side left
    pack $fr.status -side left -fill x -expand 1

    pack $fr -side top -fill x -expand 1

    # Credentials

    frame $f.fcred -relief sunken
    set fr $f.fcred
    label $fr.l -text "Credentials" -relief ridge
    text $fr.cred -font fixed -width 80 -height 10 -yscrollcommand "$fr.sc set"
    set wig(Cred) $fr.cred
    scrollbar $fr.sc -command "$fr.cred yview"
    pack $fr.l -side top -fill x -expand 1
    pack $fr.sc -side right -fill y 
    pack $fr.cred -side left -fill both -expand 1

    pack $fr -side top -fill x -expand 1
    
    # Open documents: two side by side listboxes, one for the document
    # metadata and one for the status of the document

    frame $f.fdoc -relief sunken
    set fr $f.fdoc
    label $fr.l -text "Open Documents" -relief ridge
    listbox $fr.doc -font fixed -width 50 -height 10 \
            -relief sunken
    listbox $fr.stat -font fixed -fg blue -width 25 -height 10 \
            -relief sunken
    set wig(Docs) $fr.doc
    set wig(Docstat) $fr.stat
    scrollbar $fr.sc -command "scroll_both $fr.doc $fr.stat"
    pack $fr.l -side top -fill x -expand 1
    pack $fr.sc -side right -fill y
    pack $fr.stat -side right -fill y -expand 0
    pack $fr.doc -side left -fill both -expand 1

    # pack the whole thing
    
    pack $fr -side top -fill x -expand 1
    
}

proc scroll_both {w1 w2 to} {
    $w1 yview $to
    $w2 yview $to
}
@


1.5
log
@minor changes to allow a suicide message
@
text
@d68 1
a68 1
    listbox $fr.doc -width 50 -height 10 \
@


1.4
log
@Fixed screen-update problem and doc-opening interface is a bit better
@
text
@d12 6
a17 2
    label $f.l -text "GloMop Proxy Monitor" -relief ridge -fg red
    pack $f.l -side top -fill x -expand 1
d68 1
a68 1
    listbox $fr.doc -width 75 -height 10 \
d70 1
a70 1
    listbox $fr.stat -font fixed -fg blue -width 15 -height 10 \
@


1.3
log
@added listbox for tracking open documents and their status, and new mon
commands for manipulating it.  split out the mon commands into mon_cmds.tcl
@
text
@d66 1
a66 1
    listbox $fr.stat -font fixed -fg blue -width 8 -height 10 \
@


1.2
log
@changed monitor msgs from udp to tcp
@
text
@d51 1
a51 1
    scrollbar $fr.sc -command "$fr.log yview"
d55 22
d82 3
a84 16
proc show_cred {credtype} {
    global wig
    if {! [catch {set cred [exec klist 2> /dev/null]} err]} {
        $wig(Cred) delete 1.0 end
        $wig(Cred) insert insert $cred
    }
}

proc set_field {widg value} {
    global wig
    if [info exists wig($widg)] {
        $wig($widg) configure -text $value
    } else {
        $wig(Status) configure -text \
                "Warning: nonexistent field $widg"
    }
@


1.1
log
@a first cut at the monitor app that displays your credentials and the
proxy state
@
text
@d62 1
a62 1
    if {! [catch {set cred [exec "klist 2>/dev/null"]} err]} {
@
