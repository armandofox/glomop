head	1.15;
access;
symbols;
locks; strict;
comment	@% @;


1.15
date	98.06.04.20.46.57;	author gribble;	state Exp;
branches;
next	1.14;

1.14
date	98.06.03.20.51.02;	author gribble;	state Exp;
branches;
next	1.13;

1.13
date	98.06.03.00.57.27;	author gribble;	state Exp;
branches;
next	1.12;

1.12
date	98.05.26.19.37.07;	author gribble;	state Exp;
branches;
next	1.11;

1.11
date	98.03.21.00.38.14;	author fox;	state Exp;
branches;
next	1.10;

1.10
date	98.03.20.21.52.57;	author gribble;	state Exp;
branches;
next	1.9;

1.9
date	98.03.19.19.21.20;	author fox;	state Exp;
branches;
next	1.8;

1.8
date	98.03.19.03.09.57;	author gribble;	state Exp;
branches;
next	1.7;

1.7
date	98.03.18.22.33.25;	author fox;	state Exp;
branches;
next	1.6;

1.6
date	98.03.15.00.59.13;	author fox;	state Exp;
branches;
next	1.5;

1.5
date	98.03.14.08.56.50;	author fox;	state Exp;
branches;
next	1.4;

1.4
date	98.03.12.19.27.01;	author fox;	state Exp;
branches;
next	1.3;

1.3
date	98.03.12.01.29.27;	author fox;	state Exp;
branches;
next	1.2;

1.2
date	98.03.11.22.28.07;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.00.36.20;	author fox;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Armando's mods.
@
text
@\section{MOTIVATION}

% Motivation/goals of paper [AF] - 1 pg

%   This is not a port of desktop browser to PDA
%   Describe adaptive middleware proxy (AMWP) approach (roughly)
%   Make claims for AMWP in general and scalable TACC servers in particular:
%      1. better performance (compared to port or least-common-denominator
%         standards-compliant implementation) 
%      2. enables more features/behaviors (some of which would be roughly
%         impossible w/o AMWP).  Enables complex applications on very
%         meager clients - offloading complexity to proxy.
%      3. leverages existing infrastruc and serves legacy/thin
%         clients (really the same thing!)
%      4. can be cost effective if done right, because it can be (a)
%         generalizable and (b) economical to operate as a service

We would like to connect
``thin clients'' to the 
Internet, especially convergent mobile devices such as {\em smart phones},
while allowing them to leverage at least some of the
installed infrastructure of Web content and services.  However, the
limited capabilities of these devices---smaller displays, more limited
user interfaces, lower bandwidth, and 
limited processing power and memory---complicate direct porting of
desktop applications such as Web browsers.
% Major challenges in
% enabling such clients arise from the mismatch between the clients'
% capabilities and the design targets of today's Internet services and
% content.  In particular, compared to desktop PC's (and laptops, which are
% really just small desktops), thin clients and convergent devices typically
% have .  The order-of-magnitude span of this
% variation is too large to hide at the network level, making
% application-level techniques necessary.
In the past \cite{ieee_adapt,asplos} we have argued for the use of {\em
transformational proxies}, which perform on-the-fly, datatype-specific
lossy compression, as a mechanism for application-level content adaptation
that circumvents the limitations of thin clients.  We have generalized this
approach into a full set of building blocks and programming interfaces
for constructing proxy-based applications that adapt to network and
client variability.  In this paper we describe our {\em adaptive
middleware proxy\/} (AMWP) approach in the context of Top Gun Wingman,
the world's first graphical Web browser for the 3Com PalmPilot.

%\subsection{Not a Desktop Browser}

Existing commercial products such as Microsoft Pocket Internet Explorer
for Windows CE and HandWeb for the 3Com PalmPilot
attempt to directly port the largest reasonable subset of features from
desktop browsers onto thin clients.
In contrast,
Wingman is not a port, but a true {\em split
application} in which a substantial amount of the application complexity
has been pushed to a back end proxy server.  The proxy server implements
a simple building-block programming model called TACC
\cite{casefortacc}, which supports application modules that perform
\underline{T}ransformation, 
\underline{A}ggregation, 
\underline{C}aching, and
\underline{C}ustomization
of Internet content.  

%Complete applications are constructed by
%connecting the modules via a simple set of API's and dispatch rules.
%The ``split point'' for 
%partitioning an application such as Wingman
%is based on two principles:

%\begin{itemize}
%\item {\em Client competence\/}: the client should only perform the duties
%for which 
%it is already optimized;

%\item {\em Client responsiveness\/}: if possible, the client should
%handle user interactions that would be sluggish if they
%required roundtrips to a server, such as form validation.
%\end{itemize}

%To the extent possible, all other operations should be handled by the
%infrastructural TACC proxy.  Specifically, the PalmPilot includes a set
%of system facilities for drawing simple styled text and bitmapped images,
%displaying UI widgets, and handling  pen-based interaction with
%the user, but its limited compute power and memory make complex HTML 
%page layout
%(for example) unwieldy.  In Wingman, these functions are handled by 
%TACC proxy modules, making the client code extremely lightweight.  
We discuss the implementation in detail in Section \ref{impl}.

\subsection{Claims and Contributions}

Because we exploit infrastructure computing,
Wingman's performance and feature set 
compare very favorably not only with its direct competitors, but with
many desktop browsers as well.  In particular, we make the following
claims for the AMWP-based implementation of the Wingman browser, which
we support with specific examples and
later generalize  to other thin-client Internet services:

\begin{enumerate}

\item The AMWP approach results in \textbf{better performance} than a
reduced port or least-common-denominator, standards-compliant
implementation that runs entirely on the client.  We provide evidence for
this in Section \ref{perf_impl}.

\item AMWP enables \textbf{new features and behaviors} for the client,
many of which would be awkward or impossible without proxy support.  By
hosting the complex parts of the application on the TACC proxy, complex
applications can be robustly supported on very simple clients.  For
example, the AMWP approach has been used to bring the MBONE mediaboard
application to the Palm Pilot \cite{topgunmediaboard}.

\item AMWP \textbf{transparently leverages more of the existing
infrastructure} of content and services, since on-the-fly transparent
translation and compression are effective techniques for delivering
acceptable performance between existing servers and thin or legacy clients.
Such thin clients might not otherwise be capable of handling content and
services designed for modern, ``common case'' clients.

\item AMWP-based services are \textbf{cost effective to operate and
expand} because of the simplicity of the client software, the generality of
our building-block approach for the middleware proxy, and our proven
commodity-PC cluster server implementation \cite{sosp16}.  Cost efficiency
makes widespread deployment of AMWP-based applications feasible even for
very large (hundreds of thousands of users) communities.

\end{enumerate}

\subsection{Map of Paper}

In Section \ref{impl} we motivate the three-tier client-proxy-server model
as a platform for deploying middleware-based services for mobile and thin
clients.  We describe our general approach, give quantitative
experience from work leading up to Wingman, and introduce the TACC
programming model that supports Wingman and other applications.  We also
give details of the implementation and performance of both the Wingman
client and its cluster-based TACC server back-end (discussed previously
in \cite{sosp16}), and describe how the AMWP approach enables
specific features that make Wingman competitive with both desktop browsers
and other thin-client browsers.  In Section \ref{lessons}, we attempt to
draw some lessons based on our experience in both implementing Wingman (and
AMWP applications in general) and serving a worldwide community of over
11,000 users.  We discuss related and future work in Section \ref{related}.

@


1.14
log
@OK, we're there.
@
text
@d61 4
a64 2
of Internet content.  Complete applications are constructed by
connecting the modules via a simple set of API's and dispatch rules.
d116 3
a118 3
acceptable performance between existing servers and thin or legacy clients
which might not otherwise be capable of handling content and services
designed for modern, ``common case'' clients.
d121 5
a125 6
expand} because of the resulting simplicity of the client software, the generality
of our building-block approach, and our 
proven commodity-PC cluster server implementation \cite{sosp16}.  Cost
efficiency makes
widespread deployment of AMWP-based applications feasible even for very
large (hundreds of thousands of users) community.
d143 1
a143 2
11,000 users.  We discuss related and future work in Sections \ref{related}
and \ref{future}.
@


1.13
log
@Much changes
@
text
@d45 1
a45 1
\subsection{Not a Desktop Browser}
d63 23
a85 23
The ``split point'' for 
partitioning an application such as Wingman
is based on two principles:

\begin{itemize}
\item {\em Client competence\/}: the client should only perform the duties
for which 
it is already optimized;

\item {\em Client responsiveness\/}: if possible, the client should
handle user interactions that would be sluggish if they
required roundtrips to a server, such as form validation.
\end{itemize}

To the extent possible, all other operations should be handled by the
infrastructural TACC proxy.  Specifically, the PalmPilot includes a set
of system facilities for drawing simple styled text and bitmapped images,
displaying UI widgets, and handling  pen-based interaction with
the user, but its limited compute power and memory make complex HTML 
page layout
(for example) unwieldy.  In Wingman, these functions are handled by 
TACC proxy modules, making the client code extremely lightweight.  We discuss
the implementation in detail in Section \ref{impl}.
d142 2
a143 1
11,000 users.  We discuss related and future work in Section \ref{related}.
@


1.12
log
@Many changes, related to the style the conference demands.  Much work on the bibliography will be necessary.
@
text
@d85 1
a85 1
the implementation in detail in section \ref{impl}.
d102 1
a102 1
this in section \ref{perf_impl}.
d130 1
a130 1
In section \ref{impl} we motivate the three-tier client-proxy-server model
d139 1
a139 1
and other thin-client browsers.  In section \ref{lessons}, we attempt to
d142 1
a142 1
11,000 users.  We discuss related and future work in section \ref{related}.
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
\section{Motivation}
@


1.10
log
@All there.  Complete draft.  woohoo.
@
text
@d47 6
a52 4
Unlike commercial products such as Microsoft Pocket Internet Explorer
for Windows CE or the HandWeb browser for the 3Com PalmPilot, 
Wingman is not a direct port of a subset of
a desktop browser to a smaller device, but a true {\em split
d80 1
a80 1
displaying UI widgets, and handling simple pen-based interaction with
d84 1
a84 1
TACC proxy modules, making the client code extremely simple.  We discuss
d115 1
a115 1
which might not otherwise be capabale of handling content and services
d119 4
a122 2
expand} because of the generality of our building-block approach and our
proven cluster-based server implementation \cite{sosp16}.  This makes
d132 1
a132 1
clients.  We describing our approach in general, give quantitative
d136 2
a137 2
client and its cluster-based TACC server back-end, which we previously
reported on\cite{sosp16}, and describe how the AMWP approach enables
@


1.9
log
@*** empty log message ***
@
text
@d43 1
a43 1
the world's first graphical Web browser for the USR PalmPilot.
d48 1
a48 1
for Windows CE or the HandWeb browser for the USR PalmPilot, 
d99 2
a100 1
implementation that runs entirely on the client.
d105 10
a114 9
applications can be robustly supported on very simple clients.

\item AMWP \textbf{transparently leverages more of the existing infrastructure}
of content and 
services, since on-the-fly transparent translation and compression are
effective techniques for delivering acceptable performance between existing
servers and thin or legacy clients which might not otherwise be capabale
of handling content and services designed for
modern, ``common case'' clients.
d126 13
a138 17
In section \ref{impl} we motivate the three-tier client-proxy-server
model as a platform for deploying middleware-based services for mobile
and thin clients, describing our approach in general, quantitative
experience from work leading up to Wingman, and the TACC programming
model that supports Wingman and other applications.  We also give
details of the implementation and performance of both the
Wingman 
client and  its cluster-based TACC server back-end, which we previously
reported on 
\cite{sosp16}, and 
describe how the AMWP approach enables specific features that make
Wingman competitive with both desktop browsers and other thin-client
browsers.  In section \ref{lessons}, we attempt to draw some lessons
based on our experience in both implementing Wingman (and AMWP
applications in general) and serving a
worldwide community of over 11,000 users.  We discuss related and future
work in section \ref{related}.
@


1.8
log
@blorg hack
@
text
@d18 2
a19 1
The surge of recent interest in connecting ``thin clients'' to the
d21 14
a34 11
motivates us to allow such devices to leverage at least some of the
installed infrastructure of Web content and services.  Major challenges in
enabling such clients arise from the mismatch between the clients'
capabilities and the design targets of today's Internet services and
content.  In particular, compared to desktop PC's (and laptops, which are
really just small desktops), thin clients and convergent devices typically
have smaller displays, more limited user interfaces, lower bandwidth, and
limited processing power and memory.  The order-of-magnitude span of this
variation is too large to hide at the network level, making
application-level techniques necessary.

d37 2
a38 2
lossy compression, as a means of adapting content and services to
circumvent the limitations of thin clients.  We have generalized this
d43 1
a43 1
the world's first graphical Web browser for the USR Palm Pilot.
d48 2
a49 2
for Windows CE or the HandWeb browser for the USR Palm Pilot, 
Wingman is explicitly {\em not} a ``miniaturization'' or reduced port of
d63 14
a76 5
is based on the guidelines underlying our past work with
other TACC services: the client should only perform the duties for which
it is already optimized (the principle of {\em client competence}),
and the TACC proxy should do everything else
(to the extent possible).  Specifically, the Palm Pilot includes a set
d79 1
a79 1
the user, but its limited compute power and memory make HTML parsing and
d87 3
a89 2
Because of this partitioning, Wingman's performance and feature set
compares very favorably not only with its direct competitors, but with
d106 2
a107 1
\item AMWP \textbf{leverages the existing infrastructure} of content and
d110 2
a111 2
servers and thin or legacy clients, both of which require similar
adaptation techniques in order to give them access to services designed for
d124 1
a124 1
In section \ref{proxy} we motivate the three-tier client-proxy-server
d128 2
a129 2
model that supports Wingman and other applications.  Section \ref{impl}
summarizes the architecture, implementation, and performance of both the
d131 2
a132 1
client and  the cluster-based TACC server we have previously reported on
d134 1
a134 1
describes how the AMWP approach enables specific features that make
@


1.7
log
@*** empty log message ***
@
text
@d18 3
a20 3
The  surge of recent interest in connecting ``thin clients'' to
the Internet, especially  convergent mobile devices such as {\em
smart phones}, motivates us to allow such devices to leverage at least some of the
d24 6
a29 6
content.  In particular, compared to desktop PC's (and laptops, which
are really just small desktops), thin clients and convergent devices
typically have smaller displays, more limited user interfaces, lower
bandwidth, and limited processing power and memory.  The
order-of-magnitude span of this variation is too large to hide at the
network level, making application-level techniques necessary.
d93 5
a97 7
services, since on-the-fly transparent 
translation and compression are effective
techniques for delivering acceptable performance between existing servers
and thin or legacy clients

TBD explain why legacy and thin clients are really two sides of the same
coin
@


1.6
log
@*** empty log message ***
@
text
@d18 4
a21 4
There is a surge of recent interest in connecting ``thin clients'' to
the Internet, especially for convergent mobile devices such as {\em
smart phones}, and allowing them to leverage at least some of the
installed infrastructure of content and services.  Major challenges in
d50 1
a50 1
\cite{casefortacc}, which supports worker modules that perform
d57 2
a58 2
The split point for the
partitioning of an application such as Wingman
d72 3
a74 1
Because of this separation, Wingman's performance and feature set
d77 3
a79 2
claims for the AMWP-based implementation of the Wingman browser, and
later generalize the claims to other thin-client Internet services:
d88 1
a88 1
some of which would be awkward or impossible without proxy support.  By
d90 1
a90 1
applications can be supported on very simple clients.
d93 2
a94 1
services, since on-the-fly translation and compression are effective
@


1.5
log
@*** empty log message ***
@
text
@d61 2
a62 1
it is already optimized, and the TACC proxy should do everything else
@


1.4
log
@*** empty log message ***
@
text
@d91 4
a94 2
and thin or legacy clients (which are really two sides of the same
coin....TBD explain this).
d102 2
a122 1
\end{enumerate}
@


1.3
log
@*** empty log message ***
@
text
@d107 2
a108 1
summarizes the architecture, implementation, and performance of both the Wingman
@


1.2
log
@*** empty log message ***
@
text
@d100 17
a116 1
%         generalizable and (b) economical to operate as a service
@


1.1
log
@*** empty log message ***
@
text
@d1 102
@
