head	1.2;
access;
symbols
	SOSP:1.2;
locks; strict;
comment	@# @;


1.2
date	97.03.10.13.49.12;	author fox;	state Exp;
branches;
next	1.1;

1.1
date	97.03.10.10.31.35;	author fox;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/sww/bin/perl



sub usage {
    warn "Usage: $0 bucksize cutoff < filename\n";
    warn "cutoff is infinity by default, bucksize is 100 by default\n";
    exit 0;
}

&usage if grep(/^-h/,@@ARGV);
$cutoff = pop @@ARGV || 1e30;
$bucksize = pop @@ARGV || 100;
$minbuck = 1e30;
$maxbuck = -1e30;

$count = $nbucks = 0;
while (<>) {
    chop($line = <>);
    @@z = split(/[ \t]+/, $line);
    ($size,$time) = @@z[3,5];
    next unless $size && $time;
    $whichbuck = int($size/$bucksize);
    next if $whichbuck > $cutoff;
    $count++;
    $maxbuck = $whichbuck if $whichbuck > $maxbuck;
    $minbuck = $whichbuck if $whichbuck < $minbuck;
    $nbucks++ unless defined $bucks{$whichbuck};
    push(@@{$bucks{$whichbuck}}, $time);
}

warn sprintf("hit %d of %d buckets (%d...%d), bucketsize=$bucksize\n", $nbucks,
             ($maxbuck-$minbuck+1), $minbuck, $maxbuck);

for ($i=$minbuck; $i<=$maxbuck; $i++) {
    $bucket = $bucks{$i};
    $num = (scalar @@$bucket);
    $num = 1 unless $num>0;
    $m = &arith_mean($bucket);
    printf ("%5d %6.4f %6.4f\n", $i,  $m, 1.96*&stdev($bucket)/sqrt($num));
}


    

sub arith_mean {
    my @@ary = @@{shift @@_};
    my $tot = 0.0;
    my $num = scalar @@ary;
    return 0 unless $num>0;
    $tot += (shift @@ary) while scalar @@ary;

    return $tot/$num;
}

sub variance {
    my $ary = shift;
    my @@ary = @@$ary;
    my $mean = shift;
    $mean = &arith_mean($ary) unless defined $mean;
    my $num = scalar @@ary;
    return 0 unless $num>0;
    my $z;
    $sd = 0.0;
    while (scalar @@ary) {
        $z = (shift @@ary) - $mean;
        $sd += ($z*$z)/$num;
    }
    return $sd;
}

sub stdev { sqrt(&variance(@@_)) }


 
@


1.1
log
@*** empty log message ***
@
text
@d32 1
a32 1
warn sprintf("hit %d of %d buckets (%d...%d)\n", $nbucks,
@
