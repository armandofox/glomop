AC_INIT(README)

AC_CANONICAL_SYSTEM

AC_ARG_WITH(defaultoptions, -with-defaultoptions[=filename]	use <filename> as default options file, , with_defaultoptions=".configure")

if test "$with_defaultoptions" = "yes" ; then
	with_defaultoptions=".configure"
elif test "$with_defaultoptions" = "no" ; then
	with_defaultoptions=""
fi

if test -n "$with_defaultoptions" ; then
	if test -f "$with_defaultoptions" ; then
		read arglist < $with_defaultoptions
	
		if test -n "$arglist" ; then 
			arguments="$0 $arglist $* --without-defaultoptions"
			echo "Restarting: $arguments" 
			exec $arguments
		fi
	else
		if test "$with_defaultoptions" = ".configure" ; then
			echo No .configure file found in current directory
			echo Continuing with default options...
		else
			echo Cannot find file $with_defaultoptions
			echo Aborting configure...
			exit 1
		fi
	fi
fi


AC_ARG_ENABLE(mkdep, -enable-mkdep/-disable-mkdep      enable/disable invocation of \"make depend\", , enable_mkdep="yes")


AC_CONFIG_HEADER(config_tr.h)

AC_ARG_WITH(netpbm,
  --with-netpbm=DIR      Look for NetPBM lib/ and include/ in DIR,
    CPPFLAGS="$CPPFLAGS -I${withval}/include"
    LDFLAGS="$LDFLAGS -L${withval}/lib",
    CPPFLAGS="$CPPFLAGS -I/usr/sww/include"
    LDFLAGS="$LDFLAGS -L/usr/sww/lib"
)
AC_ARG_WITH(jpeg,
  --with-jpeg=DIR      Look for libjpeg lib/ and include/ in DIR,
    CPPFLAGS="$CPPFLAGS -I${withval}/include"
    LDFLAGS="$LDFLAGS -L${withval}/lib",
    CPPFLAGS="$CPPFLAGS -I/usr/sww/include -I/usr/sww/share/include/libjpeg-6a"
    LDFLAGS="$LDFLAGS -L/usr/sww/lib"
)
AC_ARG_WITH(gdbm,
  --with-gdbm=DIR      Look for libgdbm lib/ and include/ in DIR,
    CPPFLAGS="$CPPFLAGS -I${withval}/include"
    LDFLAGS="$LDFLAGS -L${withval}/lib",
    CPPFLAGS="$CPPFLAGS -I/usr/sww/include -I/usr/sww/share/include"
    LDFLAGS="$LDFLAGS -L/usr/sww/lib"
)
AC_ARG_WITH(perlinc,
  --with-perlinc=DIR   Look for Perl LWP and MD5 packages in DIR,
  PERLINC="-I${withval}",
  PERLINC=""
)
AC_ARG_WITH(tcl,
  --with-tcl=DIR          Look for lib/libtcl.a and include/tcl.h in DIR,
  TCLINCLUDE="-I${withval}/include"
  TCLLIBS="-L${withval}/lib",
  TCLINCLUDE="-I/usr/sww/include"
  TCLLIBS="-L/usr/sww/lib"
)
AC_ARG_WITH(tclinclude,
  --with-tclinclude=DIR   Look for tcl.h and tk.h directly in DIR,
  TCLINCLUDE="-I${withval}"
)
AC_ARG_WITH(tclver,
  --with-tclver=VERSION   Append VERSION to the tcl library and binary files,
  TCL_VERSION="${withval}",
  TCL_VERSION=""
)
AC_ARG_WITH(tkver,
  --with-tkver=VERSION   Append VERSION to the tk library and binary files,
  TK_VERSION="${withval}",
  TK_VERSION="${with_tclver}"
)
AC_ARG_ENABLE(tcl-stub,
  --enable-tcl-stub         Enable compilation of tcl_stub, 
  , enable_tcl_stub="no"
)
AC_ARG_ENABLE(java,
  --enable-java             Enable compilation of java_stub,
  , enable_java_stub="no"
)
AC_ARG_WITH(java,
  --with-java=DIR         Look for Java include/jni.h and lib/libjava.a in DIR,
  JAVAINCDIR="${withval}/include"
  JAVALIBDIR="${withval}/lib"
)
AC_ARG_WITH(javainc,
  --with-javainclude=DIR  Look for jni.h directly in DIR,
  JAVAINCDIR="${withval}"
)
AC_ARG_WITH(javalib,
  --with-javalib=DIR      Look for libjava.a directly in DIR,
  JAVALIBDIR="${withval}"
)
AC_SUBST(JAVAINCDIR)
AC_SUBST(JAVALIBDIR)
AC_SUBST(TCLINCLUDE)
AC_SUBST(TCLLIBS)
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_VERSION)
AC_SUBST(PURIFY)

CFLAGS="-g  -D_REENTRANT"
AC_PROG_INSTALL
AC_PROG_CC
if test "$ac_cv_prog_gcc" = yes; then
      CFLAGS="-Wall -pedantic $CFLAGS"
fi
AC_CHECK_PROGS(CXX, g++ c++)
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_LEX

AC_CHECK_PROGS(MAKEEX,gmake make)

AC_ARG_WITH(perl,
  --with-perl=<pathname>   Use <pathname> as the perl binary,
  PERL="${withval}",
  PERL=""
)
if test -z "$PERL" ; then
	AC_PATH_PROGS(PERL,perl perl5)
fi

AC_ARG_WITH(wish,
  --with-wish=<pathname>   Use <pathname> as the wish binary,
  WISH="${withval}",
  WISH=""
)
if test -z "$WISH" ; then
	AC_PATH_PROGS(WISH,wish wishx)
fi

if test "$enable_tcl_stub" = "yes" ; then
	TCL_STUB_TARGET="tcl_stub"
	echo Enabling compilation of tcl_stub
else
	TCL_STUB_TARGET=""
	echo Disabling compilation of tcl_stub
fi
AC_SUBST(TCL_STUB_TARGET)

AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

AC_REPLACE_FUNCS(strcasecmp)
AC_CHECK_FUNCS(snprintf)
AC_REPLACE_FUNCS(snprintf)

AC_CHECK_LIB(pthread,pthread_create,LIBTHREAD="-lpthread",AC_CHECK_LIB(pthreads,pthread_create,LIBTHREAD="-lpthreads",AC_MSG_ERROR(You need either -lpthread or -lpthreads to build this system.)))

AC_ARG_WITH(staticpthread, --with-staticpthread=<lib-path>      use <lib-path> as the pthreads library, LIBTHREAD=$with_staticpthread, )
AC_SUBST(LIBTHREAD)

AC_CHECK_LIB(perl,perl, LIBPERL="-lperl", LIBPERL="-lperl")

AC_ARG_WITH(staticperl, --with-staticperl=<lib-path>      use <lib-path> as the perl library, LIBPERL=$with_staticperl, )
AC_SUBST(LIBPERL)

if test "$enable_java_stub" = "yes" ; then
	JAVA_STUB_TARGET="java_stub"
	echo Enabling compilation of java_stub
else
	JAVA_STUB_TARGET=""
	echo Disabling compilation of java_stub
fi


AC_CHECK_LIB(socket,socket,LIBS="$LIBS -lsocket -lnsl")

dnl Define -DSYSV for pbmplus.h if this system doesn't have strings.h.

AC_CHECK_HEADER(strings.h,,AC_DEFINE(SYSV))

dnl Check for "struct timespec {"
AC_CHECK_HEADERS(time.h sys/time.h sys/timers.h)

dnl Check for pthreads
AC_CHECK_HEADERS(thread.h pthread.h)

dnl Check for MIT pthreads.  If present, we have to define a
dnl preprocessor symbol so the correct files get included.
AC_CHECK_HEADERS(pthread/mit/pthread_attr.h,CPPFLAGS="$CPPFLAGS -D_MIT_POSIX_THREADS")

dnl Check for NetPBM headers and libraries

AC_CHECK_HEADER(ppm.h,,AC_MSG_ERROR(Cannot find NetPBM header files.  See the README for help.))
AC_CHECK_LIB(pnm,pnm_init,DUMMY=,AC_MSG_ERROR(Cannot find NetPBM libraries.  See the README for help.),-lppm -lpgm -lpbm -lm)
dnl Check for libjpeg headers and libraries

AC_CHECK_HEADER(jpeglib.h,,AC_MSG_ERROR(Cannot find libjpeg header files.  See the README for help.))
AC_CHECK_LIB(jpeg,jpeg_abort,DUMMY=,AC_MSG_ERROR(Cannot find libjpeg libraries.  See the README for help.),)
dnl Check for libgdbm headers and libraries

AC_CHECK_HEADER(gdbm.h,,AC_MSG_ERROR(Cannot find libgdbm header files.  See the README for help.))
AC_CHECK_LIB(gdbm,gdbm_fetch,DUMMY=,AC_MSG_ERROR(Cannot find libgdbm libraries.  See the README for help.),)

dnl Check for libintl (and libdl) - solaris-specific lossage.

AC_CHECK_LIB(intl,dgettext,LIBS="$LIBS -lintl")
AC_CHECK_LIB(dl,dlopen,LIBS="$LIBS -ldl",AC_MSG_WARN("no libdl"))

dnl AC_CHECK_LIB(tcl$TCL_VERSION,Tcl_CreateCommand,LIBTCL="-ltcl$TCL_VERSION",AC_CHECK_LIB(tcl7.6,Tcl_CreateCommand,LIBTCL="-ltcl7.6",AC_MSG_ERROR(Cannot find libtcl.a or libtcl.so - please specify --with-tcl.),-lm),-lm)
dnl AC_SUBST(LIBTCL)

dnl Solaris linker takes "-Rpath" to include runtime libraries and
dnl doesn't recognize  -rdynamic.  GNU linker takes some other weirdness
dnl and DOES recognize -rdynamic.

case "$target_os" in
solaris*)
        LDRUNPATHARGS="-R"
        ;;
*)
        LDRUNPATHARGS="-rdynamic -Wl,-rpath -Wl,"
        ;;
esac

INCLUDEPATH=".. ../frontend/include ../client_lib/include ../ptm/include ../monitor/include ../playback/include ../gui"


AC_HEADER_STDC
AC_SUBST(JAVA_STUB_TARGET)
AC_SUBST(INSTALL)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(INCLUDEPATH)
AC_SUBST(PERL)
AC_SUBST(WISH)
AC_SUBST(top_srcdir)
AC_SUBST(enable_mkdep)
AC_SUBST(LDRUNPATHARGS)
AC_OUTPUT(Makefile 
          frontend/Makefile 
          client_lib/Makefile 
          tcp_redirect/Makefile
          html_munger/Makefile
          gif_munger/Makefile
          jpg_munger/Makefile
          giftojpg_munger/Makefile
          2bit_munger/Makefile
          text2doc/Makefile
          Tbmp_munger/Makefile
          playback/Makefile
          playback/src/cachesim/Makefile
	  ptm/Makefile
          gui/Makefile
	  perl_stub/Makefile
          java_stub/Makefile
	  tcl_stub/Makefile
          xs/Makefile.PL
          harness/Makefile
)


MAKE_DEPEND_DIRS="ptm"

cat >> Makefile <<EOF
depend:
EOF


for DIR in $MAKE_DEPEND_DIRS; do 
	if test ! -f $DIR/Makefile.depend ; then
		# create an empty Makefile.depend directory
		cat > $DIR/Makefile.depend <<EOF
EOF
	fi

	cat >> Makefile <<EOF
	cd $DIR; \$(MAKE) depend
EOF
done

if test "$enable_mkdep" = "yes" ; then
	$MAKEEX depend
fi
