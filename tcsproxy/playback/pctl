#!/usr/sww/bin/perl

sub usage {
    warn "Usage: $0 host port -s start -r dt -l dl\n";
    warn "   Start with value 'start' and increase by dl every dt seconds\n";
    warn "   or: $0 host port -f file\n";
    warn "   Each line in file is:  time  load\n";
    exit 0;
}

sub main {

    &usage if grep(/^-h/,@ARGV);
    
    my( $file,$start,$rate);

    $host = shift @ARGV;
    $port = shift @ARGV;

    while ($_ = shift @ARGV) {
        $start = shift @ARGV, next if /^-s/;
        $rate = shift @ARGV, next if /^-r/;
        $loaddelta = shift @ARGV, next if /^-l/;
        $file = shift @ARGV, next if /^-f/;
    
    }

    die "Can't have both -f and (-s or -r or -l)\n"
        if $file && (defined ($rate) || defined ($start) ||
                     defined($loaddelta)); 
    die "Need either -f or (-s and -r and -l)\n"
        unless $file || (defined($rate) && defined($start) &&
                         defined($loaddelta)); 

    my $s = connectsock gm_sock $host,$port
        or die "Connecting to $host:$port: " . &gm_sock::lasterror;

    my ($now);
    if ($file) {
        open(F, $file) or die "Opening $file: $!";
        $nextval = <F>;
        chomp $nextval;
        $load = (split(/\s+/,$nextval))[1];
    } else {
        $load = $start;
    }

    $now = 0;
    $starttime = time;
    &setload($s,$load);
    while (1) {
        if (defined($rate) && defined($start)) {
            sleep($rate);
            $load += $loaddelta;
            &setload($s,$load);
        } else {
            chomp($line = <F>);
            ($nexttime,$nextrate) = split(/\s+/,$line);
            sleep($nexttime-$now);
            $now = $nexttime;
            &setload($s,$nextrate);
        }
    }
}

sub setload {
    my ($sock,$load) = @_;
    $sock->writesock("$load\n");

    warn ((time - $starttime) . ": Setting load to $load\n");
}


=head1 NAME

gm_sock.pl - socket/stream abstractions

=head1 SYNOPSIS

  $sock = listensock gm_sock ($port, [$proto, $qsize]);
  $sock = makesock gm_sock ($readfh, $writefh);
  @result = selectsock gm_sock ($timeout, $fh1, $cond1, ...., $fhN, $condN);

  $newsock = $sock->acceptsock();
  $sock->connectsock($host, $port[,$proto]);
  $nextline = $sock->readsock([$count]);
  $nextline = $sock->readsock_raw([$count]);
  $sock->writesock(@stuff);
  $sock->redirect($readfh,$writefh);

  ($readfh,$writefh) = $sock->filehandles();
  ($myIP,$myPort,$peerIP,$peerPort) = $sock->endpoints();
  $sawEof = $sock->eof();

  $sock->closesock();
  $sock->killsock();

  $err = $sock->lasterror();
  $err = &gm_sock::lasterror();

=head1 DESCRIPTION

This code provides a usable abstraction for TCP and UDP sockets.  (Yes, there
are a lot of these out there for Perl, but there weren't when I started writing
this stuff.)

You create a socket object by listening on a port, accepting a connection on an
already listening socket, or blessing a pair of open filehandles (read, write)
into a socket object.

You can read, write, select(), and do other interesting things on socket
objects, including redirect their input and output.

=cut

#  makesock(readfh, writefh): bless a pair of open filehandles into a socket
#        object; useful if you've already opened the socket yourself, or if you
#        want to use the read/write abstractions on plain old files
#
#  Methods: all return nonzero for success, zero for failure, unless otherwise
#       noted.  Call lasterror() to get a string description of failure cause.
#
#  acceptsock(): accept connection on created socket object; returns a new
#               socket object.  Ignored for udp sockets.
#  readsock([count]):  read & return a line of up to count bytes from accepted
#     connection; strips newlines.  For udp sockets, count param is required,
#     and if called in array context,a list containing the sender's IP address
#     (printable ASCII form) and the accepted dgram is returned.
#  readsock_raw([count]): read a line, don't strip anything; same comments
#     apply as for readsock.  For UDP sockets, readsock and readsock_raw are
#     equivalent.
#  writesock(list): write list to accepted connection, verbatim
#  selectsock(blocktimeout,sock,cond[,sock,cond....]): select for condition
#       'cond' on each of the socket objects.  'cond' is any subset
#       of the letters "rwe" (read,write,exception on socket).   'sock' is
#       either a socket object or a raw filehandle.  'blocktimeout' is the
#       length of time in millisecs to block before timing out: 0 means
#       nonblocking, -1 means block forever.  Returns undef if timeout,
#       otherwise returns list (object, cond, object, cond, ...) where 
#       each object is a socket object and cond is one or more letters
#       indicating which condition is ready for that preceeding socket
#       object.
#  closesock(): close socket object
#  killsock():  shutdown and close (shouldn't usually need to do this, since it
#               shuts down the original socket)
#  redirect(readfh,writefh):  Redirect this socket object to use these
#       filehandles for reading and writing (default: STDIN, STDOUT)
#  lasterror(): return string describing last error condition.  This can be
#       called as a subroutine or as a method.  The former is useful if an
#       error is returned by a constructor, e.g.:
#               unless ($sock = connectsock gm_sock $host,$port) {
#                     print STDERR &gm_sock::lasterror();
#               } 
#  eof(): return nonzero if eof has been seen on this socket during a read.
#
#  Methods that help you violate encapsulation:
#
#  filehandles(): returns read and write filehandles
#  endpoints(): (talkhost, talkport, listenhost, listenport) as strings; hosts
#       are given as IP addresses, ports as integers
#
###########################################################################

package gm_sock;
use Socket;

$FH = "SR0";

#
#  Determine name and address of local host
#

use POSIX 'uname';
$Hostname = (&uname)[1]
    or die "Cannot get hostname: $!";

$Myaddr = (gethostbyname($Hostname))[4];
die "Cannot get IP address of $Hostname: $!"
    unless $Myaddr;

###########################################################################
#  redirect socket to STDIN/STDOUT
#
###########################################################################

=head2  $sock->redirect([$readfh,$writefh]);

Redirect this socket to use the given filehandles for reading and
writing.  If they're not given, assume STDIN and STDOUT.  Useful for
debugging socket server programs by typing at them.

=cut

sub redirect {
    my $self = shift;
    my $fh = $self->{ReadFH};
    my($read,$write) = @_ ? @_ : ("STDIN", "STDOUT");
    my($result) = 1;
    
    open($write, ">&$fh") or $result = 0;
    open($read, "<&$fh") or $result = 0;

    select($write); $| = 1;
    select($read); $| = 1;

    return $result;
}

######################################################################
#  readsock: Read a "line" from already-open socket (up to CRLF) and remove
#  trailing CRLF
#  readsock_raw: don't strip trailing CRLF
######################################################################

=head2  $nextline = $sock->readsock([$count]);

Read the next line (terminated by LF, CR, CRLF, or LFCR) from the
socket, and strip trailing CR's and LF's.  Use L</readsock_raw> to avoid
stripping them.  $count is required for datagram sockets, ignored for
stream sockets.  Note that this function and L</readsock_raw> behave the
same way for datagram sockets.

=cut

sub readsock {
    my $self = shift;
    my $count = shift;
    my $addr;

    if ($self->{Protoname} eq 'tcp') {
        $_ = $self->readsock_raw();
        return $_ unless defined $_;
        chop while /[\r\n\012]$/;
        return $_;
    } else {
        ($addr, $_) = $self->readsock_raw($count);
        return (wantarray? () : undef) unless defined $_;
        chop while /[\r\n\012]$/;
        return (wantarray? ($addr, $_) : $_);
    }
}

=head2   $nextline = $sock->readsock_raw([$count]);

Read next line (from a stream socket) or $count bytes (from a datagram)
socket and return them verbatim.  A line ends with some combination of
CR's and LF's, which are B<not> stripped.

=cut

sub readsock_raw {
    my $self = shift;
    my $count = shift || 0;
    my $sock = $self->{ReadFH};
    my $result = '';
    
    unless ($sock) {
        $self->{Error} = "No read filehandle";
        return undef;
    }
    
    if ($self->{Protoname} eq 'tcp') {
        select($sock); $| = 1; select(STDERR);
        $_ = <$sock>;

        $self->{EOF} = 1, $_ = ""
            unless defined $_;
    
        ($self->closesock()), $_ = ""
            unless $_;
        $result = $_;
    } else {
        ($self->{Error} = "Datagram receive requires a byte count",
         return undef)
            unless $count > 0;
        # connectionless: just do a receive
        my $addr = recv $sock,$result,$count,0;
        $self->{Error} = "recvfrom failed: $!" unless defined $addr;
        return ( wantarray ?
                (join('.',unpack('C4', (unpack('S n a4 x8',$addr))[2])), 
                 $result) :
                $result);
    }
}

=head2   $sawEof = $sock->eof();

Return true if this socket has seen EOF (i.e. other side has closed).
Always returns false for datagram sockets.

=cut

sub eof
{
    my $self= shift;
    return ($self->{EOF});
}

######################################################################
#  writesock
#
#  Write a 'line' to already-open socket, appending a trailing newline.
######################################################################

=head2   $sock->writesock(@stuff);

Write @stuff (processed as print() would, B<not> printf()) to socket,
and possibly flush it.  (You can control flush-on-write for the socket
by operating directly on its filehandles; see L</filehandles> below.)

=cut

sub writesock {
    my $self = shift;
    my $sock = $self->{WriteFH};
    unless ($sock) {
        $self->{Error} = "No write filehandle";
        return 0;
    }
    if ($self->{Protoname} eq 'tcp') {
        print $sock (@_);
    } else {
        $self->{Error} = "send failed: $!", return undef
            unless (send $sock,join(//, @_),0);
    }
    return 1;
}

###########################################################################
#  filehandles: return filehandle names for reading & writing
###########################################################################

=head2    ($readfh,$writefh) = $sock->filehandles();

Return the read and write filehandles associated with this socket.

=cut

sub filehandles {
    my $self = shift;

    my $readfh = $self->{ReadFH};
    my $writefh = $self->{WriteFH};

    return ('gm_sock::' . $readfh, 'gm_sock::' . $writefh);
}

###########################################################################
#  endpoints: return socket endpoints as list:
#  talkhost,talkport,listenhost,listenport 
###########################################################################

=head2   ($myIP,$myPort,$peerIP,$peerPort) = $sock->endpoints();

Return the endpoints (myself and my peer) of this socket.  Not
particularly meaningful for datagram sockets but does What You Expect
anyway.  IP addresses are stringified (e.g. "128.32.33.29"); ports are
integers. 

=cut

sub endpoints {
    my $self = shift;

    return ($self->{TalkHost}, $self->{TalkPort},
            $self->{ListenHost}, $self->{ListenPort});
}

###########################################################################
#  selectsock: implement select() on socket objs or fh's
###########################################################################

=head2   @result = selectsock gm_sock ($timeout,$s1,$c1, ...., $sN, $cN);

Implement select() on a set of socket objects.  Each $s1,...,$sN is a
socket object; each $c1,...,$cN is the set of conditions to monitor on
that socket object, i.e. some string containing a subset of the letters
"rwe".  $timeout is the timeout in milliseconds.  For example, a call to
selectsock with arguments ($s1, "rw", $s2, "e", $s3, "rwe") will select
a readable or writable condition on $s1, an exception condition on $s2,
or any of readable/writable/exception on $s3.

If the timeout expires, or select() returns for some other reason but no
sockets are actually ready, the function returns undef.  Otherwise, it
returns a list of the socket object(s) that reported ready, in no
particular order.

=cut


sub selectsock {
    my $timeout;
    my $cond;
    my $self;
    my ($nfound,$timeleft);
    my %fhs;
    
    $self = shift;
    $timeout = shift;
    my( @fhlist ) = @_;
    my @newfhlist;
    my ($rbits, $ebits, $wbits) = ('','','');

    while ($fh = shift @fhlist) {
	$cond = shift @fhlist;
	if (! ($cond =~ /r|w|e/)) {
            if ($self) {
		print STDERR "Bad conditions list $cond for socket\n";
                $self->{Error} = "Bad condition list '$cond' for socket";
            } else {
                $Err = "Bad condition list '$cond' for socket";
		print STDERR "Bad conditions list $cond for socket\n";
            }
            return (wantarray? () : undef);
        }
        push (@newfhlist, $fh = ($_->filehandles)[0]);
        $fhs{$fh} = $_;
        vec($rbits, fileno($fh->{ReadFH}), 1) = 1 if $cond =~ /r/i;
        vec($wbits, fileno($fh->{WriteFH}), 1) = 1 if $cond =~ /w/i;
        vec($ebits, fileno($fh->{ReadFH}), 1) = 1 if $cond =~ /e/i;
    }

    $timeout = undef if $timeout == -1;
    ($nfound,$timeleft) = select($rout = $rbits, $wout = $wbits, $eout =
                                 $ebits, $timeout);

    # if a socket was ready, return the socket object along with a string for
    # any conditions that are ready

    return undef unless $nfound > 0;

    $cond = '';
    undef @retA;
    foreach $fh (@newfhlist) {
	$fhcopy = $fh;
	($cond .= 'r') if (vec($rout, fileno($fh->{ReadFH}), 1));
	($cond .= 'w') if (vec($wout, fileno($fh->{WriteFH}), 1));
	($cond .= 'e') if (vec($eout, fileno($fh->{ReadFH}), 1));
	if ($cond) {
	    push @retA, ($fhs{$fhcopy}, $cond);
	}
    }
    return @retA;
}
        
    

###########################################################################
#  connectsock: Open socket connection to host:port
###########################################################################

=head2   $sock->connectsock($host, $port[,$proto]);

Create socket object and connect it to port $port on host $host (can be a
hostname or a stringified IP address, i.e. "128.32.33.29") using $proto
(can be "tcp" or "udp", default "tcp").  Returns false on failure; use
L</lasterror> to find out what went wrong.

=cut 

sub connectsock {
    shift;
    my $self = &new();
    my($host, $port, $protoname) = @_;
    $protoname ||= 'tcp';
    $protoname = lc $protoname;
    $protomodel = ($protoname eq 'tcp'? SOCK_STREAM : SOCK_DGRAM);
    my($fh) = $FH++;
    my($name, $aliases, $proto) = getprotobyname($protoname);
    my($addr) = (gethostbyname($host))[4];
    my($me) = pack('S n a4 x8', AF_INET, 0, $Myaddr);
    my($them) = pack('S n a4 x8', AF_INET, $port, $addr);

    unless (socket($fh, PF_INET, $protomodel, $proto)) {
        $Err = "connectsock: socket: $!";
        return undef;
    }
    
    setsockopt($fh, SOL_SOCKET, SO_REUSEADDR, 1)
        || warn("Warning: setsockopt: $!");

    setsockopt($fh, SOL_SOCKET, SO_LINGER, pack("ii",1, 1000));

    unless (bind($fh, $me)) {
        $Err = "connectsock: bind: $!";
        return undef;
    }

    unless (connect($fh, $them)) {
        $Err = "connectsock: connect $host:$port: $!";
        return undef;
    }
    select($fh); $| = 1; select(STDOUT);

    $self->{ReadFH} = $self->{WriteFH} = $fh;
    $self->{TalkHost} = $Hostname;
    $self->{TalkPort} = "??";
    $self->{ListenHost} = $host;
    $self->{ListenPort} = $port;
    $self->{Protoname} = $protoname;
    return $self;
}

######################################################################
#  listensock: Open socket for listening for new client connections
#
#  Arguments: port, queue size
######################################################################

=head2   $sock = listensock gm_sock ($port, [$proto, $qsize]);

Create a socket object listening on the given port.  $proto should be
either 'tcp' (default) or 'udp'.  $qsize is the socket queue size which
defaults to 10, though many OS's silently enforce an upper limit of
5...go figure.

=cut

sub listensock {
    my $self = shift;
    my($port, $protoname, $qsize) = @_;
    my $readfh = $FH++;

    $qsize = 10 unless $qsize;
    $protoname = 'tcp' unless $protoname =~ /udp/i;
    $protoname = lc $protoname;
    my $protomodel = ($protoname eq 'tcp'? SOCK_STREAM : SOCK_DGRAM);

    local($name,$aliases,$proto) = getprotobyname($protoname);
    local($bind);

    # Check args

    unless ($port) {
        die "listensock: usage: listensock port [qsize]";
    }

    $bind = pack('S n a4 x8', AF_INET, $port, "\0\0\0\0");

    # create socket

    unless (socket($readfh, PF_INET, $protomodel, $proto)) {
        die( "listensock: socket($readfh): $!" );
        return 0;
    }
    setsockopt($readfh, SOL_SOCKET, SO_REUSEADDR, 1);

    # Bind socket to our addr/port num

    unless (bind($readfh, $bind)) {
        $Err =  "listensock: bind: $!";
        return 0;
    }

    if ($protoname eq 'tcp') {
        # listen for connections

        unless (listen($readfh, $qsize)) {
            $Err = "listensock: listen: $!";
            return 0;
        }
    }

    select($readfh); $| = 1; select(STDOUT);

    $self = &new();
    $self->{ReadFH} = $readfh;
    $self->{WriteFH} = $readfh;
    $self->{ListenHost} = join(".", unpack('C4', $Myaddr));
    $self->{ListenPort} = $port;
    $self->{Protoname} = $protoname;
    
    return $self;
}

###########################################################################
#  new: return a generic, blessed, anonymous hash for the socket object's
#  instance variables.  This is a private method.
###########################################################################

sub new
{
    return (bless {
        EOF => 0,
        ReadFH => "",
        WriteFH => "",
        Error => "",
        ListenHost => "",
        ListenPort => "",
        TalkHost => "",
        TalkPort => ""
        });
}
        

###########################################################################
#  makesock: take an already open read and write filehandle and treat them as a
#  socket object reference
###########################################################################

=head2   $sock = makesock gm_sock ($readfh, $writefh);

Given a pair of already open filehandles, bless them into a socket
object so all the other socket methods can be used on them.  Woe be unto
you if the read filehandle is not readable or the write filehandle is
not writable.

=cut


sub makesock
{
    my $self = shift;
    my($readfh,$writefh) = @_;

    select($readfh); $| = 1; select($writefh); $| = 1;
    
    $self = &new();
    $self->{ReadFH} = $readfh;
    $self->{WriteFH} = $writefh;
    return $self;
}

###########################################################################
#  lasterror: return the last error message generated by an operation on this
#  socket object.
###########################################################################

=head2   $err = $sock->lasterror();
  $err = &gm_sock::lasterror();

Call this function, either as a method or a subroutine, to find out what
went wrong the last time a socket call failed (i.e. returned undef).

=cut

sub lasterror
{
    my $self = shift;
    unless (ref($self) ne 'gm_sock') {
        return $self->{Error};
    } else {
        return $Err;
    }
}

=head2  $newsock = $sock->acceptsock();

Given a socket $sock that has been created for listening (using
L</listensock>), accept a new connection on that socket and return a new
socket object correspoding to the connection.  Works like accept() in C.

=cut

sub acceptsock
{
    my $self = shift;
    my ($af,$port,$inetaddr);
    my $newreadfh = $FH++;
    my $newwritefh = $newreadfh;
    my $addr;

    # if this is  a datagram socket, just return this instance.
    return $self if $self->{Protoname} ne 'tcp';

    my($addr) = accept($newreadfh, $self->{ReadFH});
    unless ($addr) {
        $self->{Error} = "Accept failed: $!";
        return undef;
    }

    ($af,$port,$inetaddr) = unpack('S n a4 x8', $addr);

    $selfcopy = &new();

    $selfcopy->{ListenPort} = $self->{ListenPort};
    $selfcopy->{ListenHost} = $self->{ListenHost};
    $selfcopy->{TalkHost} = join(".", unpack('C4', $inetaddr));
    $selfcopy->{TalkPort} = $port;
    $selfcopy->{ReadFH} = $newreadfh;
    $selfcopy->{WriteFH} = $newwritefh;
    $selfcopy->{Protoname} = $self->{Protoname};

    return $selfcopy;
}

=head2  $sock->closesock();

Close the socket for both reading and writing.

=cut

sub closesock
{
    my $self = shift;
    close $self->{ReadFH};
    close $self->{WriteFH};
}

=head2 $sock->killsock();

Shutdown the socket, then close it.  Shouldn't normally need this.

=cut

sub killsock
{
    my $self = shift;
    #shutdown($Sockfh, 2);
    close($self->{ReadFH});
}

###########################################################################
#  close_conn: close logical connection to client
###########################################################################

sub close_conn {
    my $self = shift;
    # any "bye" acknowledge should go here.
    closesock $self;
    return 1;
}


&main::main;
